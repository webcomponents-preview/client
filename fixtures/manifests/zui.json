{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/components/about-screen/about-screen.component.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "aboutScreenStyles",
          "default": "css`\n  ${unsafeCSS(style)}\n`"
        },
        {
          "kind": "class",
          "description": "The About Screen component allows reading the licence agreement, but not to accept it.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=24931%3A950224)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=63324%3A486073)",
          "name": "AboutScreen",
          "slots": [
            {
              "description": "The default slot. This is for the licence content.",
              "name": ""
            },
            {
              "description": "This is the slot for the footer content.",
              "name": "footer-content"
            },
            {
              "description": "This is the slot for the icon on top of the licence. If a zui-icon-zeiss icon gets placed inside, the color sheme of the about screen gets inverted because of branding rules.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "softwareName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Allows to set the software name which gets displayed in the header section of the about screen",
              "attribute": "software-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "softwareVersion",
              "type": {
                "text": "string"
              },
              "description": "Allows to set an optional software version which gets displayed in the header section of the about screen",
              "attribute": "software-version",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "copyrightClaim",
              "type": {
                "text": "string"
              },
              "description": "Allows to set an optional copyright claim which gets displayed in the header section of the about screen",
              "attribute": "copyright-claim",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines possible sizes (s/m). Default: m.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fixedLicenceTitle",
              "type": {
                "text": "string"
              },
              "description": "Allows to set an optional fixed licence title which gets displayed on top of the licence section and doesn't scroll",
              "attribute": "fixed-licence-title",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_zeissIcons",
              "type": {
                "text": "ZeissLogo[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedFooter",
              "type": {
                "text": "Node[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleIconSlotchange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handles when an icon gets placed inside the icon slot and will add a size."
            },
            {
              "kind": "method",
              "name": "_handleFooterSlotchange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handles the slotchange event of the footer-content slot and adds a class for additional padding when the slot gets used."
            },
            {
              "kind": "field",
              "name": "_isZeissIconInIconSlot",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "description": "Checks if the icon slot is filled with a zui-zeiss-logo",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_isFooterUsed",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "description": "Checks if the footer-content slot is used",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_isInfoContainerUsed",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "description": "Checks if software version or copyright claim is set",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_setIconSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set size of icon in the icon slot to 's80'."
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Emit close event when close icon is clicked."
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<AboutScreen, 'ClosedEvent'>"
              },
              "description": "emits when the close icon in about screen is clicked.",
              "name": "zui-about-screen-closed"
            }
          ],
          "attributes": [
            {
              "name": "software-name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Allows to set the software name which gets displayed in the header section of the about screen",
              "fieldName": "softwareName"
            },
            {
              "name": "software-version",
              "type": {
                "text": "string"
              },
              "description": "Allows to set an optional software version which gets displayed in the header section of the about screen",
              "fieldName": "softwareVersion"
            },
            {
              "name": "copyright-claim",
              "type": {
                "text": "string"
              },
              "description": "Allows to set an optional copyright claim which gets displayed in the header section of the about screen",
              "fieldName": "copyrightClaim"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines possible sizes (s/m). Default: m.",
              "fieldName": "size"
            },
            {
              "name": "fixed-licence-title",
              "type": {
                "text": "string"
              },
              "description": "Allows to set an optional fixed licence title which gets displayed on top of the licence section and doesn't scroll",
              "fieldName": "fixedLicenceTitle"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/about-screen/about-screen.component.ts"
          },
          "tagName": "zui-about-screen",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "aboutScreenStyles",
          "declaration": {
            "name": "aboutScreenStyles",
            "module": "src/components/about-screen/about-screen.component.ts"
          }
        },
        {
          "kind": "js",
          "name": "AboutScreen",
          "declaration": {
            "name": "AboutScreen",
            "module": "src/components/about-screen/about-screen.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-about-screen",
          "declaration": {
            "name": "AboutScreen",
            "module": "src/components/about-screen/about-screen.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/avatar/avatar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The avatar component displays a circle, with a customized background color\nand customized centered initials - or with a centered background image in different sizes.\nIf the user specifies an image url, there will be no background colors nor initials.\n\n## Figma\n- [Web - Component Library](https://www.figma.com/file/z4fyXFOJCpuaNImx3K234n/❖-04-Web---Component-Library---1.4?node-id=284%3A0)\n- [Styleguide – Web](https://www.figma.com/file/6dkjypErYWQPfuRBD58Aey/%F0%9F%93%96--Styleguide---Web?node-id=4426%3A0)",
          "name": "Avatar",
          "cssProperties": [
            {
              "description": "background color of the avatar",
              "name": "--zui-avatar-color-background"
            },
            {
              "description": "circle diameter",
              "name": "--zui-avatar-diameter"
            }
          ],
          "slots": [
            {
              "description": "This is the slot for adding a skeleton instead of an image url or initials. The Skeleton is only displayed when no image url or initials are set.",
              "name": "skeleton-image-url"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'40'",
              "description": "Sets size of the AvatarComponent",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "initials",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets initials of the AvatarComponent",
              "attribute": "initials",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "imageUrl",
              "type": {
                "text": "string | null"
              },
              "description": "Sets image path of the AvatarComponent",
              "attribute": "image-url",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'40'",
              "description": "Sets size of the AvatarComponent",
              "fieldName": "size"
            },
            {
              "name": "initials",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets initials of the AvatarComponent",
              "fieldName": "initials"
            },
            {
              "name": "image-url",
              "type": {
                "text": "string | null"
              },
              "description": "Sets image path of the AvatarComponent",
              "fieldName": "imageUrl"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-avatar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Avatar",
          "declaration": {
            "name": "Avatar",
            "module": "src/components/avatar/avatar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-avatar",
          "declaration": {
            "name": "Avatar",
            "module": "src/components/avatar/avatar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/banner-notification/banner-notification.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-banner-notification is a simple UI component. It indicates the state via an EWI bar and an icon in the embedded inline-message.\nBeside the header-text and the (text-)content, displayed in the inline-message, it serves an icon-bar, to include several icons and a slot for a button.\nWrapping all this in a zui-box, it's possible to set the hierarchy via an attribute (default is \"secondary\"), which changes the background color of the box.\nAlso, it's possible to change the icon set for the icon in the inline-message.\n\nPlease note, there is a fixed minimum height of 64px.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---7.2?t=b4CeaAZc1D6fQich-0)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=73247%3A603191&t=j3evxKvc3ERNSd4I-0)",
          "name": "BannerNotification",
          "cssProperties": [
            {
              "description": "sets the height of the banner notification",
              "name": "--zui-banner-notification-height"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "State"
              },
              "default": "'info'",
              "description": "State of the banner notification, displaying the state color in the ewi bar\ndefault value = \"info\"",
              "attribute": "state",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'second'",
              "description": "Defines the hierarchy level of the zui box in the banner notification\ndefault value = \"second\"",
              "attribute": "hierarchy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconSet",
              "type": {
                "text": "IconSetName"
              },
              "default": "'common'",
              "description": "IconSet of the banner notification, displayed in the inline message",
              "attribute": "icon-set",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headerText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Header text of the banner notification, displayed in the inline message",
              "attribute": "header-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text content of the banner notification, displayed in the inline message",
              "attribute": "content",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Closable attribute for the banner notification, toggling the close icon in the icon bar",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_getIconTemplate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleIconBarClosed",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<BannerNotification, 'ClosedEvent'>"
              },
              "description": "Event, to be fired, clicking the \"close\" button in the icon-bar of the banner notification",
              "name": "zui-banner-notification-closed"
            }
          ],
          "attributes": [
            {
              "name": "state",
              "type": {
                "text": "State"
              },
              "default": "'info'",
              "description": "State of the banner notification, displaying the state color in the ewi bar\ndefault value = \"info\"",
              "fieldName": "state"
            },
            {
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'second'",
              "description": "Defines the hierarchy level of the zui box in the banner notification\ndefault value = \"second\"",
              "fieldName": "hierarchy"
            },
            {
              "name": "icon-set",
              "type": {
                "text": "IconSetName"
              },
              "default": "'common'",
              "description": "IconSet of the banner notification, displayed in the inline message",
              "fieldName": "iconSet"
            },
            {
              "name": "header-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Header text of the banner notification, displayed in the inline message",
              "fieldName": "headerText"
            },
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text content of the banner notification, displayed in the inline message",
              "fieldName": "content"
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Closable attribute for the banner notification, toggling the close icon in the icon bar",
              "fieldName": "closable"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/banner-notification/banner-notification.component.ts"
          },
          "tagName": "zui-banner-notification",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BannerNotification",
          "declaration": {
            "name": "BannerNotification",
            "module": "src/components/banner-notification/banner-notification.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-banner-notification",
          "declaration": {
            "name": "BannerNotification",
            "module": "src/components/banner-notification/banner-notification.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/box/box.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A box component is used to visually group content.\nThe box provides an optional header that can contain a header text and up to three icons.\nAdditionally the header can show a close icon.\n\n## Closing Behavior\nWhen the attribute `closable` is set, the box shows a close button.\n * when the close button is clicked, a `zui-box-closed` event is dispatched\n * besides this event, the box does nothing and stays the way it is\n * a developer can react to this event and remove the box from the DOM/not render it anymore.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/01-Desktop---Component-Library---1.1?node-id=13009%3A2752)",
          "name": "Box",
          "slots": [
            {
              "description": "This is the default slot. It's an innerHtml of the box-element",
              "name": ""
            },
            {
              "description": "This is the first icon slot.",
              "name": "icon1"
            },
            {
              "description": "This is the second icon slot.",
              "name": "icon2"
            },
            {
              "description": "This is the third icon slot.",
              "name": "icon3"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headerText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The header text of the box",
              "attribute": "header-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of two possible emphasis states (default/selected)",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hierarchyLevel",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines one of two possible hierarchy levels (first/second)",
              "attribute": "hierarchy-level",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If closable is enabled an additional button will be visible that allows the user to close the box.",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "interactive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This enables the interaction states 'disable' and 'hover'",
              "attribute": "interactive",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noBottomLine",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether there is a visible bottom line",
              "attribute": "no-bottom-line",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "description": "Defines one of five possible sizes (xs/s/m/l/xl)",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedIconOne",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedIconTwo",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedIconThree",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hasIcons",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasHeader",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleIconBarClosed",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "closeEvent",
                  "type": {
                    "text": "Event"
                  },
                  "description": "the close event fired by the iconbar"
                }
              ],
              "description": "Handler for the close event from the close button in the icon bar, fires a box-closed event."
            },
            {
              "kind": "method",
              "name": "_onIconSlotChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<Box, 'ClosedEvent'>"
              },
              "description": "This is the event which gets fired when the box is closed",
              "name": "zui-box-closed"
            }
          ],
          "attributes": [
            {
              "name": "header-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The header text of the box",
              "fieldName": "headerText"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of two possible emphasis states (default/selected)",
              "fieldName": "emphasis"
            },
            {
              "name": "hierarchy-level",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines one of two possible hierarchy levels (first/second)",
              "fieldName": "hierarchyLevel"
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If closable is enabled an additional button will be visible that allows the user to close the box.",
              "fieldName": "closable"
            },
            {
              "name": "interactive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This enables the interaction states 'disable' and 'hover'",
              "fieldName": "interactive"
            },
            {
              "name": "no-bottom-line",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether there is a visible bottom line",
              "fieldName": "noBottomLine"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "description": "Defines one of five possible sizes (xs/s/m/l/xl)",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/box/box.component.ts"
          },
          "tagName": "zui-box",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Box",
          "declaration": {
            "name": "Box",
            "module": "src/components/box/box.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-box",
          "declaration": {
            "name": "Box",
            "module": "src/components/box/box.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Buttons allow users to take actions, and make choices, with a single tap.\nThey communicate actions that users can take and are typically placed throughout your UI.\nThe ZUi Button can be used as an HTML button, where you could write any phrasing content.\nHowever, it comes with the default ZUi style and has a default AND minimal width of 48px (size S) / 64px (size L)\nfor the \"icon-only\" variant. All the other variants do not have a minimum width, but a default width of 120px.\nThe width can be set externally with the --zui-button-width custom property.\nWhen the width is set to auto the button grows with the content if the content is not only an icon.\nThe custom propeties --zui-button-min-width and --zui-button-max-width allow to set the min-width and max-width of the button in this case.\nYou can put an ZUi Icon you wish in the icon-slot of the ZUi Button.\nThe image and text will automatically be positioned accordingly to the styleguide.\nYou can also use the progress ring instead of the icon. The implementation is very similar to the normal icon.\n\nThe ZUi button can act as submit or reset button as well, just set its `type` accordingly.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13009%3A2718)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=23651%3A465503)",
          "name": "Button",
          "cssProperties": [
            {
              "description": "for setting the width of the button externally",
              "name": "--zui-button-width"
            },
            {
              "description": "for setting the max width of the button externally, when --zui-button-width is set to auto.",
              "name": "--zui-button-max-width"
            },
            {
              "description": "for setting the min width of the button externally, when --zui-button-width is set to auto.",
              "name": "--zui-button-min-width"
            }
          ],
          "slots": [
            {
              "description": "This is the default slot for some text in the button.",
              "name": "default"
            },
            {
              "description": "Here you can insert your own icon",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "nonInteractive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "disables interactivity",
              "attribute": "non-interactive",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "Defines one of two possible sizes (s/l);",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states (default/highlight/primary-highlight)",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconPosition",
              "type": {
                "text": "IconPosition"
              },
              "default": "'left'",
              "description": "Defines one of two possible icon positions (top/left);",
              "attribute": "icon-position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "ButtonType"
              },
              "default": "'button'",
              "description": "type for this button; use to make this a submit / reset button\nthat will trigger the corresponding action on the closest form",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "optional value for this button",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideTooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "show / hide zui tooltip",
              "attribute": "hide-tooltip",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "retainIconSize",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "internal property\nskips the fixed icon size propagation.",
              "privacy": "private",
              "attribute": "zui-internal-retain-icon-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_content",
              "type": {
                "text": "Content | undefined"
              },
              "privacy": "private",
              "default": "undefined",
              "description": "Internal state that maps to \"text-only\" \"icon-only\" classes in the template"
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLike<ProgressRing>[] | IconLikeElement[]"
              },
              "privacy": "private",
              "description": "Selects the icon slot element"
            },
            {
              "kind": "field",
              "name": "_slottedNodes",
              "type": {
                "text": "Node[]"
              },
              "privacy": "private",
              "description": "Selects the default slot element"
            },
            {
              "kind": "method",
              "name": "_handleSlotChanges",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_contentUpdate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set css classes based on content of the slots or removes them if slots change"
            },
            {
              "kind": "method",
              "name": "_iconUpdate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Aligns size (and emphasis) of the slotted icon, depending on this component's \"size\", \"environment\" and \"emphasis\""
            },
            {
              "kind": "field",
              "name": "_contentClass",
              "type": {
                "text": "Content | '_'"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleButtonAction",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "SubmitEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, unknown>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "non-interactive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "disables interactivity",
              "fieldName": "nonInteractive"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "Defines one of two possible sizes (s/l);",
              "fieldName": "size"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states (default/highlight/primary-highlight)",
              "fieldName": "emphasis"
            },
            {
              "name": "icon-position",
              "type": {
                "text": "IconPosition"
              },
              "default": "'left'",
              "description": "Defines one of two possible icon positions (top/left);",
              "fieldName": "iconPosition"
            },
            {
              "name": "type",
              "type": {
                "text": "ButtonType"
              },
              "default": "'button'",
              "description": "type for this button; use to make this a submit / reset button\nthat will trigger the corresponding action on the closest form",
              "fieldName": "type"
            },
            {
              "name": "value",
              "description": "optional value for this button",
              "fieldName": "value"
            },
            {
              "name": "hide-tooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "show / hide zui tooltip",
              "fieldName": "hideTooltip"
            },
            {
              "name": "zui-internal-retain-icon-size",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "internal property\nskips the fixed icon size propagation.",
              "fieldName": "retainIconSize"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "src/components/button/button.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-button",
          "declaration": {
            "name": "Button",
            "module": "src/components/button/button.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Checkboxes allow the user to select one or more items from a set.\nThey can be used to turn an option on or off.\n\nIn contrast to the standard HTML checkbox it has an optional \"mixed\" mode (enabled by the attribute `enableMixed`).\nIn mixed mode there are 3 states: `false`, `true` and `mixed`. For this  reason, the `value` attribute\nis not of type `boolean` but instead includes the `\"mixed\"` as possible value in addition to `true` and `false`.\nTherefore the `value` attribute may not be used like a boolean attribute.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13009%3A2720)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=23637%3A457366)",
          "name": "Checkbox",
          "slots": [
            {
              "description": "This is the default slot. It's an alternative to the `label` attribute.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "enableMixed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This enables the selection state *mixed*",
              "attribute": "enable-mixed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label of the checkbox",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the checkbox is required or not",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The tabindex of the checkbox",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "SelectionState"
              },
              "default": "false",
              "description": "The value of the checkbox\n(included in the HTTP request on form submission)\nThe two supported values are *false* and *true*.\nA third value *'mixed'* is possible when the <code>enableMixed</code>\nproperty has the value *true*.\n\nThe value of the checkbox is not and should not be used like boolean attribute.\nA value of this parameter should be passed explicitly: <code>value=\"true\"</code>",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_checkboxDivRef",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_displayValue",
              "type": {
                "text": "'false' | 'true' | 'mixed' | undefined"
              },
              "privacy": "private",
              "description": "This returns the state value for the rendering",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handler for the click event."
            },
            {
              "kind": "method",
              "name": "_handleKeyUp",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ code }",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handler the state change of the checkbox. Once the user clicks/uses the spacebar on the\ncheckbox it changes its value (state):\nfalse -> true -> false\nor if the third state is enabled by setting <code>enableMixed</code> to true:\nfalse -> mixed -> true -> false"
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, unknown>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The event that fires when the user has changed <code>value</code>",
              "name": "change"
            },
            {
              "description": "The event that fires when the user has changed <code>value</code>",
              "name": "input"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "enable-mixed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This enables the selection state *mixed*",
              "fieldName": "enableMixed"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label of the checkbox",
              "fieldName": "label"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the checkbox is required or not",
              "fieldName": "required"
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The tabindex of the checkbox",
              "fieldName": "tabindex"
            },
            {
              "name": "value",
              "type": {
                "text": "SelectionState"
              },
              "default": "false",
              "description": "The value of the checkbox\n(included in the HTTP request on form submission)\nThe two supported values are *false* and *true*.\nA third value *'mixed'* is possible when the <code>enableMixed</code>\nproperty has the value *true*.\n\nThe value of the checkbox is not and should not be used like boolean attribute.\nA value of this parameter should be passed explicitly: <code>value=\"true\"</code>",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "value"
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/checkbox/checkbox.component.ts"
          },
          "tagName": "zui-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Checkbox",
          "declaration": {
            "name": "Checkbox",
            "module": "src/components/checkbox/checkbox.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-checkbox",
          "declaration": {
            "name": "Checkbox",
            "module": "src/components/checkbox/checkbox.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dialog-box/dialog-box.component.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "dialogBoxStyles",
          "default": "css`\n  ${unsafeCSS(style)}\n`"
        },
        {
          "kind": "class",
          "description": "The Dialogbox has a primary and a secondary button, a header, a slot for content and up to tree icons.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13009%3A2768)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=1%3A102392)",
          "name": "DialogBox",
          "slots": [
            {
              "description": "This is the default slot. It's an innerHtml of the dialogBox-element",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headerText",
              "type": {
                "text": "string | null"
              },
              "description": "This sets the header of the dialog box",
              "attribute": "header-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "acceptLabel",
              "type": {
                "text": "string"
              },
              "default": "'OK'",
              "description": "This sets the text of the accept Label",
              "attribute": "accept-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "cancelLabel",
              "type": {
                "text": "string"
              },
              "default": "'Cancel'",
              "description": "This sets the text of the cancel Label",
              "attribute": "cancel-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "primaryButton",
              "type": {
                "text": "PrimaryButtonType"
              },
              "default": "'accept'",
              "description": "This sets the primary button",
              "attribute": "primary-button",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disableAccept",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This disables the accept button",
              "attribute": "disable-accept",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disableCancel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This disables the cancel button",
              "attribute": "disable-cancel",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "acceptTooltip",
              "type": {
                "text": "string | undefined"
              },
              "description": "Optional tooltip for the accept button",
              "attribute": "accept-tooltip",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "cancelTooltip",
              "type": {
                "text": "string | undefined"
              },
              "description": "Optional tooltip for the cancel button",
              "attribute": "cancel-tooltip",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If closable is enabled an additional button will be visible that throws a close event when it is clicked.",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "confirmPosition",
              "type": {
                "text": "ConfirmPosition"
              },
              "default": "'auto'",
              "description": "This sets the position of the primary button",
              "attribute": "confirm-position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideCancelButton",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true the secondary cancel button is not rendered.",
              "attribute": "hide-cancel-button",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_buttonBorderLeft",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "This internal property is used to signal that the 'button-border-left' attribute\nshould be set. This leads to the styling that buttons will have a fixed size and on the left side\nof the buttons there will be a visual space so that the buttons will be right-aligned."
            },
            {
              "kind": "field",
              "name": "_widthObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private",
              "default": "new ResizeObserver(([entry]) => {\n    // If the width is above the threshold, a flag will be set that triggers a rendering and will\n    // the styling will be changed.\n    // This change will also change the height of the component, which will again trigger the resize-observer.\n    // This is no problem but in some rare conditions (especially in testing it's possible that both\n    // observer invocations happen within a single browser rendering frame.\n    // In this case, chrome would throw an exception (ResizeObserver loop limit exceeded).\n    // To prevent this, we delay the operation to the next animation frame.\n    requestAnimationFrame(() => {\n      const buttonContainerWidth: number = entry.contentRect.width;\n\n      this._buttonBorderLeft = buttonContainerWidth > RESIZE_WIDTH;\n    });\n  })"
            },
            {
              "kind": "method",
              "name": "_handleAcceptButtonClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handler for the click event on the accept button, fires a accept event."
            },
            {
              "kind": "method",
              "name": "_handleCancelButtonClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handler for the click event on the cancel button, fires a cancel event."
            },
            {
              "kind": "method",
              "name": "_addTooltip",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "mouseEvent",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "mouseEvent"
                }
              ],
              "description": "Adds a tooltip if ellipsis is active"
            },
            {
              "kind": "method",
              "name": "_onMouseOver",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "mouseEvent",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleIconBarClosed",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<DialogBox, 'AcceptedEvent'>"
              },
              "description": "The event which gets fired when the accept button gets clicked",
              "name": "zui-dialog-box-accepted"
            },
            {
              "type": {
                "text": "GetZuiEvent<DialogBox, 'CancelledEvent'>"
              },
              "description": "The event which gets fired when the cancel button gets clicked",
              "name": "zui-dialog-box-cancelled"
            },
            {
              "type": {
                "text": "GetZuiEvent<DialogBox, 'ClosedEvent'>"
              },
              "description": "The event which gets fired when the close button gets clicked",
              "name": "zui-dialog-box-closed"
            }
          ],
          "attributes": [
            {
              "name": "header-text",
              "type": {
                "text": "string | null"
              },
              "description": "This sets the header of the dialog box",
              "fieldName": "headerText"
            },
            {
              "name": "accept-label",
              "type": {
                "text": "string"
              },
              "default": "'OK'",
              "description": "This sets the text of the accept Label",
              "fieldName": "acceptLabel"
            },
            {
              "name": "cancel-label",
              "type": {
                "text": "string"
              },
              "default": "'Cancel'",
              "description": "This sets the text of the cancel Label",
              "fieldName": "cancelLabel"
            },
            {
              "name": "primary-button",
              "type": {
                "text": "PrimaryButtonType"
              },
              "default": "'accept'",
              "description": "This sets the primary button",
              "fieldName": "primaryButton"
            },
            {
              "name": "disable-accept",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This disables the accept button",
              "fieldName": "disableAccept"
            },
            {
              "name": "disable-cancel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This disables the cancel button",
              "fieldName": "disableCancel"
            },
            {
              "name": "accept-tooltip",
              "type": {
                "text": "string | undefined"
              },
              "description": "Optional tooltip for the accept button",
              "fieldName": "acceptTooltip"
            },
            {
              "name": "cancel-tooltip",
              "type": {
                "text": "string | undefined"
              },
              "description": "Optional tooltip for the cancel button",
              "fieldName": "cancelTooltip"
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If closable is enabled an additional button will be visible that throws a close event when it is clicked.",
              "fieldName": "closable"
            },
            {
              "name": "confirm-position",
              "type": {
                "text": "ConfirmPosition"
              },
              "default": "'auto'",
              "description": "This sets the position of the primary button",
              "fieldName": "confirmPosition"
            },
            {
              "name": "hide-cancel-button",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true the secondary cancel button is not rendered.",
              "fieldName": "hideCancelButton"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/dialog-box/dialog-box.component.ts"
          },
          "tagName": "zui-dialogbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dialogBoxStyles",
          "declaration": {
            "name": "dialogBoxStyles",
            "module": "src/components/dialog-box/dialog-box.component.ts"
          }
        },
        {
          "kind": "js",
          "name": "DialogBox",
          "declaration": {
            "name": "DialogBox",
            "module": "src/components/dialog-box/dialog-box.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-dialogbox",
          "declaration": {
            "name": "DialogBox",
            "module": "src/components/dialog-box/dialog-box.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dialog-button/dialog-button.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-dialog-button component offers a styled button, which can be single or multilined. It's meant to be used e.g in\nthe zui-ewiq-dialog and should be wrapped into the zui-ewiq-button-container component\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13009%3A2768)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=39755%3A336102)",
          "name": "DialogButton",
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "multiline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the multiline state of the dialogButton",
              "attribute": "multiline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_secondarySlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_firstLine",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_secondaryLine",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isTruncated",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private",
              "default": "new ResizeObserver(() => {\n    if (hasElementAnyDimensions(this)) {\n      this._checkTruncation();\n    }\n  })"
            },
            {
              "kind": "method",
              "name": "_checkTruncation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_checkMultiline",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "slot",
                  "description": "to be checked",
                  "type": {
                    "text": "HTMLSlotElement"
                  }
                }
              ],
              "description": "Determines if a slot contains an element and and innerHtml to set the multiline attribute"
            },
            {
              "kind": "field",
              "name": "_tooltipText",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis",
              "fieldName": "emphasis"
            },
            {
              "name": "multiline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the multiline state of the dialogButton",
              "fieldName": "multiline"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-dialog-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DialogButton",
          "declaration": {
            "name": "DialogButton",
            "module": "src/components/dialog-button/dialog-button.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-dialog-button",
          "declaration": {
            "name": "DialogButton",
            "module": "src/components/dialog-button/dialog-button.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/div/div.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A helper component to provide a maintained context if needed. For example the\ntooltip requires to work properly to be in a non-disabled context. It can't\nbe injected into e.g. disabled buttons. Thus the disabled button could be\nwrapped with this helper element to work as reference for the tooltip.\n\n_Note: Since divs are block elements you may have to align its styling._",
          "name": "Div",
          "slots": [
            {
              "description": "simply projects everything inside",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              }
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-div",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Div",
          "declaration": {
            "name": "Div",
            "module": "src/components/div/div.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-div",
          "declaration": {
            "name": "Div",
            "module": "src/components/div/div.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/divider/divider.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A divider is a horizontal line that can be used to define a thematic break.\nThe component can also be used as a vertical line too.\nLine height has a 100% and is inherited from parent.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13009%3A2739)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=32766%3A522888)",
          "name": "Divider",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "Defines one of two possible sizes (small/large);",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of two possible emphasis states (default/highlight)",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "default": "'horizontal'",
              "description": "Defines one of two possible orientation (horizontal/vertical);",
              "attribute": "orientation",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "Defines one of two possible sizes (small/large);",
              "fieldName": "size"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of two possible emphasis states (default/highlight)",
              "fieldName": "emphasis"
            },
            {
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "default": "'horizontal'",
              "description": "Defines one of two possible orientation (horizontal/vertical);",
              "fieldName": "orientation"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Divider",
          "declaration": {
            "name": "Divider",
            "module": "src/components/divider/divider.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-divider",
          "declaration": {
            "name": "Divider",
            "module": "src/components/divider/divider.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/drag-drop-area/drag-drop-area.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The drag and drop area represents an area to drag and drop files for uploading\nIt features a text, an icon and/ or a button and has different styling\nstates of emphasis and hierarchies",
          "name": "DragDropArea",
          "cssProperties": [
            {
              "description": "spacing of the icon button",
              "name": "--zui-drag-drop-area-button-icon-padding"
            },
            {
              "description": "height to be used if not given explicitly",
              "name": "--zui-drag-drop-area-default-height"
            },
            {
              "description": "width to be used if not given explicitly",
              "name": "--zui-drag-drop-area-default-width"
            },
            {
              "description": "sets the font family",
              "name": "--zui-drag-drop-area-font-family"
            },
            {
              "description": "alternative font for usage with button",
              "name": "--zui-drag-drop-area-has-button-font-family"
            },
            {
              "description": "Overwrites the height of the drag and drop area",
              "name": "--zui-drag-drop-area-height"
            },
            {
              "description": "Overwrites the width of the drag and drop area",
              "name": "--zui-drag-drop-area-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "The hierarchy level of the component",
              "attribute": "hierarchy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "The emphasis of the component",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dragging",
              "type": {
                "text": "boolean"
              },
              "description": "Drag status of the component",
              "attribute": "dragging",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedButtons",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_innerContent",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_originalEmphasis",
              "type": {
                "text": "Emphasis"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleDragOver",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "the dragover event"
                }
              ],
              "description": "Handler for the dragover event"
            },
            {
              "kind": "method",
              "name": "_handleDragEnter",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "the dragenter event"
                }
              ],
              "description": "Handler for the internal dragenter event"
            },
            {
              "kind": "method",
              "name": "_handleDragLeave",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "the dragleave event"
                }
              ],
              "description": "Handler for the internal dragleave event"
            },
            {
              "kind": "method",
              "name": "_handleDrop",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "the drop event"
                }
              ],
              "description": "Handler for the drop event"
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleButtonMouseEnter",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleButtonMouseLeave",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "this event fires, when the user drags a file to the area",
              "name": "dragenter"
            },
            {
              "description": "this event fires permanently, when the user drags a file and moves the mouse",
              "name": "dragover"
            },
            {
              "description": "this event fires, when the user drags a file out of the area",
              "name": "dragleave"
            },
            {
              "description": "this event fires, when the user drops a file \"into\" the area https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API",
              "name": "drop"
            }
          ],
          "attributes": [
            {
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "The hierarchy level of the component",
              "fieldName": "hierarchy"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "The emphasis of the component",
              "fieldName": "emphasis"
            },
            {
              "name": "dragging",
              "type": {
                "text": "boolean"
              },
              "description": "Drag status of the component",
              "fieldName": "dragging"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-drag-drop-area",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DragDropArea",
          "declaration": {
            "name": "DragDropArea",
            "module": "src/components/drag-drop-area/drag-drop-area.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-drag-drop-area",
          "declaration": {
            "name": "DragDropArea",
            "module": "src/components/drag-drop-area/drag-drop-area.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/error-message/error-message.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A UI component for showing error messages espacially in relation with form elements like `zui-textfield`.\nIt is used internally to add error messages to form elements.",
          "name": "ErrorMessage",
          "slots": [
            {
              "description": "default slot to provide an error message",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-error-message",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ErrorMessage",
          "declaration": {
            "name": "ErrorMessage",
            "module": "src/components/error-message/error-message.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-error-message",
          "declaration": {
            "name": "ErrorMessage",
            "module": "src/components/error-message/error-message.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/expander/expander.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-expander is a semantic button that indicates the ability to expand or collapse a surrounding element (e.g. \\<zui-box\\>).\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---6.5)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=3095%3A208504)",
          "name": "Expander",
          "cssProperties": [
            {
              "description": "sets the expander width manually",
              "name": "--zui-expander-width"
            },
            {
              "description": "sets the expander height manually, minimum is 16px",
              "name": "--zui-expander-height"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "closed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the state of the component, in particular if the icon is shown closed/open.",
              "attribute": "closed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Sets the tab-index of the component in case of an adjusted A11y flow.",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines one of two possible hierarchy level (first/second).\nAffects the background color of the component.",
              "attribute": "hierarchy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "closed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the state of the component, in particular if the icon is shown closed/open.",
              "fieldName": "closed"
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Sets the tab-index of the component in case of an adjusted A11y flow.",
              "fieldName": "tabindex"
            },
            {
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines one of two possible hierarchy level (first/second).\nAffects the background color of the component.",
              "fieldName": "hierarchy"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-expander",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Expander",
          "declaration": {
            "name": "Expander",
            "module": "src/components/expander/expander.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-expander",
          "declaration": {
            "name": "Expander",
            "module": "src/components/expander/expander.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/focus-view-bar/focus-view-bar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Focus View Bar is a different type of headerbar for the modal focus view dialog. It has slots for left, right and center content and additional allows to show up to two buttons at the sides.\nIf you are using the left or right content together with the center content it is important to implement custom breakpoints, so that you can control what happens with the content when there is not enough space.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/z4fyXFOJCpuaNImx3K234n/%E2%9D%96-04-Web---Component-Library---1.5?node-id=763%3A46553)\n- [Styleguide – Desktop](https://www.figma.com/file/6dkjypErYWQPfuRBD58Aey/%F0%9F%93%96--Styleguide---Web?node-id=7683%3A79745)",
          "name": "FocusViewBar",
          "slots": [
            {
              "description": "This is the slot for zui-headerbar-icon-button that gets displayed on the left side.",
              "name": "left-icon-button"
            },
            {
              "description": "This is the slot for zui-headerbar-icon-button that gets displayed on the right side.",
              "name": "right-icon-button"
            },
            {
              "description": "This is the slot for the content which gets displayed on the left side.",
              "name": "left-content"
            },
            {
              "description": "This is the slot for the content which gets displayed on the right side.",
              "name": "right-content"
            },
            {
              "description": "This is the slot for the content which gets displayed in the center of the component.",
              "name": "center-content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_leftIconButton",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_leftContent",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rightIconButton",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rightContent",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_centerContent",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_centerContainer",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_widthCenter",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_widthfocusViewBar",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_isLeftseparatorNeeded",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "description": "The left separator should only be shown if both the left icon button and the left content are visible.\nThis function checks if the corresponding slots are used."
            },
            {
              "kind": "field",
              "name": "_isRightseparatorNeeded",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "description": "The right separator should only be shown if both the right icon button and the right content are visible.\nThis function checks if the corresponding slots are used."
            },
            {
              "kind": "field",
              "name": "_isLeftContentUsed",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isRightContentUsed",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isCenterContentUsed",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_centerAlignedContentResizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(([{ contentRect }]) => {\n    requestAnimationFrame(() => {\n      this._widthCenter = contentRect.width;\n      this.requestUpdate();\n    });\n  })"
            },
            {
              "kind": "field",
              "name": "_focusViewBarResizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(([{ contentRect }]) => {\n    requestAnimationFrame(() => {\n      this._widthfocusViewBar = contentRect.width;\n      this.requestUpdate();\n    });\n  })"
            },
            {
              "kind": "method",
              "name": "_handleSlotchange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "When slot content changes we need to update css classes. For this we need to trigger a rerendering on every slotchange."
            },
            {
              "kind": "field",
              "name": "_minWidth",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_maxWidth",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-focus-view-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FocusViewBar",
          "declaration": {
            "name": "FocusViewBar",
            "module": "src/components/focus-view-bar/focus-view-bar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-focus-view-bar",
          "declaration": {
            "name": "FocusViewBar",
            "module": "src/components/focus-view-bar/focus-view-bar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/home-screen-tile/home-screen-tile.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Tiles are placed on the Home Screen and serve as a button.\nFor example, the user can load a new project or open an existing project. The Tiles contain an icon and one or more texts.\n\nTitle and subtitle can contain max. two lines of text each. Longer texts are truncated.\nThere are three different sizes for home-screen tiles: s, m, l. The icon size is set automatically and depends on the size of the tile.\n\n## Figma\n- [Styleguide – Web](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=42777:33)",
          "name": "HomeScreenTile",
          "slots": [
            {
              "description": "slot for an icon",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'l'",
              "description": "Size of the tile (s/m/l)",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tileTitle",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Title of the tile.\nOne custom line-break can be set with '\\n'. Text that exceeds elements width will be truncated.",
              "attribute": "tile-title",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tileSubtitle",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Subtitle of the tile (hidden for size 's').\nOne custom line-break can be set with '\\n'. Text that exceeds elements width will be truncated.",
              "attribute": "tile-subtitle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_icons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_replaceLineBreaks",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "textWithLineBreaks",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_replacedTileTitle",
              "type": {
                "text": "TemplateResult"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_replacedTileSubtitle",
              "type": {
                "text": "TemplateResult"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_propagateIconSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleIconSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'l'",
              "description": "Size of the tile (s/m/l)",
              "fieldName": "size"
            },
            {
              "name": "tile-title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Title of the tile.\nOne custom line-break can be set with '\\n'. Text that exceeds elements width will be truncated.",
              "fieldName": "tileTitle"
            },
            {
              "name": "tile-subtitle",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Subtitle of the tile (hidden for size 's').\nOne custom line-break can be set with '\\n'. Text that exceeds elements width will be truncated.",
              "fieldName": "tileSubtitle"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-home-screen-tile",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HomeScreenTile",
          "declaration": {
            "name": "HomeScreenTile",
            "module": "src/components/home-screen-tile/home-screen-tile.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-home-screen-tile",
          "declaration": {
            "name": "HomeScreenTile",
            "module": "src/components/home-screen-tile/home-screen-tile.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon-bar/icon-bar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Internal component for three icons, used for example in `<zui-toast-notification>` `<zui-box>` `<zui-dialog-box>`.",
          "name": "IconBar",
          "slots": [
            {
              "description": "first icon slot.",
              "name": "icon1"
            },
            {
              "description": "second icon slot.",
              "name": "icon2"
            },
            {
              "description": "third icon slot.",
              "name": "icon3"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'subtle'",
              "description": "Defines one of three possible emphasis states (default/subtle/highlight)",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If closable is enabled an additional button will be visible that allows the user to close the box.",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedIcons1",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedIcons2",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedIcons3",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_allIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showIcon1",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showIcon2",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showIcon3",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleIconSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handler for the click event on the close button, fires a box-closed event."
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<IconBar, 'ClosedEvent'>"
              },
              "description": "event which gets fired when the icon bar is closed",
              "name": "zui-icon-bar-closed"
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'subtle'",
              "description": "Defines one of three possible emphasis states (default/subtle/highlight)",
              "fieldName": "emphasis"
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If closable is enabled an additional button will be visible that allows the user to close the box.",
              "fieldName": "closable"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/icon-bar/icon-bar.component.ts"
          },
          "tagName": "zui-icon-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IconBar",
          "declaration": {
            "name": "IconBar",
            "module": "src/components/icon-bar/icon-bar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-icon-bar",
          "declaration": {
            "name": "IconBar",
            "module": "src/components/icon-bar/icon-bar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/inline-message/inline-message.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The inline message is an information component which can hold an icon, a header and multiple lines of text.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=14341%3A182190)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=1%3A102402)",
          "name": "InlineMessage",
          "slots": [
            {
              "description": "This is the default slot for the text of the inline message.",
              "name": ""
            },
            {
              "description": "Slot for the `<zui-icon-*>` of the inline message.",
              "name": "icon"
            },
            {
              "description": "Here you can insert the header text, it will overwrite the headerText property.",
              "name": "headerText"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headerText",
              "type": {
                "text": "string | undefined"
              },
              "description": "Defines the header text of the inline message. It gets overwritten by the headerText slot",
              "attribute": "header-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines the size of the inline message",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_hasHeaderText",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_headerTextNodes",
              "type": {
                "text": "Node[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_checkSizeAndHeader",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Prints a warning if size='s' and header is set"
            },
            {
              "kind": "method",
              "name": "_onHeaderTextSlotChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onIconSlotChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "When the icon is changing set size of icon in the icon slot."
            },
            {
              "kind": "method",
              "name": "_setIconSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set size of icon in the icon slot to one size larger than the size of the inline message."
            }
          ],
          "attributes": [
            {
              "name": "header-text",
              "type": {
                "text": "string | undefined"
              },
              "description": "Defines the header text of the inline message. It gets overwritten by the headerText slot",
              "fieldName": "headerText"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines the size of the inline message",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-inline-message",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InlineMessage",
          "declaration": {
            "name": "InlineMessage",
            "module": "src/components/inline-message/inline-message.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-inline-message",
          "declaration": {
            "name": "InlineMessage",
            "module": "src/components/inline-message/inline-message.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input-number/input-number.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Input Number component uses the Internal Input Number Native component\nand acts like the former Textfield type number but was seperated from other input components.\nIt is an input element for numbers or decimal which can have a unit and interactive spinner icons\nfor stepping up and stepping down the value of the number.",
          "name": "InputNumber",
          "members": [
            {
              "kind": "field",
              "name": "REQUIRED_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'This field is required.'"
            },
            {
              "kind": "field",
              "name": "TOO_SMALL_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'The number is too small.'"
            },
            {
              "kind": "field",
              "name": "TOO_LARGE_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'The number is too large.'"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string | undefined"
              },
              "description": "Sets the autocomplete attribute",
              "attribute": "autocomplete",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the required constraint",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "Sets the placeholder text for the input",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | undefined"
              },
              "description": "Sets the min value of the input",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | undefined"
              },
              "description": "Sets the max value of the input",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Sets the step of the input",
              "attribute": "step",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "unit",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the unit of the input",
              "attribute": "unit",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "alignRight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "alignRight sets the alignment of the text in the input to 'right'",
              "attribute": "align-right",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "default": "undefined",
              "description": "Value for the input",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideSpinners",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Option to display spinners / controls for stepping up and down the value",
              "attribute": "hide-spinners",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isChangeWorthy",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isUserInteraction",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_skipFocusOut",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "stepUp",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle when up control gets clicked"
            },
            {
              "kind": "method",
              "name": "stepDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle when down control gets clicked"
            },
            {
              "kind": "method",
              "name": "select",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleFocusOut",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleStepUp",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleStepDown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_isUpArrowDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "description": "Privated getter for the disabled state of the up arrow",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "_isDownArrowDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "description": "Privated getter for the disabled state of the down arrow",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "_messageAnchorReferenceCallback",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "validationMessageStyle",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "attribute": "validation-message-style",
              "reflects": true,
              "default": "static-text",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidationOn",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "attribute": "show-validation-on",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "show-validation",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isPristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "this forces the validation message to be shown, if the control is invalid",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleBlurForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleInputForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The change event will be fired when the value of the element has changed and the element has lost its focus",
              "name": "change"
            },
            {
              "description": "The input event will be fired when the value of the element has changed",
              "name": "input"
            },
            {
              "description": "The blur event will be fired when the element has lost its focus",
              "name": "blur"
            },
            {
              "description": "The focusout event will be fired when the element has lost its focus",
              "name": "focusout"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "autocomplete",
              "type": {
                "text": "string | undefined"
              },
              "description": "Sets the autocomplete attribute",
              "fieldName": "autocomplete"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the required constraint",
              "fieldName": "required"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "Sets the placeholder text for the input",
              "fieldName": "placeholder"
            },
            {
              "name": "min",
              "type": {
                "text": "number | undefined"
              },
              "description": "Sets the min value of the input",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number | undefined"
              },
              "description": "Sets the max value of the input",
              "fieldName": "max"
            },
            {
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Sets the step of the input",
              "fieldName": "step"
            },
            {
              "name": "unit",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the unit of the input",
              "fieldName": "unit"
            },
            {
              "name": "align-right",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "alignRight sets the alignment of the text in the input to 'right'",
              "fieldName": "alignRight"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "default": "undefined",
              "description": "Value for the input",
              "resolveInitializer": {
                "module": "src/components/input-number/input-number.component.ts"
              },
              "fieldName": "value"
            },
            {
              "name": "hide-spinners",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Option to display spinners / controls for stepping up and down the value",
              "fieldName": "hideSpinners"
            },
            {
              "name": "show-validation-on",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "resolveInitializer": {
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              },
              "fieldName": "showValidationOn",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "show-validation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "showValidation",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "validation-message-style",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "fieldName": "validationMessageStyle",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ValidationStyleMixin",
              "module": "/src/mixins/validation-style/validation-style.mixin"
            },
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/input-number/input-number.component.ts"
          },
          "tagName": "zui-input-number",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputNumber",
          "declaration": {
            "name": "InputNumber",
            "module": "src/components/input-number/input-number.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-input-number",
          "declaration": {
            "name": "InputNumber",
            "module": "src/components/input-number/input-number.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input-password/input-password.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Input Password is an fully self contained component.\nIt is an input element for passwords which masks the user's input with bullets.\nBy default the password will be masked.\nUsers can toggle whether the password will be displayed or not by clicking the show or hide icon on the right side of the input element.",
          "name": "InputPassword",
          "members": [
            {
              "kind": "field",
              "name": "REQUIRED_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'This field is required.'"
            },
            {
              "kind": "field",
              "name": "TOO_SHORT_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'The input is too short.'"
            },
            {
              "kind": "field",
              "name": "TOO_LONG_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'The input is too long.'"
            },
            {
              "kind": "field",
              "name": "PATTERN_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'The input does not match the required pattern.'"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "PasswordAutocomplete"
              },
              "default": "'on'",
              "description": "Sets the autocomplete attribute",
              "attribute": "autocomplete",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "description": "Sets the minlength constraint",
              "attribute": "minlength",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "description": "Sets the maxlength constraint",
              "attribute": "maxlength",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "default": "undefined",
              "description": "Sets the pattern constraint",
              "attribute": "pattern",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the required constraint",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "'Password'",
              "description": "Sets the placeholder text for the input",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "alignRight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "alignRight sets the alignment of the text in the input to 'right'",
              "attribute": "align-right",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "default": "undefined",
              "description": "Value for the input",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedInteractiveIcons",
              "type": {
                "text": "InteractiveIcon[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_passwordIsMasked",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "description": "flag for if password is masked(hidden) or unmasked(visible/displayed)"
            },
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_wasFocused",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_skipFocusOut",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_propagateIconSlotProps",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets and removes the disabled attribute and the size of icons"
            },
            {
              "kind": "method",
              "name": "_handleIconSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_toggleMasking",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle when show/hide icon was clicked to unmask/mask the password"
            },
            {
              "kind": "method",
              "name": "_blur",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleFocusOut",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLInputElement>"
                  },
                  "description": "BlurEvent"
                }
              ],
              "description": "Trigger validation on blur."
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLInputElement>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLInputElement>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleKeyDown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ code }",
                  "type": {
                    "text": "EventWithTarget<HTMLElement, KeyboardEvent>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_messageAnchorReferenceCallback",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "validationMessageStyle",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "attribute": "validation-message-style",
              "reflects": true,
              "default": "static-text",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidationOn",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "attribute": "show-validation-on",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "show-validation",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isPristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "this forces the validation message to be shown, if the control is invalid",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleBlurForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleInputForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The change event will be fired when the value of the element has changed and the element has lost its focus",
              "name": "change"
            },
            {
              "description": "The input event will be fired when the value of the element has changed",
              "name": "input"
            },
            {
              "description": "The blur event will be fired when the element has lost its focus",
              "name": "blur"
            },
            {
              "description": "The focusout event will be fired when the element has lost its focus",
              "name": "focusout"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "autocomplete",
              "type": {
                "text": "PasswordAutocomplete"
              },
              "default": "'on'",
              "description": "Sets the autocomplete attribute",
              "fieldName": "autocomplete"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "description": "Sets the minlength constraint",
              "resolveInitializer": {
                "module": "src/components/input-password/input-password.component.ts"
              },
              "fieldName": "minlength"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "description": "Sets the maxlength constraint",
              "resolveInitializer": {
                "module": "src/components/input-password/input-password.component.ts"
              },
              "fieldName": "maxlength"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "default": "undefined",
              "description": "Sets the pattern constraint",
              "resolveInitializer": {
                "module": "src/components/input-password/input-password.component.ts"
              },
              "fieldName": "pattern"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the required constraint",
              "fieldName": "required"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "'Password'",
              "description": "Sets the placeholder text for the input",
              "fieldName": "placeholder"
            },
            {
              "name": "align-right",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "alignRight sets the alignment of the text in the input to 'right'",
              "fieldName": "alignRight"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "default": "undefined",
              "description": "Value for the input",
              "resolveInitializer": {
                "module": "src/components/input-password/input-password.component.ts"
              },
              "fieldName": "value"
            },
            {
              "name": "show-validation-on",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "resolveInitializer": {
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              },
              "fieldName": "showValidationOn",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "show-validation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "showValidation",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "validation-message-style",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "fieldName": "validationMessageStyle",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ValidationStyleMixin",
              "module": "/src/mixins/validation-style/validation-style.mixin"
            },
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/input-password/input-password.component.ts"
          },
          "tagName": "zui-input-password",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputPassword",
          "declaration": {
            "name": "InputPassword",
            "module": "src/components/input-password/input-password.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-input-password",
          "declaration": {
            "name": "InputPassword",
            "module": "src/components/input-password/input-password.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/interaction-dialog/interaction-dialog.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-interaction-dialog component is used to display a dialog with a header, a body and a footer part.\nThe header part can be used to display a title and an icon bar which icons can be provided.\nThe body part can be used to display any content. The content is scrollable if the height of the body should be limited by setting a custom property.\nThe footer part can be used to display up to 3 zui-dialog-button. The footer has different layouts depending on the size that the component is set to and the amount of zui-dialog-button.\nYou, the consumer of this component, must make sure that the dialog is properly centered on the screen with the advised solution of a portal for your framework.\nWe show example implementations of the zui-interaction-dialog for both react and angular in our examples.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---6.3?node-id=76882%3A32)\n- [Desktop - Styleguide](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=1%3A102392)",
          "name": "InteractionDialog",
          "cssProperties": [
            {
              "description": "The height of the body part of the dialog. If the content of the body part is bigger than the height, the content is scrollable.",
              "name": "--zui-interaction-dialog-scrollable-height"
            },
            {
              "description": "The padding of the body part can be specified.",
              "name": "--zui-interaction-dialog-content-padding"
            }
          ],
          "slots": [
            {
              "description": "zui-icon that is slotted into the header zui-icon-bar.",
              "name": "icon1"
            },
            {
              "description": "zui-icon that is slotted into the header zui-icon-bar.",
              "name": "icon2"
            },
            {
              "description": "zui-icon that is slotted into the header zui-icon-bar.",
              "name": "icon3"
            },
            {
              "description": "This can be any content that is rendered in the body part of the dialog. Set the appropriate custom property to make the content scrollable.",
              "name": "default"
            },
            {
              "description": "This slot can contain up to 3 zui-dialog-button. The footer has different layouts depending on the size that the component is set to and the amount of zui-dialog-button.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true, the close icon is displayed and emits the appropriate event when clicked.",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'l'",
              "description": "Sets a fixed width for the component.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headerText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text to be displayed in the header part.\nThe text is truncated with a tooltip should it not fit on a single line.",
              "attribute": "header-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "hierarchy of the header part.",
              "attribute": "hierarchy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showTrack",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "show the track of the scrollbar with a solid background-color on interactions",
              "attribute": "show-track",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_footerButtons",
              "type": {
                "text": "DialogButton[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleIconBarClosed",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "closeEvent",
                  "type": {
                    "text": "GetZuiEvent<IconBar, 'ClosedEvent'>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleFooterSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<InteractionDialog, 'ClosedEvent'>"
              },
              "description": "is emitted when the close icon of the component is clicked.",
              "name": "zui-interaction-dialog-closed"
            }
          ],
          "attributes": [
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true, the close icon is displayed and emits the appropriate event when clicked.",
              "fieldName": "closable"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'l'",
              "description": "Sets a fixed width for the component.",
              "fieldName": "size"
            },
            {
              "name": "header-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text to be displayed in the header part.\nThe text is truncated with a tooltip should it not fit on a single line.",
              "fieldName": "headerText"
            },
            {
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "hierarchy of the header part.",
              "fieldName": "hierarchy"
            },
            {
              "name": "show-track",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "show the track of the scrollbar with a solid background-color on interactions",
              "fieldName": "showTrack"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/interaction-dialog/interaction-dialog.component.ts"
          },
          "tagName": "zui-interaction-dialog",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InteractionDialog",
          "declaration": {
            "name": "InteractionDialog",
            "module": "src/components/interaction-dialog/interaction-dialog.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-interaction-dialog",
          "declaration": {
            "name": "InteractionDialog",
            "module": "src/components/interaction-dialog/interaction-dialog.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/interactive-icon/interactive-icon.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Unlike a basic icon (see icon component) an interactive icon reacts to\ninteraction states (e.g. disabled, pressed etc.) with a different styling.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13%3A3323)",
          "name": "InteractiveIcon",
          "slots": [
            {
              "description": "This is the default slot. It's an innerHtml of the interactive-icon-element and should contain an regular icon like zui-icon-symbols-close. (See documentation of icon component for a list of all available icons.)",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states ('default' | 'subtle' | 'highlight')",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "smallHitArea",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the lately introduced enlarged hitareas",
              "attribute": "small-hit-area",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states ('default' | 'subtle' | 'highlight')",
              "fieldName": "emphasis"
            },
            {
              "name": "small-hit-area",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the lately introduced enlarged hitareas",
              "fieldName": "smallHitArea"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-interactive-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InteractiveIcon",
          "declaration": {
            "name": "InteractiveIcon",
            "module": "src/components/interactive-icon/interactive-icon.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-interactive-icon",
          "declaration": {
            "name": "InteractiveIcon",
            "module": "src/components/interactive-icon/interactive-icon.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/interactive-text/interactive-text.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The interactive text component behaves like a button. The content can be any text inside a wrapper (for example `span`).\n\n## Figma\n- [Styleguide - Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=7272%3A245618)",
          "name": "InteractiveText",
          "cssProperties": [
            {
              "description": "override default font of `var(--zui-typography-body)`",
              "name": "--zui-interactive-text-font"
            },
            {
              "description": "override default text-transform of `var(--zui-typography-body-text-transform)`",
              "name": "--zui-interactive-text-text-transform"
            },
            {
              "description": "override default hitarea size of 8px",
              "name": "--zui-interactive-text-hitarea-size"
            },
            {
              "description": "override default top and bottom padding of 0px",
              "name": "--zui-interactive-text-padding-top-bottom"
            },
            {
              "description": "override default left and right padding of 0px",
              "name": "--zui-interactive-text-padding-left-right"
            }
          ],
          "slots": [
            {
              "description": "text content",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "emphasis",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "emphasis",
              "fieldName": "emphasis"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-interactive-text",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InteractiveText",
          "declaration": {
            "name": "InteractiveText",
            "module": "src/components/interactive-text/interactive-text.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-interactive-text",
          "declaration": {
            "name": "InteractiveText",
            "module": "src/components/interactive-text/interactive-text.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/loader-box/loader-box.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This component combines a progress ring with several texts.\n\nIt is only available in translucent theme.",
          "name": "LoaderBox",
          "members": [
            {
              "kind": "field",
              "name": "headline",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines headline",
              "attribute": "headline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines description",
              "attribute": "description",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "Mode"
              },
              "default": "'activity'",
              "description": "Defines mode",
              "attribute": "mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showPercent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "It allows to show the value as a percentage text (only usable with mode progress)",
              "attribute": "show-percent",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Defines the value of progress between 0 and 100 (only usable with mode progress)",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_contentClass",
              "type": {
                "text": "Content | '_'"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "string"
              },
              "default": "'translucent'"
            }
          ],
          "attributes": [
            {
              "name": "headline",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines headline",
              "fieldName": "headline"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines description",
              "fieldName": "description"
            },
            {
              "name": "mode",
              "type": {
                "text": "Mode"
              },
              "default": "'activity'",
              "description": "Defines mode",
              "fieldName": "mode"
            },
            {
              "name": "show-percent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "It allows to show the value as a percentage text (only usable with mode progress)",
              "fieldName": "showPercent"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Defines the value of progress between 0 and 100 (only usable with mode progress)",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-loader-box",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LoaderBox",
          "declaration": {
            "name": "LoaderBox",
            "module": "src/components/loader-box/loader-box.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-loader-box",
          "declaration": {
            "name": "LoaderBox",
            "module": "src/components/loader-box/loader-box.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/multiline-textfield/multiline-textfield.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-multiline-textfield is a growing text input field that can be used for messaging.\nIt has the ability to show a character limit indicator.",
          "name": "MultilineTextfield",
          "cssProperties": [
            {
              "description": "sets the max-width of the component",
              "name": "--zui-multiline-textfield-max-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "LINE_HEIGHT",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "20"
            },
            {
              "kind": "field",
              "name": "DEFAULT_MAX_LENGTH",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "4000"
            },
            {
              "kind": "field",
              "name": "DEFAULT_SHOW_INDICATOR_LENGTH",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "3000"
            },
            {
              "kind": "field",
              "name": "DEFAULT_MAX_LINE_COUNT",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "10"
            },
            {
              "kind": "field",
              "name": "REQUIRED_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'The value is required.'"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "value of the textarea",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder that is shown if no value is set.",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxlength",
              "description": "Sets the maximal allowed length of text.",
              "attribute": "maxlength",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showIndicatorLength",
              "description": "Character limit at which the indicator appears.",
              "attribute": "show-indicator-length",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxLineCount",
              "description": "New lines before scrollbar appears.",
              "attribute": "max-line-count",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if input is required",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "submitOnEnter",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if submit should be called on 'ENTER'-key press.",
              "attribute": "submit-on-enter",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_multilineTextareaElement",
              "type": {
                "text": "HTMLTextAreaElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_multilineInputContainer",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_heightTrackerElement",
              "type": {
                "text": "HTMLPreElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_textareaContainerHeight",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_textareaHeight",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_userInteraction",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private",
              "default": "new ResizeObserver(() => {\n    requestAnimationFrame(() => {\n      this._updateHeight();\n    });\n  })"
            },
            {
              "kind": "field",
              "name": "_messageAnchorReferenceCallback",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleTextareaInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleTextareaChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_hasCharLimitExceeded",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateHeight",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_currentCharCount",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showIndicator",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "description": "Checks if current text length should trigger length indicator to appear",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "validationMessageStyle",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "attribute": "validation-message-style",
              "reflects": true,
              "default": "line-only",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidationOn",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "attribute": "show-validation-on",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "show-validation",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isPristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "this forces the validation message to be shown, if the control is invalid",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleBlurForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleInputForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "simulates the default `change` event to imitate default behavior",
              "name": "change"
            },
            {
              "description": "simulates the default `input` event to imitate default behavior",
              "name": "input"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "value of the textarea",
              "fieldName": "value"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder that is shown if no value is set.",
              "fieldName": "placeholder"
            },
            {
              "name": "maxlength",
              "description": "Sets the maximal allowed length of text.",
              "fieldName": "maxlength"
            },
            {
              "name": "show-indicator-length",
              "description": "Character limit at which the indicator appears.",
              "fieldName": "showIndicatorLength"
            },
            {
              "name": "max-line-count",
              "description": "New lines before scrollbar appears.",
              "fieldName": "maxLineCount"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if input is required",
              "fieldName": "required"
            },
            {
              "name": "submit-on-enter",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if submit should be called on 'ENTER'-key press.",
              "fieldName": "submitOnEnter"
            },
            {
              "name": "show-validation-on",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "resolveInitializer": {
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              },
              "fieldName": "showValidationOn",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "show-validation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "showValidation",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "validation-message-style",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "fieldName": "validationMessageStyle",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ValidationStyleMixin",
              "module": "/src/mixins/validation-style/validation-style.mixin"
            },
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/multiline-textfield/multiline-textfield.component.ts"
          },
          "tagName": "zui-multiline-textfield",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MultilineTextfield",
          "declaration": {
            "name": "MultilineTextfield",
            "module": "src/components/multiline-textfield/multiline-textfield.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-multiline-textfield",
          "declaration": {
            "name": "MultilineTextfield",
            "module": "src/components/multiline-textfield/multiline-textfield.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/page-header/page-header.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Page Headers are used at the top of a page and contain the top-level information of the current page.\nThe information can be displayed with a headline or a Title Stack.",
          "name": "PageHeader",
          "cssProperties": [
            {
              "description": "sets the overall height of the page header",
              "name": "--zui-page-header-height"
            }
          ],
          "slots": [
            {
              "description": "This is the default slot. It's an innerHtml of the page-header-element",
              "name": "default"
            },
            {
              "description": "This is the slot for the zui-headerbar-icon-button",
              "name": "iconButton"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_assignedHeaderbarIconButtons",
              "type": {
                "text": "HeaderbarIconButton[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedTitleStacks",
              "type": {
                "text": "TitleStack[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_handleIconSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleDefaultSlotchange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-page-header",
          "customElement": true,
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PageHeader",
          "declaration": {
            "name": "PageHeader",
            "module": "src/components/page-header/page-header.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-page-header",
          "declaration": {
            "name": "PageHeader",
            "module": "src/components/page-header/page-header.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popover/popover.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A popover component is a container for arbitrary content with specific colours, margins, and a shadow.\n\nIf you want to show and position zui-popover, for example with hover on button, you can\nuse our component: zui-tooltip-directive. Use example below.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=10464%3A2354)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=1%3A102407)",
          "name": "Popover",
          "slots": [
            {
              "description": "This is the default slot. It's an innerHtml of the popover-element",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-popover",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Popover",
          "declaration": {
            "name": "Popover",
            "module": "src/components/popover/popover.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-popover",
          "declaration": {
            "name": "Popover",
            "module": "src/components/popover/popover.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/portal/portal.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A portal to be placed anywhere in the DOM to receive contents by `use-portal` entrances.",
          "name": "Portal",
          "cssProperties": [
            {
              "description": "sets the z-index level, can be inherited",
              "name": "--zui-portal-level"
            }
          ],
          "slots": [
            {
              "description": "The default content to be shown if nothing is projected.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the portal (like the name of a slot);\nif not provided it becomes the default portal.",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clone",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Clones projected contents instead of moving them.\nYou can not clone nested slots. If this is what you want use the shouldProjectSlots parameter.",
              "attribute": "clone",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_slottedElements",
              "type": {
                "text": "Map<Element[], HTMLElement>"
              },
              "privacy": "private",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "_deeplySlottedChildElements",
              "type": {
                "text": "Map<Element[], HTMLElement>"
              },
              "privacy": "private",
              "default": "new Map()"
            },
            {
              "kind": "method",
              "name": "cacheAllNestedSlotContentsWithOriginalPosition",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  },
                  "description": "The whole content to project (from the flattned default slot)"
                },
                {
                  "name": "initialized",
                  "default": "true",
                  "description": "defaults to true on the first iteration"
                }
              ],
              "description": "This function gets all the slots that are left on content to be projected.\nIt then saves the slotted contents and a reference to their parent to be able to rehydrate them later.\nThis function supports multiple first level slots and child slots of these."
            },
            {
              "kind": "method",
              "name": "showContent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "Element"
                  },
                  "description": "the DOM nodes to be added"
                },
                {
                  "name": "shouldProjectSlots",
                  "default": "false",
                  "description": "true if slot should be cloned from the projected content to the portal. These slots will be returned to their respective root component when the component unmounts."
                }
              ],
              "description": "Adds content nodes to the shadow DOM"
            },
            {
              "kind": "method",
              "name": "resetContent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes all contents from the shadow DOM"
            },
            {
              "kind": "method",
              "name": "_removeExistingContents",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<Portal, 'ReadyEvent'>"
              },
              "description": "An event telling the management utilities about the portal being created and inserted into the DOM.",
              "name": "zui-portal-ready"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the portal (like the name of a slot);\nif not provided it becomes the default portal.",
              "fieldName": "name"
            },
            {
              "name": "clone",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Clones projected contents instead of moving them.\nYou can not clone nested slots. If this is what you want use the shouldProjectSlots parameter.",
              "fieldName": "clone"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/portal/portal.component.ts"
          },
          "tagName": "zui-portal",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Portal",
          "declaration": {
            "name": "Portal",
            "module": "src/components/portal/portal.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-portal",
          "declaration": {
            "name": "Portal",
            "module": "src/components/portal/portal.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-bar/progress-bar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The progress bar is a simple progress bar component, featuring emphasis (highlight, primary-highlight) and two\ndifferent operation modes (activity and progress). The activity mode shows an inifinte looped animation while the\nprogress mode shows a progress bar with a fixed foreground bar width, according to the given value.\nThere is also a \"striped\" mode, which shows an animated striped progress bar in mode \"progress\". The striped bar\nwill not be available, nor work in the \"activity\" mode.\n\n ## Figma\n- [Styleguide - Desktop](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---1.4?node-id=13009:2769)",
          "name": "ProgressBar",
          "members": [
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "ProgressRing['mode']"
              },
              "default": "'activity'",
              "description": "Defines the mode of the progress bar (activity/progress)",
              "attribute": "mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'highlight'",
              "description": "Defines emphasis states (highlight/primary-highlight)",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "striped",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Striped, or not striped",
              "attribute": "striped",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Defines the value of progress bar (between 0 and 100 - only usable in mode \"progress\")",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_getDerivedProgressBarWidth",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "mode",
              "type": {
                "text": "ProgressRing['mode']"
              },
              "default": "'activity'",
              "description": "Defines the mode of the progress bar (activity/progress)",
              "fieldName": "mode"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'highlight'",
              "description": "Defines emphasis states (highlight/primary-highlight)",
              "fieldName": "emphasis"
            },
            {
              "name": "striped",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Striped, or not striped",
              "fieldName": "striped"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Defines the value of progress bar (between 0 and 100 - only usable in mode \"progress\")",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-progress-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ProgressBar",
          "declaration": {
            "name": "ProgressBar",
            "module": "src/components/progress-bar/progress-bar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-progress-bar",
          "declaration": {
            "name": "ProgressBar",
            "module": "src/components/progress-bar/progress-bar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-ring/progress-ring.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The progress ring component is used as a progress indicator and loading spinner.\nThe colors of the animated ring depends on the `emphasis` setting.\n\n ## Figma\n- [Styleguide - Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/📖--Styleguide---Desktop?node-id=1%3A102376)",
          "name": "ProgressRing",
          "cssProperties": [
            {
              "description": "the duration of the progress ring animation",
              "name": "--zui-progress-ring-animation-duration"
            },
            {
              "description": "the timing function of the progress ring animation",
              "name": "--zui-progress-ring-animation-timing"
            },
            {
              "description": "the color of the animated progress ring foreground, derived from the emphasis attribute",
              "name": "--zui-progress-ring-progress-color"
            },
            {
              "description": "the color of the static progress ring background rail, derived from the emphasis attribute",
              "name": "--zui-progress-ring-rail-color"
            },
            {
              "description": "the opacity of the static progress ring background rail",
              "name": "--zui-progress-ring-rail-opacity"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "Mode"
              },
              "default": "'activity'",
              "description": "Defines the mode of the progress ring.",
              "attribute": "mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states (default/highlight/primary-highlight)",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showPercent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "It allows to show the value as a percentage text (only usable with mode progress)",
              "attribute": "show-percent",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Defines the value of progress between 0 and 100 (only usable with mode progress)",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_correctedValue",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_internalStroke",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_internalSize",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderCircle",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "(TemplateResult|void)"
                }
              },
              "parameters": [
                {
                  "name": "className",
                  "type": {
                    "text": "string"
                  },
                  "description": "the css class to be used"
                }
              ],
              "description": "Renders a single SVG circle"
            },
            {
              "kind": "field",
              "name": "isIcon",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "tagging property used to use `*[zui-icon]` as a querySelector for zuiIcons",
              "attribute": "zui-icon",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconMixin",
                "module": "src/mixins/icons/icon.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "IconSize"
              },
              "default": "defaultSize",
              "description": "The size of the Icon",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconMixin",
                "module": "src/mixins/icons/icon.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "mode",
              "type": {
                "text": "Mode"
              },
              "default": "'activity'",
              "description": "Defines the mode of the progress ring.",
              "fieldName": "mode"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states (default/highlight/primary-highlight)",
              "fieldName": "emphasis"
            },
            {
              "name": "show-percent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "It allows to show the value as a percentage text (only usable with mode progress)",
              "fieldName": "showPercent"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Defines the value of progress between 0 and 100 (only usable with mode progress)",
              "fieldName": "value"
            },
            {
              "name": "zui-icon",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "tagging property used to use `*[zui-icon]` as a querySelector for zuiIcons",
              "fieldName": "isIcon",
              "inheritedFrom": {
                "name": "IconMixin",
                "module": "src/mixins/icons/icon.mixin.ts"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "IconSize"
              },
              "default": "defaultSize",
              "description": "The size of the Icon",
              "resolveInitializer": {
                "module": "src/mixins/icons/icon.mixin.ts"
              },
              "fieldName": "size",
              "inheritedFrom": {
                "name": "IconMixin",
                "module": "src/mixins/icons/icon.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "IconMixin",
              "module": "/src/mixins/icons/icon.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-progress-ring",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ProgressRing",
          "declaration": {
            "name": "ProgressRing",
            "module": "src/components/progress-ring/progress-ring.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-progress-ring",
          "declaration": {
            "name": "ProgressRing",
            "module": "src/components/progress-ring/progress-ring.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/quiet-link/quiet-link.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The quiet link component behaves like a semantic link. The content can be any other HTML markup that makes sense inside a link as well as just text content.\nThe component mostly shares an API with the html anchor but brings the ZUi styling and some minor convenience.\n\n## Figma\n- [Styleguide - Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=17934%3A0)",
          "name": "QuietLink",
          "cssProperties": [
            {
              "description": "override default font of `var(--zui-typography-body)`",
              "name": "--zui-quiet-link-font"
            },
            {
              "description": "override default text-transform of `var(--zui-typography-body-text-transform)`",
              "name": "--zui-quiet-link-text-transform"
            }
          ],
          "slots": [
            {
              "description": "any html element or text content",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "emphasis",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string | null"
              },
              "description": "anchor elements download attribute",
              "attribute": "download",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | null"
              },
              "description": "anchor elements href attribute",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string | null"
              },
              "description": "anchor elements hreflang attribute. Only set if also a href is set.",
              "attribute": "hreflang",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "media",
              "type": {
                "text": "string | null"
              },
              "description": "anchor elements media attribute",
              "attribute": "media",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string | null"
              },
              "description": "anchor elements rel attribute",
              "attribute": "rel",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Sets the tab-index of the component in case of an adjusted A11y flow.\nThe focus is redirected to the link instead.",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string | null"
              },
              "description": "anchor elements target attribute",
              "attribute": "target",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string | null"
              },
              "description": "anchor elements type attribute",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "emphasis",
              "fieldName": "emphasis"
            },
            {
              "name": "download",
              "type": {
                "text": "string | null"
              },
              "description": "anchor elements download attribute",
              "fieldName": "download"
            },
            {
              "name": "href",
              "type": {
                "text": "string | null"
              },
              "description": "anchor elements href attribute",
              "fieldName": "href"
            },
            {
              "name": "hreflang",
              "type": {
                "text": "string | null"
              },
              "description": "anchor elements hreflang attribute. Only set if also a href is set.",
              "fieldName": "hreflang"
            },
            {
              "name": "media",
              "type": {
                "text": "string | null"
              },
              "description": "anchor elements media attribute",
              "fieldName": "media"
            },
            {
              "name": "rel",
              "type": {
                "text": "string | null"
              },
              "description": "anchor elements rel attribute",
              "fieldName": "rel"
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Sets the tab-index of the component in case of an adjusted A11y flow.\nThe focus is redirected to the link instead.",
              "fieldName": "tabindex"
            },
            {
              "name": "target",
              "type": {
                "text": "string | null"
              },
              "description": "anchor elements target attribute",
              "fieldName": "target"
            },
            {
              "name": "type",
              "type": {
                "text": "string | null"
              },
              "description": "anchor elements type attribute",
              "fieldName": "type"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-quiet-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "QuietLink",
          "declaration": {
            "name": "QuietLink",
            "module": "src/components/quiet-link/quiet-link.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-quiet-link",
          "declaration": {
            "name": "QuietLink",
            "module": "src/components/quiet-link/quiet-link.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/scrollbar/scrollbar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The scrollbar is a UI component with only some limited logic. It's used in the `zui-scrollable-directive` internally.\n\n## Anatomy\n░ scroll track\n█ scroll handle\n░░░░░░░░░███████░░░\n┗━━━┯━━━┻━━━┯━━━┛\n  offset   size\n\n## Functionality\nIt's basic function is to provide visual guidance to the user about a scroll state, either horizontal or vertical.\nThe informations about the scroll state have to be set from the outside, as this component has no relation to the\nscroll target whatsoever. The scroll state consists basicly of two informations, the amount to scroll and the\nrelation of the visible to the non-visible (overflow) content. This is visualized by offsetting and scaling the\nscroll handle accordingly. To keep this UI component as flexible and stateless as possible, the _size_ and the\n_offset_ of the handle can be set explisitly using the custom properties `--zui-scrollbar-handle-size` and\n`--zui-scrollbar-handle-offset`.\n\n## Behavior\nIf not disabled, the scroll handle can be dragged along the axis of the defined orientation (x-axis if `horizontal`\n_or_ y-axis if `vertical`). The dragging is limited to the boundaries of the scroll track. Additionally the track\naround the handle can be clicked to jump-scroll directly to this position. Every interaction triggers a custom\n`scrollbar` event which emits the resulting offset and the orientation of the scrollbar as payload. The offset is\na relative value as percentage.\n\n## Notes\n- if used in conjunction with another scrollbar, the `multiple` flag has to be set _on both_\\\n  to prevent the two end of the bars to overlap\n- using `multiple` results in a dead square bewtween the bars which must be handled _outside_\n- do not forget to add listeners for the wheel event to this elements as well\n- the vertical hit area is extended by default which is not visible but aids interactions\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13009%3A2745)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=1%3A102414)",
          "name": "Scrollbar",
          "cssProperties": [
            {
              "description": "(deprecated) - sets the color of the scrollbar background",
              "name": "--zui-scrollbar-background-color"
            },
            {
              "description": "(deprecated) - sets opaqueness of the background, toggled by background visiblity by default",
              "name": "--zui-scrollbar-background-opacity"
            },
            {
              "description": "sets the color of the track handle",
              "name": "--zui-scrollbar-handle-color"
            },
            {
              "description": "minimum size of the track handle",
              "name": "--zui-scrollbar-handle-min-size"
            },
            {
              "description": "dimensions of the quadratic corner between scrollbars",
              "name": "--zui-scrollbar-hitarea-corner-size"
            },
            {
              "description": "(deprecated) enlargement of the hitarea, depends on hitarea attribute to be set to `enlarged`",
              "name": "--zui-scrollbar-hitarea-enlarge"
            },
            {
              "description": "corner radius of the track and handle",
              "name": "--zui-scrollbar-radius"
            },
            {
              "description": "background color of the track",
              "name": "--zui-scrollbar-track-color"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "colliding",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "marks the scrollbars hitarea as colliding",
              "attribute": "colliding",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scrolling",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "marks the scrollbars related axis to be currently scrolled",
              "attribute": "scrolling",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "tells the scrollbar to be not alone",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "background",
              "type": {
                "text": "'hidden' | 'visible'"
              },
              "default": "'hidden'",
              "description": "**deprecated** show the scrollbar hitboxes with a solid background-color on interactions\nThe property will be removed, as there won't be any background options",
              "deprecated": "true",
              "attribute": "background",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hitarea",
              "type": {
                "text": "'enlarged' | 'minimal'"
              },
              "default": "'enlarged'",
              "description": "**deprecated** conditionally enlarge the vertical scrollbar to the left (is passed through to scrollbar component)\nThe property will be removed, as the hitarea now has a fixed size",
              "deprecated": "true",
              "attribute": "hitarea",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'vertical'",
              "description": "denes the orientation and implicitly the position as well",
              "attribute": "orientation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showTrack",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "show the track of the scrollbar with a solid background-color on interactions",
              "attribute": "show-track",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_handleRef",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_draggingBound",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_jumpingBound",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_stopDragBound",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_initialOffset",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "method",
              "name": "_deriveInitialPositions",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent | TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_startDrag",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent | TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_stopDrag",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_dragging",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent | TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_jumping",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent | TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<Scrollbar, 'ScrolledEvent'>"
              },
              "description": "if some scrolling is happening",
              "name": "zui-scrollbar-scrolled"
            }
          ],
          "attributes": [
            {
              "name": "colliding",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "marks the scrollbars hitarea as colliding",
              "fieldName": "colliding"
            },
            {
              "name": "scrolling",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "marks the scrollbars related axis to be currently scrolled",
              "fieldName": "scrolling"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "tells the scrollbar to be not alone",
              "fieldName": "multiple"
            },
            {
              "name": "background",
              "type": {
                "text": "'hidden' | 'visible'"
              },
              "default": "'hidden'",
              "description": "**deprecated** show the scrollbar hitboxes with a solid background-color on interactions\nThe property will be removed, as there won't be any background options",
              "deprecated": "true",
              "fieldName": "background"
            },
            {
              "name": "hitarea",
              "type": {
                "text": "'enlarged' | 'minimal'"
              },
              "default": "'enlarged'",
              "description": "**deprecated** conditionally enlarge the vertical scrollbar to the left (is passed through to scrollbar component)\nThe property will be removed, as the hitarea now has a fixed size",
              "deprecated": "true",
              "fieldName": "hitarea"
            },
            {
              "name": "orientation",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'vertical'",
              "description": "denes the orientation and implicitly the position as well",
              "fieldName": "orientation"
            },
            {
              "name": "show-track",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "show the track of the scrollbar with a solid background-color on interactions",
              "fieldName": "showTrack"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/scrollbar/scrollbar.component.ts"
          },
          "tagName": "zui-scrollbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Scrollbar",
          "declaration": {
            "name": "Scrollbar",
            "module": "src/components/scrollbar/scrollbar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-scrollbar",
          "declaration": {
            "name": "Scrollbar",
            "module": "src/components/scrollbar/scrollbar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/section-divider/section-divider.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A divider is a horizontal line that can be used to define a thematic break.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=20971%3A190657)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=805%3A198897)\n\n## Skeleton\nThe Skeleton components can be added to the named skeleton slot and will be displayed when **nothing** is in the default slot.\nWhen the skeleton is not displayed make sure there are no spaces or line breaks passed in the default slot.",
          "name": "SectionDivider",
          "slots": [
            {
              "description": "any html element or text content",
              "name": "default"
            },
            {
              "description": "This is the slot for adding a skeleton instead text content. The Skeleton is only displayed when the default slot is empty.",
              "name": "skeleton"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headerAlignment",
              "type": {
                "text": "HeaderAlignment"
              },
              "default": "'left'",
              "description": "Defines one of two possible positions of the header text alignment (left/center);",
              "attribute": "header-alignment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_widthObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private",
              "default": "new ResizeObserver(() => {\n    const sectionDividerWidth: number = this.offsetWidth;\n\n    if (sectionDividerWidth > MINIMUM_WIDTH) {\n      this.setAttribute('force-left-alignment', '');\n    } else {\n      this.removeAttribute('force-left-alignment');\n    }\n  })"
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adds width Observer to the Section Divider component"
            }
          ],
          "attributes": [
            {
              "name": "header-alignment",
              "type": {
                "text": "HeaderAlignment"
              },
              "default": "'left'",
              "description": "Defines one of two possible positions of the header text alignment (left/center);",
              "fieldName": "headerAlignment"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-section-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SectionDivider",
          "declaration": {
            "name": "SectionDivider",
            "module": "src/components/section-divider/section-divider.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-section-divider",
          "declaration": {
            "name": "SectionDivider",
            "module": "src/components/section-divider/section-divider.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table/table.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Zui Table is a component, providing different modes and styles for tables. Basically it is a styling\nwrapper, including the zui scrollbar, for a native HTML table. You can use the native HTML table API to create your\ntable in general.\n\n!Note: You have to use a sub-element (e.g. span) for texts inside a table body data cell, otherwise the cursor won't fit the ux requirements to be a text cursor (check the example below).\n\nThe \"size\" attribute will be ignored, if a \"custom-size\" is set.\nIt's possible to disable header-, as well as body cells, simply by adding a the data-zui-disabled attribute to your element.\nThis attribute is not supported for table cells natively, but will affect pointer events and the styling inside the\nzui-table wrapper.\n\nThe Header-cells content is aligned horizontally and vertically centered by default, but of course can be\noverwritten by inline styles.\n\nCurrently, the content of the body cell does not have any limitation in length. In the near future, texts will be\ntruncated with an ellipses in case of overflow and a tooltip will be shown on hover. Besides, we do not have any\ncontrol about your content in the cells, so all icon related style requirements (icon size, icon alignment, header\ncells height) have to be implemented by yourself.\n\n! Concerning the styling and sorting, be aware, that a table needs a `tbody` element to work properly !\n\nThe ZUi Table provides events for sorting, as well as a integrated sorting functionality. You can use the \"data-zui-is-sortable\" (boolean) attribute on the header cells to enable the sorting ability. Per default all cells are unsortable.\nAs well, per default, the integrated sorting is disabled. You can enable it by setting \"enable-integrated-sorting\" to true.\n\nThe sort events are triggered regardless of this setting.\n\nSkeletons can be easily added to the cells by using the skeleton components.\n\n## Figma\n- [Desktop - Component\nLibrary](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=59132%3A460130)\n- [Styleguide –\nDesktop](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---7.0)",
          "name": "Table",
          "cssProperties": [
            {
              "description": "set the explicit height of the table in all possible css units",
              "name": "--zui-table-height"
            },
            {
              "description": "set the explicit height of the table in all possible css units",
              "name": "--zui-table-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "TABLE_ROW_HEIGHT",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "24"
            },
            {
              "kind": "field",
              "name": "SCROLLBAR_SPACING_TOP",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "8"
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "Mode"
              },
              "default": "'standalone'",
              "description": "Defines the mode of the table",
              "attribute": "mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines the height of the table rows",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines the emphasis of the table",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines the hierarchy level of the table",
              "attribute": "hierarchy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headerFont",
              "type": {
                "text": "HeaderFont"
              },
              "default": "'label2'",
              "description": "Defines the font of the header cells",
              "attribute": "header-font",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "customSize",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "description": "Overrides the height of the table rows. It's set in pixel values, without the unit.",
              "attribute": "custom-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dataZuiDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets a cell to disabled mode. This will affect the styling and pointer events.\nThis attribute replaces the soon @deprecated zui-table-cell-disabled class.",
              "attribute": "data-zui-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultSortOrder",
              "type": {
                "text": "SortDirection"
              },
              "default": "'asc'",
              "description": "Sets the default sort order of the table",
              "attribute": "default-sort-order",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "integratedSorting",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables / disables the integrated sorting functionality",
              "attribute": "enable-integrated-sorting",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_scrollBarTopMargin",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_slottedTable",
              "type": {
                "text": "[HTMLTableElement] | []"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_tableStyle",
              "type": {
                "text": "HTMLStyleElement | undefined"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_table",
              "type": {
                "text": "HTMLTableElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_slottedTableHeadersCount",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addStyle",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_propagateProps",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleHeaderCellClicked",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "clickedTableHeaderCell",
                  "type": {
                    "text": "HTMLTableCellElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_switchSortOrder",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "tableHeaderCell",
                  "type": {
                    "text": "HTMLTableCellElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_sortTableByCell",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "tableHeaderCell",
                  "type": {
                    "text": "HTMLTableCellElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateScrollBarTopMargin",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<Table, 'SortEvent'>"
              },
              "description": "broadcasts the clicked header cell and the current sort order",
              "name": "zui-table-header-cell-sorted"
            }
          ],
          "attributes": [
            {
              "name": "mode",
              "type": {
                "text": "Mode"
              },
              "default": "'standalone'",
              "description": "Defines the mode of the table",
              "fieldName": "mode"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines the height of the table rows",
              "fieldName": "size"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines the emphasis of the table",
              "fieldName": "emphasis"
            },
            {
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines the hierarchy level of the table",
              "fieldName": "hierarchy"
            },
            {
              "name": "header-font",
              "type": {
                "text": "HeaderFont"
              },
              "default": "'label2'",
              "description": "Defines the font of the header cells",
              "fieldName": "headerFont"
            },
            {
              "name": "custom-size",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "description": "Overrides the height of the table rows. It's set in pixel values, without the unit.",
              "resolveInitializer": {
                "module": "src/components/table/table.component.ts"
              },
              "fieldName": "customSize"
            },
            {
              "name": "data-zui-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets a cell to disabled mode. This will affect the styling and pointer events.\nThis attribute replaces the soon @deprecated zui-table-cell-disabled class.",
              "fieldName": "dataZuiDisabled"
            },
            {
              "name": "default-sort-order",
              "type": {
                "text": "SortDirection"
              },
              "default": "'asc'",
              "description": "Sets the default sort order of the table",
              "fieldName": "defaultSortOrder"
            },
            {
              "name": "enable-integrated-sorting",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables / disables the integrated sorting functionality",
              "fieldName": "integratedSorting"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/table/table.component.ts"
          },
          "tagName": "zui-table",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Table",
          "declaration": {
            "name": "Table",
            "module": "src/components/table/table.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-table",
          "declaration": {
            "name": "Table",
            "module": "src/components/table/table.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/text-link/text-link.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-text-link is a button like component that looks like a link for the use outside of text.\nIt has three layout variations text-only, text + icon and external.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---6.10.0?node-id=40810%3A0)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=17934%3A690)",
          "name": "TextLink",
          "slots": [
            {
              "description": "This is the default slot which can be used to set an icon when external is not set.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "external",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "changes the position of the icon to external",
              "attribute": "external",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "visited",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Changes the style to visited",
              "attribute": "visited",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "description": "text of the text link",
              "attribute": "text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of four possible emphasis states (subtle/default/highlight/primary-highlight);",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "Defines the size as one of two possible values ('s'/'m');",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private",
              "description": "Selects the icon slot element"
            },
            {
              "kind": "method",
              "name": "_onIconSlotChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "When the icon is changing set size of icon in the icon slot and request an update."
            },
            {
              "kind": "method",
              "name": "_setIconSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set size of icon in the default slot to s16."
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "description": "Checks if the slot for the icon is used",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "external",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "changes the position of the icon to external",
              "fieldName": "external"
            },
            {
              "name": "visited",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Changes the style to visited",
              "fieldName": "visited"
            },
            {
              "name": "text",
              "type": {
                "text": "string"
              },
              "description": "text of the text link",
              "fieldName": "text"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of four possible emphasis states (subtle/default/highlight/primary-highlight);",
              "fieldName": "emphasis"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "Defines the size as one of two possible values ('s'/'m');",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-text-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TextLink",
          "declaration": {
            "name": "TextLink",
            "module": "src/components/text-link/text-link.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-text-link",
          "declaration": {
            "name": "TextLink",
            "module": "src/components/text-link/text-link.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/textarea.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-textarea element represents a multi-line plain-text editing control,\nuseful when you want to allow users to enter a sizeable amount of free-form\ntext, for example a textarea on a review or feedback form.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13009%3A2731)",
          "name": "Textarea",
          "cssProperties": [
            {
              "description": "sets the height of textarea",
              "name": "--zui-textarea-height"
            },
            {
              "description": "sets the width of textarea",
              "name": "--zui-textarea-width"
            },
            {
              "description": "sets the height of the textarea",
              "name": "--zui-textarea-textarea-height"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "placeholder that is shown if no value is set",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "value of the textarea",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the textarea is required or not",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Sets the minlength of the value of the textarea",
              "attribute": "minlength",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Sets the maxlength of the value of the textarea",
              "attribute": "maxlength",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_textarea",
              "type": {
                "text": "HTMLTextAreaElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(() => {\n    // TODO: this should be looked upon later, if there is some time to fix it... :)\n    // prevent event loop warnings...\n    requestAnimationFrame(() => {\n      this._handleResize();\n    });\n  })"
            },
            {
              "kind": "method",
              "name": "_handleResize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_resizeTextarea",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Ensures that the internal textarea is set to its full auto-height, without any overflow.\nThis is required because the textarea does not support `height: auto` natively.\n\nImplementation inspired by: https://stackoverflow.com/a/24676492"
            },
            {
              "kind": "method",
              "name": "_handleTextareaInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle the input event from the internal textarea.\n* Set the outer 'value' property based on the internal textarea value.\n* The InputEvent does NOT need to be refired, as it bubbles.\n* Ensure that the InputEvent is not prevented here."
            },
            {
              "kind": "method",
              "name": "_handleTextareaChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle the 'change' event from the internal textarea.\n* Re-emit the change event from the internal textarea, because it is `composed: false` natively."
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, unknown>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "when the value was changed and committed (i.e. by pressing leaving the focus) by user input.",
              "name": "change"
            },
            {
              "description": "when the value was changed by user input.",
              "name": "input"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "placeholder that is shown if no value is set",
              "fieldName": "placeholder"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "value of the textarea",
              "fieldName": "value"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the textarea is required or not",
              "fieldName": "required"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Sets the minlength of the value of the textarea",
              "fieldName": "minlength"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Sets the maxlength of the value of the textarea",
              "fieldName": "maxlength"
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/textarea/textarea.component.ts"
          },
          "tagName": "zui-textarea",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Textarea",
          "declaration": {
            "name": "Textarea",
            "module": "src/components/textarea/textarea.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-textarea",
          "declaration": {
            "name": "Textarea",
            "module": "src/components/textarea/textarea.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textfield/textfield.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The TextField is a text input with a bottom line which changes color depending on interaction states.\nIt can be set to readonly which hides the bottom line and prevents users from changing the text.\n\n## Validation\n\nIt is possible to add a validation function to the validationCallback.\nThe validation function gets the current value as parameter and returns a ValidationResult.\nA ValidationResult has a boolean isValid flag which is false when the validation was negative and an optional\nmessage which replaces the validation-message in the error warning.\n\n## Formatting\n\nIt is possible to add a formatting function to the formattingCallback.\nThe formatting function gets the current value as parameter and returns a formatted string.\nNotice: Formatting is only a one-directional action. It only changes the visible value of the textfield.\nIt has no influence on the entering of text in the textfield.\nFor example, you could format the value to match some specific pattern like decimal dots or commas but\nthis won't change the way you input the values.\n\n## Localization\nThe zui-textfield is a wrapper for the HTML `<input>` tag and reused many of its behavior, including\nthe localization behavior. This means that there is no explicit way to change the input language (especially for input-type number).\nInstead, the browser locale is determining how users can input their values.\n\n## Known limitations\nWhen entering a minus into an already filled zui-textfield type number the minus will not appear.\nThe following minus will show up normally and it also works correctly if the minus gets entered into an empty zui-textfield type number.\n\nThis will get fixed in the next rework of the zui-textfield type number. [Ticket 783853](https://dev.azure.com/ZEISSgroup/DI_ZUi-Web/_workitems/edit/783853)\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13009%3A2730)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=15127%3A499061)",
          "name": "Textfield",
          "slots": [
            {
              "description": "This is the slot for the interactive icon.",
              "name": "interactive-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "REQUIRED_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'This field is required.'"
            },
            {
              "kind": "field",
              "name": "TOO_SMALL_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'The number is too small.'"
            },
            {
              "kind": "field",
              "name": "TOO_LARGE_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'The number is too large.'"
            },
            {
              "kind": "field",
              "name": "TOO_SHORT_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'The input is too short.'"
            },
            {
              "kind": "field",
              "name": "TOO_LONG_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'The input is too long.'"
            },
            {
              "kind": "field",
              "name": "PATTERN_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'The input does not match the required pattern.'"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "description": "The pattern attribute specifies a regular expression the form control's value should match.",
              "attribute": "pattern",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if input is required",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Defines min length for input",
              "attribute": "minlength",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Defines max length for input",
              "attribute": "maxlength",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inputType",
              "type": {
                "text": "InputType"
              },
              "default": "'text'",
              "description": "input type of the text field",
              "attribute": "input-type"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | undefined"
              },
              "description": "The min value of the TextField when input type = number",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | undefined"
              },
              "description": "The max value of the TextField when input type = number",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The steps of the TextField when input type = number",
              "attribute": "step",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "unit",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The unit of the TextField",
              "attribute": "unit",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "alignRight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "AlignRight sets the alignment of the text in the input to 'right'",
              "attribute": "align-right",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the placeholder text for the input",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "Value for the input, is always a string, even when it is of type=\"number\"",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "formattingCallback",
              "type": {
                "text": "FormattingCallback | undefined"
              },
              "description": "The formatting callback of the TextField, it allows to set a function which formats the text",
              "return": {
                "type": {
                  "text": "FormattingCallback"
                }
              }
            },
            {
              "kind": "field",
              "name": "_isTextInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_formattedValue",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isTruncated",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedInteractiveIcons",
              "type": {
                "text": "InteractiveIcon[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputFormattedElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isChangeWorthy",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isUserInteraction",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_skipFocusOut",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isArrowAsLastClicked",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private",
              "default": "new ResizeObserver(() => {\n    this._checkTruncation();\n  })"
            },
            {
              "kind": "method",
              "name": "stepUp",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle when up control gets clicked"
            },
            {
              "kind": "method",
              "name": "stepDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle when down control gets clicked"
            },
            {
              "kind": "method",
              "name": "_checkTruncation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_propagateIconSlotProps",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets and removes the disabled attribute and the size \"on icon"
            },
            {
              "kind": "method",
              "name": "_handleIconSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_clampingNumberValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "React when the user starts typing. This is used to hide the validation message (if any is shown)\nas soon as the user starts typing to correct the wrong value.\nWe use \"input\" event instead of \"keydown\" to prevent hiding the message when a\nspecial key (CTRL, Arrow, Alt,...) is pressed."
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Trigger validation on blur."
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Emit a change event when the value of the internal textfield has changed.\nAs change-events has composed=false, we need to emit a new one."
            },
            {
              "kind": "method",
              "name": "_handleStepUp",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleStepDown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusOut",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isUpArrowDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "description": "Privated getter for the disabled state of the up arrow",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "_isDownArrowDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "description": "Privated getter for the disabled state of the down arrow",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "_messageAnchorReferenceCallback",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "validationMessageStyle",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "attribute": "validation-message-style",
              "reflects": true,
              "default": "static-text",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidationOn",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "attribute": "show-validation-on",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "show-validation",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isPristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "this forces the validation message to be shown, if the control is invalid",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleBlurForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleInputForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The change event is fired when the value of the textfield has changed, similar to `<input type=\"text\">`",
              "name": "change"
            },
            {
              "description": "The input event is fired when the value of the textfield has changed, similar to `<input type=\"text\">`",
              "name": "input"
            },
            {
              "description": "The blur event is fired when the component or arrows are leaved, similar to `<input type=\"text\">`",
              "name": "blur"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "description": "The pattern attribute specifies a regular expression the form control's value should match.",
              "fieldName": "pattern"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if input is required",
              "fieldName": "required"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Defines min length for input",
              "fieldName": "minlength"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "Defines max length for input",
              "fieldName": "maxlength"
            },
            {
              "name": "input-type",
              "type": {
                "text": "InputType"
              },
              "default": "'text'",
              "description": "input type of the text field",
              "fieldName": "inputType"
            },
            {
              "name": "min",
              "type": {
                "text": "number | undefined"
              },
              "description": "The min value of the TextField when input type = number",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number | undefined"
              },
              "description": "The max value of the TextField when input type = number",
              "fieldName": "max"
            },
            {
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The steps of the TextField when input type = number",
              "fieldName": "step"
            },
            {
              "name": "unit",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The unit of the TextField",
              "fieldName": "unit"
            },
            {
              "name": "align-right",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "AlignRight sets the alignment of the text in the input to 'right'",
              "fieldName": "alignRight"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the placeholder text for the input",
              "fieldName": "placeholder"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "Value for the input, is always a string, even when it is of type=\"number\"",
              "fieldName": "value"
            },
            {
              "name": "show-validation-on",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "resolveInitializer": {
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              },
              "fieldName": "showValidationOn",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "show-validation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "showValidation",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "validation-message-style",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "fieldName": "validationMessageStyle",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ValidationStyleMixin",
              "module": "/src/mixins/validation-style/validation-style.mixin"
            },
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/textfield/textfield.component.ts"
          },
          "tagName": "zui-textfield",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Textfield",
          "declaration": {
            "name": "Textfield",
            "module": "src/components/textfield/textfield.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-textfield",
          "declaration": {
            "name": "Textfield",
            "module": "src/components/textfield/textfield.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/theme-provider/theme-provider.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The ThemeProvider is used to set a ZUi theme globablly.",
          "name": "ThemeProvider",
          "members": [
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "Theme"
              },
              "default": "BaseElement.DEFAULT_THEME",
              "description": "Defines a theme that is inherited",
              "attribute": "theme",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              }
            },
            {
              "kind": "method",
              "name": "_applyTheme",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "theme",
                  "type": {
                    "text": "Theme"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "theme",
              "type": {
                "text": "Theme"
              },
              "default": "BaseElement.DEFAULT_THEME",
              "description": "Defines a theme that is inherited",
              "fieldName": "theme"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zui-theme-provider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ThemeProvider",
          "declaration": {
            "name": "ThemeProvider",
            "module": "src/components/theme-provider/theme-provider.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-theme-provider",
          "declaration": {
            "name": "ThemeProvider",
            "module": "src/components/theme-provider/theme-provider.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/thumbnail/thumbnail.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Description of thumbnail\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=8006%3A103292)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=1%3A102419)",
          "name": "Thumbnail",
          "cssProperties": [
            {
              "description": "color of the thumbnail border",
              "name": "--zui-thumbnail-border-color"
            },
            {
              "description": "stroke width of the thumbnail border",
              "name": "--zui-thumbnail-border-width"
            },
            {
              "description": "color of the placeholder background in the header",
              "name": "--zui-thumbnail-header-placeholder-bg-color"
            },
            {
              "description": "border style of the header placeholder",
              "name": "--zui-thumbnail-header-placeholder-border"
            },
            {
              "description": "background color of the image placeholder",
              "name": "--zui-thumbnail-image-placeholder-bg-color"
            },
            {
              "description": "color of the image placeholder border",
              "name": "--zui-thumbnail-image-placeholder-border-color"
            },
            {
              "description": "stroke width of the thumbnail image placeholder border",
              "name": "--zui-thumbnail-image-placeholder-border-width"
            },
            {
              "description": "stroke width of the thumbnail image placeholder top border",
              "name": "--zui-thumbnail-image-placeholder-top-border-width"
            },
            {
              "description": "allows toggling visibility of the thumbnail top line",
              "name": "--zui-thumbnail-top-line-display"
            },
            {
              "description": "vertical size of the thumbnail top line",
              "name": "--zui-thumbnail-top-line-height"
            }
          ],
          "slots": [
            {
              "description": "This is the default slot to feed the component some `<img>` element.",
              "name": "default"
            },
            {
              "description": "This is the slot for header content. If you don't use it there will be a top-border instead of a header bar.",
              "name": "header"
            },
            {
              "description": "This is the slot for a placeholder icon element that is automatically centered in the thumbnail and becomes visible when there is no `<img>` in the default slot.",
              "name": "placeholder-icon"
            },
            {
              "description": "This is the slot for the top overlay bar. If you don't use it the top overlay will not be visible.",
              "name": "overlay-top"
            },
            {
              "description": "This is the slot for the bottom overlay bar. If you don't use it the bottom overlay will not be visible.",
              "name": "overlay-bottom"
            },
            {
              "description": "This is the slot for adding a skeleton instead of header content. The Skeleton is only displayed when no header content is set.",
              "name": "skeleton-header"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines the hierarchy for this thumbnail.",
              "attribute": "hierarchy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states (default/active/active-primary);",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_slotHeader",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_slotSkeletonHeader",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_slotPlaceHolderIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_imagePlaceholder",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_sizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private",
              "default": "new ResizeObserver(() => {\n    requestAnimationFrame(() => {\n      this._setIconSizeToPlaceholder();\n    });\n  })"
            },
            {
              "kind": "method",
              "name": "_calcIconSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "IconSize"
                }
              }
            },
            {
              "kind": "method",
              "name": "_setIconSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "size",
                  "description": "the size which the icon should have",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Set size of icon in the placeholder icon slot to the given size."
            },
            {
              "kind": "method",
              "name": "_headerSlotChangeHandler",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set header attribute value according to the presence of slotted nodes"
            },
            {
              "kind": "method",
              "name": "_overlayTopSlotChangeHandler",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "the event which is fired when the overlay-top slot has changed"
                }
              ],
              "description": "Tracks if the overlay-top slot is used."
            },
            {
              "kind": "method",
              "name": "_overlayBottomSlotChangeHandler",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "the event which is fired when the overlay-bottom slot has changed"
                }
              ],
              "description": "Tracks if the overlay-bottom slot is used."
            },
            {
              "kind": "method",
              "name": "_defaultSlotChangeHandler",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "the event which is fired when the default slot has changed"
                }
              ],
              "description": "Tracks if the default slot is used."
            },
            {
              "kind": "method",
              "name": "_setIconSizeToPlaceholder",
              "privacy": "private",
              "description": "Set the icon size on the icon slot."
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines the hierarchy for this thumbnail.",
              "fieldName": "hierarchy"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states (default/active/active-primary);",
              "fieldName": "emphasis"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-thumbnail",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Thumbnail",
          "declaration": {
            "name": "Thumbnail",
            "module": "src/components/thumbnail/thumbnail.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-thumbnail",
          "declaration": {
            "name": "Thumbnail",
            "module": "src/components/thumbnail/thumbnail.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/toast-notification/toast-notification.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Notifications are used to communicate conditions, indicate an event, or to show responses to user actions.\nThey are informative and require minimal user interaction.\nContent of notifications can include authentication, information, confirmation, warnings, and error messages.\nThere is also the possibility to add additional content.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=71661%3A353359)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=24714%3A126338)",
          "name": "ToastNotification",
          "cssProperties": [
            {
              "description": "sets the overall horizontal size of the toast notification",
              "name": "--zui-toast-notification-width"
            }
          ],
          "slots": [
            {
              "description": "It's an innerHtml of the toast notification-element",
              "name": "default"
            },
            {
              "description": "Here you can insert the header text, it will overwrite the headerText property.",
              "name": "headerText"
            },
            {
              "description": "icon slot for the inline message icon.",
              "name": "icon"
            },
            {
              "description": "first icon slot in the header.",
              "name": "icon1"
            },
            {
              "description": "second icon slot in the header.",
              "name": "icon2"
            },
            {
              "description": "third icon slot in the header.",
              "name": "icon3"
            },
            {
              "description": "additional content slot.",
              "name": "content"
            },
            {
              "description": "slot for the primary button, the button segment gets shown when both button slots are filled.",
              "name": "primary-button"
            },
            {
              "description": "slot for the secondary button, the button segment gets shown when both button slots are filled.",
              "name": "secondary-button"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headerText",
              "type": {
                "text": "string"
              },
              "description": "The header text of the toast notification",
              "attribute": "header-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "description": "The text of the toast notification",
              "attribute": "text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "State"
              },
              "default": "'default'",
              "description": "Defines one of two possible states (default/active)",
              "attribute": "state",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If closable is enabled an additional button will be visible that allows the user to close the toast notification.",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_headerTextSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_iconSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_contentSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_primaryButtonSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_secondaryButtonSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_iconBar",
              "type": {
                "text": "IconBar"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inlineMessage",
              "type": {
                "text": "InlineMessage"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_headerTextSlotContent",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_iconSlotContent",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_defaultSlotContent",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showButtons",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_showAdditionalContent",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_heightObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private",
              "default": "new ResizeObserver(([{ contentRect }]) => {\n    requestAnimationFrame(() => {\n      const inlineMessageHeight = contentRect.height;\n      if (inlineMessageHeight <= INLINE_MESSAGE_MAX_HEIGHT) {\n        this._iconBar.classList.add('icons-centered');\n      } else {\n        this._iconBar.classList.remove('icons-centered');\n      }\n    });\n  })"
            },
            {
              "kind": "method",
              "name": "_onHeaderTextSlotChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "When the headerText slot has changed, we serialize its content into an\ninternal property that is used for conditional markup"
            },
            {
              "kind": "method",
              "name": "_onDefaultSlotChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "When the default slot has changed, we serialize its content into an\ninternal property that is used for conditional markup"
            },
            {
              "kind": "method",
              "name": "_onIconSlotChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "When the headerText slot has changed, we serialize its content into an\ninternal property that is used for conditional markup"
            },
            {
              "kind": "method",
              "name": "_onButtonSlotChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets an internal class when both button slots are used to show the buttons segment"
            },
            {
              "kind": "method",
              "name": "_onContentSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets an internal class when there is something slotted into the content slot"
            },
            {
              "kind": "method",
              "name": "_handleIconBarClosed",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<ToastNotification, 'ClosedEvent'>"
              },
              "description": "event which gets fired when the toast notification is closed",
              "name": "zui-toast-notification-closed"
            }
          ],
          "attributes": [
            {
              "name": "header-text",
              "type": {
                "text": "string"
              },
              "description": "The header text of the toast notification",
              "fieldName": "headerText"
            },
            {
              "name": "text",
              "type": {
                "text": "string"
              },
              "description": "The text of the toast notification",
              "fieldName": "text"
            },
            {
              "name": "state",
              "type": {
                "text": "State"
              },
              "default": "'default'",
              "description": "Defines one of two possible states (default/active)",
              "fieldName": "state"
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If closable is enabled an additional button will be visible that allows the user to close the toast notification.",
              "fieldName": "closable"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/toast-notification/toast-notification.component.ts"
          },
          "tagName": "zui-toast-notification",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToastNotification",
          "declaration": {
            "name": "ToastNotification",
            "module": "src/components/toast-notification/toast-notification.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-toast-notification",
          "declaration": {
            "name": "ToastNotification",
            "module": "src/components/toast-notification/toast-notification.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/toggle-switch/toggle-switch.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Toggle switch.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13558%3A188260)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=23651%3A480653)",
          "name": "ToggleSwitch",
          "cssProperties": [
            {
              "description": "sets the background color of the switch, depends on emphasis attribute and interactino state",
              "name": "--zui-toggle-switch-background-color"
            },
            {
              "description": "color of the switch border, depends on emphasis attribute and interaction state",
              "name": "--zui-toggle-switch-border-color"
            },
            {
              "description": "dimensions of the switch handle, depends on the size attribute",
              "name": "--zui-toggle-switch-handle-size"
            },
            {
              "description": "outer spacing of the switch handle",
              "name": "--zui-toggle-switch-handle-spacing"
            },
            {
              "description": "sets the vertical size of the handle",
              "name": "--zui-toggle-switch-height"
            },
            {
              "description": "sets the horizontal size of the handle",
              "name": "--zui-toggle-switch-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "emphasis",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "toggle switch size",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the toggle switch is on or off",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the toggle switch is required or not",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_handleBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, unknown>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_taggedDifferentiableElements",
              "type": {
                "text": "NodeListOf<HTMLElement>"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_keyboardActive",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_differentiableElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "description": "Convenient getter to retrieve the target elements",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addFocusListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_removeFocusListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateFocusAttributes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "onElement",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusInEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusOutEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKeyDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleMouseDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleGlobalKeyDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleGlobalMouseDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "Event"
              },
              "description": "emits when the toggle switch has lost it's focus",
              "name": "blur"
            },
            {
              "type": {
                "text": "Event"
              },
              "description": "emits when the toggle switch value has changed",
              "name": "change"
            },
            {
              "type": {
                "text": "Event"
              },
              "description": "emits when the toggle switch value has changed",
              "name": "input"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "emphasis",
              "fieldName": "emphasis"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "toggle switch size",
              "fieldName": "size"
            },
            {
              "name": "value",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the toggle switch is on or off",
              "fieldName": "value"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the toggle switch is required or not",
              "fieldName": "required"
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "FocusDifferentiationMixin",
              "module": "/src/mixins/visual-focus/focus-differentiation.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/toggle-switch/toggle-switch.component.ts"
          },
          "tagName": "zui-toggle-switch",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToggleSwitch",
          "declaration": {
            "name": "ToggleSwitch",
            "module": "src/components/toggle-switch/toggle-switch.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-toggle-switch",
          "declaration": {
            "name": "ToggleSwitch",
            "module": "src/components/toggle-switch/toggle-switch.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tooltip/tooltip.component.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "TOOLTIP_STYLES",
          "default": "css`\n  ${unsafeCSS(style)}\n`"
        },
        {
          "kind": "class",
          "description": "The tooltip is a common graphical user interface element.\nIt is used in conjunction with a cursor, usually a pointer.\nThe user hovers the pointer over an item, without clicking it,\nand a tooltip may appear — a small \"hover box\" with information about the item being hovered over.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13009%3A2751)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=23852%3A34)",
          "name": "Tooltip",
          "cssProperties": [
            {
              "description": "as the tooltip grows with its contents, this defines the horizontal limit",
              "name": "--zui-tooltip-max-width"
            },
            {
              "description": "inner spacing of the tooltip container",
              "name": "--zui-tooltip-padding"
            }
          ],
          "slots": [
            {
              "description": "This is the default slot. It's an innerHtml of the tooltip-element. <br/>It can contain either text:<br/>\\<p\\>, \\<span\\>, \\<a\\>, \\<i\\>, \\<b\\>, \\<strong\\>, \\<code\\>, \\<pre\\> <br/>or non-text content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "'default' | 'warning'"
              },
              "default": "'default'",
              "description": "defines one of two possible emphasis states (default/warning);",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "message",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "allows defining a text message body (which would be overwritten by any slotted content)",
              "attribute": "message",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "isNotText",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "flags non-text content for styling",
              "privacy": "private",
              "attribute": "zui-internal-no-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_slotRef",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_checkSlotContent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "'default' | 'warning'"
              },
              "default": "'default'",
              "description": "defines one of two possible emphasis states (default/warning);",
              "fieldName": "emphasis"
            },
            {
              "name": "message",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "allows defining a text message body (which would be overwritten by any slotted content)",
              "fieldName": "message"
            },
            {
              "name": "zui-internal-no-text",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "flags non-text content for styling",
              "fieldName": "isNotText"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-tooltip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TOOLTIP_STYLES",
          "declaration": {
            "name": "TOOLTIP_STYLES",
            "module": "src/components/tooltip/tooltip.component.ts"
          }
        },
        {
          "kind": "js",
          "name": "Tooltip",
          "declaration": {
            "name": "Tooltip",
            "module": "src/components/tooltip/tooltip.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-tooltip",
          "declaration": {
            "name": "Tooltip",
            "module": "src/components/tooltip/tooltip.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/truncate-with-tooltip/truncate-with-tooltip.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Convenient component to truncate the given contents and to show a tooltip.\n\nReactivity:\n- The content of the default tooltip is updated only on `slotchange` events (triggered by adding/removing/rerendering root-level slot nodes).\n- The enabled state of the tooltip is updated not only on `slotchange` but also when the component itself resizes.",
          "name": "TruncateWithTooltip",
          "slots": [
            {
              "description": "The default slot contents will be truncated using text ellipsis.",
              "name": "default"
            },
            {
              "description": "Allows passing a custom tooltip to be shown.",
              "name": "tooltip"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "preserveMarkup",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Wether to preserve html contents in expanded\ntooltip or to show a text representation only.",
              "attribute": "preserve-markup",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tooltipAnchoring",
              "type": {
                "text": "TooltipDirective['anchoring']"
              },
              "default": "'cursor'",
              "description": "Anchoring of the tooltip, passed through.\nSee tooltip docs for more information.",
              "attribute": "tooltip-anchoring",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tooltipTrigger",
              "type": {
                "text": "TooltipDirective['trigger']"
              },
              "default": "['click', 'focus']",
              "description": "Trigger of the tooltip, passed through.\nSee tooltip docs for more information.",
              "attribute": "tooltip-trigger",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "delayed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines, whether the tooltip is to be shown with a delay",
              "attribute": "delayed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "interactiveElementSelector",
              "type": {
                "text": "string | undefined"
              },
              "description": "Allows specifying a parent element selector to be used as interactive element for the tooltip trigger,\nwill pierce ShadowDOM.",
              "attribute": "interactive-element-selector",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_truncateSlotRef",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_truncateRef",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isTruncated",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_truncationObserver",
              "privacy": "private",
              "default": "new ResizeObserver(() => this._checkTruncation())"
            },
            {
              "kind": "method",
              "name": "_checkTruncation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "preserve-markup",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Wether to preserve html contents in expanded\ntooltip or to show a text representation only.",
              "fieldName": "preserveMarkup"
            },
            {
              "name": "tooltip-anchoring",
              "type": {
                "text": "TooltipDirective['anchoring']"
              },
              "default": "'cursor'",
              "description": "Anchoring of the tooltip, passed through.\nSee tooltip docs for more information.",
              "fieldName": "tooltipAnchoring"
            },
            {
              "name": "tooltip-trigger",
              "type": {
                "text": "TooltipDirective['trigger']"
              },
              "default": "['click', 'focus']",
              "description": "Trigger of the tooltip, passed through.\nSee tooltip docs for more information.",
              "fieldName": "tooltipTrigger"
            },
            {
              "name": "delayed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines, whether the tooltip is to be shown with a delay",
              "fieldName": "delayed"
            },
            {
              "name": "interactive-element-selector",
              "type": {
                "text": "string | undefined"
              },
              "description": "Allows specifying a parent element selector to be used as interactive element for the tooltip trigger,\nwill pierce ShadowDOM.",
              "fieldName": "interactiveElementSelector"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-truncate-with-tooltip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TruncateWithTooltip",
          "declaration": {
            "name": "TruncateWithTooltip",
            "module": "src/components/truncate-with-tooltip/truncate-with-tooltip.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-truncate-with-tooltip",
          "declaration": {
            "name": "TruncateWithTooltip",
            "module": "src/components/truncate-with-tooltip/truncate-with-tooltip.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/zeiss-logo/zeiss-logo.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Zeiss Logo is available as a full-fledged component",
          "name": "ZeissLogo",
          "members": [
            {
              "kind": "field",
              "name": "_icons",
              "privacy": "private",
              "static": true,
              "default": "new Map<IconSize, TemplateResult>([\n    ['s8', _s32IconSvg],\n    ['s12', _s32IconSvg],\n    ['s16', _s32IconSvg],\n    ['s24', _s32IconSvg],\n    ['s32', _s32IconSvg],\n    ['s40', _s32IconSvg],\n    ['s48', _s32IconSvg],\n    ['s64', _s64IconSvg],\n    ['s72', _s64IconSvg],\n    ['s80', _s80IconSvg],\n  ])",
              "description": "Defines which icon resource to use at which icon size"
            },
            {
              "kind": "field",
              "name": "isIcon",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "tagging property used to use `*[zui-icon]` as a querySelector for zuiIcons",
              "attribute": "zui-icon",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconMixin",
                "module": "src/mixins/icons/icon.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "IconSize"
              },
              "default": "defaultSize",
              "description": "The size of the Icon",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconMixin",
                "module": "src/mixins/icons/icon.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "IconMixin",
              "module": "/src/mixins/icons/icon.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-zeiss-logo",
          "customElement": true,
          "attributes": [
            {
              "name": "zui-icon",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "tagging property used to use `*[zui-icon]` as a querySelector for zuiIcons",
              "fieldName": "isIcon",
              "inheritedFrom": {
                "name": "IconMixin",
                "module": "src/mixins/icons/icon.mixin.ts"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "IconSize"
              },
              "default": "defaultSize",
              "description": "The size of the Icon",
              "resolveInitializer": {
                "module": "src/mixins/icons/icon.mixin.ts"
              },
              "fieldName": "size",
              "inheritedFrom": {
                "name": "IconMixin",
                "module": "src/mixins/icons/icon.mixin.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZeissLogo",
          "declaration": {
            "name": "ZeissLogo",
            "module": "src/components/zeiss-logo/zeiss-logo.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-zeiss-logo",
          "declaration": {
            "name": "ZeissLogo",
            "module": "src/components/zeiss-logo/zeiss-logo.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/_internal/internal-input-number-native/internal-input-number-native.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The InternalInputNumberNative is our internal helper component, replacing the native input[type=number], allowing only numbers\nto be entered and allowing full text selection.",
          "name": "InternalInputNumberNative",
          "members": [
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "string"
              },
              "description": "The min value of the InternalInputNumberNative",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "string"
              },
              "description": "The max value of the InternalInputNumberNative",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "The max value of the InternalInputNumberNative",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "string"
              },
              "description": "The steps of the InternalInputNumberNative",
              "attribute": "step",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the disabled property",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the readonly property",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the placeholder text for the input",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Value of component, is always a string",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_displayValue",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputNumberElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "error",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "select",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionMode",
                  "optional": true,
                  "type": {
                    "text": "SelectionMode"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number | null"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number | null"
                  }
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "stepUp",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "stepDown",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeyDown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLInputElement, KeyboardEvent>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_handleInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handlePaste",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "ClipboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_massageInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "rawInput",
                  "type": {
                    "text": "string"
                  },
                  "description": "to be massages"
                }
              ],
              "description": "\"massages\" a passed rawInput, i.e. filters out allowed chars for number inputs"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'number'"
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The event that fires when the user has changed <code>value</code>",
              "name": "change"
            },
            {
              "description": "The event that fires when the user has changed <code>value</code>",
              "name": "input"
            }
          ],
          "attributes": [
            {
              "name": "min",
              "type": {
                "text": "string"
              },
              "description": "The min value of the InternalInputNumberNative",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "string"
              },
              "description": "The max value of the InternalInputNumberNative",
              "fieldName": "max"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "The max value of the InternalInputNumberNative",
              "fieldName": "required"
            },
            {
              "name": "step",
              "type": {
                "text": "string"
              },
              "description": "The steps of the InternalInputNumberNative",
              "fieldName": "step"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the disabled property",
              "fieldName": "disabled"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the readonly property",
              "fieldName": "readonly"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the placeholder text for the input",
              "fieldName": "placeholder"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Value of component, is always a string",
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/_internal/internal-input-number-native/internal-input-number-native.component.ts"
          },
          "tagName": "zui-internal-input-number-native",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InternalInputNumberNative",
          "declaration": {
            "name": "InternalInputNumberNative",
            "module": "src/components/_internal/internal-input-number-native/internal-input-number-native.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-internal-input-number-native",
          "declaration": {
            "name": "InternalInputNumberNative",
            "module": "src/components/_internal/internal-input-number-native/internal-input-number-native.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/action-split-button/action-split-button/action-split-button.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-action-split-button consists of an action button, an menu button, an animated menu and a custom number of menu-item like elements.\nThe action button is the main action and provided by the zui-action-split-option with the attribute \"primary\".\nThe menu button toggles the opening/closing of the menu. A outside click will also close the menu.\nThe menu-item like elements are provided by the zui-action-split-option by default.\n\nAll event handlers can be directly assigned to the slotted elements (action button / menu-item like elements).\nThe menu will be closed on selection of a menu-item like element or by clicking outside of the menu.\nThe menu can be opened by clicking on the menu-button.\n\nWhen using the zui-action-split-button keep in mind that the menu-item like elements are not rendered inside the component but in the menu inside a portal when the menu is open.\nIf you want to make changes to the menu-item like elements you might have to do it by holding a DOM reference or you might close the menu first.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=47241%3A370833)\n- [Styleguide – Desktop](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---5.1?node-id=13558%3A191770)",
          "name": "ActionSplitButton",
          "cssProperties": [
            {
              "description": "override the recommended default width of the action button. The menu will also be adapted accordingly.",
              "name": "--zui-action-button-width-default"
            },
            {
              "description": "override the default item count above which the menu will be scrollable.",
              "name": "--zui-menu-item-count"
            },
            {
              "description": "override the menu width. Usually you can rely on the default behavior of the variant and the menu-overflow properties.",
              "name": "--zui-menu-width"
            }
          ],
          "slots": [
            {
              "description": "Supply all zui-menu-item like elements that should be rendered in the menu.",
              "name": "default"
            },
            {
              "description": "This is the slot for the action button. The action button can be freely adjusted but will be supplied with a standard style as default.",
              "name": "action"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Manages if the menu is open or closed.\nChanging this property will trigger an animation.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "menuOverflow",
              "type": {
                "text": "MenuOverflow"
              },
              "default": "'truncate'",
              "description": "Defines the strategy for the menu overflow behavior.\nDefault is truncation of overflowing menu-items.",
              "attribute": "menu-overflow",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "Variant"
              },
              "default": "'default'",
              "description": "Defines the strategy for the menu adapt-width behavior.\nDefault is adapt-width for icon-only variant and fixed width for the default variant. This behavior can be altered by the other variants.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "replaceOnSelection",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enabling this, will automatically replace the current action button with the latest selected one",
              "attribute": "replace-on-selection",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_containerRef",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_menuWrapperRef",
              "type": {
                "text": "MenuWrapper"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_optionRefs",
              "type": {
                "text": "ActionSplitOption[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_primaryOption",
              "type": {
                "text": "ActionSplitOption[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_actionButton",
              "type": {
                "text": "ActionSplitOption[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_menuAnimationIsRunning",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_noOptionsAtAll",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_lastSelectedAction",
              "type": {
                "text": "ActionSplitOption | undefined"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "method",
              "name": "_handleMenuClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target: selectedOption }",
                  "type": {
                    "text": "EventWithTarget<ActionSplitOption>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleToggleMenu",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_getButtonReference",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleDefaultSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleActionButtonSlotChangeEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusOut",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_menuCustomProperties",
              "type": {
                "text": "Readonly<StyleInfo>"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_startAnimation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_stopAnimation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_propagateState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Manages if the menu is open or closed.\nChanging this property will trigger an animation.",
              "fieldName": "open"
            },
            {
              "name": "menu-overflow",
              "type": {
                "text": "MenuOverflow"
              },
              "default": "'truncate'",
              "description": "Defines the strategy for the menu overflow behavior.\nDefault is truncation of overflowing menu-items.",
              "fieldName": "menuOverflow"
            },
            {
              "name": "variant",
              "type": {
                "text": "Variant"
              },
              "default": "'default'",
              "description": "Defines the strategy for the menu adapt-width behavior.\nDefault is adapt-width for icon-only variant and fixed width for the default variant. This behavior can be altered by the other variants.",
              "fieldName": "variant"
            },
            {
              "name": "replace-on-selection",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enabling this, will automatically replace the current action button with the latest selected one",
              "fieldName": "replaceOnSelection"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-action-split-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ActionSplitButton",
          "declaration": {
            "name": "ActionSplitButton",
            "module": "src/components/action-split-button/action-split-button/action-split-button.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-action-split-button",
          "declaration": {
            "name": "ActionSplitButton",
            "module": "src/components/action-split-button/action-split-button/action-split-button.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/action-split-button/action-split-option/action-split-option.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-action-split-option is a slotted element provided to the action-split-button. Depending on the context it is either a zui-button or a zui-menu-item.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=47241%3A370833)\n- [Styleguide – Desktop](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---5.1?node-id=13558%3A191770)",
          "name": "ActionSplitOption",
          "slots": [
            {
              "description": "Any label to be shown in either the zui-button or zui-menu-item.",
              "name": "default"
            },
            {
              "description": " Any icon to be shown in either the zui-button or zui-menu-item.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "primary",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Display mode. If true a zui-button is rendered as the primary action.\nIf false, the default, a zui-menu-item is rendered inside the menu.",
              "attribute": "primary",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "primaryActionEmphasis",
              "type": {
                "text": "Button['emphasis']"
              },
              "default": "'default'",
              "description": "the emphasis of either the rendered action button or the menu item",
              "attribute": "primary-action-emphasis",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "primary",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Display mode. If true a zui-button is rendered as the primary action.\nIf false, the default, a zui-menu-item is rendered inside the menu.",
              "fieldName": "primary"
            },
            {
              "name": "primary-action-emphasis",
              "type": {
                "text": "Button['emphasis']"
              },
              "default": "'default'",
              "description": "the emphasis of either the rendered action button or the menu item",
              "fieldName": "primaryActionEmphasis"
            }
          ],
          "superclass": {
            "name": "MenuItemBase",
            "module": "/src/components/menu/menu-item-base.class"
          },
          "tagName": "zui-action-split-option",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ActionSplitOption",
          "declaration": {
            "name": "ActionSplitOption",
            "module": "src/components/action-split-button/action-split-option/action-split-option.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-action-split-option",
          "declaration": {
            "name": "ActionSplitOption",
            "module": "src/components/action-split-button/action-split-option/action-split-option.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chat/chat-item/chat-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-chat-item is an atomic component. It applies styling to any slotted content in the default slot. The component also provides a date and delivery status if set.\nThe emphasis of the chat item influences both style and behavior. Therfore a delivery status is only shown for outbound chat items and the date is then right aligned.\n\n## Figma\n- [Styleguide - Desktop](https://www.figma.com/file/6dkjypErYWQPfuRBD58Aey/%F0%9F%93%96--Styleguide---Web)\n- [Component Library - Desktop](https://www.figma.com/file/z4fyXFOJCpuaNImx3K234n/%E2%9D%96-04-Web---Component-Library---4.4?node-id=3453%3A49749)\n\n## Skeleton\nThe Skeleton components can be added to the named skeleton slot and will be displayed when **nothing** is in the default slot.\nWhen the skeleton is not displayed make sure there are no spaces or line breaks passed in the default slot.",
          "name": "ChatItem",
          "slots": [
            {
              "description": "any html element or text content",
              "name": "default"
            },
            {
              "description": "This is the slot for adding a skeleton instead of text content. The Skeleton is only displayed when the default slot is empty.",
              "name": "skeleton"
            },
            {
              "description": "This is the slot for adding a skeleton instead of an delivery date on a outbound chat item. The Skeleton is only displayed when the delivery date is not set.",
              "name": "skeleton-delivery-date"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'inbound'",
              "description": "emphasis style of the component.",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "deliveryStatus",
              "type": {
                "text": "DeliveryStatus"
              },
              "default": "'none'",
              "description": "delivery status shows an icon next to the date. Only available on the outbound emphasis and when set.",
              "attribute": "delivery-status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "shown date for the delivery/recieved time.",
              "attribute": "date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "locale",
              "description": "Full locale code as defined in RFC 5646/BCP 47,\ni.e. \"en-US\".\n\nBy default, the first full locale in [navigator.languages](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages) is used.",
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hourCycle",
              "type": {
                "text": "TimePickerHourCycle"
              },
              "description": "hour cycle",
              "return": {
                "type": {
                  "text": "TimePickerHourCycle"
                }
              },
              "attribute": "hour-cycle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_internalHourCycle",
              "type": {
                "text": "TimePickerHourCycle"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getDeliveryIcon",
              "type": {
                "text": "TemplateResult | typeof nothing"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isDateDeliveryShown",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'inbound'",
              "description": "emphasis style of the component.",
              "fieldName": "emphasis"
            },
            {
              "name": "delivery-status",
              "type": {
                "text": "DeliveryStatus"
              },
              "default": "'none'",
              "description": "delivery status shows an icon next to the date. Only available on the outbound emphasis and when set.",
              "fieldName": "deliveryStatus"
            },
            {
              "name": "date",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "shown date for the delivery/recieved time.",
              "fieldName": "date"
            },
            {
              "name": "locale",
              "description": "Full locale code as defined in RFC 5646/BCP 47,\ni.e. \"en-US\".\n\nBy default, the first full locale in [navigator.languages](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages) is used.",
              "fieldName": "locale"
            },
            {
              "name": "hour-cycle",
              "type": {
                "text": "TimePickerHourCycle"
              },
              "description": "hour cycle",
              "return": {
                "type": {
                  "text": "TimePickerHourCycle"
                }
              },
              "fieldName": "hourCycle"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-chat-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ChatItem",
          "declaration": {
            "name": "ChatItem",
            "module": "src/components/chat/chat-item/chat-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-chat-item",
          "declaration": {
            "name": "ChatItem",
            "module": "src/components/chat/chat-item/chat-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/content-accordion/content-accordion/content-accordion.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This component allow \"stacking\" multiple accordion details.\nIt can work in single and multi mode. Opening / closing is done by clicking the mouse on any item but also by setting\nthe value attribute for content accordion. In the case of the multi select option, items in the value attribute\nare separated with a comma (see example below).\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=15382%3A3275)\n- [Styleguide – Desktop](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=33682%3A167)",
          "name": "ContentAccordion",
          "slots": [
            {
              "description": "Here you can insert your zui-accordion-details items",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines possible sizes (s/m/l). Default: m.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "integrated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines integrated attribute",
              "attribute": "integrated",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "multi",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "It is possible to set multi select, which allows you to open several items at the same time",
              "attribute": "multi",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "Value"
              },
              "default": "[]",
              "description": "Specifies which item is open or which items are open when multi is selected.\nValues are comma-separated on the attribute and an array on the property.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedAccordion",
              "type": {
                "text": "ContentAccordionDetails[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_propagateDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_propagateState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleOpenStateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<ContentAccordion, 'OpenChangedEvent'>"
              },
              "description": "emits an array with opened items, when content accordion details is clicked.",
              "name": "zui-content-accordion-open-changed"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines possible sizes (s/m/l). Default: m.",
              "fieldName": "size"
            },
            {
              "name": "integrated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines integrated attribute",
              "fieldName": "integrated"
            },
            {
              "name": "multi",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "It is possible to set multi select, which allows you to open several items at the same time",
              "fieldName": "multi"
            },
            {
              "name": "value",
              "type": {
                "text": "Value"
              },
              "default": "[]",
              "description": "Specifies which item is open or which items are open when multi is selected.\nValues are comma-separated on the attribute and an array on the property.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/content-accordion/content-accordion/content-accordion.component.ts"
          },
          "tagName": "zui-content-accordion",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ContentAccordion",
          "declaration": {
            "name": "ContentAccordion",
            "module": "src/components/content-accordion/content-accordion/content-accordion.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-content-accordion",
          "declaration": {
            "name": "ContentAccordion",
            "module": "src/components/content-accordion/content-accordion/content-accordion.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/content-accordion/content-accordion-details/content-accordion-details.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This component is for use in content accordion.\n\n## Figma\n- [Desktop - Component\nLibrary](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=15382%3A3275)\n- [Styleguide –\nDesktop](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=33682%3A167)",
          "name": "ContentAccordionDetails",
          "slots": [
            {
              "description": "Here you can insert your own html content",
              "name": "default"
            },
            {
              "description": "This is the slot for adding a skeleton instead of headline text. The Skeleton is only displayed when no headline text is set.",
              "name": "skeleton-headline-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines possible sizes (s/m/l)",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "integrated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines integrated attribute.",
              "attribute": "integrated",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines open",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headlineText",
              "type": {
                "text": "string"
              },
              "description": "Defines title of header",
              "attribute": "headline-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "Value"
              },
              "description": "Defines value",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_contentSlotHeight",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_contentSlotWrapper",
              "type": {
                "text": "HTMLDivElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hasWideWidth",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver((entries: ResizeObserverEntry[]) => {\n    if (entries[0].contentRect.width) {\n      const width = entries[0].contentRect.width;\n      this._hasWideWidth = width >= WIDTH_BREAKPOINT;\n    }\n  })"
            },
            {
              "kind": "method",
              "name": "_handleDefaultSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "mouseEvent",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines possible sizes (s/m/l)",
              "fieldName": "size"
            },
            {
              "name": "integrated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines integrated attribute.",
              "fieldName": "integrated"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines open",
              "fieldName": "open"
            },
            {
              "name": "headline-text",
              "type": {
                "text": "string"
              },
              "description": "Defines title of header",
              "fieldName": "headlineText"
            },
            {
              "name": "value",
              "type": {
                "text": "Value"
              },
              "description": "Defines value",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/content-accordion/content-accordion-details/content-accordion-details.component.ts"
          },
          "tagName": "zui-content-accordion-details",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ContentAccordionDetails",
          "declaration": {
            "name": "ContentAccordionDetails",
            "module": "src/components/content-accordion/content-accordion-details/content-accordion-details.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-content-accordion-details",
          "declaration": {
            "name": "ContentAccordionDetails",
            "module": "src/components/content-accordion/content-accordion-details/content-accordion-details.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/content-tab/content-tab-bar/content-tab-bar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The content tab bar is a feature component\nThe `zui-content-tab-bar` is intended to be used with `zui-content-tab-default-item`'s, `zui-content-tab-highlight-item`'s and `zui-content-tab-image-item`'s.\nEach item should get a value for identification. When an item is selected it's value is reflected on the `zui-content-tab-bar` and an event is emitted.\n\nThe content tab bar may only support using items of the same type!\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=52930%3A120)\n- [Styleguide – Desktop](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---3.1?node-id=76949%3A367659)",
          "name": "ContentTabBar",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "the size of all items inside",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "hierarchy of all items inside",
              "attribute": "hierarchy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Value of the current selected tab",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedTabs",
              "type": {
                "text": "ContentTabItem[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_propagateDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_handleSlotchange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "clickEvent"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleClose",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "closeEvent",
                  "type": {
                    "text": "GetZuiEvent<ContentTabItemBase, 'ClosedEvent'>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_propagateState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<ContentTabBar, 'ItemSelectedEvent'>"
              },
              "description": "fired when the tab selection was changed. Contains the value of the tab as payload.",
              "name": "zui-content-tab-bar-item-selected"
            },
            {
              "type": {
                "text": "GetZuiEvent<ContentTabBar, 'ItemClosedEvent'>"
              },
              "description": "fired the close icon of a tab was clicked. Contains the value of the tab as payload.",
              "name": "zui-content-tab-bar-item-closed"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "the size of all items inside",
              "fieldName": "size"
            },
            {
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "hierarchy of all items inside",
              "fieldName": "hierarchy"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Value of the current selected tab",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/content-tab/content-tab-bar/content-tab-bar.component.ts"
          },
          "tagName": "zui-content-tab-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ContentTabBar",
          "declaration": {
            "name": "ContentTabBar",
            "module": "src/components/content-tab/content-tab-bar/content-tab-bar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-content-tab-bar",
          "declaration": {
            "name": "ContentTabBar",
            "module": "src/components/content-tab/content-tab-bar/content-tab-bar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/content-tab/content-tab-default-item/content-tab-default-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The content tab default item is a content tab item for any content.\nThe content tab default item is intended for usage in the content tab bar component.\n\nThe height of the item is depending on the selected size option: (48px as a default size m) or (32px as a size s).\nThe width of the item is solely be depending on width of the given content.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=52930%3A120)\n- [Styleguide – Desktop](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---3.1?node-id=76949%3A367659)",
          "name": "ContentTabDefaultItem",
          "slots": [
            {
              "description": "Here you can insert your own icon. Size of them will set everytime automatically as 'm' 16x16px",
              "name": "icon"
            },
            {
              "description": "This is the slot for adding a skeleton instead of text. The Skeleton is only displayed when no text is set.",
              "name": "skeleton-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines one of two possible sizes (s/l);",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines one of two possible hierarchy level (first/second).",
              "attribute": "hierarchy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_isHover",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "We need to simulate a hover on a button.\nWe cannot use the normal `:hover` pseudo-selector here:\nThere is the requirement that when the close button is clicked, the rest of the tab item\nmay not be active/focused. To achieve this, we've put the close button and the\nbutton of the tab next to each other instead of nesting them.\nThen the close button is positioned above the tab-button so that it looks as if the close\nbutton is a child of the tab-button.\nHowever, due to this decision, we have a problem with the hover effect:\nWe want to have a hover styling on the whole tab also when the close button is hovered,\nbut the normal `:hover` on the tab-button won't match in this case.\nWe cannot apply stying to the tab-button when a sibling of it is hovered.\nThis isn't possible in pure css.\n\nAs a workaround, we track when the close-button is hovered in classic JavaScript-way by\nusing mouseenter and mouseleave events and add a class to the tab-button in those cases."
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleIconSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_setHover",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_removeHover",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleCloseIconClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines one of two possible sizes (s/l);",
              "fieldName": "size"
            },
            {
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines one of two possible hierarchy level (first/second).",
              "fieldName": "hierarchy"
            }
          ],
          "superclass": {
            "name": "ContentTabItemBase",
            "module": "/src/components/content-tab/content-tab-base.class"
          },
          "tagName": "zui-content-tab-default-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ContentTabDefaultItem",
          "declaration": {
            "name": "ContentTabDefaultItem",
            "module": "src/components/content-tab/content-tab-default-item/content-tab-default-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-content-tab-default-item",
          "declaration": {
            "name": "ContentTabDefaultItem",
            "module": "src/components/content-tab/content-tab-default-item/content-tab-default-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/content-tab/content-tab-highlight-item/content-tab-highlight-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The content tab highlight item is a content tab item for any content.\nThe content tab highlight item is intended for usage in the content tab bar component.\n\nThe height of the item is 48px.\nThe width of the item is solely be depending on width of the given content.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=52930%3A120)\n- [Styleguide – Desktop](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---3.1?node-id=76949%3A367659)",
          "name": "ContentTabHighlightItem",
          "slots": [
            {
              "description": "Here you can insert your own icon. Size of them will set everytime automatically as 'm' 16x16px",
              "name": "icon"
            },
            {
              "description": "This is the slot for adding a skeleton instead of text. The Skeleton is only displayed when no text is set.",
              "name": "skeleton-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines one of two possible hierarchy level (first/second).",
              "attribute": "hierarchy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_isHover",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "holds state for simulating the hover effect.\nSee content-tab-default-item for an detailed description"
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleIconSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_setHover",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_removeHover",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines one of two possible hierarchy level (first/second).",
              "fieldName": "hierarchy"
            }
          ],
          "superclass": {
            "name": "ContentTabItemBase",
            "module": "/src/components/content-tab/content-tab-base.class"
          },
          "tagName": "zui-content-tab-highlight-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ContentTabHighlightItem",
          "declaration": {
            "name": "ContentTabHighlightItem",
            "module": "src/components/content-tab/content-tab-highlight-item/content-tab-highlight-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-content-tab-highlight-item",
          "declaration": {
            "name": "ContentTabHighlightItem",
            "module": "src/components/content-tab/content-tab-highlight-item/content-tab-highlight-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/content-tab/content-tab-image-item/content-tab-image-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-content-tab-image-item is a content tab item for any content, intended for usage in the content tab bar component.\nIt does not have an icon slot.\n\nThe height of the item is 48px.\nThe width of the item is solely depending on the width of the given content.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=52930%3A120)\n- [Styleguide – Desktop](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---3.1?node-id=76949%3A367659)",
          "name": "ContentTabImageItem",
          "slots": [
            {
              "description": "This is the slot for adding a skeleton instead of text. The Skeleton is only displayed when no text is set.",
              "name": "skeleton-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_isHover",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "holds state for simulating the hover effect.\nSee content-tab-default-item for an detailed description."
            },
            {
              "kind": "method",
              "name": "_setHover",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_removeHover",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "ContentTabItemBase",
            "module": "/src/components/content-tab/content-tab-base.class"
          },
          "tagName": "zui-content-tab-image-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ContentTabImageItem",
          "declaration": {
            "name": "ContentTabImageItem",
            "module": "src/components/content-tab/content-tab-image-item/content-tab-image-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-content-tab-image-item",
          "declaration": {
            "name": "ContentTabImageItem",
            "module": "src/components/content-tab/content-tab-image-item/content-tab-image-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/date-picker/date-picker.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The date picker component has three different types of integrated pickers (day, month, year).\nThe day picker is for selecting a date. The corresponding headers are for quick navigation and the selection of months and years.",
          "name": "DatePicker",
          "members": [
            {
              "kind": "field",
              "name": "currentDate",
              "default": "new Date()",
              "description": "current date for the current selected picker's date range",
              "attribute": "current-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabledDates",
              "type": {
                "text": "Date[]"
              },
              "default": "[]",
              "description": "disabled dates"
            },
            {
              "kind": "field",
              "name": "disabledMonths",
              "type": {
                "text": "Date[]"
              },
              "default": "[]",
              "description": "disabled months"
            },
            {
              "kind": "field",
              "name": "disabledYears",
              "type": {
                "text": "Date[]"
              },
              "default": "[]",
              "description": "disabled years"
            },
            {
              "kind": "field",
              "name": "disabledDaysOfWeek",
              "type": {
                "text": "DatePickerWeekdayEnum[]"
              },
              "default": "[]",
              "description": "disabled days of week",
              "attribute": "disabled-days-of-week",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "locale",
              "description": "Full locale code as defined in RFC 5646/BCP 47,\ni.e. \"en-US\".\n\nBy default, the first full locale in [navigator.languages](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages) is used.",
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "max date",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "min date",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedDate",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "selected date that is emphasized in the picker.",
              "attribute": "selected-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "weekStart",
              "type": {
                "text": "DatePickerWeekdayEnum"
              },
              "description": "optional weekstart that overrides the locale",
              "attribute": "week-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disableDayPicker",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "disabling the day picker, i.e. just allow setting month + year",
              "attribute": "disable-day-picker",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_defaultPickerStateMachine",
              "privacy": "private",
              "description": "this is the default, complete state machine for the normal picker, i.e. using day, month and year pickers"
            },
            {
              "kind": "field",
              "name": "_monthPickerStateMachine",
              "privacy": "private",
              "description": "state machine for just month and year pickers, i.e. without allowing to set the day"
            },
            {
              "kind": "field",
              "name": "_currentPickerMachine",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_pickerMachineService",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_pickerMachineState",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_previousStateValue",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "method",
              "name": "_handleStateEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PickerStateMachineEvents"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_pickerTemplates",
              "type": {
                "text": "TemplateResult | typeof nothing"
              },
              "privacy": "private"
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<DatePicker, 'DateSelectedEvent'>"
              },
              "description": "indicates that date is selected",
              "name": "date-picker-date-selected"
            },
            {
              "type": {
                "text": "GetZuiEvent<DatePicker, 'CurrentDateChangedEvent'>"
              },
              "description": "indicates that date was changed",
              "name": "date-picker-current-date-changed"
            }
          ],
          "attributes": [
            {
              "name": "current-date",
              "default": "new Date()",
              "description": "current date for the current selected picker's date range",
              "fieldName": "currentDate"
            },
            {
              "name": "disabled-days-of-week",
              "type": {
                "text": "DatePickerWeekdayEnum[]"
              },
              "default": "[]",
              "description": "disabled days of week",
              "fieldName": "disabledDaysOfWeek"
            },
            {
              "name": "locale",
              "description": "Full locale code as defined in RFC 5646/BCP 47,\ni.e. \"en-US\".\n\nBy default, the first full locale in [navigator.languages](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages) is used.",
              "fieldName": "locale"
            },
            {
              "name": "max",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "max date",
              "fieldName": "max"
            },
            {
              "name": "min",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "min date",
              "fieldName": "min"
            },
            {
              "name": "selected-date",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "selected date that is emphasized in the picker.",
              "fieldName": "selectedDate"
            },
            {
              "name": "week-start",
              "type": {
                "text": "DatePickerWeekdayEnum"
              },
              "description": "optional weekstart that overrides the locale",
              "fieldName": "weekStart"
            },
            {
              "name": "disable-day-picker",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "disabling the day picker, i.e. just allow setting month + year",
              "fieldName": "disableDayPicker"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/date-picker/date-picker/date-picker.component.ts"
          },
          "tagName": "zui-date-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DatePicker",
          "declaration": {
            "name": "DatePicker",
            "module": "src/components/date-picker/date-picker/date-picker.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-date-picker",
          "declaration": {
            "name": "DatePicker",
            "module": "src/components/date-picker/date-picker/date-picker.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/date-picker-day-picker/date-picker-day-picker.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The date picker day picker is a feature component that should be used inside the date picker component for selecting days.",
          "name": "DatePickerDayPicker",
          "members": [
            {
              "kind": "field",
              "name": "monthSelectDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the month select is disabled or not",
              "attribute": "month-select-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "max date",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_maxDateDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "min date",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_minDateDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabledDates",
              "type": {
                "text": "Date[]"
              },
              "default": "[]",
              "description": "disabled dates"
            },
            {
              "kind": "field",
              "name": "disabledMonths",
              "type": {
                "text": "Date[]"
              },
              "default": "[]",
              "description": "disabled months"
            },
            {
              "kind": "field",
              "name": "disabledYears",
              "type": {
                "text": "Date[]"
              },
              "default": "[]",
              "description": "disabled years"
            },
            {
              "kind": "field",
              "name": "disabledDaysOfWeek",
              "type": {
                "text": "DatePickerWeekdayEnum[]"
              },
              "default": "[]",
              "description": "disabled days of week",
              "attribute": "disabled-days-of-week",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "locale",
              "description": "locale",
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedDate",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "selected date",
              "attribute": "selected-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_selectedDateDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "currentDate",
              "default": "new Date()",
              "description": "current date",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "current-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_currentDateDT",
              "type": {
                "text": "DateTime"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "weekStart",
              "type": {
                "text": "DatePickerWeekdayEnum"
              },
              "description": "optional weekstart that overrides the locale",
              "attribute": "week-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_pickerGridCells",
              "type": {
                "text": "NodeListOf<PickerGridCell>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_pickerHeaderValue",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_gridCellDates",
              "type": {
                "text": "DateTime[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_headerCellData",
              "type": {
                "text": "HeaderCellTemplateData[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_disabledGridCellConditions",
              "type": {
                "text": "((date: DateTime) => boolean)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_gridCellFocusConditions",
              "type": {
                "text": "(() => boolean)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_gridCellSelectedConditions",
              "type": {
                "text": "((date: DateTime) => boolean)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_gridCellSubtleConditions",
              "type": {
                "text": "((date: DateTime) => boolean)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_isGridCellDisabled",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "DateTime"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_canFocusGridCell",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getGridCellEmphasis",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Emphasis"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "DateTime"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_headerCellTemplate",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_gridCellTemplate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_focusSelectedDate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleDaySelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "{\n    detail,\n  }",
                  "type": {
                    "text": "CustomEvent<{ selected: PickerGridCell; value: string }>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleMonthSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleNextMonthSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handlePreviousMonthSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleWeekdaySelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail }",
                  "type": {
                    "text": "CustomEvent<{ value: string }>"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "month-select-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the month select is disabled or not",
              "fieldName": "monthSelectDisabled"
            },
            {
              "name": "max",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "max date",
              "fieldName": "max"
            },
            {
              "name": "min",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "min date",
              "fieldName": "min"
            },
            {
              "name": "disabled-days-of-week",
              "type": {
                "text": "DatePickerWeekdayEnum[]"
              },
              "default": "[]",
              "description": "disabled days of week",
              "fieldName": "disabledDaysOfWeek"
            },
            {
              "name": "locale",
              "description": "locale",
              "fieldName": "locale"
            },
            {
              "name": "selected-date",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "selected date",
              "fieldName": "selectedDate"
            },
            {
              "name": "current-date",
              "default": "new Date()",
              "description": "current date",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "currentDate"
            },
            {
              "name": "week-start",
              "type": {
                "text": "DatePickerWeekdayEnum"
              },
              "description": "optional weekstart that overrides the locale",
              "fieldName": "weekStart"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/date-picker/date-picker-day-picker/date-picker-day-picker.component.ts"
          },
          "tagName": "zui-date-picker-day-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DatePickerDayPicker",
          "declaration": {
            "name": "DatePickerDayPicker",
            "module": "src/components/date-picker/date-picker-day-picker/date-picker-day-picker.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-date-picker-day-picker",
          "declaration": {
            "name": "DatePickerDayPicker",
            "module": "src/components/date-picker/date-picker-day-picker/date-picker-day-picker.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/date-picker-input/date-picker-input.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The date picker input shows an input with an interactive calendar icon.",
          "name": "DatePickerInput",
          "cssProperties": [
            {
              "description": "size of the input",
              "name": "--zui-date-picker-input-width"
            },
            {
              "description": "override default day input placeholder width that is optimized for DD",
              "name": "--zui-date-picker-input-day-placeholder-width"
            },
            {
              "description": "override default month input placeholder width that is optimized for MM",
              "name": "--zui-date-picker-input-month-placeholder-width"
            },
            {
              "description": "override default year input placeholder width that is optimized for YYYY",
              "name": "--zui-date-picker-input-year-placeholder-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "calendarOpened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the calendar is opened or not",
              "attribute": "calendar-opened",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inputPartDayValue",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "input part day value that is used when no selected value is present",
              "attribute": "input-part-day-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inputPartMonthValue",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "input part month value that is used when no selected value is present",
              "attribute": "input-part-month-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inputPartYearValue",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "input part year value that is used when no selected value is present",
              "attribute": "input-part-year-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the input is valid or not",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "locale",
              "description": "locale",
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholderDay",
              "type": {
                "text": "string"
              },
              "default": "'DD'",
              "description": "placeholder day",
              "attribute": "placeholder-day",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholderMonth",
              "type": {
                "text": "string"
              },
              "default": "'MM'",
              "description": "placeholder month",
              "attribute": "placeholder-month",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholderYear",
              "type": {
                "text": "string"
              },
              "default": "'YYYY'",
              "description": "placeholder year",
              "attribute": "placeholder-year",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedDate",
              "type": {
                "text": "Date | InvalidDate | null"
              },
              "default": "null",
              "description": "selected date",
              "attribute": "selected-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_selectedDateDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_dateTimeFormatParts",
              "type": {
                "text": "DatePickerInputDateTimeFormatPart[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputParts",
              "type": {
                "text": "DatePickerInputDateTimeFormatPart[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_validLiterals",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isValidNextElement",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleInputPartFocusNextEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<DatePickerInputPart>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleInputPartFocusPreviousEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<DatePickerInputPart>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleDatePickerInputPartFocusEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleDatePickerInputPartValueChangedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{\n    detail,\n  }",
                  "type": {
                    "text": "GetZuiEvent<DatePickerInputPart, 'ChangedEvent'>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleShowCalendar",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<DatePickerInput, 'CalendarSelectedEvent'>"
              },
              "description": "fired on calendar selection",
              "name": "date-picker-input-calendar-selected"
            },
            {
              "type": {
                "text": "GetZuiEvent<DatePickerInput, 'ChangedEvent'>"
              },
              "description": "emits date on input change",
              "name": "date-picker-input-changed"
            },
            {
              "type": {
                "text": "GetZuiEvent<DatePickerInput, 'FocusedEvent'>"
              },
              "description": "fires on input focus",
              "name": "date-picker-input-focused"
            }
          ],
          "attributes": [
            {
              "name": "calendar-opened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the calendar is opened or not",
              "fieldName": "calendarOpened"
            },
            {
              "name": "input-part-day-value",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "input part day value that is used when no selected value is present",
              "fieldName": "inputPartDayValue"
            },
            {
              "name": "input-part-month-value",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "input part month value that is used when no selected value is present",
              "fieldName": "inputPartMonthValue"
            },
            {
              "name": "input-part-year-value",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "input part year value that is used when no selected value is present",
              "fieldName": "inputPartYearValue"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the input is valid or not",
              "fieldName": "invalid"
            },
            {
              "name": "locale",
              "description": "locale",
              "fieldName": "locale"
            },
            {
              "name": "placeholder-day",
              "type": {
                "text": "string"
              },
              "default": "'DD'",
              "description": "placeholder day",
              "fieldName": "placeholderDay"
            },
            {
              "name": "placeholder-month",
              "type": {
                "text": "string"
              },
              "default": "'MM'",
              "description": "placeholder month",
              "fieldName": "placeholderMonth"
            },
            {
              "name": "placeholder-year",
              "type": {
                "text": "string"
              },
              "default": "'YYYY'",
              "description": "placeholder year",
              "fieldName": "placeholderYear"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "fieldName": "readonly"
            },
            {
              "name": "selected-date",
              "type": {
                "text": "Date | InvalidDate | null"
              },
              "default": "null",
              "description": "selected date",
              "fieldName": "selectedDate"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/date-picker/date-picker-input/date-picker-input.component.ts"
          },
          "tagName": "zui-date-picker-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DatePickerInput",
          "declaration": {
            "name": "DatePickerInput",
            "module": "src/components/date-picker/date-picker-input/date-picker-input.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-date-picker-input",
          "declaration": {
            "name": "DatePickerInput",
            "module": "src/components/date-picker/date-picker-input/date-picker-input.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/date-picker-input-part/date-picker-input-part.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The date picker input part is used inside the zui-date-picker-input for displaying the day, month or year.",
          "name": "DatePickerInputPart",
          "cssProperties": [
            {
              "description": "override input placeholder width",
              "name": "--zui-date-picker-input-part-placeholder-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "inputPartType",
              "type": {
                "text": "string"
              },
              "description": "type",
              "attribute": "input-part-type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "literals",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "description": "literals",
              "attribute": "literals",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "description": "max",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "description": "min",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "placeholder",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number | undefined"
              },
              "description": "value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showPlaceholder",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "_internalValue",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_userInteraction",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_maxCharacterLength",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_paddedValue",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleInputEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLInputElement, InputEvent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleUserCommitValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLInputElement, FocusEvent | KeyboardEvent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleBackspaceKeydownEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLInputElement, KeyboardEvent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleLiteralInputEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLInputElement, KeyboardEvent>"
                  },
                  "description": "KeyboardEvent"
                }
              ],
              "description": "if input is localized literal, emit focus next event"
            },
            {
              "kind": "method",
              "name": "_handleInputFocusEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleInputKeydownEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLInputElement, KeyboardEvent>"
                  },
                  "description": "KeyboardEvent"
                }
              ],
              "description": "Firefox allows alphabetic characters in the number input.\nWe prevent the input on those characters and only allow numbers, valid/standard literals and navigation keys."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "input-part-type",
              "type": {
                "text": "string"
              },
              "description": "type",
              "fieldName": "inputPartType"
            },
            {
              "name": "literals",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "description": "literals",
              "fieldName": "literals"
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "description": "max",
              "fieldName": "max"
            },
            {
              "name": "min",
              "type": {
                "text": "number"
              },
              "description": "min",
              "fieldName": "min"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string | undefined"
              },
              "description": "placeholder",
              "fieldName": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "fieldName": "readonly"
            },
            {
              "name": "value",
              "type": {
                "text": "number | undefined"
              },
              "description": "value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/date-picker/date-picker-input-part/date-picker-input-part.component.ts"
          },
          "tagName": "zui-date-picker-input-part",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DatePickerInputPart",
          "declaration": {
            "name": "DatePickerInputPart",
            "module": "src/components/date-picker/date-picker-input-part/date-picker-input-part.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-date-picker-input-part",
          "declaration": {
            "name": "DatePickerInputPart",
            "module": "src/components/date-picker/date-picker-input-part/date-picker-input-part.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/date-picker-input-part-month/date-picker-input-part-month.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `zui-date-picker-input-part-month` is part of the `zui-date-picker-input` and is not designed for single usage.",
          "name": "DatePickerInputPartMonth",
          "cssProperties": [
            {
              "description": "override input placeholder width",
              "name": "--zui-date-picker-input-part-month-placeholder-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "SEARCH_VALUE_RESET_TIMEOUT",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "1000"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "'MMM'",
              "description": "placeholder",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "months",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "description": "available months that can be chosen by the input.\nThese will usually be the localized months of the year.",
              "attribute": "months",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "currently selected index from the provided months.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_searchString",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_userInteraction",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_lastInputTimeStamp",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleSearchValueInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "character",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleSearchValueChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleInputFocusEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleDatePickerInputPartMonthKeydownEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLInputElement, KeyboardEvent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_resizeInputWidthOnValueChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "This method is used to dynamically size the input element based on its current value.\nWe need this because when used in the month-picker-input component we want to avoid dynamic space between this input and the next one.\nThis SO thread discusses this further and the provided solution seamed the most bulletproof to me:"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "'MMM'",
              "description": "placeholder",
              "fieldName": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "fieldName": "readonly"
            },
            {
              "name": "months",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "description": "available months that can be chosen by the input.\nThese will usually be the localized months of the year.",
              "fieldName": "months"
            },
            {
              "name": "value",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "currently selected index from the provided months.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/date-picker/date-picker-input-part-month/date-picker-input-part-month.component.ts"
          },
          "tagName": "zui-date-picker-input-part-month",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DatePickerInputPartMonth",
          "declaration": {
            "name": "DatePickerInputPartMonth",
            "module": "src/components/date-picker/date-picker-input-part-month/date-picker-input-part-month.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-date-picker-input-part-month",
          "declaration": {
            "name": "DatePickerInputPartMonth",
            "module": "src/components/date-picker/date-picker-input-part-month/date-picker-input-part-month.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/date-picker-month-picker/date-picker-month-picker.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The date picker month picker is a feature component that should be used inside the date picker component for selecting months.",
          "name": "DatePickerMonthPicker",
          "members": [
            {
              "kind": "field",
              "name": "yearSelectDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the year select is disabled or not",
              "attribute": "year-select-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabledMonths",
              "type": {
                "text": "Date[]"
              },
              "default": "[]",
              "description": "disabled months"
            },
            {
              "kind": "field",
              "name": "disabledYears",
              "type": {
                "text": "Date[]"
              },
              "default": "[]",
              "description": "disabled years"
            },
            {
              "kind": "field",
              "name": "locale",
              "description": "locale",
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "max date",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_maxDateDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "min date",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_minDateDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectedMonth",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "selected month",
              "attribute": "selected-month",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_selectedMonthDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "currentYear",
              "default": "new Date()",
              "description": "current year",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "current-year",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_currentYearDT",
              "type": {
                "text": "DateTime"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_pickerGridCells",
              "type": {
                "text": "NodeListOf<PickerGridCell>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_gridCellMonths",
              "type": {
                "text": "DateTime[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_disabledGridCellConditions",
              "type": {
                "text": "((date: DateTime) => boolean)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_gridCellFocusConditions",
              "type": {
                "text": "(() => boolean)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_gridCellSelectedConditions",
              "type": {
                "text": "((date: DateTime) => boolean)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_gridCellSubtleConditions",
              "type": {
                "text": "((date: DateTime) => boolean)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_isGridCellDisabled",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "DateTime"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_canFocusGridCell",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getGridCellEmphasis",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Emphasis"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "DateTime"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleMonthSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail }",
                  "type": {
                    "text": "CustomEvent<{ selected: PickerGridCell; value: string }>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleYearSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handlePreviousYearSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleNextYearSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateFocus",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "year-select-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the year select is disabled or not",
              "fieldName": "yearSelectDisabled"
            },
            {
              "name": "locale",
              "description": "locale",
              "fieldName": "locale"
            },
            {
              "name": "max",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "max date",
              "fieldName": "max"
            },
            {
              "name": "min",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "min date",
              "fieldName": "min"
            },
            {
              "name": "selected-month",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "selected month",
              "fieldName": "selectedMonth"
            },
            {
              "name": "current-year",
              "default": "new Date()",
              "description": "current year",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "currentYear"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/date-picker/date-picker-month-picker/date-picker-month-picker.component.ts"
          },
          "tagName": "zui-date-picker-month-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DatePickerMonthPicker",
          "declaration": {
            "name": "DatePickerMonthPicker",
            "module": "src/components/date-picker/date-picker-month-picker/date-picker-month-picker.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-date-picker-month-picker",
          "declaration": {
            "name": "DatePickerMonthPicker",
            "module": "src/components/date-picker/date-picker-month-picker/date-picker-month-picker.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/date-picker-year-picker/date-picker-year-picker.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The date picker year picker is a feature component that should be used inside the date picker component for selecting years.",
          "name": "DatePickerYearPicker",
          "members": [
            {
              "kind": "field",
              "name": "decadeSelectDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the decade select is disabled or not",
              "attribute": "decade-select-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabledYears",
              "type": {
                "text": "Date[]"
              },
              "default": "[]",
              "description": "disabled years"
            },
            {
              "kind": "field",
              "name": "locale",
              "description": "locale",
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "max date",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_maxDateDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "min date",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_minDateDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectedYear",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "selected year",
              "attribute": "selected-year",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_selectedYearDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "currentDecade",
              "type": {
                "text": "Date"
              },
              "description": "current decade",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "current-decade",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_currentDecadeDT",
              "type": {
                "text": "DateTime"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_pickerGridCells",
              "type": {
                "text": "NodeListOf<PickerGridCell>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_internalCurrentDecade",
              "type": {
                "text": "Date"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_gridCellYears",
              "type": {
                "text": "DateTime[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_headerValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "_disabledGridCellConditions",
              "type": {
                "text": "((date: DateTime) => boolean)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_gridCellFocusConditions",
              "type": {
                "text": "(() => boolean)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_gridCellSelectedConditions",
              "type": {
                "text": "((date: DateTime) => boolean)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_gridCellSubtleConditions",
              "type": {
                "text": "((date: DateTime) => boolean)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_isGridCellDisabled",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "DateTime"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_canFocusGridCell",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getGridCellEmphasis",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Emphasis"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "DateTime"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleYearSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail }",
                  "type": {
                    "text": "CustomEvent<{ selected: PickerGridCell; value: string }>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleDecadeSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleNextDecadeSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handlePreviousDecadeSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateFocus",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "decade-select-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the decade select is disabled or not",
              "fieldName": "decadeSelectDisabled"
            },
            {
              "name": "locale",
              "description": "locale",
              "fieldName": "locale"
            },
            {
              "name": "max",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "max date",
              "fieldName": "max"
            },
            {
              "name": "min",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "min date",
              "fieldName": "min"
            },
            {
              "name": "selected-year",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "selected year",
              "fieldName": "selectedYear"
            },
            {
              "name": "current-decade",
              "type": {
                "text": "Date"
              },
              "description": "current decade",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "currentDecade"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/date-picker/date-picker-year-picker/date-picker-year-picker.component.ts"
          },
          "tagName": "zui-date-picker-year-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DatePickerYearPicker",
          "declaration": {
            "name": "DatePickerYearPicker",
            "module": "src/components/date-picker/date-picker-year-picker/date-picker-year-picker.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-date-picker-year-picker",
          "declaration": {
            "name": "DatePickerYearPicker",
            "module": "src/components/date-picker/date-picker-year-picker/date-picker-year-picker.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/month-picker-input/month-picker-input.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The month picker input shows an input with an interactive calendar icon. The input allows to select a month and year.",
          "name": "MonthPickerInput",
          "cssProperties": [
            {
              "description": "size of the input",
              "name": "--zui-month-picker-input-width"
            },
            {
              "description": "override default month input placeholder width that is optimized for MM",
              "name": "--zui-month-picker-input-month-placeholder-width"
            },
            {
              "description": "override default year input placeholder width that is optimized for YYYY",
              "name": "--zui-month-picker-input-year-placeholder-width"
            },
            {
              "description": "sets some margin between in between the input parts",
              "name": "--zui-month-picker-input-parts-gap-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "calendarOpened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the calendar is opened or not",
              "attribute": "calendar-opened",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inputPartMonthValue",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "input part month value that is used when no selected value is present\nit is a luxon like month so 1-12 are valid values",
              "attribute": "input-part-month-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inputPartYearValue",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "input part year value that is used when no selected value is present",
              "attribute": "input-part-year-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the input is valid or not",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "locale",
              "description": "locale",
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholderMonth",
              "type": {
                "text": "string"
              },
              "default": "'MMM'",
              "description": "placeholder month",
              "attribute": "placeholder-month",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholderYear",
              "type": {
                "text": "string"
              },
              "default": "'YYYY'",
              "description": "placeholder year",
              "attribute": "placeholder-year",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedDate",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "The Date that is currently shown as seleted.",
              "attribute": "selected-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_selectedDateDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_orderedInputParts",
              "type": {
                "text": "['year', 'month'] | ['month', 'year']"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_currentMonthIndex",
              "type": {
                "text": "number | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isValidNextElement",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleInputPartFocusNextEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<DatePickersInputParts>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleInputPartFocusPreviousEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<DatePickersInputParts>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleDatePickerInputPartFocusEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleDatePickerInputPartValueChangedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{\n    detail,\n  }",
                  "type": {
                    "text": "GetZuiEvent<DatePickerInputPart, 'ChangedEvent'>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleDatePickerInputPartMonthValueChangedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{\n    detail,\n  }",
                  "type": {
                    "text": "GetZuiEvent<DatePickerInputPartMonth, 'ChangedEvent'>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleDateTimeValueChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "dateTimeValueChange",
                  "type": {
                    "text": "DateObject"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleShowCalendar",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getAllMonths",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "locales",
                  "optional": true,
                  "type": {
                    "text": "string | string[]"
                  },
                  "description": "locale that the months should be localized by"
                },
                {
                  "name": "format",
                  "default": "'short'",
                  "type": {
                    "text": "'long' | 'short'"
                  },
                  "description": "specifies if the full or abreviated name of the months should be returned"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MimickedInputEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<MonthPickerInput, 'CalendarSelectedEvent'>"
              },
              "description": "emits after the calendar icon has been pressed.",
              "name": "zui-month-picker-input-calendar-selected"
            },
            {
              "type": {
                "text": "GetZuiEvent<MonthPickerInput, 'ChangedEvent'>"
              },
              "description": "emits the input date after is has been changed and eventual errors with it.",
              "name": "zui-month-picker-input-changed"
            },
            {
              "type": {
                "text": "GetZuiEvent<MonthPickerInput, 'FocusedEvent'>"
              },
              "description": "emits if any part of the input has been focused.",
              "name": "zui-month-picker-input-focused"
            }
          ],
          "attributes": [
            {
              "name": "calendar-opened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the calendar is opened or not",
              "fieldName": "calendarOpened"
            },
            {
              "name": "input-part-month-value",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "input part month value that is used when no selected value is present\nit is a luxon like month so 1-12 are valid values",
              "fieldName": "inputPartMonthValue"
            },
            {
              "name": "input-part-year-value",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "input part year value that is used when no selected value is present",
              "fieldName": "inputPartYearValue"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the input is valid or not",
              "fieldName": "invalid"
            },
            {
              "name": "locale",
              "description": "locale",
              "fieldName": "locale"
            },
            {
              "name": "placeholder-month",
              "type": {
                "text": "string"
              },
              "default": "'MMM'",
              "description": "placeholder month",
              "fieldName": "placeholderMonth"
            },
            {
              "name": "placeholder-year",
              "type": {
                "text": "string"
              },
              "default": "'YYYY'",
              "description": "placeholder year",
              "fieldName": "placeholderYear"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "fieldName": "readonly"
            },
            {
              "name": "selected-date",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "The Date that is currently shown as seleted.",
              "fieldName": "selectedDate"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/date-picker/month-picker-input/month-picker-input.component.ts"
          },
          "tagName": "zui-month-picker-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MonthPickerInput",
          "declaration": {
            "name": "MonthPickerInput",
            "module": "src/components/date-picker/month-picker-input/month-picker-input.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-month-picker-input",
          "declaration": {
            "name": "MonthPickerInput",
            "module": "src/components/date-picker/month-picker-input/month-picker-input.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/textfield-date-picker/textfield-date-picker.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The textfield date picker component shows an input and opens the date picker when the interactive icon is selected.\n\n## Figma\n- [Desktop - Component Library - Text Field](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---2.7?node-id=384:64193)\n- [Desktop - Component Library - Date Picker](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=21190%3A191753)\n- [Styleguide – Desktop - Text Field](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=48826:397355)\n- [Styleguide – Desktop - Date Picker](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=6557%3A241082)",
          "name": "TextfieldDatePicker",
          "cssProperties": [
            {
              "description": "size of the input and the whole component - default width is 120px but also you can use percentages like 100%",
              "name": "--zui-textfield-date-picker-input-width"
            },
            {
              "description": "override default day input placeholder width that is optimized for DD",
              "name": "--zui-textfield-date-picker-day-placeholder-width"
            },
            {
              "description": "override default month input placeholder width that is optimized for MM",
              "name": "--zui-textfield-date-picker-month-placeholder-width"
            },
            {
              "description": "override default year input placeholder width that is optimized for YYYY",
              "name": "--zui-textfield-date-picker-year-placeholder-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "DISABLED_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'This date is not allowed.'"
            },
            {
              "kind": "field",
              "name": "INVALID_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'Please enter a valid date.'"
            },
            {
              "kind": "field",
              "name": "POPOVER_PLACEMENTS",
              "type": {
                "text": "Placement[]"
              },
              "privacy": "private",
              "static": true,
              "default": "['bottom-end', 'bottom-start']"
            },
            {
              "kind": "field",
              "name": "REQUIRED_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'A date is required.'"
            },
            {
              "kind": "field",
              "name": "closeOnDateSelected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the picker should be closed after date selection or not",
              "attribute": "close-on-date-selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabledDates",
              "type": {
                "text": "Date[]"
              },
              "default": "[]",
              "description": "disabled dates"
            },
            {
              "kind": "field",
              "name": "_disabledDatesDT",
              "type": {
                "text": "DateTime[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabledMonths",
              "type": {
                "text": "Date[]"
              },
              "default": "[]",
              "description": "disabled months"
            },
            {
              "kind": "field",
              "name": "_disabledMonthsDT",
              "type": {
                "text": "DateTime[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabledYears",
              "type": {
                "text": "Date[]"
              },
              "default": "[]",
              "description": "disabled years"
            },
            {
              "kind": "field",
              "name": "_disabledYearsDT",
              "type": {
                "text": "DateTime[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabledDaysOfWeek",
              "type": {
                "text": "DatePickerWeekdayEnum[]"
              },
              "default": "[]",
              "description": "disabled days of week",
              "attribute": "disabled-days-of-week",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "locale",
              "description": "Full locale code as defined in RFC 5646/BCP 47,\ni.e. \"en-US\".\n\nBy default, the first full locale in [navigator.languages](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages) is used.",
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "max date",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_maxDateDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "min date",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_minDateDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "placeholderDay",
              "type": {
                "text": "string"
              },
              "default": "'DD'",
              "description": "placeholder day",
              "attribute": "placeholder-day",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholderMonth",
              "type": {
                "text": "string"
              },
              "default": "'MM'",
              "description": "placeholder month",
              "attribute": "placeholder-month",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholderYear",
              "type": {
                "text": "string"
              },
              "default": "'YYYY'",
              "description": "placeholder year",
              "attribute": "placeholder-year",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "required",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showCalendar",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "show the calendar UI or not, defaults to false",
              "attribute": "show-calendar",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "Date | InvalidDate | null"
              },
              "default": "null",
              "description": "selected date value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_valueDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "currentDate",
              "type": {
                "text": "Date | null"
              },
              "description": "Sets the default pre-selected date for the zui-date-picker. Can also be null, if so other fallback values are used.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "description": "sets the current date for the zui-date-picker",
                  "name": "value"
                }
              ],
              "attribute": "current-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "weekStart",
              "type": {
                "text": "DatePickerWeekdayEnum"
              },
              "description": "optional weekstart that overrides the locale",
              "attribute": "week-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_textfieldDatePickerPopoverOverlayRef",
              "type": {
                "text": "OverlayDirective | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_textfieldDatePickerWarningMessageOverlayRef",
              "type": {
                "text": "OverlayDirective | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_internalDateTimeValue",
              "type": {
                "text": "Record<'day' | 'month' | 'year', number | null>"
              },
              "privacy": "private",
              "default": "{\n    day: null,\n    month: null,\n    year: null,\n  }"
            },
            {
              "kind": "field",
              "name": "_datePickerInput",
              "type": {
                "text": "DatePickerInput"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_currentDate",
              "type": {
                "text": "Date | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_datePickerPortal",
              "privacy": "private",
              "default": "`date-picker-overlay-${generateUid()}`"
            },
            {
              "kind": "field",
              "name": "_textfieldDatePickerResizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(() => {\n    requestAnimationFrame(() => {\n      this._textfieldDatePickerPopoverOverlayRef?.forcePositioning();\n      this._textfieldDatePickerWarningMessageOverlayRef?.forcePositioning();\n    });\n  })"
            },
            {
              "kind": "field",
              "name": "_disabledDateConditions",
              "type": {
                "text": "((date: DateTime) => boolean)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabledDateValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_invalidDateValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rangeOverflowValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rangeUnderflowValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_requiredDateValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_offset",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_datePickerPositionReference",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleOutsideClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputPartDayValue",
              "type": {
                "text": "number | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputPartMonthValue",
              "type": {
                "text": "number | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputPartYearValue",
              "type": {
                "text": "number | null"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleDatePickerInputCalendarSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleDatePickerInputChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{\n    detail: { value, error },\n  }",
                  "type": {
                    "text": "GetZuiEvent<DatePickerInput, 'ChangedEvent'>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleDatePickerInputFocused",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleDatePickerDateSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail: { value } }",
                  "type": {
                    "text": "GetZuiEvent<DatePicker, 'DateSelectedEvent'>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_messageAnchorReferenceCallback",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "validationMessageStyle",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "attribute": "validation-message-style",
              "reflects": true,
              "default": "component-anchored-tooltip",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidationOn",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "attribute": "show-validation-on",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "show-validation",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isPristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "this forces the validation message to be shown, if the control is invalid",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleBlurForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleInputForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<TextfieldDatePicker, 'DateSelectedEvent'>"
              },
              "description": "emits the selected day",
              "name": "zui-textfield-date-picker-date-selected"
            },
            {
              "description": "The event that fires when user has changed <code>value</code>",
              "name": "change"
            },
            {
              "description": "The event that fires when there has been any user input",
              "name": "input"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "close-on-date-selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the picker should be closed after date selection or not",
              "fieldName": "closeOnDateSelected"
            },
            {
              "name": "disabled-days-of-week",
              "type": {
                "text": "DatePickerWeekdayEnum[]"
              },
              "default": "[]",
              "description": "disabled days of week",
              "fieldName": "disabledDaysOfWeek"
            },
            {
              "name": "locale",
              "description": "Full locale code as defined in RFC 5646/BCP 47,\ni.e. \"en-US\".\n\nBy default, the first full locale in [navigator.languages](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages) is used.",
              "fieldName": "locale"
            },
            {
              "name": "max",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "max date",
              "fieldName": "max"
            },
            {
              "name": "min",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "min date",
              "fieldName": "min"
            },
            {
              "name": "placeholder-day",
              "type": {
                "text": "string"
              },
              "default": "'DD'",
              "description": "placeholder day",
              "fieldName": "placeholderDay"
            },
            {
              "name": "placeholder-month",
              "type": {
                "text": "string"
              },
              "default": "'MM'",
              "description": "placeholder month",
              "fieldName": "placeholderMonth"
            },
            {
              "name": "placeholder-year",
              "type": {
                "text": "string"
              },
              "default": "'YYYY'",
              "description": "placeholder year",
              "fieldName": "placeholderYear"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "required",
              "fieldName": "required"
            },
            {
              "name": "show-calendar",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "show the calendar UI or not, defaults to false",
              "fieldName": "showCalendar"
            },
            {
              "name": "value",
              "type": {
                "text": "Date | InvalidDate | null"
              },
              "default": "null",
              "description": "selected date value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "value"
            },
            {
              "name": "current-date",
              "type": {
                "text": "Date | null"
              },
              "description": "Sets the default pre-selected date for the zui-date-picker. Can also be null, if so other fallback values are used.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "description": "sets the current date for the zui-date-picker",
                  "name": "value"
                }
              ],
              "fieldName": "currentDate"
            },
            {
              "name": "week-start",
              "type": {
                "text": "DatePickerWeekdayEnum"
              },
              "description": "optional weekstart that overrides the locale",
              "fieldName": "weekStart"
            },
            {
              "name": "show-validation-on",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "resolveInitializer": {
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              },
              "fieldName": "showValidationOn",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "show-validation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "showValidation",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "validation-message-style",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "fieldName": "validationMessageStyle",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ValidationStyleMixin",
              "module": "/src/mixins/validation-style/validation-style.mixin"
            },
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/date-picker/textfield-date-picker/textfield-date-picker.component.ts"
          },
          "tagName": "zui-textfield-date-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TextfieldDatePicker",
          "declaration": {
            "name": "TextfieldDatePicker",
            "module": "src/components/date-picker/textfield-date-picker/textfield-date-picker.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-textfield-date-picker",
          "declaration": {
            "name": "TextfieldDatePicker",
            "module": "src/components/date-picker/textfield-date-picker/textfield-date-picker.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/textfield-month-picker/textfield-month-picker.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The textfield date picker month component shows an input and opens the date picker when the interactive icon is selected. In contrast to the textfield-date-picker it features a literal display\nof the months and only allows for a months selection.\n\n## Figma\n- [Desktop - Component Library - Text Field](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---2.6?node-id=21190%3A191753)\n- [Desktop - Component Library - Date Picker](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---2.7?node-id=384%3A64193)\n- [Styleguide – Desktop - Text Field](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=6557%3A241082)\n- [Styleguide – Desktop - Date Picker](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=48826%3A397355)",
          "name": "TextfieldMonthPicker",
          "cssProperties": [
            {
              "description": "size of the input - default width is 120px",
              "name": "--zui-textfield-month-picker-input-width"
            },
            {
              "description": "override default month input placeholder width that is optimized for MMM",
              "name": "--zui-textfield-month-picker-month-placeholder-width"
            },
            {
              "description": "override default year input placeholder width that is optimized for YYYY",
              "name": "--zui-textfield-month-picker-year-placeholder-width"
            },
            {
              "description": "sets some margin in between the input parts instead of literals",
              "name": "--zui-date-picker-month-input-parts-gap-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "DISABLED_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'This date is not allowed.'"
            },
            {
              "kind": "field",
              "name": "INVALID_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'Please enter a valid date.'"
            },
            {
              "kind": "field",
              "name": "POPOVER_PLACEMENTS",
              "type": {
                "text": "Placement[]"
              },
              "privacy": "private",
              "static": true,
              "default": "['bottom-end', 'bottom-start']"
            },
            {
              "kind": "field",
              "name": "REQUIRED_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'A date is required.'"
            },
            {
              "kind": "field",
              "name": "closeOnDateSelected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the picker should be closed after date selection or not",
              "attribute": "close-on-date-selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabledMonths",
              "type": {
                "text": "Date[]"
              },
              "default": "[]",
              "description": "disabled months"
            },
            {
              "kind": "field",
              "name": "_disabledMonthsDT",
              "type": {
                "text": "DateTime[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabledYears",
              "type": {
                "text": "Date[]"
              },
              "default": "[]",
              "description": "disabled years"
            },
            {
              "kind": "field",
              "name": "_disabledYearsDT",
              "type": {
                "text": "DateTime[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "locale",
              "description": "BCP 47 language tag, e.g. 'en-US'",
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "max date as an ISO 8601 date string\nthe start of the selected month must be before the specified max date.",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_maxDateDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "min date as an ISO 8601 date string\nthe start of the selected month must be after the specified min date",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_minDateDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "placeholderMonth",
              "type": {
                "text": "string"
              },
              "default": "'MMM'",
              "description": "placeholder month for input",
              "attribute": "placeholder-month",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholderYear",
              "type": {
                "text": "string"
              },
              "default": "'YYYY'",
              "description": "placeholder year for input",
              "attribute": "placeholder-year",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "required in form validation",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showCalendar",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "specifies if the date-picker should be displayed.",
              "attribute": "show-calendar",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "Date | InvalidDate | null"
              },
              "default": "null",
              "description": "selected date value of the control as an ISO 8601 date string.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_valueDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "currentDate",
              "type": {
                "text": "Date"
              },
              "description": "Sets the default pre-selected date for the zui-date-picker. Can also be null, if so other fallback values are used.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "description": "sets the current date for the zui-date-picker",
                  "name": "date"
                }
              ],
              "attribute": "current-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_textfieldMonthPickerPopoverOverlayRef",
              "type": {
                "text": "OverlayDirective | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_textfieldMonthPickerWarningMessageOverlayRef",
              "type": {
                "text": "OverlayDirective | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_internalDateTimeValue",
              "type": {
                "text": "Record<'month' | 'year', number | null>"
              },
              "privacy": "private",
              "default": "{\n    month: null,\n    year: null,\n  }",
              "description": "This state serves as a default fallback value if the current _valueDT is not set.\ne.g.: this internal value is set in an error case."
            },
            {
              "kind": "field",
              "name": "_monthPickerInput",
              "type": {
                "text": "MonthPickerInput"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_currentDate",
              "type": {
                "text": "Date | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_userInteraction",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_datePickerMonthPortal",
              "privacy": "private",
              "default": "`date-picker-overlay-${generateUid()}`"
            },
            {
              "kind": "field",
              "name": "_textfieldMonthPickerResizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(() => {\n    requestAnimationFrame(() => {\n      this._textfieldMonthPickerPopoverOverlayRef?.forcePositioning();\n      this._textfieldMonthPickerWarningMessageOverlayRef?.forcePositioning();\n    });\n  })"
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabledDateValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_invalidDateValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rangeOverflowValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rangeUnderflowValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_requiredDateValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_offset",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_monthPickerPositionReference",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleOutsideClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputPartMonthValue",
              "type": {
                "text": "number | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputPartYearValue",
              "type": {
                "text": "number | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showInvalidWarning",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleDatePickerInputCalendarSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleDatePickerInputChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{\n    detail: { value, error },\n  }",
                  "type": {
                    "text": "GetZuiEvent<MonthPickerInput, 'ChangedEvent'>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleDatePickerInputFocused",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleDatePickerDateSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail: { value } }",
                  "type": {
                    "text": "GetZuiEvent<DatePicker, 'DateSelectedEvent'>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_messageAnchorReferenceCallback",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "validationMessageStyle",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "attribute": "validation-message-style",
              "reflects": true,
              "default": "component-anchored-tooltip",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidationOn",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "attribute": "show-validation-on",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "show-validation",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isPristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "this forces the validation message to be shown, if the control is invalid",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleBlurForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleInputForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<TextfieldMonthPicker, 'DateSelectedEvent'>"
              },
              "description": "emits the date after a selection event.",
              "name": "zui-textfield-month-picker-date-selected"
            },
            {
              "description": "The change event is fired when the value of the zui-textfield-month-picker has changed",
              "name": "change"
            },
            {
              "description": "The input event is fired when the value of the zui-textfield-month-picker has received input",
              "name": "input"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "close-on-date-selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the picker should be closed after date selection or not",
              "fieldName": "closeOnDateSelected"
            },
            {
              "name": "locale",
              "description": "BCP 47 language tag, e.g. 'en-US'",
              "fieldName": "locale"
            },
            {
              "name": "max",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "max date as an ISO 8601 date string\nthe start of the selected month must be before the specified max date.",
              "fieldName": "max"
            },
            {
              "name": "min",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "min date as an ISO 8601 date string\nthe start of the selected month must be after the specified min date",
              "fieldName": "min"
            },
            {
              "name": "placeholder-month",
              "type": {
                "text": "string"
              },
              "default": "'MMM'",
              "description": "placeholder month for input",
              "fieldName": "placeholderMonth"
            },
            {
              "name": "placeholder-year",
              "type": {
                "text": "string"
              },
              "default": "'YYYY'",
              "description": "placeholder year for input",
              "fieldName": "placeholderYear"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "required in form validation",
              "fieldName": "required"
            },
            {
              "name": "show-calendar",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "specifies if the date-picker should be displayed.",
              "fieldName": "showCalendar"
            },
            {
              "name": "value",
              "type": {
                "text": "Date | InvalidDate | null"
              },
              "default": "null",
              "description": "selected date value of the control as an ISO 8601 date string.",
              "fieldName": "value"
            },
            {
              "name": "current-date",
              "type": {
                "text": "Date"
              },
              "description": "Sets the default pre-selected date for the zui-date-picker. Can also be null, if so other fallback values are used.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "description": "sets the current date for the zui-date-picker",
                  "name": "date"
                }
              ],
              "fieldName": "currentDate"
            },
            {
              "name": "show-validation-on",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "resolveInitializer": {
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              },
              "fieldName": "showValidationOn",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "show-validation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "showValidation",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "validation-message-style",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "fieldName": "validationMessageStyle",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ValidationStyleMixin",
              "module": "/src/mixins/validation-style/validation-style.mixin"
            },
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/date-picker/textfield-month-picker/textfield-month-picker.component.ts"
          },
          "tagName": "zui-textfield-month-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TextfieldMonthPicker",
          "declaration": {
            "name": "TextfieldMonthPicker",
            "module": "src/components/date-picker/textfield-month-picker/textfield-month-picker.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-textfield-month-picker",
          "declaration": {
            "name": "TextfieldMonthPicker",
            "module": "src/components/date-picker/textfield-month-picker/textfield-month-picker.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ewiq-dialog/ewiq-dialog/ewiq-dialog.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-ewiq-dialog is the current dialog component, providing top border coloring and an additional icon to\nshow the different states. It wraps headline-, description-, question and arbitrary sub components and slots, which can be used to offer\nadditional information, as well as a footer slot to align the button container.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13603%3A181749)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=39755%3A336102)",
          "name": "EwiqDialog",
          "slots": [
            {
              "description": "This is the default slot. It's an innerHtml of the zui-ewiq-dialog element",
              "name": "default"
            },
            {
              "description": "This is slot for the header text. It's an innerHtml of the zui-ewiq-dialog element",
              "name": "headerText"
            },
            {
              "description": "This is the slot for the question. It's an innerHtml of the zui-ewiq-dialog element",
              "name": "questionText"
            },
            {
              "description": "This is the slot for the optional arbitrary content. It's an innerHtml of the zui-ewiq-dialog element",
              "name": "arbitrary"
            },
            {
              "description": "This is the slot for the question. It's an innerHtml of the zui-ewiq-dialog element",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "iconSet",
              "type": {
                "text": "IconSetName"
              },
              "default": "'common'",
              "description": "IconSet of the ewiq dialog, it determinates which IconSet is used.",
              "attribute": "icon-set",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "EwiState"
              },
              "default": "'warning'",
              "description": "State of the ewiq dialog, it determinates which color the top border of this component has.\nThe default value is 'info' which colors the top border blue",
              "attribute": "state",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'dialog'",
              "description": "ARIA role for this element; defaults to 'dialog' if not explicitly set by author",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "string"
              },
              "default": "'0'",
              "description": "tabindex for this element; defaults to '0' if not explicitly set by author",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "TemplateResult"
              },
              "description": "Returns the state mapped icon tag with the needed attributes"
            },
            {
              "kind": "field",
              "name": "_taggedDifferentiableElements",
              "type": {
                "text": "NodeListOf<HTMLElement>"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_keyboardActive",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_differentiableElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "description": "Convenient getter to retrieve the target elements",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addFocusListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_removeFocusListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateFocusAttributes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "onElement",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusInEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusOutEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKeyDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleMouseDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleGlobalKeyDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleGlobalMouseDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "privacy": "protected",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "icon-set",
              "type": {
                "text": "IconSetName"
              },
              "default": "'common'",
              "description": "IconSet of the ewiq dialog, it determinates which IconSet is used.",
              "fieldName": "iconSet"
            },
            {
              "name": "state",
              "type": {
                "text": "EwiState"
              },
              "default": "'warning'",
              "description": "State of the ewiq dialog, it determinates which color the top border of this component has.\nThe default value is 'info' which colors the top border blue",
              "fieldName": "state"
            },
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'dialog'",
              "description": "ARIA role for this element; defaults to 'dialog' if not explicitly set by author",
              "fieldName": "role"
            },
            {
              "name": "tabindex",
              "type": {
                "text": "string"
              },
              "default": "'0'",
              "description": "tabindex for this element; defaults to '0' if not explicitly set by author",
              "fieldName": "tabindex"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusDifferentiationMixin",
              "module": "/src/mixins/visual-focus/focus-differentiation.mixin"
            },
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-ewiq-dialog",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EwiqDialog",
          "declaration": {
            "name": "EwiqDialog",
            "module": "src/components/ewiq-dialog/ewiq-dialog/ewiq-dialog.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-ewiq-dialog",
          "declaration": {
            "name": "EwiqDialog",
            "module": "src/components/ewiq-dialog/ewiq-dialog/ewiq-dialog.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ewiq-dialog/ewiq-dialog-buttons/ewiq-dialog-buttons.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The button container holds the dialog buttons",
          "name": "EwiqDialogButtons",
          "slots": [
            {
              "description": "Slot for the primary buttons",
              "name": "primary"
            },
            {
              "description": "Slot for the secondary buttons",
              "name": "secondary"
            },
            {
              "description": "This is the default slot for default buttons",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "description": "ARIA role for this element; defaults to 'button' if not explicitly set by author",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "primaryPosition",
              "type": {
                "text": "PrimaryButtonPosition"
              },
              "default": "'auto'",
              "description": "this defines the position of the primary button",
              "attribute": "primary-position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_defaultSlotElements",
              "type": {
                "text": "[DialogButton]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedPrimaryDialogButtons",
              "type": {
                "text": "[DialogButton]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedSecondaryDialogButtons",
              "type": {
                "text": "[DialogButton]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_alignButtonsInColumns",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_primaryExists",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_secondaryExists",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rowReverse",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_allButtons",
              "type": {
                "text": "DialogButton[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_primarySlotChangeHandler",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_secondarySlotChangeHandler",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_defaultSlotChangeHandler",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "description": "ARIA role for this element; defaults to 'button' if not explicitly set by author",
              "fieldName": "role"
            },
            {
              "name": "primary-position",
              "type": {
                "text": "PrimaryButtonPosition"
              },
              "default": "'auto'",
              "description": "this defines the position of the primary button",
              "fieldName": "primaryPosition"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-ewiq-dialog-buttons",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EwiqDialogButtons",
          "declaration": {
            "name": "EwiqDialogButtons",
            "module": "src/components/ewiq-dialog/ewiq-dialog-buttons/ewiq-dialog-buttons.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-ewiq-dialog-buttons",
          "declaration": {
            "name": "EwiqDialogButtons",
            "module": "src/components/ewiq-dialog/ewiq-dialog-buttons/ewiq-dialog-buttons.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ewiq-dialog/ewiq-dialog-content/ewiq-dialog-content.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This represents a very simple content box component, which is used in other components, e.g. EwiqDialog.\nIt provides a pre-styled span container with a default slot.",
          "name": "EwiqDialogContent",
          "slots": [
            {
              "description": "This is the default slot, to keep the content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_taggedDifferentiableElements",
              "type": {
                "text": "NodeListOf<HTMLElement>"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_keyboardActive",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_differentiableElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "description": "Convenient getter to retrieve the target elements",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addFocusListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_removeFocusListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateFocusAttributes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "onElement",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusInEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusOutEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKeyDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleMouseDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleGlobalKeyDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleGlobalMouseDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusDifferentiationMixin",
              "module": "/src/mixins/visual-focus/focus-differentiation.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-ewiq-dialog-content",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EwiqDialogContent",
          "declaration": {
            "name": "EwiqDialogContent",
            "module": "src/components/ewiq-dialog/ewiq-dialog-content/ewiq-dialog-content.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-ewiq-dialog-content",
          "declaration": {
            "name": "EwiqDialogContent",
            "module": "src/components/ewiq-dialog/ewiq-dialog-content/ewiq-dialog-content.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ewiq-dialog/ewiq-dialog-description/ewiq-dialog-description.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This represents a very simple description component, which is used in other components, e.g. EwiqDialog. It provides a default slot,\nwhich is wrapped in a zui-styled div container",
          "name": "EwiqDialogDescription",
          "slots": [
            {
              "description": "This is the default slot to be used for the description text",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The tabindex of the zui-ewiq-dialog-description",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "useSafety",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether or not to use the safety styling",
              "attribute": "use-safety",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_taggedDifferentiableElements",
              "type": {
                "text": "NodeListOf<HTMLElement>"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_keyboardActive",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_differentiableElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "description": "Convenient getter to retrieve the target elements",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addFocusListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_removeFocusListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateFocusAttributes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "onElement",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusInEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusOutEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKeyDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleMouseDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleGlobalKeyDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleGlobalMouseDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The tabindex of the zui-ewiq-dialog-description",
              "fieldName": "tabindex"
            },
            {
              "name": "use-safety",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether or not to use the safety styling",
              "fieldName": "useSafety"
            }
          ],
          "mixins": [
            {
              "name": "FocusDifferentiationMixin",
              "module": "/src/mixins/visual-focus/focus-differentiation.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-ewiq-dialog-description",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EwiqDialogDescription",
          "declaration": {
            "name": "EwiqDialogDescription",
            "module": "src/components/ewiq-dialog/ewiq-dialog-description/ewiq-dialog-description.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-ewiq-dialog-description",
          "declaration": {
            "name": "EwiqDialogDescription",
            "module": "src/components/ewiq-dialog/ewiq-dialog-description/ewiq-dialog-description.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ewiq-dialog/ewiq-dialog-headline/ewiq-dialog-headline.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This represents a very simple headline component, which is used in other components, e.g. EwiqDialog. It provides a default slot,\nwhich is wrapped in a zui-styled h1 tags",
          "name": "EwiqDialogHeadline",
          "slots": [
            {
              "description": "This is the default slot to be used for the headline text",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'heading'",
              "description": "ARIA role for this element; defaults to 'heading' if not explicitly set by author",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_taggedDifferentiableElements",
              "type": {
                "text": "NodeListOf<HTMLElement>"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_keyboardActive",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_differentiableElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "description": "Convenient getter to retrieve the target elements",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addFocusListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_removeFocusListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateFocusAttributes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "onElement",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusInEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusOutEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKeyDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleMouseDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleGlobalKeyDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleGlobalMouseDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'heading'",
              "description": "ARIA role for this element; defaults to 'heading' if not explicitly set by author",
              "fieldName": "role"
            }
          ],
          "mixins": [
            {
              "name": "FocusDifferentiationMixin",
              "module": "/src/mixins/visual-focus/focus-differentiation.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-ewiq-dialog-headline",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EwiqDialogHeadline",
          "declaration": {
            "name": "EwiqDialogHeadline",
            "module": "src/components/ewiq-dialog/ewiq-dialog-headline/ewiq-dialog-headline.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-ewiq-dialog-headline",
          "declaration": {
            "name": "EwiqDialogHeadline",
            "module": "src/components/ewiq-dialog/ewiq-dialog-headline/ewiq-dialog-headline.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ewiq-dialog/ewiq-dialog-question/ewiq-dialog-question.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This represents a very simple question text component, which is used in other components, e.g. EwiqDialog. It provides a default slot,\nwhich is wrapped in a zui-styled span tags",
          "name": "EwiqDialogQuestion",
          "slots": [
            {
              "description": "This is the default slot to be used for the question text",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_taggedDifferentiableElements",
              "type": {
                "text": "NodeListOf<HTMLElement>"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_keyboardActive",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_differentiableElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "description": "Convenient getter to retrieve the target elements",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addFocusListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_removeFocusListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateFocusAttributes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "onElement",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusInEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusOutEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKeyDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleMouseDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleGlobalKeyDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleGlobalMouseDownEvent",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FocusDifferentiationMixin",
                "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusDifferentiationMixin",
              "module": "/src/mixins/visual-focus/focus-differentiation.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-ewiq-dialog-question",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EwiqDialogQuestion",
          "declaration": {
            "name": "EwiqDialogQuestion",
            "module": "src/components/ewiq-dialog/ewiq-dialog-question/ewiq-dialog-question.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-ewiq-dialog-question",
          "declaration": {
            "name": "EwiqDialogQuestion",
            "module": "src/components/ewiq-dialog/ewiq-dialog-question/ewiq-dialog-question.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/examples/example-focus-delegation/example-focus-delegation.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ExampleFocusDelegation",
          "members": [
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "tabindex",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "disabled",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "tabindex",
              "fieldName": "tabindex"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "disabled",
              "fieldName": "disabled"
            }
          ],
          "mixins": [
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-example-focus-delegation",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ExampleFocusDelegation",
          "declaration": {
            "name": "ExampleFocusDelegation",
            "module": "src/components/examples/example-focus-delegation/example-focus-delegation.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-example-focus-delegation",
          "declaration": {
            "name": "ExampleFocusDelegation",
            "module": "src/components/examples/example-focus-delegation/example-focus-delegation.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/examples/example-form-component/example-form-control.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ExampleFormControl",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "setting the value",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "a non-emptyish ('', null, undefined) is required",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_inputRef",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "EventWithTarget<HTMLInputElement>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, unknown>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "setting the value",
              "fieldName": "value"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "a non-emptyish ('', null, undefined) is required",
              "fieldName": "required"
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-example-form-control",
          "customElement": true,
          "events": [
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ExampleFormControl",
          "declaration": {
            "name": "ExampleFormControl",
            "module": "src/components/examples/example-form-component/example-form-control.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-example-form-control",
          "declaration": {
            "name": "ExampleFormControl",
            "module": "src/components/examples/example-form-component/example-form-control.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/examples/example-theming-fonts/example-local-font.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ExampleLocalFont",
          "members": [
            {
              "kind": "field",
              "name": "slotShadowed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "slot-shadowed",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "slot-shadowed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "slotShadowed"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-example-local-font",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ExampleLocalFont",
          "declaration": {
            "name": "ExampleLocalFont",
            "module": "src/components/examples/example-theming-fonts/example-local-font.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-example-local-font",
          "declaration": {
            "name": "ExampleLocalFont",
            "module": "src/components/examples/example-theming-fonts/example-local-font.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/headerbar/headerbar/headerbar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Headerbar component is displayed at the top of the page.\n\n## Figma\n- [Web - Component Library](https://www.figma.com/file/z4fyXFOJCpuaNImx3K234n/❖-04-Web---Component-Library---1.4?node-id=1%3A12)\n- [Styleguide – Web](https://www.figma.com/file/6dkjypErYWQPfuRBD58Aey/%F0%9F%93%96--Styleguide---Web?node-id=3279%3A57420&viewport=279%2C103%2C0.15313252806663513)",
          "name": "Headerbar",
          "slots": [
            {
              "description": "slot for an icon",
              "name": "icon"
            },
            {
              "description": "slot for a product name",
              "name": "productName"
            },
            {
              "description": "slot for a searchbar",
              "name": "searchbar"
            },
            {
              "description": "slot for icon buttons",
              "name": "iconButtons"
            },
            {
              "description": "slot for a user menu button",
              "name": "userMenuButton"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "media",
              "description": "Headerbar media",
              "attribute": "media",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showSearchbar",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether to show or hide the searchbar",
              "attribute": "show-searchbar",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "string"
              },
              "default": "'light'",
              "description": "currently there is no dark theme for the headerbar! it should be always displayed with theme light!",
              "privacy": "private",
              "attribute": "theme",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_hasSearchbar",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_width",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_widthRight",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_maxOfRightWidth",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rightAlignedContentElement",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedSearchbar",
              "type": {
                "text": "Searchbar[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedUserMenuButtons",
              "type": {
                "text": "UserMenuButton[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isMediaLargerSmall",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_maxRightWidth",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_leftAlignedWidth",
              "type": {
                "text": "'max-width' | 'width'"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_maxLeftWidth",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showSearchbar",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showProductName",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_headerbarResizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(([{ contentRect }]) => {\n    requestAnimationFrame(() => {\n      this._width = contentRect.width;\n      this.media = getBreakpointForWidth(contentRect.width);\n    });\n  })"
            },
            {
              "kind": "field",
              "name": "_rightAlignedContentResizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(([{ contentRect }]) => {\n    requestAnimationFrame(() => {\n      this._widthRight = contentRect.width;\n    });\n  })"
            },
            {
              "kind": "method",
              "name": "_handleHeaderbarSearchbarIconSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleHeaderbarSearchbarSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateUserMenuButtonAvatarOnly",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<Headerbar, 'SearchbarIconSelectedEvent'>"
              },
              "description": "The headerbar-searchbar-icon-selected event is fired when the search button that is only visible for resolutions lower than 1024px is clicked",
              "name": "zui-headerbar-searchbar-icon-selected"
            }
          ],
          "attributes": [
            {
              "name": "media",
              "description": "Headerbar media",
              "fieldName": "media"
            },
            {
              "name": "show-searchbar",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether to show or hide the searchbar",
              "fieldName": "showSearchbar"
            },
            {
              "name": "theme",
              "type": {
                "text": "string"
              },
              "default": "'light'",
              "description": "currently there is no dark theme for the headerbar! it should be always displayed with theme light!",
              "fieldName": "theme"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/headerbar/headerbar/headerbar.component.ts"
          },
          "tagName": "zui-headerbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Headerbar",
          "declaration": {
            "name": "Headerbar",
            "module": "src/components/headerbar/headerbar/headerbar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-headerbar",
          "declaration": {
            "name": "Headerbar",
            "module": "src/components/headerbar/headerbar/headerbar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/headerbar/headerbar-icon-button/headerbar-icon-button.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "HeaderbarIconButton component displays a slotted icon.",
          "name": "HeaderbarIconButton",
          "slots": [
            {
              "description": "Slot for an icon",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Emphasis of the IconButton",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "default": "undefined",
              "description": "Aria label of the IconButton button",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Size of the IconButton",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateIconSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleIconSlotchange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Emphasis of the IconButton",
              "fieldName": "emphasis"
            },
            {
              "name": "label",
              "default": "undefined",
              "description": "Aria label of the IconButton button",
              "resolveInitializer": {
                "module": "src/components/headerbar/headerbar-icon-button/headerbar-icon-button.component.ts"
              },
              "fieldName": "label"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Size of the IconButton",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-headerbar-icon-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HeaderbarIconButton",
          "declaration": {
            "name": "HeaderbarIconButton",
            "module": "src/components/headerbar/headerbar-icon-button/headerbar-icon-button.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-headerbar-icon-button",
          "declaration": {
            "name": "HeaderbarIconButton",
            "module": "src/components/headerbar/headerbar-icon-button/headerbar-icon-button.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/headerbar/headerbar-product-name/headerbar-product-name.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-headerbar-product-name is a sub component of the headerbar which can show a product name and a product sub name.",
          "name": "HeaderbarProductName",
          "members": [
            {
              "kind": "field",
              "name": "productName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the product name",
              "attribute": "product-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "productSubName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the product sub name",
              "attribute": "product-sub-name",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "product-name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the product name",
              "fieldName": "productName"
            },
            {
              "name": "product-sub-name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines the product sub name",
              "fieldName": "productSubName"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-headerbar-product-name",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HeaderbarProductName",
          "declaration": {
            "name": "HeaderbarProductName",
            "module": "src/components/headerbar/headerbar-product-name/headerbar-product-name.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-headerbar-product-name",
          "declaration": {
            "name": "HeaderbarProductName",
            "module": "src/components/headerbar/headerbar-product-name/headerbar-product-name.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/headerbar/headerbar-notification-button/headerbar-notification-button.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "HeaderbarNotificationButton component displays a slotted icon and a slotted state dot. The state dot is shown when the `has-notifications` attribute is set.",
          "name": "HeaderbarNotificationButton",
          "slots": [
            {
              "description": "Slot for an icon",
              "name": "icon"
            },
            {
              "description": "Slot for a state dot",
              "name": "stateDot"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Emphasis of the HeaderbarNotificationButton",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hasNotifications",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show the state dot or not",
              "attribute": "has-notifications",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Size of the HeaderbarNotificationButton",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedStateDots",
              "type": {
                "text": "StateDot[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleStateDotSlotchange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Emphasis of the HeaderbarNotificationButton",
              "fieldName": "emphasis"
            },
            {
              "name": "has-notifications",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show the state dot or not",
              "fieldName": "hasNotifications"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Size of the HeaderbarNotificationButton",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-headerbar-notification-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HeaderbarNotificationButton",
          "declaration": {
            "name": "HeaderbarNotificationButton",
            "module": "src/components/headerbar/headerbar-notification-button/headerbar-notification-button.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-headerbar-notification-button",
          "declaration": {
            "name": "HeaderbarNotificationButton",
            "module": "src/components/headerbar/headerbar-notification-button/headerbar-notification-button.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/list-accordion/list-accordion.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "List accordion.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=76932%3A367574)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=1%3A102403)",
          "name": "ListAccordion",
          "cssProperties": [
            {
              "description": "size of the accordion content, is set automatically",
              "name": "--zui-list-accordion-content-height"
            },
            {
              "description": "duration of the toggle animation",
              "name": "--zui-list-accordion-content-visibility-transition-duration"
            },
            {
              "description": "duration of the icon animation",
              "name": "--zui-list-accordion-icon-arrow-rotation-duration"
            }
          ],
          "slots": [
            {
              "description": "default slot for list items",
              "name": ""
            },
            {
              "description": "This is the slot for adding a skeleton instead of header text. The Skeleton is only displayed when no header text is set.",
              "name": "skeleton-header-text"
            },
            {
              "description": "This is the slot for adding a skeleton instead of second line text. The Skeleton is only displayed when no second line text is set.",
              "name": "skeleton-second-line-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "nonInteractive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Turns the list accordion into a non interactive state in which it can only get opened and closed programmatically.",
              "attribute": "non-interactive",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headerText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "header text",
              "attribute": "header-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "secondLineText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "second line text",
              "attribute": "second-line-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the accordion is open or not",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "ListAccordionSize"
              },
              "default": "'m'",
              "description": "Defines one of two possible size values ('m'/'l')",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "topLine",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether to show the top line or not",
              "attribute": "top-line",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "optional value that is also emitted on open change for identification",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "emphasis",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_headerTextRef",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_secondLineTextRef",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_iconPosition",
              "type": {
                "text": "ListAccordionIconPosition"
              },
              "privacy": "private",
              "default": "'right'"
            },
            {
              "kind": "field",
              "name": "_listAccordionContentHeight",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_isTruncated",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_listAccordionHeader",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedListAccordionItems",
              "type": {
                "text": "ListAccordionItem[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_iconPositionRightMaxWidth",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "560"
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(\n    // TODO: this should not be async\n    async ([\n      {\n        contentRect: { width },\n      },\n    ]) => {\n      requestAnimationFrame(() => {\n        if (hasElementAnyDimensions(this)) {\n          this._checkTruncation();\n        }\n        this._iconPosition = width <= this._iconPositionRightMaxWidth ? 'right' : 'left';\n      });\n    }\n  )"
            },
            {
              "kind": "method",
              "name": "_checkTruncation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_listAccordionIconTemplate",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "_nextListAccordion",
              "type": {
                "text": "ListAccordion | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_tooltipText",
              "type": {
                "text": "TemplateResult"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleListAccordionItemSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleListAccordionOpenToggle",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<ListAccordion, 'OpenChangedEvent'>"
              },
              "description": "emits when the open state has changed",
              "name": "zui-list-accordion-open-changed"
            }
          ],
          "attributes": [
            {
              "name": "non-interactive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Turns the list accordion into a non interactive state in which it can only get opened and closed programmatically.",
              "fieldName": "nonInteractive"
            },
            {
              "name": "header-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "header text",
              "fieldName": "headerText"
            },
            {
              "name": "second-line-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "second line text",
              "fieldName": "secondLineText"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the accordion is open or not",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "open"
            },
            {
              "name": "size",
              "type": {
                "text": "ListAccordionSize"
              },
              "default": "'m'",
              "description": "Defines one of two possible size values ('m'/'l')",
              "fieldName": "size"
            },
            {
              "name": "top-line",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether to show the top line or not",
              "fieldName": "topLine"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "optional value that is also emitted on open change for identification",
              "fieldName": "value"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "emphasis",
              "fieldName": "emphasis"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/list/list-accordion/list-accordion.component.ts"
          },
          "tagName": "zui-list-accordion",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListAccordion",
          "declaration": {
            "name": "ListAccordion",
            "module": "src/components/list/list-accordion/list-accordion.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-list-accordion",
          "declaration": {
            "name": "ListAccordion",
            "module": "src/components/list/list-accordion/list-accordion.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/list/list.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The list container represents a list of items.\n\nWe are currently working on skeleton components which can be used with ZUi components.\nFor now create yourself custom skeletons and put them as normal items into the zui-list.\n\n## Figma\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=13761%3A0)",
          "name": "List",
          "slots": [
            {
              "description": "This is the default slot. It's an innerHtml of the list-element",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines the hierarchy for this list.",
              "attribute": "hierarchy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the list is read-only or not.\nA read-only list contains items without interaction states.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "integrated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the list is integrated or not.\nA list that is integrated but not read-only contains integrated items.\nA list that is neither integrated nor read-only contains standalone items.",
              "attribute": "integrated",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines one of five possible sizes ('xs' / 's' / 'm' / 'l' / 'xl');\nThis size will also be applied to each list item.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_listItems",
              "type": {
                "text": "ListItem[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_propagateProperties",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_slotChangeHandler",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines the hierarchy for this list.",
              "fieldName": "hierarchy"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the list is read-only or not.\nA read-only list contains items without interaction states.",
              "fieldName": "readonly"
            },
            {
              "name": "integrated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the list is integrated or not.\nA list that is integrated but not read-only contains integrated items.\nA list that is neither integrated nor read-only contains standalone items.",
              "fieldName": "integrated"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines one of five possible sizes ('xs' / 's' / 'm' / 'l' / 'xl');\nThis size will also be applied to each list item.",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-list",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "List",
          "declaration": {
            "name": "List",
            "module": "src/components/list/list/list.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-list",
          "declaration": {
            "name": "List",
            "module": "src/components/list/list/list.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/list-accordion-item/list-accordion-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A list accordion item is meant to be used inside the list accordion.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=76932%3A367574)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=1%3A102403)",
          "name": "ListAccordionItem",
          "cssProperties": [
            {
              "description": "override default primary text indent of 48px",
              "name": "--zui-list-accordion-item-indent"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "emphasis",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "primaryText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "primary text",
              "attribute": "primary-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "size",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_listAccordionItem",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "emphasis",
              "fieldName": "emphasis"
            },
            {
              "name": "primary-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "primary text",
              "fieldName": "primaryText"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "size",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-list-accordion-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListAccordionItem",
          "declaration": {
            "name": "ListAccordionItem",
            "module": "src/components/list/list-accordion-item/list-accordion-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-list-accordion-item",
          "declaration": {
            "name": "ListAccordionItem",
            "module": "src/components/list/list-accordion-item/list-accordion-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/list-item/list-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "ListItem is used to represent an item in a list.\nIt must be contained in a parent element: list, tree-list or accordion control.\n\n## Figma\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=13761%3A0)\n\n## Skeleton\nThe Skeleton components can be added to the named skeleton slot and will be displayed when **nothing** is in the default slot.\nWhen the skeleton is not displayed make sure there are no spaces or line breaks passed in the default slot.",
          "name": "ListItem",
          "slots": [
            {
              "description": "This is the default slot. It's an innerHtml of the ListItem-element",
              "name": ""
            },
            {
              "description": "This is the slot for adding a skeleton instead of text content. The Skeleton is only displayed when the default slot is empty.",
              "name": "skeleton"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emhpasis"
              },
              "default": "'default'",
              "description": "Defines the emphasis for this list item.",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines the hierarchy for this list item.",
              "attribute": "hierarchy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the item is read-only or not.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "integrated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the item is integrated or not.",
              "attribute": "integrated",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines one of five possible sizes ('xs' / 's' / 'm' / 'l' / 'xl')",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "custom",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the item is custom or not.",
              "attribute": "custom",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emhpasis"
              },
              "default": "'default'",
              "description": "Defines the emphasis for this list item.",
              "fieldName": "emphasis"
            },
            {
              "name": "hierarchy",
              "type": {
                "text": "Hierarchy"
              },
              "default": "'first'",
              "description": "Defines the hierarchy for this list item.",
              "fieldName": "hierarchy"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the item is read-only or not.",
              "fieldName": "readonly"
            },
            {
              "name": "integrated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the item is integrated or not.",
              "fieldName": "integrated"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Defines one of five possible sizes ('xs' / 's' / 'm' / 'l' / 'xl')",
              "fieldName": "size"
            },
            {
              "name": "custom",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the item is custom or not.",
              "fieldName": "custom"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-list-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListItem",
          "declaration": {
            "name": "ListItem",
            "module": "src/components/list/list-item/list-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-list-item",
          "declaration": {
            "name": "ListItem",
            "module": "src/components/list/list-item/list-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu/menu/menu.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This UI component visualizes the menu used e.g. by a select component. It will be positioned from the outside and\nwill be given its items through the default slot as well, leaving it with being responsible for looking pretty and\nreflecting disabled states, item sizes and the amount visible before being cut off. It's used internally by the\n`zui-select` feature component to group available menu items and dividers.\n\n## Functionality\nIf disabled, **all nested items will be disabled as well**. Also, the given size will be applied to them.\nThe count property allows defining the amount of visible items before being cut off from the scrollable overflow.\nAs it only sets a custom CSS property internally.\n\n## Width\nThe default width of the menu _and its items_ is `100%`, so it always scales to the width of its layout container.\nAlternatively a fixed width can be given as [CSS length](https://developer.mozilla.org/en-US/docs/Web/CSS/length).\nIf the `adapt-width` property is set, this will be ignored, as the menu scales to its widest item width.",
          "name": "Menu",
          "cssProperties": [
            {
              "description": "color of the menu background, derived from emphasis attribute by default",
              "name": "--zui-menu-background"
            },
            {
              "description": "sets the border color of the menu",
              "name": "--zui-menu-border-color"
            },
            {
              "description": "sets the corner radius of the menu",
              "name": "--zui-menu-border-radius"
            },
            {
              "description": "maximum item count visible, is set automatically",
              "name": "--zui-menu-item-count"
            },
            {
              "description": "sets the top offset of the menu",
              "name": "--zui-menu-margin-top"
            },
            {
              "description": "allows setting explicit sizes, defaults to 100%",
              "name": "--zui-menu-width"
            }
          ],
          "slots": [
            {
              "description": "default slot for projecting menu items and dividers",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tabindex of the menu;\ndefaults to 0 allowing keyboard navigation with cursor keys",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "ariaActiveDescendant",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "ARIA activedescendant for this element; defaults to ''",
              "attribute": "aria-activedescendant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'menu'",
              "description": "enforces the \"role\" attribute for a11y reasons",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "count",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "description": "** deprecated ** amount of visible items before being cut off.\nThe property will be removed, then you should only use css property to set the number of visible menu items (--zui-menu-item-count)",
              "deprecated": "true",
              "attribute": "count",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "adaptWidth",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "disables truncation and scales the menu to its items",
              "attribute": "adapt-width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "sets an emphasis for the menu, **not the nested items**",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overflow",
              "type": {
                "text": "Overflow"
              },
              "default": "'truncate'",
              "description": "defines the overflow strategy of the menu items if the width is not\nsufficient to either be truncated with three dots or to be scrollable",
              "attribute": "overflow",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "Placement"
              },
              "default": "'bottom-start'",
              "description": "affects the animation and drop shadow placement",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "description": "defines the size _for all items_ as well",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scrollableBackground",
              "type": {
                "text": "ScrollableDirective['background']"
              },
              "default": "'hidden'",
              "description": "**deprecated** allows customizing the scrollbar background settings\nThe property will be removed, as there won't be any background options",
              "deprecated": "true",
              "attribute": "scrollable-background",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scrollableHitarea",
              "type": {
                "text": "ScrollableDirective['hitarea']"
              },
              "default": "'enlarged'",
              "description": "**deprecated** allows customizing the scrollbar hitarea settings\nThe property will be removed, as the hitarea now has a fixed size",
              "deprecated": "true",
              "attribute": "scrollable-hitarea",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_itemRefs",
              "type": {
                "text": "MenuItem[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_propagateDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_propagateProps",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleKeys",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target: currentMenuItem, code }",
                  "type": {
                    "text": "EventWithTarget<MenuItem, KeyboardEvent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getPreviousMenuItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "MenuItem"
                }
              },
              "parameters": [
                {
                  "name": "from",
                  "type": {
                    "text": "MenuItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getNextMenuItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "MenuItem"
                }
              },
              "parameters": [
                {
                  "name": "from",
                  "type": {
                    "text": "MenuItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setActiveMenuItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "menuItem",
                  "type": {
                    "text": "MenuItem | undefined | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tabindex of the menu;\ndefaults to 0 allowing keyboard navigation with cursor keys",
              "fieldName": "tabindex"
            },
            {
              "name": "aria-activedescendant",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "ARIA activedescendant for this element; defaults to ''",
              "fieldName": "ariaActiveDescendant"
            },
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'menu'",
              "description": "enforces the \"role\" attribute for a11y reasons",
              "fieldName": "role"
            },
            {
              "name": "count",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "description": "** deprecated ** amount of visible items before being cut off.\nThe property will be removed, then you should only use css property to set the number of visible menu items (--zui-menu-item-count)",
              "deprecated": "true",
              "resolveInitializer": {
                "module": "src/components/menu/menu/menu.component.ts"
              },
              "fieldName": "count"
            },
            {
              "name": "adapt-width",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "disables truncation and scales the menu to its items",
              "fieldName": "adaptWidth"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "sets an emphasis for the menu, **not the nested items**",
              "fieldName": "emphasis"
            },
            {
              "name": "overflow",
              "type": {
                "text": "Overflow"
              },
              "default": "'truncate'",
              "description": "defines the overflow strategy of the menu items if the width is not\nsufficient to either be truncated with three dots or to be scrollable",
              "fieldName": "overflow"
            },
            {
              "name": "placement",
              "type": {
                "text": "Placement"
              },
              "default": "'bottom-start'",
              "description": "affects the animation and drop shadow placement",
              "fieldName": "placement"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "description": "defines the size _for all items_ as well",
              "fieldName": "size"
            },
            {
              "name": "scrollable-background",
              "type": {
                "text": "ScrollableDirective['background']"
              },
              "default": "'hidden'",
              "description": "**deprecated** allows customizing the scrollbar background settings\nThe property will be removed, as there won't be any background options",
              "deprecated": "true",
              "fieldName": "scrollableBackground"
            },
            {
              "name": "scrollable-hitarea",
              "type": {
                "text": "ScrollableDirective['hitarea']"
              },
              "default": "'enlarged'",
              "description": "**deprecated** allows customizing the scrollbar hitarea settings\nThe property will be removed, as the hitarea now has a fixed size",
              "deprecated": "true",
              "fieldName": "scrollableHitarea"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Menu",
          "declaration": {
            "name": "Menu",
            "module": "src/components/menu/menu/menu.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-menu",
          "declaration": {
            "name": "Menu",
            "module": "src/components/menu/menu/menu.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu/menu-animation/menu-animation.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This element brings animations to an projected overlay menu which presentation can be toggled.\nIt manages the open and close animations and notifies about those processes.",
          "name": "MenuAnimation",
          "cssProperties": [
            {
              "description": "duration of the menu toggle animation",
              "name": "--zui-menu-animation-duration"
            }
          ],
          "slots": [
            {
              "description": "default slot for the wrapped zui-menu",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Either show or hide the menu, triggers animations.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_running",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_handleAnimationEnd",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "description": "broadcasts if menu starts opening",
              "name": "menu-animation-transition-end"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Either show or hide the menu, triggers animations.",
              "fieldName": "open"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/menu/menu-animation/menu-animation.component.ts"
          },
          "tagName": "zui-menu-animation",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenuAnimation",
          "declaration": {
            "name": "MenuAnimation",
            "module": "src/components/menu/menu-animation/menu-animation.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-menu-animation",
          "declaration": {
            "name": "MenuAnimation",
            "module": "src/components/menu/menu-animation/menu-animation.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu/menu-divider/menu-divider.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A UI component mainly being used by the `zui-select` feature component internally. It encapsulates all styling purposes of the menu\ndivider feature, which can be used declaratively passing `zui-select-divider`.\n\n## Functionality\nIt internally checks for a projected label through the default slot and sets a flag accordingly. Also, it cuts off labels which are\ntoo long using three d...",
          "name": "MenuDivider",
          "cssProperties": [
            {
              "description": "color of the divider label",
              "name": "--zui-menu-divider-color"
            },
            {
              "description": "overall height of the divider",
              "name": "--zui-menu-divider-height"
            },
            {
              "description": "color of the divider line",
              "name": "--zui-menu-divider-line-color"
            },
            {
              "description": "minimum height of the line to be enforced even without label",
              "name": "--zui-menu-divider-line-height"
            },
            {
              "description": "offset from to label if necessary",
              "name": "--zui-menu-divider-line-padding"
            }
          ],
          "slots": [
            {
              "description": "default slot to provide an optional divider label",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasLabel",
              "type": {
                "text": "boolean"
              },
              "description": "internal property reflecting in attribute used for styling",
              "privacy": "private",
              "attribute": "has-label",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_checkHasLabel",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "EventWithTarget<HTMLSlotElement>"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "has-label",
              "type": {
                "text": "boolean"
              },
              "description": "internal property reflecting in attribute used for styling",
              "fieldName": "hasLabel"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-menu-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenuDivider",
          "declaration": {
            "name": "MenuDivider",
            "module": "src/components/menu/menu-divider/menu-divider.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-menu-divider",
          "declaration": {
            "name": "MenuDivider",
            "module": "src/components/menu/menu-divider/menu-divider.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu/menu-item/menu-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Internal UI component for menu items. It is primarily used by the `zui-select` feature component and mostly encapsulates\nstyling concerns and not that much logic.\n\n## Functionality\nDisplays a checkbox if marked as `selectable`, replacing eventually passed-in icons.\nIt reflects its aligned size to optionally projected icons.\n\n## Checkbox usage\nCurrently, the checkbox's `value` state is intended to be set declaratively by the menu-items `selected` state. The checkbox's `value` is *not* reflected back to the menu-item's `selected` state.\nSo, to implement the `<zui-menu-item selectable>` correctly, you have to listen to its `click` event and manually update its `selected` state in some way.",
          "name": "MenuItem",
          "cssProperties": [
            {
              "description": "color of the item background, derived from emphasis attribute by default",
              "name": "--zui-menu-item-background"
            },
            {
              "description": "color of the item typo, derived from emphasis attribute by default",
              "name": "--zui-menu-item-color"
            },
            {
              "description": "**deprecated** - has been deprecated and will be removed in the next major release! Please set the font on the host directly",
              "name": "--zui-menu-item-font"
            },
            {
              "description": "size of the item, derived from size attribute by default",
              "name": "--zui-menu-item-height"
            }
          ],
          "slots": [
            {
              "description": "default slot for an item label",
              "name": ""
            },
            {
              "description": "allows optionally passing an icon which may be replaced by a checkbox if flagged as `selectable`",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "description": "the tabindex of the menuItem;\ndefaults to -1, because keyboardNavigation is done imperatively",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "a right aligned description or hint",
              "attribute": "description",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_slottedNodes",
              "type": {
                "text": "Node[]"
              },
              "privacy": "private",
              "description": "Selects the default slot element"
            },
            {
              "kind": "method",
              "name": "_updateIconSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleKeyDownEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ code }",
                  "type": {
                    "text": "EventWithTarget<Element, KeyboardEvent>"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "(and other native ui events like `hover`, `focus`, ..) - *except* it is `disabled` (`pointer-events: none`)",
              "name": "click"
            }
          ],
          "attributes": [
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "description": "the tabindex of the menuItem;\ndefaults to -1, because keyboardNavigation is done imperatively",
              "fieldName": "tabindex"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "a right aligned description or hint",
              "fieldName": "description"
            }
          ],
          "superclass": {
            "name": "MenuItemBase",
            "module": "/src/components/menu/menu-item-base.class"
          },
          "tagName": "zui-menu-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenuItem",
          "declaration": {
            "name": "MenuItem",
            "module": "src/components/menu/menu-item/menu-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-menu-item",
          "declaration": {
            "name": "MenuItem",
            "module": "src/components/menu/menu-item/menu-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu/menu-wrapper/menu-wrapper.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This element wraps the zui-menu and enriches and presents it as an overlay with animation.\nRelevant custom properties for the animation are applied to the projected content.\nKeep in mind that custom properties are not inherited by the projected content.\nThey need to be applied manually via the style attribute.",
          "name": "MenuWrapper",
          "slots": [
            {
              "description": "default slot for the zui-menu",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "MENU_DEFAULT_PLACEMENTS",
              "type": {
                "text": "Placement[]"
              },
              "privacy": "private",
              "static": true,
              "default": "['bottom-start', 'bottom-end', 'top-start', 'top-end']"
            },
            {
              "kind": "field",
              "name": "MENU_PORTAL",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'menu'"
            },
            {
              "kind": "field",
              "name": "animationDuration",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "The animation duration for the ease in/out animation of the menu in ms.",
              "attribute": "animation-duration",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "getPositionReference",
              "type": {
                "text": "() => HTMLElement"
              },
              "description": "Callback that returns the element the menu is bound to.",
              "attribute": "getPositionReference",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "level",
              "type": {
                "text": "number | undefined"
              },
              "description": "An optional level to be used if the portal is created dynamically.",
              "attribute": "level",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Either show or hide the menu, triggers animations.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPlacements",
              "type": {
                "text": "Placement[]"
              },
              "description": "Allowed placements of the select menu.\nMultiple values can be provided as comma separated list.\nThe first setting will be applied initially, which defaults to `bottom-start`.",
              "attribute": "menu-placements",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "portal",
              "default": "`${MenuWrapper.MENU_PORTAL}-${generateUid()}`",
              "description": "The destination overlay name is passed through.",
              "attribute": "portal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_isMenuClosing",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Is true if the menu is currently in an closing animation.\nIt is currently set as an property to apply CSS.",
              "attribute": "is-menu-closing",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_handleTransitionEnd",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Side-effects once the closing animation has terminated"
            },
            {
              "kind": "field",
              "name": "_menuAnimationDurationStyle",
              "type": {
                "text": "StyleInfo"
              },
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "broadcasts if menu starts opening",
              "name": "menu-wrapper-open"
            },
            {
              "description": "broadcasts if menu is fully opened",
              "name": "menu-wrapper-opened"
            },
            {
              "description": "notifies about menu closing",
              "name": "menu-wrapper-close"
            },
            {
              "description": "notifies about menu being completely closed",
              "name": "menu-wrapper-closed"
            },
            {
              "description": "if another element than the projected zui-menu has been clicked",
              "name": "menu-wrapper-outside-click"
            }
          ],
          "attributes": [
            {
              "name": "animation-duration",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "The animation duration for the ease in/out animation of the menu in ms.",
              "fieldName": "animationDuration"
            },
            {
              "name": "getPositionReference",
              "type": {
                "text": "() => HTMLElement"
              },
              "description": "Callback that returns the element the menu is bound to.",
              "fieldName": "getPositionReference"
            },
            {
              "name": "level",
              "type": {
                "text": "number | undefined"
              },
              "description": "An optional level to be used if the portal is created dynamically.",
              "fieldName": "level"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Either show or hide the menu, triggers animations.",
              "fieldName": "open"
            },
            {
              "name": "menu-placements",
              "type": {
                "text": "Placement[]"
              },
              "description": "Allowed placements of the select menu.\nMultiple values can be provided as comma separated list.\nThe first setting will be applied initially, which defaults to `bottom-start`.",
              "fieldName": "overlayPlacements"
            },
            {
              "name": "portal",
              "default": "`${MenuWrapper.MENU_PORTAL}-${generateUid()}`",
              "description": "The destination overlay name is passed through.",
              "fieldName": "portal"
            },
            {
              "name": "is-menu-closing",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Is true if the menu is currently in an closing animation.\nIt is currently set as an property to apply CSS.",
              "fieldName": "_isMenuClosing"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/menu/menu-wrapper/menu-wrapper.component.ts"
          },
          "tagName": "zui-menu-wrapper",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenuWrapper",
          "declaration": {
            "name": "MenuWrapper",
            "module": "src/components/menu/menu-wrapper/menu-wrapper.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-menu-wrapper",
          "declaration": {
            "name": "MenuWrapper",
            "module": "src/components/menu/menu-wrapper/menu-wrapper.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu-tab-bar/menu-tab-bar/menu-tab-bar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Menu tab bar.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---3.2?node-id=36634%3A0)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=52930%3A120)",
          "name": "MenuTabBar",
          "slots": [
            {
              "description": "default slot for `zui-menu-tab-text-item`'s or `zui-menu-tab-icon-item`'s",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "MenuTabTextItem['size']"
              },
              "default": "'m'",
              "description": "set size of `zui-menu-tab-text-item`'s; `zui-menu-tab-icon-item`'s always default to size 'm'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "value of the slected `zui-menu-tab-text-item` or `zui-menu-tab-icon-item`",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedMenuTabIconItems",
              "type": {
                "text": "MenuTabIconItem[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedMenuTabTextItems",
              "type": {
                "text": "MenuTabTextItem[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_propagateMenuTabBarSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_propagateMenuTabBarValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleMenuTabItemSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "EventWithTarget<MenuTabIconItem | MenuTabTextItem>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleMenuTabItemSlotchange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<MenuTabBar, 'SelectionChangedEvent'>"
              },
              "description": "emits when an item is selected",
              "name": "zui-menu-tab-bar-selection-changed"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "MenuTabTextItem['size']"
              },
              "default": "'m'",
              "description": "set size of `zui-menu-tab-text-item`'s; `zui-menu-tab-icon-item`'s always default to size 'm'",
              "fieldName": "size"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "value of the slected `zui-menu-tab-text-item` or `zui-menu-tab-icon-item`",
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/menu-tab-bar/menu-tab-bar/menu-tab-bar.component.ts"
          },
          "tagName": "zui-menu-tab-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenuTabBar",
          "declaration": {
            "name": "MenuTabBar",
            "module": "src/components/menu-tab-bar/menu-tab-bar/menu-tab-bar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-menu-tab-bar",
          "declaration": {
            "name": "MenuTabBar",
            "module": "src/components/menu-tab-bar/menu-tab-bar/menu-tab-bar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu-tab-bar/menu-tab-icon-item/menu-tab-icon-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A menu tab icon item is meant to be used inside the menu tab bar.",
          "name": "MenuTabIconItem",
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emhpasis"
              },
              "default": "'default'",
              "description": "emphasis of the `zui-menu-tab-icon-item` (default/selected)",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "the value that is used inside the `zui-menu-tab-bar` to set the current selected `zui-menu-tab-icon-item` emphasis to selected",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleMenuTabIconItemSlotchange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emhpasis"
              },
              "default": "'default'",
              "description": "emphasis of the `zui-menu-tab-icon-item` (default/selected)",
              "fieldName": "emphasis"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "the value that is used inside the `zui-menu-tab-bar` to set the current selected `zui-menu-tab-icon-item` emphasis to selected",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-menu-tab-icon-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenuTabIconItem",
          "declaration": {
            "name": "MenuTabIconItem",
            "module": "src/components/menu-tab-bar/menu-tab-icon-item/menu-tab-icon-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-menu-tab-icon-item",
          "declaration": {
            "name": "MenuTabIconItem",
            "module": "src/components/menu-tab-bar/menu-tab-icon-item/menu-tab-icon-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu-tab-bar/menu-tab-text-item/menu-tab-text-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A menu tab text item is meant to be used inside the menu tab bar.",
          "name": "MenuTabTextItem",
          "cssProperties": [
            {
              "description": "override default heights defined by size s or m",
              "name": "--zui-menu-tab-text-item-height"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emhpasis"
              },
              "default": "'default'",
              "description": "emphasis of the `zui-menu-tab-text-item` (default/selected)",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "content that is displayed inside the tab text item",
              "attribute": "text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "size",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "the value that is used inside the `zui-menu-tab-bar` to set the current selected `zui-menu-tab-text-item` emphasis to selected",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emhpasis"
              },
              "default": "'default'",
              "description": "emphasis of the `zui-menu-tab-text-item` (default/selected)",
              "fieldName": "emphasis"
            },
            {
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "content that is displayed inside the tab text item",
              "fieldName": "text"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "size",
              "fieldName": "size"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "the value that is used inside the `zui-menu-tab-bar` to set the current selected `zui-menu-tab-text-item` emphasis to selected",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-menu-tab-text-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenuTabTextItem",
          "declaration": {
            "name": "MenuTabTextItem",
            "module": "src/components/menu-tab-bar/menu-tab-text-item/menu-tab-text-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-menu-tab-text-item",
          "declaration": {
            "name": "MenuTabTextItem",
            "module": "src/components/menu-tab-bar/menu-tab-text-item/menu-tab-text-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menubar/menubar/menubar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The menubar is used to show a sidebar menu for navigation.\nIt's the wrapper component for several components like `zui-menubar-item`, `zui-menubar-nav-item` and\n`zui-menubar-divider` that can be used to construct the menubar.\n\nThe Menubar can be \"expandable\" which means that there will be a button on the bottom of the menubar that can be\nclicked to expand or collapse the menubar. When the menubar is expanded, both icons and labels of menubar-items will\nbe visible, while in collapsed state only the icon is visible.\n\nThe Menubar will show an additional toggle button at the bottom, if the menu bar items exceed the height of the\nmenubar. Clicking on the toggle button will open / close the more menu. Items in the more menu are always expanded.\n\nThe Menubar provides dividers for grouped menu bar items or menu bar nav items. The dividers are added to these\nitems, whenever they belong to a different group than the previous item.\n\nThe \"emphasis\" attribute works a bit different compared to other ZUi Web components.\nThe menubar itself doesn't have a different styling based on the emphasis.\nHowever, if an item is \"selected\" (by clicking it), this item will get the emphasis set. So the \"emphasis\" attribute\nof the menubar defines the emphasis of the selected menubar item. It is important to understand, that you may not to\nset the emphasis on the actual items by yourself. This is done only by the menubar wrapper component!\n\nTo \"preselect\" and item, use the \"selected\" attribute of the menubar.\nTo listen for changes of the selected item done by the user, listen to \"zui-menubar-selected\" event on the menubar.\nThe height of the menu bar has to be set via --zui-menubar-height.\n\n!Important! The menubar items need to have a unique value, otherwise the menubar will break.\n\n## Figma\n- [Web - Component\nLibrary](https://www.figma.com/file/z4fyXFOJCpuaNImx3K234n/❖-04-Web---Component-Library---1.4?node-id=59%3A8556)\n- [Styleguide -\nWeb](https://www.figma.com/file/6dkjypErYWQPfuRBD58Aey/%F0%9F%93%96--Styleguide---Web?node-id=139%3A1467&viewport=279%2C103%2C0.15313252806663513)",
          "name": "Menubar",
          "cssProperties": [
            {
              "description": "color of the menubar backgroun, derived from variant attribute by default",
              "name": "--zui-menubar-background-color"
            },
            {
              "description": "sets the overall width of the opened menubar explicitly",
              "name": "--zui-menubar-opened-width"
            },
            {
              "description": "sets the overall width of the menubar explicitly",
              "name": "--zui-menubar-width"
            },
            {
              "description": "sets the overall height of the menubar explicitly",
              "name": "--zui-menubar-height"
            },
            {
              "description": "sets the width for the expanded menu bar",
              "name": "--zui-menubar-opened-width"
            },
            {
              "description": "sets the maximum number of items in the more menu",
              "name": "--zui-menubar-more-menu-max-items"
            }
          ],
          "slots": [
            {
              "description": "This is the default slot, accepting elements implementing the menubar-item behavior",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "MENUBAR_ITEM_HEIGHT",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "64"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "Value of the selected menu bar item",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "VariantType"
              },
              "default": "'primary'",
              "description": "Variant of the menu bar",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Emphasis of the menu bar. This will be propagated to the currently selected menubar item.",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expandable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Expandable state of the menu bar",
              "attribute": "expandable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Opened state of the menu bar",
              "attribute": "opened",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autoClose",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the expanded state is set to false on navigate",
              "attribute": "auto-close",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "moreMenuLabel",
              "type": {
                "text": "string"
              },
              "default": "'More'",
              "description": "Label of the more menu toggle button",
              "attribute": "more-menu-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_moreMenuToggleButton",
              "type": {
                "text": "MenubarNavItem | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_menuBarToggleButton",
              "type": {
                "text": "HTMLButtonElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_moreMenuWrapper",
              "type": {
                "text": "ScrollableDirective"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedMenubarItems",
              "type": {
                "text": "(MenubarItem | MenubarNavItem)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedMoreMenuMenubarItems",
              "type": {
                "text": "(MenubarItem | MenubarNavItem)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_moreMenuOpened",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_showMoreMenu",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_propagateDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_popperInstance",
              "type": {
                "text": "PopperInstance | undefined"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_selectedMoreMenuItem",
              "type": {
                "text": "MenubarItem | MenubarNavItem | undefined"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_heightObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private",
              "default": "new ResizeObserver(() => {\n    if (hasElementAnyDimensions(this)) {\n      this._updateMenuItems();\n    }\n    // popper does not know about any resize changes and thus we have to manually force an update\n    this._popperInstance?.forceUpdate();\n  })",
              "description": "Resize Observer which triggers reloading when the height of the list gets changed"
            },
            {
              "kind": "field",
              "name": "_handleOutsideClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_lastHighestOrder",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_maxMenuItems",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_allMenubarItems",
              "type": {
                "text": "(MenubarItem | MenubarNavItem)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_propagateValues",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateMenuItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_moveToMoreMenu",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "menuItem",
                  "type": {
                    "text": "MenubarItem | MenubarNavItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_removeFromMoreMenu",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "menuItem",
                  "type": {
                    "text": "MenubarItem | MenubarNavItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleMoreMenuItemClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target: selectedMenuItem }",
                  "type": {
                    "text": "EventWithTarget<MenubarNavItem | MenubarItem>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleMoreMenuAnimationEnd",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleMenubarItemSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail: { value } }",
                  "type": {
                    "text": "GetZuiEvent<MenubarItemBase, 'SelectedEvent'>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleToggleMenubar",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleToggleMoreMenu",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_attachOrRemovePopper",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "toElement",
                  "type": {
                    "text": "Element | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<Menubar, 'SelectedEvent'>"
              },
              "description": "event that is dispatched if a menubar item is selected",
              "name": "zui-menubar-selected"
            }
          ],
          "attributes": [
            {
              "name": "selected",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "Value of the selected menu bar item",
              "fieldName": "selected"
            },
            {
              "name": "variant",
              "type": {
                "text": "VariantType"
              },
              "default": "'primary'",
              "description": "Variant of the menu bar",
              "fieldName": "variant"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Emphasis of the menu bar. This will be propagated to the currently selected menubar item.",
              "fieldName": "emphasis"
            },
            {
              "name": "expandable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Expandable state of the menu bar",
              "fieldName": "expandable"
            },
            {
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Opened state of the menu bar",
              "fieldName": "opened"
            },
            {
              "name": "auto-close",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the expanded state is set to false on navigate",
              "fieldName": "autoClose"
            },
            {
              "name": "more-menu-label",
              "type": {
                "text": "string"
              },
              "default": "'More'",
              "description": "Label of the more menu toggle button",
              "fieldName": "moreMenuLabel"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/menubar/menubar/menubar.component.ts"
          },
          "tagName": "zui-menubar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Menubar",
          "declaration": {
            "name": "Menubar",
            "module": "src/components/menubar/menubar/menubar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-menubar",
          "declaration": {
            "name": "Menubar",
            "module": "src/components/menubar/menubar/menubar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menubar/menubar-divider/menubar-divider.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "** deprecated **\nThis component is deprecated in V2 and will be removed in next major release,\nplease use the generated dividers of the menubar instead.",
          "name": "MenubarDivider",
          "members": [],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "deprecated": "true",
          "tagName": "zui-menubar-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenubarDivider",
          "declaration": {
            "name": "MenubarDivider",
            "module": "src/components/menubar/menubar-divider/menubar-divider.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-menubar-divider",
          "declaration": {
            "name": "MenubarDivider",
            "module": "src/components/menubar/menubar-divider/menubar-divider.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menubar/menubar-item/menubar-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The menu bar item, is an item of the menu bar which holds one icon and can be clicked. It dispatches in this case an\ncustom event with its own value as event value.",
          "name": "MenubarItem",
          "slots": [
            {
              "description": "This is the default slot and can be populated with any ZUi icon",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "Promise<IconLikeElement[]>"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "clickEvent"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleKeypress",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "keyEvent"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onDefaultSlotChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            }
          ],
          "superclass": {
            "name": "MenubarItemBase",
            "module": "/src/components/menubar/menubar-item-base.class"
          },
          "tagName": "zui-menubar-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenubarItem",
          "declaration": {
            "name": "MenubarItem",
            "module": "src/components/menubar/menubar-item/menubar-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-menubar-item",
          "declaration": {
            "name": "MenubarItem",
            "module": "src/components/menubar/menubar-item/menubar-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menubar/menubar-nav-item/menubar-nav-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-menubar-nav-item, is an item of the zui-menubar which holds an icon with label and can be clicked. It throws in this case an custom event with its own value as event value.",
          "name": "MenubarNavItem",
          "cssProperties": [
            {
              "description": "color of the nav item background, derived from emphasis and variant attributes by default",
              "name": "--zui-menubar-nav-item-background-color"
            },
            {
              "description": "typo color of the nav item, derived from emphasis and variant attributes by default",
              "name": "--zui-menubar-nav-item-color"
            },
            {
              "description": "opaqueness if disabled",
              "name": "--zui-menubar-nav-item-disabled-opacity"
            },
            {
              "description": "sets the height of the item explicitly",
              "name": "--zui-menubar-nav-item-height"
            },
            {
              "description": "sets the font family of the label",
              "name": "--zui-menubar-nav-item-label-font"
            },
            {
              "description": "sets the opacity of the label, is toggled by visiblity",
              "name": "--zui-menubar-nav-item-label-opacity"
            }
          ],
          "slots": [
            {
              "description": "This is where the icon is displayed",
              "name": "icon"
            },
            {
              "description": "This is where the label is displayed",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the opened state of the MenubarNavItem",
              "attribute": "opened",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleIconSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the opened state of the MenubarNavItem",
              "fieldName": "opened"
            }
          ],
          "superclass": {
            "name": "MenubarItemBase",
            "module": "/src/components/menubar/menubar-item-base.class"
          },
          "tagName": "zui-menubar-nav-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenubarNavItem",
          "declaration": {
            "name": "MenubarNavItem",
            "module": "src/components/menubar/menubar-nav-item/menubar-nav-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-menubar-nav-item",
          "declaration": {
            "name": "MenubarNavItem",
            "module": "src/components/menubar/menubar-nav-item/menubar-nav-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/multi-item-slider/multi-item-slider/multi-item-slider.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Allows showing multiple items with arbitrary contents in a horizontal slider.",
          "name": "MultiItemSlider",
          "cssProperties": [
            {
              "description": "Duration of the item animation",
              "name": "--zui-multi-item-slider-animation-duration"
            },
            {
              "description": "Duration of the used pagination dot animation",
              "name": "--zui-multi-item-slider-animation-duration-pagination"
            },
            {
              "description": "Easing timing function of the item animation",
              "name": "--zui-multi-item-slider-animation-easing"
            },
            {
              "description": "Distance of the slider items to the pagination",
              "name": "--zui-multi-item-slider-pagination-spacing"
            },
            {
              "description": "Gap size of the items, defaults to `var(--zui-space-medium)` and can be `var(--zui-space-small)`, `var(--zui-space-large)` or a `px` value (e.g. `16px`)",
              "name": "--zui-multi-item-slider-item-gap-size"
            }
          ],
          "slots": [
            {
              "description": "Default slot accepts zui-multi-item-slider-item elements to be shown in columns",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "MULTI_ITEM_SLIDER_ANIMATION_DURATION",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'--zui-multi-item-slider-animation-duration'"
            },
            {
              "kind": "field",
              "name": "MULTI_ITEM_SLIDER_ANIMATION_EASING",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'--zui-multi-item-slider-animation-easing'"
            },
            {
              "kind": "field",
              "name": "MULTI_ITEM_SLIDER_GROUP_SIZE_CSS_PROPERTY",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'---zui-multi-item-slider-group-size'"
            },
            {
              "kind": "field",
              "name": "groupSize",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "Amount of visible elements",
              "attribute": "group-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hidePagination",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows hiding the pagination",
              "attribute": "hide-pagination",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_isAnimating",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_pageCount",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_selectedPageIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_itemsRef",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_itemRefs",
              "type": {
                "text": "MultiItemSliderItem[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isSnapping",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "_selectedItemIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_currentAnimation",
              "type": {
                "text": "Animation | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(debounce(this._handleResize.bind(this), 200))"
            },
            {
              "kind": "field",
              "name": "_scrollListener",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handlePageSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail: { value: pageIndex } }",
                  "type": {
                    "text": "CustomEvent<{ value: number }>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleScroll",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleResize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleInteractiveScroll",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_animateToItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<Animation>"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getClosestItemIndexToOffset",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "offset",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getItemOffset",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "MultiItemSliderItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "group-size",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "Amount of visible elements",
              "fieldName": "groupSize"
            },
            {
              "name": "hide-pagination",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows hiding the pagination",
              "fieldName": "hidePagination"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-multi-item-slider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MultiItemSlider",
          "declaration": {
            "name": "MultiItemSlider",
            "module": "src/components/multi-item-slider/multi-item-slider/multi-item-slider.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-multi-item-slider",
          "declaration": {
            "name": "MultiItemSlider",
            "module": "src/components/multi-item-slider/multi-item-slider/multi-item-slider.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/multi-item-slider/multi-item-slider-item/multi-item-slider-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The multi item slider items are used to declare single item contents of a slider.\nIt's slotting contents right through, but cuts-off horizontally overflowing content.",
          "name": "MultiItemSliderItem",
          "slots": [
            {
              "description": "Default slot for passing in arbitrary content",
              "name": "default"
            }
          ],
          "members": [],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-multi-item-slider-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MultiItemSliderItem",
          "declaration": {
            "name": "MultiItemSliderItem",
            "module": "src/components/multi-item-slider/multi-item-slider-item/multi-item-slider-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-multi-item-slider-item",
          "declaration": {
            "name": "MultiItemSliderItem",
            "module": "src/components/multi-item-slider/multi-item-slider-item/multi-item-slider-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/multi-item-slider/multi-item-slider-pagination/multi-item-slider-pagination.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A pagination used by the multi item slider internally.\nIt's composed of the pagination dot bar and navigation\nbuttons to each side for paging back- and forward.",
          "name": "MultiItemSliderPagination",
          "cssProperties": [
            {
              "description": "animation duration of the used pagination dots",
              "name": "--zui-multi-item-slider-pagination-animation-duration"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "itemCount",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Amount of items to be pageable",
              "attribute": "item-count",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedItemIndex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Currently selected zero based item index",
              "attribute": "selected-item-index",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_handlePreviousClicked",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleNextClicked",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleDotSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail: { value } }",
                  "type": {
                    "text": "CustomEvent<{ value: number }>"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<MultiItemSliderPagination, 'PageSelectedEvent'>"
              },
              "description": "emits when a page is selected",
              "name": "zui-multi-item-slider-pagination-page-selected"
            }
          ],
          "attributes": [
            {
              "name": "item-count",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Amount of items to be pageable",
              "fieldName": "itemCount"
            },
            {
              "name": "selected-item-index",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Currently selected zero based item index",
              "fieldName": "selectedItemIndex"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/multi-item-slider/multi-item-slider-pagination/multi-item-slider-pagination.component.ts"
          },
          "tagName": "zui-multi-item-slider-pagination",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MultiItemSliderPagination",
          "declaration": {
            "name": "MultiItemSliderPagination",
            "module": "src/components/multi-item-slider/multi-item-slider-pagination/multi-item-slider-pagination.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-multi-item-slider-pagination",
          "declaration": {
            "name": "MultiItemSliderPagination",
            "module": "src/components/multi-item-slider/multi-item-slider-pagination/multi-item-slider-pagination.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/pagination/pagination-dot/pagination-dot.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Renders a pagination dot based on the `emphasis` and `size` attribute/property.\n\nThis component is internally used in the `PaginationDotBar` component.",
          "name": "PaginationDot",
          "cssProperties": [
            {
              "description": "animation duration of the dot",
              "name": "--zui-pagination-dot-transition-timing"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "internalAnimateSelectedAttribute",
              "static": true,
              "default": "'zui-internal-animate-selected'",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "animateSelected",
              "type": {
                "text": "boolean"
              },
              "description": "internal prop for toggling anim",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "animateSelected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "the dot emphasis",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "the dot size",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_timeout",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_animateSelected",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            }
          ],
          "attributes": [
            {
              "name": "animateSelected",
              "type": {
                "text": "boolean"
              },
              "description": "internal prop for toggling anim",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "animateSelected"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "the dot emphasis",
              "fieldName": "emphasis"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "the dot size",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-pagination-dot",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PaginationDot",
          "declaration": {
            "name": "PaginationDot",
            "module": "src/components/pagination/pagination-dot/pagination-dot.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-pagination-dot",
          "declaration": {
            "name": "PaginationDot",
            "module": "src/components/pagination/pagination-dot/pagination-dot.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/pagination/pagination-dot-bar/pagination-dot-bar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-pagination-dot-bar shows a list of zui-pagination-dot's. The number of shown dots is defined by item-count and the selection by selected-item-index.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=62193%3A344226)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=32074%3A520216)",
          "name": "PaginationDotBar",
          "cssProperties": [
            {
              "description": "animation duration of the used dots",
              "name": "--zui-pagination-dot-bar-transition-timing"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "itemCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the total number of items",
              "attribute": "item-count",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedItemIndex",
              "type": {
                "text": "number"
              },
              "description": "index of the selected item",
              "attribute": "selected-item-index",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_maxItems",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "5"
            },
            {
              "kind": "field",
              "name": "_dotsRef",
              "type": {
                "text": "NodeListOf<PaginationDot>"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handlePaginationDotSlelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "EventWithTarget<PaginationDot>"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<PaginationDotBar, 'PaginationDotSelectedEvent'>"
              },
              "description": "emits when a pagination dot is selected",
              "name": "zui-pagination-dot-bar-pagination-dot-selected"
            }
          ],
          "attributes": [
            {
              "name": "item-count",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the total number of items",
              "fieldName": "itemCount"
            },
            {
              "name": "selected-item-index",
              "type": {
                "text": "number"
              },
              "description": "index of the selected item",
              "fieldName": "selectedItemIndex"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/pagination/pagination-dot-bar/pagination-dot-bar.component.ts"
          },
          "tagName": "zui-pagination-dot-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PaginationDotBar",
          "declaration": {
            "name": "PaginationDotBar",
            "module": "src/components/pagination/pagination-dot-bar/pagination-dot-bar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-pagination-dot-bar",
          "declaration": {
            "name": "PaginationDotBar",
            "module": "src/components/pagination/pagination-dot-bar/pagination-dot-bar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/picker/picker-grid/picker-grid.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Picker grid with a header of picker grid header cells and a grid of picker grid cells",
          "name": "PickerGrid",
          "cssProperties": [
            {
              "description": "sets the cell height explicitly",
              "name": "--zui-picker-grid-cell-height"
            },
            {
              "description": "sets the cell width explicitly",
              "name": "--zui-picker-grid-cell-width"
            }
          ],
          "slots": [
            {
              "description": "slot for picker grid header cells",
              "name": "pickerGridHeaderCells"
            },
            {
              "description": "slot for picker grid cells",
              "name": "pickerGridCells"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "number"
              },
              "default": "7",
              "description": "column count of the picker grid",
              "attribute": "columns",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_handleKeyEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "keyboardEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLElement, KeyboardEvent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleClickEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }"
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<PickerGrid, 'CellSelectedEvent'>"
              },
              "description": "will be dispatched, if a `<zui-picker-grid-cell>` is selected",
              "name": "zui-picker-grid-cell-selected"
            },
            {
              "type": {
                "text": "GetZuiEvent<PickerGrid, 'HeaderCellSelectedEvent'>"
              },
              "description": "will be dispatched, if a `<zui-picker-header-cell>` is selected",
              "name": "zui-picker-grid-header-cell-selected"
            }
          ],
          "attributes": [
            {
              "name": "columns",
              "type": {
                "text": "number"
              },
              "default": "7",
              "description": "column count of the picker grid",
              "fieldName": "columns"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/picker/picker-grid/picker-grid.component.ts"
          },
          "tagName": "zui-picker-grid",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PickerGrid",
          "declaration": {
            "name": "PickerGrid",
            "module": "src/components/picker/picker-grid/picker-grid.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-picker-grid",
          "declaration": {
            "name": "PickerGrid",
            "module": "src/components/picker/picker-grid/picker-grid.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/picker/picker-grid-cell/picker-grid-cell.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A rectangular styled cell UI component, which is used in the general picker widget",
          "name": "PickerGridCell",
          "cssProperties": [
            {
              "description": "border style of the cell",
              "name": "--zui-picker-grid-cell-border"
            },
            {
              "description": "sets the height of the cell",
              "name": "--zui-picker-grid-cell-height"
            },
            {
              "description": "sets the minimum width of the cell",
              "name": "--zui-picker-grid-cell-min-width"
            }
          ],
          "slots": [
            {
              "description": "default slot for text content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "disabled state of the grid cell",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "the value of the grid cell",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states (default/selected/subtle);",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_pickerGridCellButton",
              "type": {
                "text": "Promise<HTMLButtonElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "default": "{ preventScroll: true }"
                }
              ]
            },
            {
              "kind": "method",
              "name": "blur",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "disabled state of the grid cell",
              "fieldName": "disabled"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "the value of the grid cell",
              "fieldName": "value"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states (default/selected/subtle);",
              "fieldName": "emphasis"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-picker-grid-cell",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PickerGridCell",
          "declaration": {
            "name": "PickerGridCell",
            "module": "src/components/picker/picker-grid-cell/picker-grid-cell.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-picker-grid-cell",
          "declaration": {
            "name": "PickerGridCell",
            "module": "src/components/picker/picker-grid-cell/picker-grid-cell.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/picker/picker-header/picker-header.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The picker header component is a UI sub component of the date picker component. It shows a string and two buttons.\nWhen the string or the buttons get pressed events get emited.",
          "name": "PickerHeader",
          "slots": [
            {
              "description": "This is the slot for the left icon.",
              "name": "icon-left"
            },
            {
              "description": "This is the slot for the right icon.",
              "name": "icon-right"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text of the picker header",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedInteractiveIconsLeft",
              "type": {
                "text": "InteractiveIcon[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedInteractiveIconsRight",
              "type": {
                "text": "InteractiveIcon[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleIconLeftSlotchange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adds subtle emphasis to the slotted left interactive icon"
            },
            {
              "kind": "method",
              "name": "_handleIconRightSlotchange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adds subtle emphasis to the slotted right interactive icon"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<PickerHeader, 'NextSelectedEvent'>"
              },
              "description": "event which gets emitted when the left icon gets clicked.",
              "name": "zui-picker-header-previous-selected"
            },
            {
              "type": {
                "text": "GetZuiEvent<PickerHeader, 'PreviousSelectedEvent'>"
              },
              "description": "event which gets emitted when the text gets clicked.",
              "name": "zui-picker-header-current-selected"
            },
            {
              "type": {
                "text": "GetZuiEvent<PickerHeader, 'CurrentSelectedEvent'>"
              },
              "description": "event which gets emitted when the right icon gets clicked.",
              "name": "zui-picker-header-next-selected"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text of the picker header",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/picker/picker-header/picker-header.component.ts"
          },
          "tagName": "zui-picker-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PickerHeader",
          "declaration": {
            "name": "PickerHeader",
            "module": "src/components/picker/picker-header/picker-header.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-picker-header",
          "declaration": {
            "name": "PickerHeader",
            "module": "src/components/picker/picker-header/picker-header.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/picker/picker-header-cell/picker-header-cell.component.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "headerCellStyles",
          "default": "css`\n  ${unsafeCSS(styles)}\n`"
        },
        {
          "kind": "class",
          "description": "The picker header cell is sub component of the date picker which can be reused in all picker widgets. A text can get set with the attribute text.\nIt has two CSS variables which can overwrite the width and height of the header-cell: --zui-picker-header-cell-width and --zui-picker-header-cell-height",
          "name": "PickerHeaderCell",
          "cssProperties": [
            {
              "description": "Overwrites the width of the picker-header-cell",
              "name": "--zui-picker-header-cell-width"
            },
            {
              "description": "Overwrites the height of the picker-header-cell",
              "name": "--zui-picker-header-cell-height"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text of the picker header cell",
              "attribute": "text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Value of the picker header cell",
              "attribute": "value",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Text of the picker header cell",
              "fieldName": "text"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Value of the picker header cell",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-picker-header-cell",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "headerCellStyles",
          "declaration": {
            "name": "headerCellStyles",
            "module": "src/components/picker/picker-header-cell/picker-header-cell.component.ts"
          }
        },
        {
          "kind": "js",
          "name": "PickerHeaderCell",
          "declaration": {
            "name": "PickerHeaderCell",
            "module": "src/components/picker/picker-header-cell/picker-header-cell.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-picker-header-cell",
          "declaration": {
            "name": "PickerHeaderCell",
            "module": "src/components/picker/picker-header-cell/picker-header-cell.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/pill/pill/pill.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The pill component displays a rounded rectangle with a simple text content or either a state dot or icon.\nWhen closable an additional close icon is shown. The pill emits a close event when this icon is clicked or when\nfocused the 'Enter' key is pressed.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13009%3A2728)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=40415%3A344667)",
          "name": "Pill",
          "slots": [
            {
              "description": "default slot for content",
              "name": ""
            },
            {
              "description": "slot for a state dot or an icon",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets closable of the PillComponent",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleKeyDown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ key }",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateIconSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<Pill, 'ClosedEvent'>"
              },
              "description": "emitted when the pill is closable not disabled and the close icon is clicked or when focused the 'Enter' key is pressed",
              "name": "zui-pill-closed"
            }
          ],
          "attributes": [
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets closable of the PillComponent",
              "fieldName": "closable"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/pill/pill/pill.component.ts"
          },
          "tagName": "zui-pill",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Pill",
          "declaration": {
            "name": "Pill",
            "module": "src/components/pill/pill/pill.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-pill",
          "declaration": {
            "name": "Pill",
            "module": "src/components/pill/pill/pill.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/pill/pill-content/pill-content.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A grouping UI component that displays the content of a pill",
          "name": "PillContent",
          "slots": [
            {
              "description": "default slot for content",
              "name": ""
            },
            {
              "description": "slot for a state dot or an icon",
              "name": "icon"
            },
            {
              "description": "slot for a close icon within an interactive icon",
              "name": "iconClose"
            }
          ],
          "members": [],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-pill-content",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PillContent",
          "declaration": {
            "name": "PillContent",
            "module": "src/components/pill/pill-content/pill-content.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-pill-content",
          "declaration": {
            "name": "PillContent",
            "module": "src/components/pill/pill-content/pill-content.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-button/radio-button/radio-button.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Radio buttons allow the user to select only one of a set.\nThe component has to be placed in a radio button group to create the standard radio button behaviour, of only one selected button in a group.\n\nIts value must be set.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13009%3A2721)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=23637%3A483839)",
          "name": "RadioButton",
          "slots": [
            {
              "description": "Allows passing arbitrary content as label",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "description": "The label of the radio button",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Checked state",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Value of the radio button",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tabindex of the radio button",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_inputRef",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "event on user interaction",
              "name": "input"
            },
            {
              "description": "event on input change",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "description": "The label of the radio button",
              "fieldName": "label"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Checked state",
              "fieldName": "checked"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Value of the radio button",
              "fieldName": "value"
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tabindex of the radio button",
              "fieldName": "tabindex"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/radio-button/radio-button/radio-button.component.ts"
          },
          "tagName": "zui-radio-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RadioButton",
          "declaration": {
            "name": "RadioButton",
            "module": "src/components/radio-button/radio-button/radio-button.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-radio-button",
          "declaration": {
            "name": "RadioButton",
            "module": "src/components/radio-button/radio-button/radio-button.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-button/radio-button-group/radio-button-group.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The radioButtonGroup is a component to encapsulate multiple radio buttons.\nOnly one of this radio buttons can be chaecked at a given time.\nIf a new radio button gets checked the other checked radio button gets unchecked.\nIt is possible to reset the radio button group to it's default value, by calling the function reset(); on it.",
          "name": "RadioButtonGroup",
          "slots": [
            {
              "description": "In this slot should the radio buttons of the radio button group be placed. No other type of HTML elements should be placed inside.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "value of the radio button group",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the radio button group is required",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedRadioButtons",
              "type": {
                "text": "RadioButton[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_selectedRadioButton",
              "type": {
                "text": "RadioButton | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_propagateDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isUserInteraction",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFocusOut",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ relatedTarget: focusDestination }",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_inputEventHandler",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<RadioButton>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_propagateState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, unknown>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Simulates the default `input` event to imitate default behavior",
              "name": "input"
            },
            {
              "description": "Simulates the default `change` event to imitate default behavior",
              "name": "change"
            },
            {
              "description": "Simulates the default `blur` event to imitate default behavior",
              "name": "blur"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "value of the radio button group",
              "fieldName": "value"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the radio button group is required",
              "fieldName": "required"
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/radio-button/radio-button-group/radio-button-group.component.ts"
          },
          "tagName": "zui-radio-button-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RadioButtonGroup",
          "declaration": {
            "name": "RadioButtonGroup",
            "module": "src/components/radio-button/radio-button-group/radio-button-group.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-radio-button-group",
          "declaration": {
            "name": "RadioButtonGroup",
            "module": "src/components/radio-button/radio-button-group/radio-button-group.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/searchbar/searchbar/searchbar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Searchbar shows an input and a menu with menu items and dividers. When the menu is shown and a menu item is clicked\na custom event with the value of the clicked menu item is emitted and the menu is closed.\n\n## Figma\n- [Styleguide – Web](https://www.figma.com/file/6dkjypErYWQPfuRBD58Aey/%F0%9F%93%96--Styleguide---Web?node-id=3279%3A73599&viewport=279%2C103%2C0.15313252806663513)",
          "name": "Searchbar",
          "cssProperties": [
            {
              "description": "duration of the menu toggle animation",
              "name": "--zui-searchbar-results-menu-animation-duration"
            },
            {
              "description": "limits the height of the menu, calculated automatically by default",
              "name": "--zui-searchbar-results-menu-expanded-height"
            },
            {
              "description": "left offset of the menu",
              "name": "--zui-searchbar-results-menu-margin-left"
            },
            {
              "description": "right offset of the menu",
              "name": "--zui-searchbar-results-menu-margin-right"
            },
            {
              "description": "level of the menu",
              "name": "--zui-searchbar-results-menu-z-index"
            }
          ],
          "slots": [
            {
              "description": "Default slot for menu items and dividers",
              "name": ""
            },
            {
              "description": "Slot for a select with select options",
              "name": "filter"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text for the searchbar input",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showSearchResults",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show or hide the search results menu",
              "attribute": "showSearchResults",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Value of the searchbar input",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "resultsMenu",
              "type": {
                "text": "SearchbarResultsMenu"
              }
            },
            {
              "kind": "field",
              "name": "_assignedFilterMenu",
              "type": {
                "text": "Select[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hasFilterMenu",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "closeSearchbarResultsMenu",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "When the menu is opened the showSearchResults property is set to false and a `searchbar-results-closed` event is emitted"
            },
            {
              "kind": "method",
              "name": "openSearchbarResultsMenu",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "When the menu is closed the showSearchResults property is set to true and a `searchbar-results-opened` event is emitted"
            },
            {
              "kind": "method",
              "name": "_handleSearchbarFilterChangedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "EventWithTarget<Select>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleSearchbarFilterOpenedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSearchbarFilterSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSearchbarResultSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "EventWithTarget<Element>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleSearchbarInputKeyDownEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ code }",
                  "type": {
                    "text": "EventWithTarget<Element, KeyboardEvent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleSearchbarInputChangedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<SearchbarInput | Select, CustomEvent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleSearchbarInputBlurredEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSearchbarInputFocusedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "EventWithTarget<SearchbarInput>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<Searchbar, 'FilterChangedEvent'>"
              },
              "description": "The searchbar-filter-changed event is fired when the filter has changed - the detail value is an array of the selected option values",
              "name": "zui-searchbar-filter-changed"
            },
            {
              "type": {
                "text": "GetZuiEvent<Searchbar, 'FilterOpenedEvent'>"
              },
              "description": "The searchbar-filter-opened event is fired when the filter has opened",
              "name": "zui-searchbar-filter-opened"
            },
            {
              "type": {
                "text": "GetZuiEvent<Searchbar, 'InputEvent'>"
              },
              "description": "The searchbar-input event is fired when the value of the input changes",
              "name": "zui-searchbar-input"
            },
            {
              "type": {
                "text": "GetZuiEvent<Searchbar, 'InputBlurredEvent'>"
              },
              "description": "The searchbar-input-blurred event is fired when the searchbar input has lost it's focus",
              "name": "zui-searchbar-input-blurred"
            },
            {
              "type": {
                "text": "GetZuiEvent<Searchbar, 'InputFocusedEvent'>"
              },
              "description": "The searchbar-input-focused event is fired when the searchbar input is focused",
              "name": "zui-searchbar-input-focused"
            },
            {
              "type": {
                "text": "GetZuiEvent<Searchbar, 'InputSelectedEvent'>"
              },
              "description": "The searchbar-input-selected event is fired when the searchbar input is selected, i.e. the Enter key is invoked",
              "name": "zui-searchbar-input-selected"
            },
            {
              "type": {
                "text": "GetZuiEvent<Searchbar, 'ResultSelectedEvent'>"
              },
              "description": "The searchbar-result-selected event is fired when a menu item is clicked - the detail value is the value of the selected menu item",
              "name": "zui-searchbar-result-selected"
            },
            {
              "type": {
                "text": "GetZuiEvent<Searchbar, 'ResultsClosedEvent'>"
              },
              "description": "The searchbar-results-closed event is fired when the menu is closed",
              "name": "zui-searchbar-results-closed"
            },
            {
              "type": {
                "text": "GetZuiEvent<Searchbar, 'ResultsOpenedEvent'>"
              },
              "description": "The searchbar-results-opened event is fired when the menu is opened",
              "name": "zui-searchbar-results-opened"
            }
          ],
          "attributes": [
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text for the searchbar input",
              "fieldName": "placeholder"
            },
            {
              "name": "showSearchResults",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show or hide the search results menu",
              "fieldName": "showSearchResults"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Value of the searchbar input",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/searchbar/searchbar/searchbar.component.ts"
          },
          "tagName": "zui-searchbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Searchbar",
          "declaration": {
            "name": "Searchbar",
            "module": "src/components/searchbar/searchbar/searchbar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-searchbar",
          "declaration": {
            "name": "Searchbar",
            "module": "src/components/searchbar/searchbar/searchbar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/searchbar/searchbar-input/searchbar-input.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The SearchbarInput is a input field for search queries and allows users to quickly explore a website or application.",
          "name": "SearchbarInput",
          "slots": [
            {
              "description": "Slot for a select with select options",
              "name": "filter"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "maxlength",
              "attribute": "maxlength",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "minlength",
              "attribute": "minlength",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "description": "pattern",
              "attribute": "pattern",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the placeholder text for the input",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "required",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "value",
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              },
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_searchbarInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedFilterMenu",
              "type": {
                "text": "Select[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hasValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_internalValue",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hasFilter",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showClearInputIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showSearchIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleClearInputValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSearchbarInputEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSearchbarInputChangeEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, unknown>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The change event is fired when the value of the searchbar-input has changed",
              "name": "change"
            },
            {
              "description": "The input event is fired when the value of the searchbar-input has received input",
              "name": "input"
            },
            {
              "type": {
                "text": "GetZuiEvent<SearchbarInput, 'ChangedEvent'>"
              },
              "description": "The searchbar-input-changed event is fired when the value of the searchbar-input has changed",
              "name": "zui-searchbar-input-changed"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "maxlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "maxlength",
              "fieldName": "maxlength"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number | undefined"
              },
              "description": "minlength",
              "fieldName": "minlength"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string | undefined"
              },
              "description": "pattern",
              "fieldName": "pattern"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Sets the placeholder text for the input",
              "fieldName": "placeholder"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "required",
              "fieldName": "required"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "value",
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              },
              "fieldName": "value"
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/searchbar/searchbar-input/searchbar-input.component.ts"
          },
          "tagName": "zui-searchbar-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchbarInput",
          "declaration": {
            "name": "SearchbarInput",
            "module": "src/components/searchbar/searchbar-input/searchbar-input.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-searchbar-input",
          "declaration": {
            "name": "SearchbarInput",
            "module": "src/components/searchbar/searchbar-input/searchbar-input.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/searchbar/searchbar-results-menu/searchbar-results-menu.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The SearchbarResultMenu shows a list of menu items and dividers.",
          "name": "SearchbarResultsMenu",
          "slots": [
            {
              "description": "default slot for menu items and dividers",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "Size of the menu",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedMenuItems",
              "type": {
                "text": "MenuItem[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleSlotchange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "Size of the menu",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-searchbar-results-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SearchbarResultsMenu",
          "declaration": {
            "name": "SearchbarResultsMenu",
            "module": "src/components/searchbar/searchbar-results-menu/searchbar-results-menu.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-searchbar-results-menu",
          "declaration": {
            "name": "SearchbarResultsMenu",
            "module": "src/components/searchbar/searchbar-results-menu/searchbar-results-menu.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select/select.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The select feature component is a form element which allows picking one or multiple options.\nAll options and the structure are described using structural elements such as `zui-select-option` or\n`zui-select-divider` which are declared in the default slot. Optionally a `zui-placeholder` component can be\nreflected into the placeholder slot.\n\n*Please notice:* Internally, the `value` of the `zui-select` is an array of strings.\nHowever, for HTML attributes only plain string is allowed.\nIf you are using the select with `multiple=false` you can pass the value of the (pre-)selected option directly.\nWhen `multiple=true` you have to pass a comma-separated string as attribute, i.e. `<zui-select value=\"opt1,opt2\">`.\n\nOn the other hand, if you set the JS property of the component, you always have to pass an array of strings (even\nwith `multiple=false`):\n```js\nconst zuiSelect = document.querySelector(\"zui-select\");\nzuiSelect.value = [\"opt1\", \"opt2\"];\n\n// multiple = false\nzuiSelect.value = [\"opt2\"];\n```\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/❖-01-Desktop---Component-Library---4.1?node-id=13009%3A2719)\n- [Styleguide - Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/📖--Styleguide---Desktop?node-id=1%3A102386 )",
          "name": "Select",
          "cssProperties": [
            {
              "description": "duration of the menu toggle, is passed to the portal",
              "name": "--zui-select-animation-duration"
            },
            {
              "description": "horizontal size of the select menu, is passed to the portal",
              "name": "--zui-select-width"
            },
            {
              "description": "override the default item count above which the menu will be scrollable.",
              "name": "--zui-menu-item-count"
            },
            {
              "description": "to customize the menu to have a fixed width (**must be an absolute value!**)",
              "name": "--zui-select-menu-width"
            }
          ],
          "slots": [
            {
              "description": "default slot for declaring the select structure",
              "name": ""
            },
            {
              "description": "allows passing-in a customized placeholder element",
              "name": "placeholder"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "REQUIRED_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'Selection is required.'"
            },
            {
              "kind": "field",
              "name": "ariaHaspopup",
              "type": {
                "text": "string"
              },
              "default": "'listbox'",
              "description": "ARIA haspopup for this element; defaults to 'listbox' if not explicitly set by author",
              "attribute": "aria-haspopup",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "ariaExpanded",
              "type": {
                "text": "string"
              },
              "default": "'false'",
              "description": "ARIA expanded for this element; defaults to 'false'",
              "attribute": "aria-expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'listbox'",
              "description": "ARIA role for this element; defaults to 'listbox' if not explicitly set by author",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'selected'",
              "description": "provides an emphasis of the select",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideBorder",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether to hide the border or not",
              "attribute": "hide-border",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "a text based placeholder; may be overwritten by a passed-in `zui-placeholder`",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "portal",
              "default": "`${SELECT_PORTAL}-${generateUid()}`",
              "description": "allows to set an explicit target portal for the select menu",
              "attribute": "portal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "description": "the size is derived from the touch environment initially if not provided",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "alternative",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "toggles the alternative layout",
              "attribute": "alternative",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "opens the dropdown menu; will also reflect its current visibility state",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "allows selecting multiple values using checkboxes",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showAllItem",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "adds a helper item which allows toggling all menu items at once",
              "attribute": "show-all-item",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "allItemLabel",
              "type": {
                "text": "string"
              },
              "default": "'All'",
              "description": "custom label for the helper item if `showAllItem` is set",
              "attribute": "all-item-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "adaptMenuWidth",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "disables truncation and scales the select menu to its items",
              "attribute": "adapt-menu-width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "menuOverflow",
              "type": {
                "text": "MenuOverflow"
              },
              "default": "'truncate'",
              "description": "defines the overflow strategy of the select menu items",
              "attribute": "menu-overflow",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "menuPlacements",
              "type": {
                "text": "Placement[]"
              },
              "default": "['bottom-start', 'bottom-end', 'top-start', 'top-end']",
              "description": "Allowed placements of the select menu.\nMultiple values can be provided as comma separated list.\nThe first setting will be applied initially, which defaults to `bottom-start`.",
              "attribute": "menu-placements",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "required",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "description": "value",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_buttonRef",
              "type": {
                "text": "SelectButton | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_optionRefs",
              "type": {
                "text": "(SelectDivider | SelectOption)[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_selectOptionRefs",
              "type": {
                "text": "SelectOption[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_enabledOptionRefs",
              "type": {
                "text": "SelectOption[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_disabledOptionRefs",
              "type": {
                "text": "SelectOption[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_placeholderRefs",
              "type": {
                "text": "SelectPlaceholder[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_unselectedSelectableOptions",
              "type": {
                "text": "SelectOption[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_overlayRef",
              "type": {
                "text": "OverlayDirective | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_opened",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_allItemState",
              "type": {
                "text": "Checkbox['value'] | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_buttonDisplayValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleButtonClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleItemClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ currentTarget }",
                  "type": {
                    "text": "EventWithCurrentTarget<MenuItem>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleAllClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_selectMenuRef",
              "type": {
                "text": "SelectMenu | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_previouslyDisabledSelectedValues",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_selectCount",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hasSelection",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_preventBlurOnPortal",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_reflectValueToOptions",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_targetIsOutsideComponentOrPortal",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "relatedTarget",
                  "type": {
                    "text": "EventTarget | null"
                  },
                  "description": "the next target that will get focus on blur."
                }
              ]
            },
            {
              "kind": "method",
              "name": "_selectAll",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "selected",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_toggleMenu",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "shouldOpen",
                  "default": "!this.expanded"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateRefs",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSelectMenuOpened",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSelectMenuClosed",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_injectCustomProperties",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "StyleInfo"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateAllItemState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_selectSingle",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_selectMultiple",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleKeysForSelectButton",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ code }",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleKeysForMenuItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ code }",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_menuItemCount",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handlePlaceholderChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getFormattedDisplayValueOrPlaceholder",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateDisplayValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_messageAnchorReferenceCallback",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "getPositionReference",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "getMenuWidth",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "validationMessageStyle",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "attribute": "validation-message-style",
              "reflects": true,
              "default": "static-text",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidationOn",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "attribute": "show-validation-on",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "show-validation",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isPristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "this forces the validation message to be shown, if the control is invalid",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleBlurForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleInputForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "simulates the default `change` event to imitate default behavior",
              "name": "change"
            },
            {
              "description": "simulates the default `input` event to imitate default behavior",
              "name": "input"
            },
            {
              "type": {
                "text": "GetZuiEvent<Select, 'OpenedEvent'>"
              },
              "description": "custom `open` event to notify about the dropdown menu being visible",
              "name": "zui-select-opened"
            },
            {
              "type": {
                "text": "GetZuiEvent<Select, 'ClosedEvent'>"
              },
              "description": "custom `close` event to notify about the dropdown menu being hidden",
              "name": "zui-select-closed"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "aria-haspopup",
              "type": {
                "text": "string"
              },
              "default": "'listbox'",
              "description": "ARIA haspopup for this element; defaults to 'listbox' if not explicitly set by author",
              "fieldName": "ariaHaspopup"
            },
            {
              "name": "aria-expanded",
              "type": {
                "text": "string"
              },
              "default": "'false'",
              "description": "ARIA expanded for this element; defaults to 'false'",
              "fieldName": "ariaExpanded"
            },
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'listbox'",
              "description": "ARIA role for this element; defaults to 'listbox' if not explicitly set by author",
              "fieldName": "role"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'selected'",
              "description": "provides an emphasis of the select",
              "fieldName": "emphasis"
            },
            {
              "name": "hide-border",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether to hide the border or not",
              "fieldName": "hideBorder"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "a text based placeholder; may be overwritten by a passed-in `zui-placeholder`",
              "fieldName": "placeholder"
            },
            {
              "name": "portal",
              "default": "`${SELECT_PORTAL}-${generateUid()}`",
              "description": "allows to set an explicit target portal for the select menu",
              "fieldName": "portal"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "description": "the size is derived from the touch environment initially if not provided",
              "fieldName": "size"
            },
            {
              "name": "alternative",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "toggles the alternative layout",
              "fieldName": "alternative"
            },
            {
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "opens the dropdown menu; will also reflect its current visibility state",
              "fieldName": "expanded"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "allows selecting multiple values using checkboxes",
              "fieldName": "multiple"
            },
            {
              "name": "show-all-item",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "adds a helper item which allows toggling all menu items at once",
              "fieldName": "showAllItem"
            },
            {
              "name": "all-item-label",
              "type": {
                "text": "string"
              },
              "default": "'All'",
              "description": "custom label for the helper item if `showAllItem` is set",
              "fieldName": "allItemLabel"
            },
            {
              "name": "adapt-menu-width",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "disables truncation and scales the select menu to its items",
              "fieldName": "adaptMenuWidth"
            },
            {
              "name": "menu-overflow",
              "type": {
                "text": "MenuOverflow"
              },
              "default": "'truncate'",
              "description": "defines the overflow strategy of the select menu items",
              "fieldName": "menuOverflow"
            },
            {
              "name": "menu-placements",
              "type": {
                "text": "Placement[]"
              },
              "default": "SELECT_MENU_DEFAULT_PLACEMENTS",
              "description": "Allowed placements of the select menu.\nMultiple values can be provided as comma separated list.\nThe first setting will be applied initially, which defaults to `bottom-start`.",
              "resolveInitializer": {
                "module": "src/components/select/select/select.component.ts"
              },
              "fieldName": "menuPlacements"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "required",
              "fieldName": "required"
            },
            {
              "name": "value",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "description": "value",
              "fieldName": "value"
            },
            {
              "name": "show-validation-on",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "resolveInitializer": {
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              },
              "fieldName": "showValidationOn",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "show-validation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "showValidation",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "validation-message-style",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "fieldName": "validationMessageStyle",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ValidationStyleMixin",
              "module": "/src/mixins/validation-style/validation-style.mixin"
            },
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/select/select/select.component.ts"
          },
          "tagName": "zui-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Select",
          "declaration": {
            "name": "Select",
            "module": "src/components/select/select/select.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-select",
          "declaration": {
            "name": "Select",
            "module": "src/components/select/select/select.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-all/select-all.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A grouping UI component which uses a `zui-menu-item` wrapping an `zui-checkbox` along with a `zui-menu-divider`\nto wrap the select-all UI requirements.\n\n## Functionality\nIt proxies the `focus` method of HTMLElement to pass-through focus to the embedded list item.\nThe used menu item skips focus by having an explicit [negative tabindex]:\n> A negative value (usually tabindex=\"-1\") means that the element is not reachable via sequential keyboard navigation, but could be\n> focused with JavaScript or visually by clicking with the mouse. It's mostly useful to create accessible widgets with JavaScript.\n> A negative value is useful when you have off-screen content that appears on a specific event. The user won't be able to focus any\n> element with a negative tabindex using the keyboard, but a script can do so by calling the focus() method.\nThe checkbox value can optionally be set and is passed-through directly, further informations can be found at the `zui-checkbox`\ndocumentation.\nAn optional label can be provided through the _default slot_.\nAs native click and change events are bubbling up the tree, those can be listened on this element as usual.",
          "name": "SelectAll",
          "slots": [
            {
              "description": "default slot for an optional checkbox label [negative tabindex]: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "Checkbox['value']"
              },
              "default": "false",
              "description": "the value is passed through to the embedded checkbox",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "description": "convenient getter to retrieve a simple boolean (which helps to simply toggle between states)"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Select['size']"
              },
              "default": "'s'",
              "description": "the size is derived from the touch environment initially if not provided",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "forwards the focus to the embedded list item"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "Checkbox['value']"
              },
              "default": "false",
              "description": "the value is passed through to the embedded checkbox",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "Select['size']"
              },
              "default": "'s'",
              "description": "the size is derived from the touch environment initially if not provided",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-select-all",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectAll",
          "declaration": {
            "name": "SelectAll",
            "module": "src/components/select/select-all/select-all.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-select-all",
          "declaration": {
            "name": "SelectAll",
            "module": "src/components/select/select-all/select-all.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-button/select-button.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `zui-select-button` is a pure UI component with limited functionality. The state is given from the outside completely.\nIt's usually not used directly, but consumed from a surrounding feature component `zui-select`.\nOnly the alignment of the slotted icon is a bit more advanced behavior allowing the button to constrain the icon size to\n`medium` if being `small`, or `large` by default. The default size, if not provided, is derived by the `hasTouch`\nimplementation of the parent `BaseElement`.\nAn optional label can be passed through the default slot. It will be cut off if too long using three d...",
          "name": "SelectButton",
          "cssProperties": [
            {
              "description": "arrow icon color, derived from interaction, disabled and toggle state",
              "name": "--zui-select-button-arrow-color"
            },
            {
              "description": "vertical size of the arrow icon",
              "name": "--zui-select-button-arrow-height"
            },
            {
              "description": "horizontal size of the arrow icon",
              "name": "--zui-select-button-arrow-width"
            },
            {
              "description": "stroke width of the button border",
              "name": "--zui-select-button-border-width"
            },
            {
              "description": "**deprecated** - has been deprecated and will be removed in the next major release! Please set the font on the host directly",
              "name": "--zui-select-button-font"
            },
            {
              "description": "padding between icons and the label",
              "name": "--zui-select-button-icon-spacing"
            }
          ],
          "slots": [
            {
              "description": "default slot for an optional button label",
              "name": ""
            },
            {
              "description": "optional slot to pass-in an icon whose size is automatically aligned",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "description": "enforces the \"role\" attribute for a11y reasons",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "activeDescendant",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "ARIA activedescendant for this element; defaults to ''",
              "attribute": "aria-activedescendant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "alternative",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "toggles the alternative layout",
              "attribute": "alternative",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "toggles the open state when associated with a menu",
              "attribute": "opened",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "marks as selected instead of default watermark appearance",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "description": "toggles the size explicitly, depends from touch environment initially by default if not set",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_alignIcons",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "description": "enforces the \"role\" attribute for a11y reasons",
              "fieldName": "role"
            },
            {
              "name": "aria-activedescendant",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "ARIA activedescendant for this element; defaults to ''",
              "fieldName": "activeDescendant"
            },
            {
              "name": "alternative",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "toggles the alternative layout",
              "fieldName": "alternative"
            },
            {
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "toggles the open state when associated with a menu",
              "fieldName": "opened"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "fieldName": "readonly"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "marks as selected instead of default watermark appearance",
              "fieldName": "selected"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "description": "toggles the size explicitly, depends from touch environment initially by default if not set",
              "fieldName": "size"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-select-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectButton",
          "declaration": {
            "name": "SelectButton",
            "module": "src/components/select/select-button/select-button.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-select-button",
          "declaration": {
            "name": "SelectButton",
            "module": "src/components/select/select-button/select-button.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-divider/select-divider.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A structural element to be used within the `zui-select` feature component to separate options.\nIt has neither styling nor functional implementations whatsoever. The optional slotted content\nwill be passed further into the UI divider.",
          "name": "SelectDivider",
          "slots": [
            {
              "description": "default slot for an optional divider label",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-select-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectDivider",
          "declaration": {
            "name": "SelectDivider",
            "module": "src/components/select/select-divider/select-divider.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-select-divider",
          "declaration": {
            "name": "SelectDivider",
            "module": "src/components/select/select-divider/select-divider.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-menu/select-menu.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This element brings animations to toggleable select menus. For convenience it is\nseparated, it is a simple wrapper around a slotted menu and will itself be\nprojected most likely into a portal. It manages the open and close animations\nand notifies about those processes.",
          "name": "SelectMenu",
          "cssProperties": [
            {
              "description": "duration of the menu toggle animation",
              "name": "--zui-select-menu-animation-duration"
            },
            {
              "description": "offset before invisible overflow, prevents cut-offs of the menu shadow",
              "name": "--zui-select-menu-overflow"
            }
          ],
          "slots": [
            {
              "description": "default slot for an optional divider label",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Either show or hide the menu, triggers animations.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_zuiPlacement",
              "type": {
                "text": "Placement"
              },
              "privacy": "private",
              "attribute": "_zuiPlacement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_running",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_menuRef",
              "type": {
                "text": "Menu[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleTransitionEnd",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<SelectMenu, 'OpenedEvent'>"
              },
              "description": "broadcasts if menu is fully opened",
              "name": "zui-select-menu-opened"
            },
            {
              "type": {
                "text": "GetZuiEvent<SelectMenu, 'ClosedEvent'>"
              },
              "description": "notifies about menu being completely closed",
              "name": "zui-select-menu-closed"
            },
            {
              "type": {
                "text": "GetZuiEvent<SelectMenu, 'OpenEvent'>"
              },
              "description": "fires when menu is opened but before animaton ended",
              "name": "select-menu-open"
            },
            {
              "type": {
                "text": "GetZuiEvent<SelectMenu, 'CloseEvent'>"
              },
              "description": "fires when menu is closed but before animaton ended",
              "name": "select-menu-close"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Either show or hide the menu, triggers animations.",
              "fieldName": "open"
            },
            {
              "name": "_zuiPlacement",
              "type": {
                "text": "Placement"
              },
              "fieldName": "_zuiPlacement"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/select/select-menu/select-menu.component.ts"
          },
          "tagName": "zui-select-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectMenu",
          "declaration": {
            "name": "SelectMenu",
            "module": "src/components/select/select-menu/select-menu.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-select-menu",
          "declaration": {
            "name": "SelectMenu",
            "module": "src/components/select/select-menu/select-menu.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-option/select-option.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A structural element to be used within the `zui-select` feature component to describe options.\nIt has neither styling nor functional implementations whatsoever and just carryies some attributes  to be\nused by the feature component to prepare and track the UI and state.\nThis components attributes will always be updated at runtime and can be used to query for current values.",
          "name": "SelectOption",
          "slots": [
            {
              "description": "default slot for an optional label",
              "name": ""
            },
            {
              "description": "optional slot to pass-in an icon",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'option'",
              "description": "ARIA role for this element; defaults to 'option' if not explicitly set by author",
              "attribute": "role",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'option'",
              "description": "ARIA role for this element; defaults to 'option' if not explicitly set by author",
              "fieldName": "role"
            }
          ],
          "superclass": {
            "name": "MenuItemBase",
            "module": "/src/components/menu/menu-item-base.class"
          },
          "tagName": "zui-select-option",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectOption",
          "declaration": {
            "name": "SelectOption",
            "module": "src/components/select/select-option/select-option.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-select-option",
          "declaration": {
            "name": "SelectOption",
            "module": "src/components/select/select-option/select-option.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-placeholder/select-placeholder.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A feature component providing functionality for select placeholders and selected labels.\nIt's used by the `zui-select` feature internally but can be slotted explicitly into it as well to customize placeholders\nand labels likewise.\n\n### Functionality\nIt can be parametrized with patterns for multiple selection states.\nEvery pattern template can use the following specifiers to be replaced:\n\n| specifier      | description                            |\n| :------------- | :------------------------------------- |\n| %itemCount     | amount of available items              |\n| %item          | first available item                   |\n| %items         | all available items, joined by a comma |\n| %selectedCount | amount of selected items               |\n| %selected      | first selected item                    |\n| %selection     | all selected items, joined by a comma  |",
          "name": "SelectPlaceholder",
          "slots": [
            {
              "description": "default slot for defining the placeholder label (aka watermark)",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "patternAll",
              "type": {
                "text": "string"
              },
              "default": "'%selectedCount selected'",
              "description": "is used if all are selected",
              "attribute": "pattern-all",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "patternMany",
              "type": {
                "text": "string"
              },
              "default": "'%selectedCount selected'",
              "description": "is used if not all are selected, but more than one",
              "attribute": "pattern-many",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "patternSingle",
              "type": {
                "text": "string"
              },
              "default": "'%selected'",
              "description": "is used if exactly one item is selected (but more than one are selectable)",
              "attribute": "pattern-single",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "format",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "(MenuItem | SelectOption)[]"
                  }
                },
                {
                  "name": "selection",
                  "type": {
                    "text": "SelectOption[]"
                  }
                },
                {
                  "name": "multiple",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "formats a label for the current selection using the appropriate pattern"
            },
            {
              "kind": "method",
              "name": "extractText",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "MenuItem | SelectOption"
                  },
                  "description": "any option from the select component."
                }
              ],
              "description": "utility to get text only from a given option or menu item"
            },
            {
              "kind": "method",
              "name": "usePattern",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "pattern",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "items",
                  "type": {
                    "text": "(MenuItem | SelectOption)[]"
                  }
                },
                {
                  "name": "selection",
                  "type": {
                    "text": "SelectOption[]"
                  }
                }
              ],
              "description": "delivers the label based on the current selection and all available items"
            }
          ],
          "attributes": [
            {
              "name": "pattern-all",
              "type": {
                "text": "string"
              },
              "default": "'%selectedCount selected'",
              "description": "is used if all are selected",
              "fieldName": "patternAll"
            },
            {
              "name": "pattern-many",
              "type": {
                "text": "string"
              },
              "default": "'%selectedCount selected'",
              "description": "is used if not all are selected, but more than one",
              "fieldName": "patternMany"
            },
            {
              "name": "pattern-single",
              "type": {
                "text": "string"
              },
              "default": "'%selected'",
              "description": "is used if exactly one item is selected (but more than one are selectable)",
              "fieldName": "patternSingle"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-select-placeholder",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectPlaceholder",
          "declaration": {
            "name": "SelectPlaceholder",
            "module": "src/components/select/select-placeholder/select-placeholder.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-select-placeholder",
          "declaration": {
            "name": "SelectPlaceholder",
            "module": "src/components/select/select-placeholder/select-placeholder.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton/skeleton-circle/skeleton-circle.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "When a Screen is loading, skeleton elements can be used as placeholders\nto preview the user what kind of content is there to expect.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---7.4?node-id=91634-407258&t=RegTZsKlwmDcb2OT-0)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=26232-3203&t=sEdNfT0RO1qiNBIS-0)",
          "name": "SkeletonCircle",
          "cssProperties": [
            {
              "description": "set the explicit diameter of the skeleton-circle in all possible css units",
              "name": "--zui-skeleton-circle-diameter"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states (default/highlight/subtle)",
              "attribute": "emphasis",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states (default/highlight/subtle)",
              "fieldName": "emphasis"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-skeleton-circle",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SkeletonCircle",
          "declaration": {
            "name": "SkeletonCircle",
            "module": "src/components/skeleton/skeleton-circle/skeleton-circle.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-skeleton-circle",
          "declaration": {
            "name": "SkeletonCircle",
            "module": "src/components/skeleton/skeleton-circle/skeleton-circle.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton/skeleton-rectangle/skeleton-rectangle.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "When a Screen is loading, skeleton elements can be used as placeholders\nto preview the user what kind of content is there to expect.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---7.4?node-id=91634-407258&t=RegTZsKlwmDcb2OT-0)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=26232-3203&t=sEdNfT0RO1qiNBIS-0)",
          "name": "SkeletonRectangle",
          "cssProperties": [
            {
              "description": "set the explicit height of the skeleton-rectangle in all possible css units",
              "name": "--zui-skeleton-rectangle-height"
            },
            {
              "description": "set the explicit height of the skeleton-rectangle in all possible css units",
              "name": "--zui-skeleton-rectangle-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states (default/highlight/subtle)",
              "attribute": "emphasis",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states (default/highlight/subtle)",
              "fieldName": "emphasis"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-skeleton-rectangle",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SkeletonRectangle",
          "declaration": {
            "name": "SkeletonRectangle",
            "module": "src/components/skeleton/skeleton-rectangle/skeleton-rectangle.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-skeleton-rectangle",
          "declaration": {
            "name": "SkeletonRectangle",
            "module": "src/components/skeleton/skeleton-rectangle/skeleton-rectangle.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider/slider.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This is the wrapper for the custom slider and the scale. The component acts similar to a standard HTML `<input\ntype=\"range\">` with additional features and styling.\n\nThe slider is a form element that is used to select a number value from a range of values, range is defined by a\nmin and max value.\nIt's possible to have ticks and labels to visualize the selectable values.\n\n As the component uses `<zui-slider-custom>`, this component is similar in most of the behavior and styling to\n `<zui-slider-range>`,  with the difference that `<zui-slider>` parametrizes `<zui-slider-custom>` to have only\n thumb, while `<zui-slider-range>` delivers a two thumb `<zui-slider-custom>`.\n\n### Tick labels\nYou can define a format pattern for ticks with the `label-format` attribute.\nThe rules for this format string can be found here: https://github.com/alexei/sprintf.js/\n some examples:\n\n- \"%s\" for strings\n- \"%.2f\" for floats with a certain amount of decimal places\n- \"%f\" for pure floats\n- \"+%.2f%%\" for having a \"+\" as prefix and \"%\" as suffix\n\nIf the label-format is not sufficient, you can define your own custom ticks by using the `<zui-slider-tick-label>` component, i.e.:\n\n```html\n <zui-slider\n   min=\"0\"\n   max=\"10\"\n   value=\"0\"\n   step=\"1\"\n   label-interval=\"1\"\n   ghost-handle=\"2\"\n   orientation=\"horizontal\">\n   <zui-slider-tick-label>0.1 x</zui-slider-tick-label>\n   <zui-slider-tick-label>0.25 x</zui-slider-tick-label>\n   <zui-slider-tick-label>0.5 x</zui-slider-tick-label>\n   <zui-slider-tick-label>1 x</zui-slider-tick-label>\n   <zui-slider-tick-label>2 x</zui-slider-tick-label>\n</zui-slider>\n```\n\n**Important note 1**: The slider only works properly if the step value is integer divisible with regard to the\n minimum / maximum value\n\n**Important note 2**: When you change the `value` via code you have to make sure that the value\nis compatible with `min`, `max` and `step` on your own.\nThe component will not prevent you from setting invalid values via code but the visual behaviour will likely break.\n\n**Important note 3**: If you change the custom offset during runtime, the labels may not be aligned correctly.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13009%3A2729)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=1%3A102409)",
          "name": "Slider",
          "cssProperties": [
            {
              "description": "The width of the slider (and scale)",
              "name": "--zui-slider-width"
            },
            {
              "description": "The height of the slider (and scale), when it's used in vertical orientation",
              "name": "--zui-slider-vertical-height"
            },
            {
              "description": "Defines a custom offset for the slider and the scale (set it without an unit!)",
              "name": "--zui-slider-padding"
            },
            {
              "description": "Defines a custom offset for the left-handed mininum area for the scale (set it without an unit!)",
              "name": "--zui-slider-min-padding"
            },
            {
              "description": "Defines a custom offset for the right-handed maximum area for the scale (set it without an unit!)",
              "name": "--zui-slider-max-padding"
            }
          ],
          "slots": [
            {
              "description": "The default slot, used for the custom tick labels",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tabindex of the slider",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tickInterval",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tick interval for the slider",
              "attribute": "tick-interval",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelInterval",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the label interval for the slider",
              "attribute": "label-interval",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelFormat",
              "type": {
                "text": "string"
              },
              "description": "the format template of the label. Use https://github.com/alexei/sprintf.js/ as a reference.",
              "attribute": "label-format",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "activeLineDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "the enabled/ disabled state of the active line",
              "attribute": "active-line-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "default": "'horizontal'",
              "description": "the orientation can be either horizontal or vertical; horizontal by default",
              "attribute": "orientation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "ghostHandle",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "description": "If set, the ghost handle is enabled and set to the given value",
              "attribute": "ghost-handle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "description": "the value of the slider",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_syncValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target: { value } }",
                  "type": {
                    "text": "EventWithTarget<Slider>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_overflowValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_underflowValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_stepMismatchValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getSliderScale",
              "type": {
                "text": "TemplateResult"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getSliderCustom",
              "type": {
                "text": "TemplateResult"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, unknown>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The change event is fired when the value has changed",
              "name": "change"
            },
            {
              "description": "The input event is fired when the value of the has received input",
              "name": "input"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tabindex of the slider",
              "fieldName": "tabindex"
            },
            {
              "name": "tick-interval",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tick interval for the slider",
              "fieldName": "tickInterval"
            },
            {
              "name": "label-interval",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the label interval for the slider",
              "fieldName": "labelInterval"
            },
            {
              "name": "label-format",
              "type": {
                "text": "string"
              },
              "description": "the format template of the label. Use https://github.com/alexei/sprintf.js/ as a reference.",
              "fieldName": "labelFormat"
            },
            {
              "name": "active-line-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "the enabled/ disabled state of the active line",
              "fieldName": "activeLineDisabled"
            },
            {
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "default": "'horizontal'",
              "description": "the orientation can be either horizontal or vertical; horizontal by default",
              "fieldName": "orientation"
            },
            {
              "name": "ghost-handle",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "description": "If set, the ghost handle is enabled and set to the given value",
              "resolveInitializer": {
                "module": "src/components/slider/slider/slider.component.ts"
              },
              "fieldName": "ghostHandle"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "description": "the value of the slider",
              "fieldName": "value"
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            }
          ],
          "superclass": {
            "name": "RealSliderBaseClass",
            "module": "/src/components/slider/slider-base.class"
          },
          "tagName": "zui-slider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Slider",
          "declaration": {
            "name": "Slider",
            "module": "src/components/slider/slider/slider.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-slider",
          "declaration": {
            "name": "Slider",
            "module": "src/components/slider/slider/slider.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider-custom/slider-custom.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The custom slider represents a custom made slider, behaving like a native input (range) element, including a\nstyled track and a configurable active line. Beside of this, the custom slider supports a dual-knob range slider\nmode, which is triggered by an internal attribute and two, comma separated, values. Also it's possible to set\nsemi-transparent ghost handle with a fixed position, as well the slider can be used vertically.\nThis component is meant to to be used in the zui-slider wrapping parent component.\n\n! The slider-custom component is not meant to be used without the zui-slider component !",
          "name": "SliderCustom",
          "cssProperties": [
            {
              "description": "The width of the slider",
              "name": "--zui-slider-width"
            },
            {
              "description": "Defines a custom offset for the slider",
              "name": "--zui-slider-padding"
            },
            {
              "description": "The height of the slider, when it's used in vertical orientation",
              "name": "--zui-slider-vertical-height"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "DEFAULT_KEYBOARD_STEP_SIZE",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "1"
            },
            {
              "kind": "field",
              "name": "DEFAULT_VALUE_DECIMAL_PLACES",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "ONE_MILLION",
              "static": true
            },
            {
              "kind": "field",
              "name": "SEMICIRCLE_KNOB_A_DEFAULT_TRANSLATION",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "-10.83"
            },
            {
              "kind": "field",
              "name": "SEMICIRCLE_KNOB_B_DEFAULT_TRANSLATION",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "-1.17"
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tabindex of the slider-custom",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "activeLineDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "the enabled/ disabled state of the active line",
              "attribute": "active-line-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "default": "'horizontal'",
              "description": "the orientation can be either horizontal or vertical; horizontal by default",
              "attribute": "orientation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dualKnobs",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggle dual knob / range slider mode",
              "attribute": "dual-knobs",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "ghostHandle",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "description": "If set, the ghost handle ist enabled and set to the given value",
              "attribute": "ghost-handle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly state",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "RangeValue | number"
              },
              "description": "the value of the slider; can only be set via property",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "_sliderRef",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_knobContainerRef",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_knobA",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_knobB",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_knobAisDragged",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_knobBisDragged",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_moveKnobBound",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_endMoveKnobBound",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_userKeyboardInteraction",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_lastChangedValue",
              "type": {
                "text": "RangeValue | number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_activeKnob",
              "type": {
                "text": "Knob | null"
              },
              "privacy": "private",
              "description": "Current active / focused knob"
            },
            {
              "kind": "field",
              "name": "_hoveredKnob",
              "type": {
                "text": "Knob | null"
              },
              "privacy": "private",
              "description": "Current hovered knob"
            },
            {
              "kind": "field",
              "name": "_derivedStep",
              "type": {
                "text": "RealSliderBaseClass['step']"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_derivedGhostHandleValue",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showGhostHandle",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isOddStep",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_decimalPlaces",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_knobAPosition",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_knobBPosition",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_range",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_knobContainerLeft",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_knobContainerWidth",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_knobContainerHeight",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_knobContainerTop",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_derivedActiveLineStart",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_activeLineMarginLeft",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_activeLineMarginRight",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_drawActiveLineRightToLeft",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_knobAValue",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_knobAShift",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_knobBShift",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_knobGhostShift",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getCalculatedKnobShift",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "mouseEvent",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_knobBValue",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_singleValue",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rangeValue",
              "type": {
                "text": "RangeValue"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getKnobShiftByValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_isVertical",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getCursorPosition",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "mouseEvent",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_checkHoveredKnobAndStartMoving",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLDivElement, MouseEvent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_startMoveKnob",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "mouseEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLDivElement, MouseEvent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_moveKnob",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "mouseEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLDivElement, MouseEvent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_endMoveKnob",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_knobPositionToValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "knobRelativePosition",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_clampAndSetRangeValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "[unclampedValueKnobA, unclampedValueKnobB]",
                  "type": {
                    "text": "RangeValue"
                  }
                },
                {
                  "description": "value for knobA that should be clamped",
                  "name": "unclampedValueKnobA"
                },
                {
                  "description": "value for knobB that should be clamped",
                  "name": "unclampedValueKnobB"
                }
              ],
              "description": "clamps passed values and updates value"
            },
            {
              "kind": "field",
              "name": "_advanceValueByStepInDirection",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onlyEmitChangeIfLastChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_emitChangeAndUpdateLastChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleKeyDown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLDivElement, KeyboardEvent>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The input event is fired when the value of the has received input via keyboard or mouse",
              "name": "input"
            },
            {
              "description": "The change event is fired when the user changes the value via keyboard or mouse",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tabindex of the slider-custom",
              "fieldName": "tabindex"
            },
            {
              "name": "active-line-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "the enabled/ disabled state of the active line",
              "fieldName": "activeLineDisabled"
            },
            {
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "default": "'horizontal'",
              "description": "the orientation can be either horizontal or vertical; horizontal by default",
              "fieldName": "orientation"
            },
            {
              "name": "dual-knobs",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggle dual knob / range slider mode",
              "fieldName": "dualKnobs"
            },
            {
              "name": "ghost-handle",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "description": "If set, the ghost handle ist enabled and set to the given value",
              "resolveInitializer": {
                "module": "src/components/slider/slider-custom/slider-custom.component.ts"
              },
              "fieldName": "ghostHandle"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly state",
              "fieldName": "readonly"
            },
            {
              "name": "value",
              "type": {
                "text": "RangeValue | number"
              },
              "description": "the value of the slider; can only be set via property",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            }
          ],
          "superclass": {
            "name": "RealSliderBaseClass",
            "module": "/src/components/slider/slider-base.class"
          },
          "tagName": "zui-slider-custom",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SliderCustom",
          "declaration": {
            "name": "SliderCustom",
            "module": "src/components/slider/slider-custom/slider-custom.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-slider-custom",
          "declaration": {
            "name": "SliderCustom",
            "module": "src/components/slider/slider-custom/slider-custom.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider-range/slider-range.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The slider-range is a form element that is used to select a number range from a range of values.\nThe full range is defined by a min and max attribute.\nThe selected range (`value`) is an array of two values for the start and end value of the range.\n\n As the component uses `<zui-slider-custom>`, this component is similar in most of the behavior and styling to\n `<zui-slider-range>`,  with the difference that `<zui-slider>` parametrizes `<zui-slider-custom>` to have only\n thumb, while `<zui-slider-range>` delivers a two thumb `<zui-slider-custom>`.\n\nIt's possible to have ticks and labels to visualize the selectable values.\n\nThis is a wrapper for the custom slider and the scale.\nThe custom slider represents a completely custom made slider, which enables features like multi-thumb,\nghost-handle, vertical and horizontal orientation, and so on.\n\n### Tick labels\nYou can define a format pattern for ticks with the `label-format` attribute.\nThe rules for this format string can be found here: https://github.com/alexei/sprintf.js/\n some examples:\n\n- \"%s\" for strings\n- \"%.2f\" for floats with a certain amount of decimal places\n- \"%f\" for pure floats\n- \"+%.2f%%\" for having a \"+\" as prefix and \"%\" as suffix",
          "name": "SliderRange",
          "cssProperties": [
            {
              "description": "The width of the slider (and scale)",
              "name": "--zui-slider-width"
            },
            {
              "description": "The height of the slider (and scale), when it's used in vertical orientation",
              "name": "--zui-slider-vertical-height"
            },
            {
              "description": "Defines a custom offset for the slider and scale (set it without an unit!)",
              "name": "--zui-slider-padding-"
            },
            {
              "description": "Defines a custom offset for the left-handed mininum area for the scale (set it without an unit!)",
              "name": "--zui-slider-min-padding"
            },
            {
              "description": "Defines a custom offset for the right-handed maximum area for the scale (set it without an unit!)",
              "name": "--zui-slider-max-padding"
            }
          ],
          "slots": [
            {
              "description": "The default slot, used for the custom tick labels",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tabindex of the slider-range",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tickInterval",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tick interval for the slider-range",
              "attribute": "tick-interval",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelInterval",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the label interval for the slider-range",
              "attribute": "label-interval",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelFormat",
              "type": {
                "text": "string"
              },
              "description": "the format template of the label. Use https://github.com/alexei/sprintf.js/ as a reference.",
              "attribute": "label-format",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "activeLineDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "the enabled/ disabled state of the active line",
              "attribute": "active-line-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "default": "'horizontal'",
              "description": "the orientation can be either horizontal or vertical; horizontal by default",
              "privacy": "private",
              "attribute": "orientation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "RangeValue"
              },
              "default": "[this.min, this.max]",
              "description": "the value of the slider; begin and end are separated by a comma",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_syncValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target: { value } }",
                  "type": {
                    "text": "EventWithTarget<SliderCustom>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_overflowValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_underflowValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_stepMismatchValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getSliderScale",
              "type": {
                "text": "TemplateResult"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getSliderCustom",
              "type": {
                "text": "TemplateResult"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, unknown>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The change event is fired when the value has changed",
              "name": "change"
            },
            {
              "description": "The input event is fired when the value of the has received input",
              "name": "input"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tabindex of the slider-range",
              "fieldName": "tabindex"
            },
            {
              "name": "tick-interval",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tick interval for the slider-range",
              "fieldName": "tickInterval"
            },
            {
              "name": "label-interval",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the label interval for the slider-range",
              "fieldName": "labelInterval"
            },
            {
              "name": "label-format",
              "type": {
                "text": "string"
              },
              "description": "the format template of the label. Use https://github.com/alexei/sprintf.js/ as a reference.",
              "fieldName": "labelFormat"
            },
            {
              "name": "active-line-disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "the enabled/ disabled state of the active line",
              "fieldName": "activeLineDisabled"
            },
            {
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "default": "'horizontal'",
              "description": "the orientation can be either horizontal or vertical; horizontal by default",
              "fieldName": "orientation"
            },
            {
              "name": "value",
              "type": {
                "text": "RangeValue"
              },
              "default": "[this.min, this.max]",
              "description": "the value of the slider; begin and end are separated by a comma",
              "fieldName": "value"
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            }
          ],
          "superclass": {
            "name": "RealSliderBaseClass",
            "module": "/src/components/slider/slider-base.class"
          },
          "tagName": "zui-slider-range",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SliderRange",
          "declaration": {
            "name": "SliderRange",
            "module": "src/components/slider/slider-range/slider-range.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-slider-range",
          "declaration": {
            "name": "SliderRange",
            "module": "src/components/slider/slider-range/slider-range.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider-scale/slider-scale.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The slider scale includes all the logic and styling for the scale and should always be used along the\nzui-slder-basic component in the wrapping zui-slider component.\n\n**Important note 1**: The slider only works properly if the step value is  integer divisible with regard to the\n minimum / maximum value\n\n**Important note 2**: The usage of the label format can be looked up here: https://github.com/alexei/sprintf.js/\n some examples:\n\n- \"%s\" for strings\n- \"%.2f\" for floats with a certain amount of decimal places\n- \"%f\" for pure floats\n- \"+%.2f%%\" for having a \"+\" as prefix and \"%\" as suffix",
          "name": "SliderScale",
          "cssProperties": [
            {
              "description": "Defines a custom offset for the scale (set it without an unit!)",
              "name": "--zui-slider-padding-"
            },
            {
              "description": "Defines a custom offset for the left-handed mininum area for the scale (set it without an unit!)",
              "name": "--zui-slider-min-padding"
            },
            {
              "description": "Defines a custom offset for the right-handed maximum area for the scale (set it without an unit!)",
              "name": "--zui-slider-max-padding"
            }
          ],
          "slots": [
            {
              "description": "The default slot, used for the custom tick labels",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tickInterval",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tick interval for the slider",
              "attribute": "tick-interval",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelInterval",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the label interval for the slider",
              "attribute": "label-interval",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "default": "'horizontal'",
              "description": "the orientation can be either horizontal or vertical; horizontal by default",
              "attribute": "orientation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelFormat",
              "type": {
                "text": "string"
              },
              "description": "the format template of the label. Use https://github.com/alexei/sprintf.js/ as a reference.",
              "attribute": "label-format",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_customTickLabelElements",
              "type": {
                "text": "SliderTickLabel[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_derivedLabelFormat",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_customLabels",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_derivedTickLabelArray",
              "type": {
                "text": "string[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getFormattedLabel",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "template"
                },
                {
                  "name": "value"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_calcTickAndLabelArray",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "parameters": [
                {
                  "name": "interval",
                  "type": {
                    "text": "number"
                  },
                  "description": "the interval that is used for calculation"
                }
              ],
              "description": "Creates an array of generic ticks and labels"
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "tick-interval",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the tick interval for the slider",
              "fieldName": "tickInterval"
            },
            {
              "name": "label-interval",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "the label interval for the slider",
              "fieldName": "labelInterval"
            },
            {
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "default": "'horizontal'",
              "description": "the orientation can be either horizontal or vertical; horizontal by default",
              "fieldName": "orientation"
            },
            {
              "name": "label-format",
              "type": {
                "text": "string"
              },
              "description": "the format template of the label. Use https://github.com/alexei/sprintf.js/ as a reference.",
              "fieldName": "labelFormat"
            }
          ],
          "superclass": {
            "name": "SliderBaseClass",
            "module": "/src/components/slider/slider-base.class"
          },
          "tagName": "zui-slider-scale",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SliderScale",
          "declaration": {
            "name": "SliderScale",
            "module": "src/components/slider/slider-scale/slider-scale.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-slider-scale",
          "declaration": {
            "name": "SliderScale",
            "module": "src/components/slider/slider-scale/slider-scale.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider-tick-label/slider-tick-label.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This represents a very simple component, which is used to pass custom label data into the slider",
          "name": "SliderTickLabel",
          "slots": [
            {
              "description": "This is the default slot to be used for the label text",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-slider-tick-label",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SliderTickLabel",
          "declaration": {
            "name": "SliderTickLabel",
            "module": "src/components/slider/slider-tick-label/slider-tick-label.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-slider-tick-label",
          "declaration": {
            "name": "SliderTickLabel",
            "module": "src/components/slider/slider-tick-label/slider-tick-label.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/state/state-dot/state-dot.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The state dot is a colored dot with a state-mapped color.\n\nIt behaves like an icon (sizes, zui-icon tagging attribute, ..).\n\nState: default | error | warning | progress | ready\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=23531%3A787239)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=12425%3A0)",
          "name": "StateDot",
          "members": [
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "State"
              },
              "default": "'default'",
              "description": "Sets the state of the StateDot",
              "attribute": "state",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "isIcon",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "tagging property used to use `*[zui-icon]` as a querySelector for zuiIcons",
              "attribute": "zui-icon",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconMixin",
                "module": "src/mixins/icons/icon.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "IconSize"
              },
              "default": "defaultSize",
              "description": "The size of the Icon",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "IconMixin",
                "module": "src/mixins/icons/icon.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "state",
              "type": {
                "text": "State"
              },
              "default": "'default'",
              "description": "Sets the state of the StateDot",
              "fieldName": "state"
            },
            {
              "name": "zui-icon",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "tagging property used to use `*[zui-icon]` as a querySelector for zuiIcons",
              "fieldName": "isIcon",
              "inheritedFrom": {
                "name": "IconMixin",
                "module": "src/mixins/icons/icon.mixin.ts"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "IconSize"
              },
              "default": "defaultSize",
              "description": "The size of the Icon",
              "resolveInitializer": {
                "module": "src/mixins/icons/icon.mixin.ts"
              },
              "fieldName": "size",
              "inheritedFrom": {
                "name": "IconMixin",
                "module": "src/mixins/icons/icon.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "IconMixin",
              "module": "/src/mixins/icons/icon.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-state-dot",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StateDot",
          "declaration": {
            "name": "StateDot",
            "module": "src/components/state/state-dot/state-dot.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-state-dot",
          "declaration": {
            "name": "StateDot",
            "module": "src/components/state/state-dot/state-dot.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/state/state-label/state-label.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The state label is a colored rectangle which has a background and text color based on its state.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=23531%3A787239)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=12425%3A0)",
          "name": "StateLabel",
          "cssProperties": [
            {
              "description": "override background color",
              "name": "--zui-state-label-background-color"
            },
            {
              "description": "override text color",
              "name": "--zui-state-label-text-color"
            },
            {
              "description": "override default width of 80px",
              "name": "--zui-state-label-width"
            }
          ],
          "slots": [
            {
              "description": "default slot for state label text",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "State"
              },
              "default": "'default'",
              "description": "Sets the state of the StateLabel",
              "attribute": "state",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideTooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "show / hide zui tooltip",
              "attribute": "hide-tooltip",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "state",
              "type": {
                "text": "State"
              },
              "default": "'default'",
              "description": "Sets the state of the StateLabel",
              "fieldName": "state"
            },
            {
              "name": "hide-tooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "show / hide zui tooltip",
              "fieldName": "hideTooltip"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-state-label",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StateLabel",
          "declaration": {
            "name": "StateLabel",
            "module": "src/components/state/state-label/state-label.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-state-label",
          "declaration": {
            "name": "StateLabel",
            "module": "src/components/state/state-label/state-label.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/step-indicator/step-indicator-bar/step-indicator-bar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `zui-step-indicator-bar` shows a list of `zui-step-indicator-item`'s and can be used as a progress indicator.\nEach step has an emphasis of visited, selected or next.\nTo advance one step or step back one step you can call `next()` and `previous()`.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.2?node-id=76965%3A368673)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=45219%3A117)",
          "name": "StepIndicatorBar",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "StepIndicatorItem['size']"
              },
              "default": "'m'",
              "description": "size that is propagated to each `zui-step-indicator-item`",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "(optional) value of the selected `zui-step-indicator-item`; has to be set when there is an item that should be selected on init",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedStepIndicatorItems",
              "type": {
                "text": "StepIndicatorItem[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_selectedStepIndicatorItem",
              "type": {
                "text": "StepIndicatorItem | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hasSelectedStepIndicatorItem",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "next",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "advance one step when possible and update `zui-step-indicator-item`'s emphasis accordingly"
            },
            {
              "kind": "method",
              "name": "previous",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "take a step back when possible and update `zui-step-indicator-item`'s emphasis accordingly"
            },
            {
              "kind": "method",
              "name": "_getSibling",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "StepIndicatorItem | null"
                }
              },
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'next' | 'previous'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_propagateSizeChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_propagateValueChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "StepIndicatorItem['size']"
              },
              "default": "'m'",
              "description": "size that is propagated to each `zui-step-indicator-item`",
              "fieldName": "size"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "(optional) value of the selected `zui-step-indicator-item`; has to be set when there is an item that should be selected on init",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-step-indicator-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StepIndicatorBar",
          "declaration": {
            "name": "StepIndicatorBar",
            "module": "src/components/step-indicator/step-indicator-bar/step-indicator-bar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-step-indicator-bar",
          "declaration": {
            "name": "StepIndicatorBar",
            "module": "src/components/step-indicator/step-indicator-bar/step-indicator-bar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/step-indicator/step-indicator-item/step-indicator-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `zui-step-indicator-item` is part of the `zui-step-indicator-bar` and visualizes it's state (visited/selected/next) by the given emphasis.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.2?node-id=76965%3A368673)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=45219%3A117)",
          "name": "StepIndicatorItem",
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'next'",
              "description": "the emphasis is set dependent on the parent `zui-step-indicator-bar` value and should not be set manually",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "each `zui-step-indicator-item` gets the size set for the `zui-step-indicator-bar` and should not be set manually",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "description": "the step indicator item text that is displayed inside the item",
              "attribute": "text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "the value is used to identify the `zui-step-indicator-item` in a list of `zui-step-indicator-item`'s",
              "attribute": "value",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'next'",
              "description": "the emphasis is set dependent on the parent `zui-step-indicator-bar` value and should not be set manually",
              "fieldName": "emphasis"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "each `zui-step-indicator-item` gets the size set for the `zui-step-indicator-bar` and should not be set manually",
              "fieldName": "size"
            },
            {
              "name": "text",
              "type": {
                "text": "string"
              },
              "description": "the step indicator item text that is displayed inside the item",
              "fieldName": "text"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "the value is used to identify the `zui-step-indicator-item` in a list of `zui-step-indicator-item`'s",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-step-indicator-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StepIndicatorItem",
          "declaration": {
            "name": "StepIndicatorItem",
            "module": "src/components/step-indicator/step-indicator-item/step-indicator-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-step-indicator-item",
          "declaration": {
            "name": "StepIndicatorItem",
            "module": "src/components/step-indicator/step-indicator-item/step-indicator-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tag/tag/tag.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Tag is used to label and categorize items and support recognition and navigation.\nTags can be used to navigate to items linked with the same Tag.\n\n## Figma\n- [Styleguide – Web](https://www.figma.com/file/6dkjypErYWQPfuRBD58Aey/%F0%9F%93%96--Styleguide---Web?node-id=8492%3A90165)",
          "name": "Tag",
          "slots": [
            {
              "description": "slot for an icon",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Value of the Tag",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "description": "Text to be shown for Tag",
              "attribute": "text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "nonInteractive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This makes the Tag non-interactive",
              "attribute": "non-interactive",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "menuItem",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Menu item display mode, used to display tags in the tag menu",
              "privacy": "private",
              "attribute": "zui-internal-as-menu-item",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hasIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles different max widths for the tag",
              "privacy": "private",
              "attribute": "zui-internal-has-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateIconSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Value of the Tag",
              "fieldName": "value"
            },
            {
              "name": "text",
              "type": {
                "text": "string"
              },
              "description": "Text to be shown for Tag",
              "fieldName": "text"
            },
            {
              "name": "non-interactive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This makes the Tag non-interactive",
              "fieldName": "nonInteractive"
            },
            {
              "name": "zui-internal-as-menu-item",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Menu item display mode, used to display tags in the tag menu",
              "fieldName": "menuItem"
            },
            {
              "name": "zui-internal-has-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Toggles different max widths for the tag",
              "fieldName": "hasIcon"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-tag",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Tag",
          "declaration": {
            "name": "Tag",
            "module": "src/components/tag/tag/tag.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-tag",
          "declaration": {
            "name": "Tag",
            "module": "src/components/tag/tag/tag.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tag/tag-menu-button/tag-menu-button.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Tag Menu Button is used when not all Tags be shown due to missing screenspace or intended limitation.\nClicking on the Tag Menu Button will open a dropdown menu, that makes the other tags accessible.\n\nThe tags in the menu are rendered as zui-menu-item(s) automatically.\n\n## Figma\n- [Styleguide – Web](https://www.figma.com/file/6dkjypErYWQPfuRBD58Aey/%F0%9F%93%96--Styleguide---Web?node-id=8492%3A90165)",
          "name": "TagMenuButton",
          "cssProperties": [
            {
              "description": "the number of items in the menu to be displayed before scrolling",
              "name": "--zui-menu-item-count"
            },
            {
              "description": "overrides the menu width. Defaults to preset width or full width on adapt-width variant.",
              "name": "--zui-menu-width"
            }
          ],
          "slots": [
            {
              "description": "This is the default slot for tag components",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Manages if the menu is open or closed.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideTagCount",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This hides the count of tags inside",
              "attribute": "hide-tag-count",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expandLabel",
              "type": {
                "text": "string"
              },
              "default": "'More'",
              "description": "Text to be displayed as label for the tag menu button",
              "attribute": "expand-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "adaptWidth",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines the strategy for the menu adapt-width behavior.\nDefault is fixed width",
              "attribute": "adapt-width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_containerRef",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_menuWrapperRef",
              "type": {
                "text": "MenuWrapper"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_tagCount",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_tagReferences",
              "type": {
                "text": "Tag[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_menuCustomProperties",
              "type": {
                "text": "Readonly<StyleInfo>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_getTagButtonReference",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleToggleMenu",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getTagMenuButtonText",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "_handleOutsideClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<TagMenuButton, 'MenuSelectEvent'>"
              },
              "description": "will be dispatched, if a `<zui-tag>` from the menu is selected",
              "name": "zui-tag-menu-selected"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Manages if the menu is open or closed.",
              "fieldName": "open"
            },
            {
              "name": "hide-tag-count",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This hides the count of tags inside",
              "fieldName": "hideTagCount"
            },
            {
              "name": "expand-label",
              "type": {
                "text": "string"
              },
              "default": "'More'",
              "description": "Text to be displayed as label for the tag menu button",
              "fieldName": "expandLabel"
            },
            {
              "name": "adapt-width",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines the strategy for the menu adapt-width behavior.\nDefault is fixed width",
              "fieldName": "adaptWidth"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/tag/tag-menu-button/tag-menu-button.component.ts"
          },
          "tagName": "zui-tag-menu-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TagMenuButton",
          "declaration": {
            "name": "TagMenuButton",
            "module": "src/components/tag/tag-menu-button/tag-menu-button.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-tag-menu-button",
          "declaration": {
            "name": "TagMenuButton",
            "module": "src/components/tag/tag-menu-button/tag-menu-button.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/time-picker/textfield-time-picker/textfield-time-picker.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `zui-textfield-time-picker` is a form enabled component. It uses the `zui-time-picker-input` for entering hour and minute values and when in `h12` mode the day time.\nThe `zui-time-picker` is shown on the `zui-time-picker-input` icon click and can also be used for changing the time.\nWhen no `locale` is given it uses the browser locale. When no `hour-cycle` is given the locale based `hour-cycle` is used.\nIt is possible to set a min/max date time to show error messages accordingly when the entered time is lower or greater.",
          "name": "TextfieldTimePicker",
          "cssProperties": [
            {
              "description": "width of the hour input when no value is present - default: 20px",
              "name": "--zui-textfield-time-picker-input-hour-placeholder-width"
            },
            {
              "description": "width of the minute input when no value is present - default: 24px",
              "name": "--zui-textfield-time-picker-input-minute-placeholder-width"
            },
            {
              "description": "width of the input - default: 100%",
              "name": "--zui-textfield-time-picker-input-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "FORMAT_TIME_H12",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'hh:mm a'"
            },
            {
              "kind": "field",
              "name": "FORMAT_TIME_H23",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'HH:mm'"
            },
            {
              "kind": "field",
              "name": "MAX_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'This time is not allowed.'"
            },
            {
              "kind": "field",
              "name": "MIN_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'This time is not allowed.'"
            },
            {
              "kind": "field",
              "name": "REQUIRED_ERROR_MESSAGE",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'The value is required.'"
            },
            {
              "kind": "field",
              "name": "TIME_PICKER_PLACEMENTS",
              "type": {
                "text": "Placement[]"
              },
              "privacy": "private",
              "static": true,
              "default": "['bottom-end', 'bottom-start']"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "Date"
              },
              "description": "the default value is used for the time picker popover when there is no value or just parts of the `zui-time-picker-input`.",
              "attribute": "default-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_defaultValueDT",
              "type": {
                "text": "DateTime"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hourCycle",
              "type": {
                "text": "TimePicker['hourCycle']"
              },
              "description": "hour cycle",
              "return": {
                "type": {
                  "text": "'h12' | 'h23'"
                }
              },
              "attribute": "hour-cycle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "locale",
              "description": "Full locale code as defined in RFC 5646/BCP 47,\ni.e. \"en-US\".\n\nBy default, the first full locale in [navigator.languages](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages) is used.",
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "Date"
              },
              "description": "max value",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_maxValueDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "Date"
              },
              "description": "min value",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_minValueDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "placeholderDayTime",
              "type": {
                "text": "string"
              },
              "default": "'AM'",
              "description": "placeholder day time",
              "attribute": "placeholder-day-time",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholderHour",
              "type": {
                "text": "string"
              },
              "default": "'HH'",
              "description": "placeholder hour",
              "attribute": "placeholder-hour",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholderMinute",
              "type": {
                "text": "string"
              },
              "default": "'MM'",
              "description": "placeholder minute",
              "attribute": "placeholder-minute",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "required",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "selected value",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_valueDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_textfieldTimePickerOverlayRef",
              "type": {
                "text": "OverlayDirective"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_timePickerInputRef",
              "type": {
                "text": "TimePickerInput"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_showTimePicker",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_internalHourCycle",
              "type": {
                "text": "TimePicker['hourCycle']"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_timePickerInputValue",
              "type": {
                "text": "Partial<TimePickerInput['value']>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_userChange",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_timePickerPortal",
              "privacy": "private",
              "default": "`time-picker-${generateUid()}`"
            },
            {
              "kind": "field",
              "name": "_textfieldTimePickerResizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(() => {\n    requestAnimationFrame(() => {\n      this._textfieldTimePickerOverlayRef?.forcePositioning();\n    });\n  })"
            },
            {
              "kind": "field",
              "name": "_currentValueDT",
              "type": {
                "text": "DateTime"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_dayTime",
              "type": {
                "text": "TimePickerDayTimeToggle['value'] | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_formattedValue",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_is12HourFormat",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_timeFormat",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKeydown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleOutsideClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_maxValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_minValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_offset",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_requiredValidator",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_timePickerPositionReference",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleTimePickerChangedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail }",
                  "type": {
                    "text": "CustomEvent<{ value: string }>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputInputEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputChangedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail }",
                  "type": {
                    "text": "CustomEvent<{ value: string | undefined }>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputFocusInEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputToggle",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_messageAnchorReferenceCallback",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "validationMessageStyle",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "attribute": "validation-message-style",
              "reflects": true,
              "default": "static-tooltip",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidationOn",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "attribute": "show-validation-on",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "showValidation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "show-validation",
              "reflects": true,
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isPristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "this forces the validation message to be shown, if the control is invalid",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleBlurForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleInputForValidation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<TextfieldTimePicker, 'InputChangedEvent'>"
              },
              "description": "event is emitted when the input value has changed",
              "name": "zui-textfield-time-picker-input-changed"
            },
            {
              "description": "the `change` event is emitted on change",
              "name": "change"
            },
            {
              "description": "the `input` event is emitted on input",
              "name": "input"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "default-value",
              "type": {
                "text": "Date"
              },
              "description": "the default value is used for the time picker popover when there is no value or just parts of the `zui-time-picker-input`.",
              "fieldName": "defaultValue"
            },
            {
              "name": "hour-cycle",
              "type": {
                "text": "TimePicker['hourCycle']"
              },
              "description": "hour cycle",
              "return": {
                "type": {
                  "text": "'h12' | 'h23'"
                }
              },
              "fieldName": "hourCycle"
            },
            {
              "name": "locale",
              "description": "Full locale code as defined in RFC 5646/BCP 47,\ni.e. \"en-US\".\n\nBy default, the first full locale in [navigator.languages](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages) is used.",
              "fieldName": "locale"
            },
            {
              "name": "max",
              "type": {
                "text": "Date"
              },
              "description": "max value",
              "fieldName": "max"
            },
            {
              "name": "min",
              "type": {
                "text": "Date"
              },
              "description": "min value",
              "fieldName": "min"
            },
            {
              "name": "placeholder-day-time",
              "type": {
                "text": "string"
              },
              "default": "'AM'",
              "description": "placeholder day time",
              "fieldName": "placeholderDayTime"
            },
            {
              "name": "placeholder-hour",
              "type": {
                "text": "string"
              },
              "default": "'HH'",
              "description": "placeholder hour",
              "fieldName": "placeholderHour"
            },
            {
              "name": "placeholder-minute",
              "type": {
                "text": "string"
              },
              "default": "'MM'",
              "description": "placeholder minute",
              "fieldName": "placeholderMinute"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "required",
              "fieldName": "required"
            },
            {
              "name": "value",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "selected value",
              "fieldName": "value"
            },
            {
              "name": "show-validation-on",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "resolveInitializer": {
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              },
              "fieldName": "showValidationOn",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "show-validation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "showValidation",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "validation-message-style",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "fieldName": "validationMessageStyle",
              "inheritedFrom": {
                "name": "ValidationStyleMixin",
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              }
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ValidationStyleMixin",
              "module": "/src/mixins/validation-style/validation-style.mixin"
            },
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/time-picker/textfield-time-picker/textfield-time-picker.component.ts"
          },
          "tagName": "zui-textfield-time-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TextfieldTimePicker",
          "declaration": {
            "name": "TextfieldTimePicker",
            "module": "src/components/time-picker/textfield-time-picker/textfield-time-picker.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-textfield-time-picker",
          "declaration": {
            "name": "TextfieldTimePicker",
            "module": "src/components/time-picker/textfield-time-picker/textfield-time-picker.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/time-picker/time-picker/time-picker.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `zui-time-picker` is part of the `zui-textfield-time-picker` form component.\nIt consists of two `zui-time-picker-cell`'s that are responsible for manipulating hours and minutes.\nThe am/pm toggle is available when the `hour-cycle` is set to `h12`. Switching between am and pm adjusts the date value accordingly.",
          "name": "TimePicker",
          "members": [
            {
              "kind": "field",
              "name": "MAX_12_HOURS",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "static": true,
              "default": "12"
            },
            {
              "kind": "field",
              "name": "MAX_24_HOURS",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "static": true,
              "default": "23"
            },
            {
              "kind": "field",
              "name": "MIN_12_HOURS",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "static": true,
              "default": "1"
            },
            {
              "kind": "field",
              "name": "MIN_24_HOURS",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "static": true,
              "default": "0"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "Date"
              },
              "default": "new Date()",
              "description": "the default value is used when there is no value present and an interaction with one of the cell's has happened",
              "attribute": "default-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_defaultValueDT",
              "type": {
                "text": "DateTime"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hourCycle",
              "type": {
                "text": "TimePickerHourCycle"
              },
              "description": "hour cycle",
              "return": {
                "type": {
                  "text": "TimePickerHourCycle"
                }
              },
              "attribute": "hour-cycle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "integrated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "standalone / integrated",
              "attribute": "integrated",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "locale",
              "description": "Full locale code as defined in RFC 5646/BCP 47,\ni.e. \"en-US\".\n\nBy default, the first full locale in [navigator.languages](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages) is used.",
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "step size",
              "privacy": "private",
              "attribute": "step",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "selected value",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_valueDT",
              "type": {
                "text": "DateTime | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_timePickerCellHour",
              "type": {
                "text": "TimePickerCell"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_timePickerCellMinute",
              "type": {
                "text": "TimePickerCell"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_internalHourCycle",
              "type": {
                "text": "TimePickerHourCycle"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_currentDate",
              "type": {
                "text": "DateTime"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_dayTime",
              "type": {
                "text": "TimePickerDayTimeToggle['value'] | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_defaultHour",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hour",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_is12HourFormat",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_literal",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleTimePickerDayTimeChangedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{\n    detail,\n  }",
                  "type": {
                    "text": "CustomEvent<{ value: TimePickerDayTimeToggle['value'] }>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleTimePickerCellChangedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleTimePickerCellInputEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getDayTimeToggleTemplate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "default-value",
              "type": {
                "text": "Date"
              },
              "default": "new Date()",
              "description": "the default value is used when there is no value present and an interaction with one of the cell's has happened",
              "fieldName": "defaultValue"
            },
            {
              "name": "hour-cycle",
              "type": {
                "text": "TimePickerHourCycle"
              },
              "description": "hour cycle",
              "return": {
                "type": {
                  "text": "TimePickerHourCycle"
                }
              },
              "fieldName": "hourCycle"
            },
            {
              "name": "integrated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "standalone / integrated",
              "fieldName": "integrated"
            },
            {
              "name": "locale",
              "description": "Full locale code as defined in RFC 5646/BCP 47,\ni.e. \"en-US\".\n\nBy default, the first full locale in [navigator.languages](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages) is used.",
              "fieldName": "locale"
            },
            {
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "step size",
              "fieldName": "step"
            },
            {
              "name": "value",
              "type": {
                "text": "Date | null"
              },
              "default": "null",
              "description": "selected value",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/time-picker/time-picker/time-picker.component.ts"
          },
          "tagName": "zui-time-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TimePicker",
          "declaration": {
            "name": "TimePicker",
            "module": "src/components/time-picker/time-picker/time-picker.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-time-picker",
          "declaration": {
            "name": "TimePicker",
            "module": "src/components/time-picker/time-picker/time-picker.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/time-picker/time-picker-cell/time-picker-cell.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `zui-time-picker-cell` is part of the `zui-time-picker` and is meant for displaying and editing hours and minutes.",
          "name": "TimePickerCell",
          "members": [
            {
              "kind": "field",
              "name": "MAX_CHARACTER_LENGTH",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "default value",
              "attribute": "default-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "max",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "min",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "step size",
              "privacy": "private",
              "attribute": "step",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "description": "value",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_paddedValue",
              "type": {
                "text": "string | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_currentValue",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_currentInputValue",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getDecreasedValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getIncreasedValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_decreaseValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_increaseValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleInputEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleInputBlurEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleInputClickEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleInputKeydownEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLInputElement, KeyboardEvent>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "default-value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "default value",
              "fieldName": "defaultValue"
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "max",
              "fieldName": "max"
            },
            {
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "min",
              "fieldName": "min"
            },
            {
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "step size",
              "fieldName": "step"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "description": "value",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/time-picker/time-picker-cell/time-picker-cell.component.ts"
          },
          "tagName": "zui-time-picker-cell",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TimePickerCell",
          "declaration": {
            "name": "TimePickerCell",
            "module": "src/components/time-picker/time-picker-cell/time-picker-cell.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-time-picker-cell",
          "declaration": {
            "name": "TimePickerCell",
            "module": "src/components/time-picker/time-picker-cell/time-picker-cell.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/time-picker/time-picker-cell-divider/time-picker-cell-divider.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Time picker cell divider.",
          "name": "TimePickerCellDivider",
          "members": [
            {
              "kind": "field",
              "name": "COLON_SPACING",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "10"
            },
            {
              "kind": "field",
              "name": "COLON_CIRCLE_WIDTH",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "3"
            },
            {
              "kind": "field",
              "name": "literal",
              "type": {
                "text": "string"
              },
              "default": "':'",
              "description": "literal",
              "attribute": "literal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_colonHeight",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getColonLiteral",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "literal",
              "type": {
                "text": "string"
              },
              "default": "':'",
              "description": "literal",
              "fieldName": "literal"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-time-picker-cell-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TimePickerCellDivider",
          "declaration": {
            "name": "TimePickerCellDivider",
            "module": "src/components/time-picker/time-picker-cell-divider/time-picker-cell-divider.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-time-picker-cell-divider",
          "declaration": {
            "name": "TimePickerCellDivider",
            "module": "src/components/time-picker/time-picker-cell-divider/time-picker-cell-divider.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/time-picker/time-picker-day-time-toggle/time-picker-day-time-toggle.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Time picker day time toggle.",
          "name": "TimePickerDayTimeToggle",
          "members": [
            {
              "kind": "field",
              "name": "integrated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "standalone / integrated",
              "attribute": "integrated",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "DayTime"
              },
              "description": "value",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_handleAmPmToggle",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<InteractiveText>"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "integrated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "standalone / integrated",
              "fieldName": "integrated"
            },
            {
              "name": "value",
              "type": {
                "text": "DayTime"
              },
              "description": "value",
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/time-picker/time-picker-day-time-toggle/time-picker-day-time-toggle.component.ts"
          },
          "tagName": "zui-time-picker-day-time-toggle",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TimePickerDayTimeToggle",
          "declaration": {
            "name": "TimePickerDayTimeToggle",
            "module": "src/components/time-picker/time-picker-day-time-toggle/time-picker-day-time-toggle.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-time-picker-day-time-toggle",
          "declaration": {
            "name": "TimePickerDayTimeToggle",
            "module": "src/components/time-picker/time-picker-day-time-toggle/time-picker-day-time-toggle.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/time-picker/time-picker-input/time-picker-input.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `zui-time-picker-input` is part of the `zui-textfield-time-picker` and is not designed for single usage.\nIt shows hour and minute input parts and an additional day time input dependent on the given locale.\nWhen the optional `hour-cycle` is set to a twelve hour cycle \"h12\" the day time input is shown and the given locale is ignored.\nThe related input placeholders can be overriden and the hour and minute input placeholder widths can be adjusted via the documented css properties.",
          "name": "TimePickerInput",
          "cssProperties": [
            {
              "description": "width of the hour input when no value is present - default: 20px",
              "name": "--zui-time-picker-input-hour-placeholder-width"
            },
            {
              "description": "width of the minute input when no value is present - default: 24px",
              "name": "--zui-time-picker-input-minute-placeholder-width"
            },
            {
              "description": "width of the input - default: 100%",
              "name": "--zui-time-picker-input-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "MAX_12_HOURS",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "static": true,
              "default": "12"
            },
            {
              "kind": "field",
              "name": "MAX_24_HOURS",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "static": true,
              "default": "23"
            },
            {
              "kind": "field",
              "name": "MIN_12_HOURS",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "static": true,
              "default": "1"
            },
            {
              "kind": "field",
              "name": "MIN_24_HOURS",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "static": true,
              "default": "0"
            },
            {
              "kind": "field",
              "name": "MAX_MINUTES",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "static": true,
              "default": "59"
            },
            {
              "kind": "field",
              "name": "MIN_MINUTES",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "static": true,
              "default": "0"
            },
            {
              "kind": "field",
              "name": "MAX_CHARACTER_LENGTH",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "static": true,
              "default": "2"
            },
            {
              "kind": "field",
              "name": "hourCycle",
              "type": {
                "text": "TimePicker['hourCycle']"
              },
              "description": "hour cycle",
              "return": {
                "type": {
                  "text": "'h12' | 'h23'"
                }
              },
              "attribute": "hour-cycle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the input is valid or not",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "locale",
              "description": "locale",
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholderDayTime",
              "type": {
                "text": "TimePickerDayTimeToggle['value']"
              },
              "default": "'AM'",
              "description": "placeholder day time",
              "attribute": "placeholder-day-time",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholderHour",
              "type": {
                "text": "string"
              },
              "default": "'HH'",
              "description": "placeholder hour",
              "attribute": "placeholder-hour",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholderMinute",
              "type": {
                "text": "string"
              },
              "default": "'MM'",
              "description": "placeholder minute",
              "attribute": "placeholder-minute",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stepHour",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "step hour",
              "privacy": "private",
              "attribute": "step-hour",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stepMinute",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "step minute",
              "privacy": "private",
              "attribute": "step-minute",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "TimePickerInputValue | undefined"
              },
              "description": "selected value",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "TimePickerInputValue | undefined"
              },
              "description": "default value",
              "attribute": "default-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_inputHourRef",
              "type": {
                "text": "TimePickerInputPartNumber"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputMinuteRef",
              "type": {
                "text": "TimePickerInputPartNumber"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputDayTimeRef",
              "type": {
                "text": "TimePickerInputPartDayTime"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_internalHourCycle",
              "type": {
                "text": "TimePicker['hourCycle']"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_isValidNextElement",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_is12HourFormat",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_literal",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hideLiteral",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleFocusNextTimePickerInputPart",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<TimePickerInputPartNumber | TimePickerInputPartDayTime>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleFocusPreviousTimePickerInputPart",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<TimePickerInputPartNumber>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleHourCycleChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputPartHourChangedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputPartMinuteChangedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputPartDayTimeChangedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<TimePickerInputPartNumber | TimePickerInputPartDayTime, CustomEvent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputPartHourKeydownEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<TimePickerInputPartNumber, KeyboardEvent>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "hour-cycle",
              "type": {
                "text": "TimePicker['hourCycle']"
              },
              "description": "hour cycle",
              "return": {
                "type": {
                  "text": "'h12' | 'h23'"
                }
              },
              "fieldName": "hourCycle"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "whether the input is valid or not",
              "fieldName": "invalid"
            },
            {
              "name": "locale",
              "description": "locale",
              "fieldName": "locale"
            },
            {
              "name": "placeholder-day-time",
              "type": {
                "text": "TimePickerDayTimeToggle['value']"
              },
              "default": "'AM'",
              "description": "placeholder day time",
              "fieldName": "placeholderDayTime"
            },
            {
              "name": "placeholder-hour",
              "type": {
                "text": "string"
              },
              "default": "'HH'",
              "description": "placeholder hour",
              "fieldName": "placeholderHour"
            },
            {
              "name": "placeholder-minute",
              "type": {
                "text": "string"
              },
              "default": "'MM'",
              "description": "placeholder minute",
              "fieldName": "placeholderMinute"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "fieldName": "readonly"
            },
            {
              "name": "step-hour",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "step hour",
              "fieldName": "stepHour"
            },
            {
              "name": "step-minute",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "step minute",
              "fieldName": "stepMinute"
            },
            {
              "name": "value",
              "type": {
                "text": "TimePickerInputValue | undefined"
              },
              "description": "selected value",
              "fieldName": "value"
            },
            {
              "name": "default-value",
              "type": {
                "text": "TimePickerInputValue | undefined"
              },
              "description": "default value",
              "fieldName": "defaultValue"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/time-picker/time-picker-input/time-picker-input.component.ts"
          },
          "tagName": "zui-time-picker-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TimePickerInput",
          "declaration": {
            "name": "TimePickerInput",
            "module": "src/components/time-picker/time-picker-input/time-picker-input.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-time-picker-input",
          "declaration": {
            "name": "TimePickerInput",
            "module": "src/components/time-picker/time-picker-input/time-picker-input.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/time-picker/time-picker-input-part-day-time/time-picker-input-part-day-time.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `zui-time-picker-input-part-day-time` is part of the `zui-time-picker-input` and is not designed for single usage.",
          "name": "TimePickerInputPartDayTime",
          "members": [
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "placeholder",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "Value"
              },
              "description": "selected value",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_inputRef",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputPartDayTimeFocusEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputPartDayTimeBluredEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_commitInputValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputPartDayTimeInputEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent | KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputPartDayTimeKeydownEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLInputElement, KeyboardEvent>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "placeholder",
              "fieldName": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "fieldName": "readonly"
            },
            {
              "name": "value",
              "type": {
                "text": "Value"
              },
              "description": "selected value",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/time-picker/time-picker-input-part-day-time/time-picker-input-part-day-time.component.ts"
          },
          "tagName": "zui-time-picker-input-part-day-time",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TimePickerInputPartDayTime",
          "declaration": {
            "name": "TimePickerInputPartDayTime",
            "module": "src/components/time-picker/time-picker-input-part-day-time/time-picker-input-part-day-time.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-time-picker-input-part-day-time",
          "declaration": {
            "name": "TimePickerInputPartDayTime",
            "module": "src/components/time-picker/time-picker-input-part-day-time/time-picker-input-part-day-time.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/title-stack/title-stack/title-stack.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A “title stack” is a recurring pattern / stack of texts.\n\n## Skeleton\nThe Skeleton components can be added to the named skeleton slot and will be displayed when **nothing** is in the default slot.\nWhen the skeleton is not displayed make sure there are no spaces or line breaks passed in the default slot.",
          "name": "TitleStack",
          "slots": [
            {
              "description": "This is the default slot for some headline element like `<h*>` (you can't put text nodes). The styling of the headline elements is taken care of by the component.",
              "name": "default"
            },
            {
              "description": "This is the slot for an optional icon that will appear at size s12 next to the meta items.",
              "name": "icon"
            },
            {
              "description": "This is the slot meta data items. The order is preserved.",
              "name": "meta"
            },
            {
              "description": "This is the slot for adding a skeleton instead of a headline element. The Skeleton is only displayed when the default slot is empty.",
              "name": "skeleton"
            },
            {
              "description": "This is the slot for adding a skeleton instead of a label. The Skeleton is only displayed when the label is not set.",
              "name": "skeleton-label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "TitleStackSize"
              },
              "default": "'m'",
              "description": "Sets the size of the title stack",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An optional label to be set above",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disableWrapping",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true it truncates the label, headline and meta data items if they are too long or too many.\nIf false, they get wrapped to new lines.",
              "attribute": "disable-wrapping",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedMetaItems",
              "type": {
                "text": "TitleStackMetaItem[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleIconSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "forces the correct size to all projected icons"
            },
            {
              "kind": "method",
              "name": "_handleMetaSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_toggleFirstMetaItemSeparator",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateMetaItems",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "TitleStackSize"
              },
              "default": "'m'",
              "description": "Sets the size of the title stack",
              "fieldName": "size"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An optional label to be set above",
              "fieldName": "label"
            },
            {
              "name": "disable-wrapping",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true it truncates the label, headline and meta data items if they are too long or too many.\nIf false, they get wrapped to new lines.",
              "fieldName": "disableWrapping"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-title-stack",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TitleStack",
          "declaration": {
            "name": "TitleStack",
            "module": "src/components/title-stack/title-stack/title-stack.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-title-stack",
          "declaration": {
            "name": "TitleStack",
            "module": "src/components/title-stack/title-stack/title-stack.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/title-stack/title-stack-meta-item/title-stack-meta-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The title stack meta item is used to compose additional captions of a title stack.\nPlease refer to the readme of the title stack component for further details.\n\n## Skeleton\nThe Skeleton components can be added to the named skeleton slot and will be displayed when **nothing** is in the default slot.\nWhen the skeleton is not displayed make sure there are no spaces or line breaks passed in the default slot.",
          "name": "TitleStackMetaItem",
          "cssProperties": [
            {
              "description": "sets the vertical size of the item separator",
              "name": "--zui-title-stack-meta-item-separator-height"
            },
            {
              "description": "sets the horizontal size of the item separator",
              "name": "--zui-title-stack-meta-item-separator-width"
            }
          ],
          "slots": [
            {
              "description": "This is the default slot which should reflect the text node.",
              "name": "default"
            },
            {
              "description": "This is the slot for adding a skeleton instead text content. The Skeleton is only displayed when the default slot is empty.",
              "name": "skeleton"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "TitleStack['size']"
              },
              "default": "'m'",
              "description": "Sets the size of the title stack",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideSeparator",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows hiding the leading separator",
              "attribute": "hide-separator",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "TitleStack['size']"
              },
              "default": "'m'",
              "description": "Sets the size of the title stack",
              "fieldName": "size"
            },
            {
              "name": "hide-separator",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows hiding the leading separator",
              "fieldName": "hideSeparator"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-title-stack-meta-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TitleStackMetaItem",
          "declaration": {
            "name": "TitleStackMetaItem",
            "module": "src/components/title-stack/title-stack-meta-item/title-stack-meta-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-title-stack-meta-item",
          "declaration": {
            "name": "TitleStackMetaItem",
            "module": "src/components/title-stack/title-stack-meta-item/title-stack-meta-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/time-picker/time-picker-input-part-number/time-picker-input-part-number.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `zui-time-picker-input-part-number` is part of the `zui-time-picker-input` and is not designed for single usage.",
          "name": "TimePickerInputPartNumber",
          "cssProperties": [
            {
              "description": "width of the input when no value is present",
              "name": "--zui-time-picker-input-part-number-placeholder-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "description": "max value",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "description": "min value",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "placeholder",
              "attribute": "placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "step",
              "privacy": "private",
              "attribute": "step",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number | undefined"
              },
              "description": "value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "number | undefined"
              },
              "description": "default value",
              "attribute": "default-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showPlaceholder",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "_inputRef",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_internalValue",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_paddedValue",
              "type": {
                "text": "string | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputPartNumberFocusEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputPartNumberInputEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent | KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputPartNumberBlurredEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_commitInputValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleTimePickerInputPartNumberKeydownEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<HTMLInputElement, KeyboardEvent>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "description": "max value",
              "fieldName": "max"
            },
            {
              "name": "min",
              "type": {
                "text": "number"
              },
              "description": "min value",
              "fieldName": "min"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "placeholder",
              "fieldName": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly",
              "fieldName": "readonly"
            },
            {
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "step",
              "fieldName": "step"
            },
            {
              "name": "value",
              "type": {
                "text": "number | undefined"
              },
              "description": "value",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "value"
            },
            {
              "name": "default-value",
              "type": {
                "text": "number | undefined"
              },
              "description": "default value",
              "fieldName": "defaultValue"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/time-picker/time-picker-input-part-number/time-picker-input-part-number.component.ts"
          },
          "tagName": "zui-time-picker-input-part-number",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TimePickerInputPartNumber",
          "declaration": {
            "name": "TimePickerInputPartNumber",
            "module": "src/components/time-picker/time-picker-input-part-number/time-picker-input-part-number.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-time-picker-input-part-number",
          "declaration": {
            "name": "TimePickerInputPartNumber",
            "module": "src/components/time-picker/time-picker-input-part-number/time-picker-input-part-number.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/toggle-bar/toggle-bar/toggle-bar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The toggle bar is a collection of buttons that behave like a group of radio buttons.\nOnly one button can be active at a time. The activated button is highlighted by setting its emphasis.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.2?node-id=13009%3A2767)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=23651%3A480653)",
          "name": "ToggleBar",
          "slots": [
            {
              "description": "default slot for zui-toggle-bar-button's",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'selected'",
              "description": "emphasis that is used for the selected button state",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "size",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "value of the current selected button",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "enableDeselection",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "enables the deselection of the buttons",
              "attribute": "enable-deselection",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the toggle bar is required or not",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_assignedToggleBarButtons",
              "type": {
                "text": "ToggleBarButton[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_propagateDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_propagateReadonly",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_propagateState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleToggleBarButtonSelected",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<{ value: string }>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleSlotchange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, unknown>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DelegateFocusMixin",
                "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "description": "emits when the toggle bar value has changed",
              "name": "change"
            },
            {
              "description": "emits when the toggle bar value has changed",
              "name": "input"
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'selected'",
              "description": "emphasis that is used for the selected button state",
              "fieldName": "emphasis"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "size",
              "fieldName": "size"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "value of the current selected button",
              "fieldName": "value"
            },
            {
              "name": "enable-deselection",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "enables the deselection of the buttons",
              "fieldName": "enableDeselection"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the toggle bar is required or not",
              "fieldName": "required"
            },
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid",
              "inheritedFrom": {
                "name": "FormValidationMixin",
                "module": "src/mixins/form-participation/form-validation.mixin.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute",
              "inheritedFrom": {
                "name": "FormDataHandlingMixin",
                "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormValidationMixin",
              "module": "/src/mixins/form-participation/form-validation.mixin"
            },
            {
              "name": "FormDataHandlingMixin",
              "module": "/src/mixins/form-participation/form-data-handling.mixin"
            },
            {
              "name": "DelegateFocusMixin",
              "module": "/src/mixins/visual-focus/delegate-focus.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/toggle-bar/toggle-bar/toggle-bar.component.ts"
          },
          "tagName": "zui-toggle-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToggleBar",
          "declaration": {
            "name": "ToggleBar",
            "module": "src/components/toggle-bar/toggle-bar/toggle-bar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-toggle-bar",
          "declaration": {
            "name": "ToggleBar",
            "module": "src/components/toggle-bar/toggle-bar/toggle-bar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/user-menu-button/user-menu-button/user-menu-button.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "User menu button that can display a user name with an optional role and an avatar.\n\n## Figma\n- [Styleguide – Web](https://www.figma.com/file/6dkjypErYWQPfuRBD58Aey/%F0%9F%93%96--Styleguide---Web?node-id=3279%3A57420&viewport=279%2C103%2C0.15313252806663513)",
          "name": "UserMenuButton",
          "slots": [
            {
              "description": "Slot for an avatar. Button size 'm' has a '32' sized avatar and button size 'l' a '40' sized.",
              "name": "avatar"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "avatarOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to only show the avatar of the UserMenuButton or not",
              "attribute": "avatar-only",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "avatarOnlyExternally",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the avatar only styling, when it's triggered externally\nThe component has got two avatar only attributes. Either the user sets 'avatar-only' explicitly, to hide user\ndetails, or the component is used in other components, where the user details may be hidden because of space\navailability. To handle both cases, external triggering is reflected by 'avatar-only-externally'.",
              "privacy": "private",
              "attribute": "avatar-only-externally",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Emphasis of either `default` or `selected` of the UserMenuButton",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Size of either `m` or `l` of the UserMenuButton",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "userName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "User name for the UserMenuButton",
              "attribute": "user-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "userRole",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Optional user role for the UserMenuButton",
              "attribute": "user-role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_isTruncated",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_userNameContainer",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_userRoleContainer",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedIcons",
              "type": {
                "text": "IconLikeElement[]"
              },
              "privacy": "private",
              "description": "Selects elements from icon slot"
            },
            {
              "kind": "field",
              "name": "_assignedAvatars",
              "type": {
                "text": "Avatar[]"
              },
              "privacy": "private",
              "description": "Selects elements from avatar slot"
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private",
              "default": "new ResizeObserver(() => {\n    this._checkTruncation();\n  })"
            },
            {
              "kind": "field",
              "name": "_isAvatarOnlyWithAnyUserInfo",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "description": "Checks if a tooltip should be displayed if the component shows an avatar only.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_checkTruncation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateIconSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateAvatarSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_tooltipText",
              "type": {
                "text": "TemplateResult"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleAvatarSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_getContentClass",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleIconSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "avatar-only",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to only show the avatar of the UserMenuButton or not",
              "fieldName": "avatarOnly"
            },
            {
              "name": "avatar-only-externally",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the avatar only styling, when it's triggered externally\nThe component has got two avatar only attributes. Either the user sets 'avatar-only' explicitly, to hide user\ndetails, or the component is used in other components, where the user details may be hidden because of space\navailability. To handle both cases, external triggering is reflected by 'avatar-only-externally'.",
              "fieldName": "avatarOnlyExternally"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Emphasis of either `default` or `selected` of the UserMenuButton",
              "fieldName": "emphasis"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'m'",
              "description": "Size of either `m` or `l` of the UserMenuButton",
              "fieldName": "size"
            },
            {
              "name": "user-name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "User name for the UserMenuButton",
              "fieldName": "userName"
            },
            {
              "name": "user-role",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Optional user role for the UserMenuButton",
              "fieldName": "userRole"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "superclass": {
            "name": "RealBaseElement",
            "module": "/src/components/base/base-element.class"
          },
          "tagName": "zui-user-menu-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UserMenuButton",
          "declaration": {
            "name": "UserMenuButton",
            "module": "src/components/user-menu-button/user-menu-button/user-menu-button.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-user-menu-button",
          "declaration": {
            "name": "UserMenuButton",
            "module": "src/components/user-menu-button/user-menu-button/user-menu-button.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/toggle-bar/toggle-bar-button/toggle-bar-button.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The zui-toggle-bar-button is a wrapper for the zui-button to add toggle bar specific styling.\nIt is not intended for single use but just as a part of the zui-toggle-bar.\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.2?node-id=13009%3A2767)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=23651%3A480653)",
          "name": "ToggleBarButton",
          "slots": [
            {
              "description": "This is the default slot. It's an innerHtml of the button-element",
              "name": "default"
            },
            {
              "description": "Here you can insert your own icon",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "nonInteractive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "constitutes whether the button is non-interactive",
              "attribute": "non-interactive",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states (default/highlight/primary-highlight).",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "Defines one of two possible sizes (s/l);",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "value of the toggle bar button",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly state",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "EventWithTarget<Button>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "GetZuiEvent<ToggleBarButton, 'SelectedEvent'>"
              },
              "description": "emits when the toggle bar button is selected",
              "name": "zui-toggle-bar-button-selected"
            }
          ],
          "attributes": [
            {
              "name": "non-interactive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "constitutes whether the button is non-interactive",
              "fieldName": "nonInteractive"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "Emphasis"
              },
              "default": "'default'",
              "description": "Defines one of three possible emphasis states (default/highlight/primary-highlight).",
              "fieldName": "emphasis"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'s'",
              "description": "Defines one of two possible sizes (s/l);",
              "fieldName": "size"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "value of the toggle bar button",
              "fieldName": "value"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "readonly state",
              "fieldName": "readonly"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            },
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/components/toggle-bar/toggle-bar-button/toggle-bar-button.component.ts"
          },
          "tagName": "zui-toggle-bar-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToggleBarButton",
          "declaration": {
            "name": "ToggleBarButton",
            "module": "src/components/toggle-bar/toggle-bar-button/toggle-bar-button.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-toggle-bar-button",
          "declaration": {
            "name": "ToggleBarButton",
            "module": "src/components/toggle-bar/toggle-bar-button/toggle-bar-button.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/disabled/disabled.mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "DisabledMixin",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this & { tabindex: string | null }>"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DisabledMixin",
          "declaration": {
            "name": "DisabledMixin",
            "module": "src/mixins/disabled/disabled.mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/events/events.mixin.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "addEvent",
          "parameters": [
            {
              "name": "event",
              "type": {
                "text": "TEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "EventsMixin",
          "return": {
            "type": {
              "text": "MixinReturnValue<M>"
            }
          },
          "parameters": [
            {
              "name": "baseClass",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "mixins",
              "type": {
                "text": "M"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "WithEventsMixin",
          "parameters": [
            {
              "name": "baseClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addEvent",
          "declaration": {
            "name": "addEvent",
            "module": "src/mixins/events/events.mixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "EventsMixin",
          "declaration": {
            "name": "EventsMixin",
            "module": "src/mixins/events/events.mixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithEventsMixin",
          "declaration": {
            "name": "WithEventsMixin",
            "module": "src/mixins/events/events.mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/form-participation/form-data-handling.mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "This mixin is used to add form-data-handling capabilities to a component.\nThe component has to implement `FormEnabledElement`.\n\nExample:\n```\nclass MyFormComponent extends FormDataHandlingMixin(RealBaseElement) implements FormEnabledElement {",
          "name": "FormDataHandlingMixin",
          "members": [
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_formControl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "formControl",
              "type": {
                "text": "HTMLElement | null"
              }
            },
            {
              "kind": "field",
              "name": "disableSubmitOnEnter",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "hostForm",
              "type": {
                "text": "HTMLFormElement | null"
              }
            },
            {
              "kind": "field",
              "name": "_resetValueAttribute",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "attribute": "reset-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "resetValue",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "_resetPropertyValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resetAttributeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_lastResetValueType",
              "type": {
                "text": "'attribute' | 'property'"
              },
              "privacy": "private",
              "default": "'property'"
            },
            {
              "kind": "field",
              "name": "_hasResetBeenInitialized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "unknown"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_shouldSyncHiddenInput",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              }
            },
            {
              "kind": "method",
              "name": "_syncHiddenInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_deleteInput",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_handleKey",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleFormReset",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleFormSubmit",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleFormData",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "SubmitEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formDataCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ formData }",
                  "type": {
                    "text": "{ formData: FormData }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, unknown>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_previousTabindex",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            },
            {
              "kind": "field",
              "name": "_boundClickHandler",
              "type": {
                "text": "(event: Event) => void"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name"
            },
            {
              "name": "reset-value",
              "type": {
                "text": "string"
              },
              "fieldName": "_resetValueAttribute"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if component is disabled. When a component is disabled, no click events are emitted.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "DisabledMixin",
                "module": "src/mixins/disabled/disabled.mixin.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "DisabledMixin",
              "module": "/src/mixins/disabled/disabled.mixin"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              },
              "description": "the superClass for the component. Most likely this is `RealBaseElement`."
            },
            {
              "name": "{ disableSubmitOnEnter = false, formControlSelector = '[zuiFormControl]' }",
              "default": "{}",
              "type": {
                "text": "Partial<FormDataHandlingOptions>"
              }
            },
            {
              "description": "to customize behavior",
              "name": "options"
            },
            {
              "description": "to disable submission of parent form if `Enter` is pressed",
              "name": "options.disableSubmitOnEnter"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormDataHandlingMixin",
          "declaration": {
            "name": "FormDataHandlingMixin",
            "module": "src/mixins/form-participation/form-data-handling.mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/form-participation/form-validation.mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "This mixin is used to add form-handling capabilities to a component.\nThe component has to implement `FormEnabledElement`.\n\nExample:\n```\nclass MyExampleComponent extends FormValidationMixin(FormDataHandlingMixin(RealBaseElement))\n implements FormValidationElement<FormEnabledElement> {",
          "name": "FormValidationMixin",
          "members": [
            {
              "kind": "field",
              "name": "initialValidator",
              "type": {
                "text": "Validator"
              },
              "static": true,
              "default": "{ type: 'customError', validator: () => true }"
            },
            {
              "kind": "field",
              "name": "initialValidityMessages",
              "type": {
                "text": "ValidityMessages"
              },
              "static": true,
              "default": "{\n      customError: undefined,\n      badInput: undefined,\n      patternMismatch: undefined,\n      rangeOverflow: undefined,\n      rangeUnderflow: undefined,\n      stepMismatch: undefined,\n      tooLong: undefined,\n      tooShort: undefined,\n      typeMismatch: undefined,\n      valueMissing: undefined,\n    }"
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "valid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              }
            },
            {
              "kind": "field",
              "name": "_validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "private",
              "default": "[FormEnabledComponentClass.initialValidator]"
            },
            {
              "kind": "field",
              "name": "_validationState",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "private",
              "default": "{\n      valid: true,\n      customError: false,\n      badInput: false,\n      rangeOverflow: false,\n      rangeUnderflow: false,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      patternMismatch: false,\n    }"
            },
            {
              "kind": "field",
              "name": "_validationMessages",
              "type": {
                "text": "Partial<ValidityMessages>"
              },
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "_defaultValidationMessages",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_forceCustomError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_propertiesForValidationUpdate",
              "type": {
                "text": "string[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_toggleValidationState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getFailedValidityState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Validator['type'] | undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValidityMessages",
              "return": {
                "type": {
                  "text": "ValidityMessages"
                }
              }
            },
            {
              "kind": "method",
              "name": "setDefaultValidityMessages",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validityMessages",
                  "type": {
                    "text": "Partial<ValidityMessages>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "validationCallback",
              "return": {
                "type": {
                  "text": "ValidationResult"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validator",
                  "type": {
                    "text": "Validator"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeValidator",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "validatorType",
                  "type": {
                    "text": "Validator['type']"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "resetValidators",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "resetValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "Map<string, unknown>"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "valid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "valid"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              },
              "description": "the superClass for the component. Most likely this is `RealBaseElement`."
            },
            {
              "name": "{}",
              "default": "{}"
            },
            {
              "description": "to customize behavior",
              "name": "options"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormValidationMixin",
          "declaration": {
            "name": "FormValidationMixin",
            "module": "src/mixins/form-participation/form-validation.mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/metrics/simple-usage-metrics.mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "UsageMixin",
          "members": [
            {
              "kind": "field",
              "name": "_isMetricsEnabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UsageMixin",
          "declaration": {
            "name": "UsageMixin",
            "module": "src/mixins/metrics/simple-usage-metrics.mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/validation-style/validation-style.mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "ValidationStyleMixin",
          "members": [
            {
              "kind": "field",
              "name": "showValidationOn",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "attribute": "show-validation-on",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showValidation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "show-validation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessageStyle",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "attribute": "validation-message-style",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_isPristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "method",
              "name": "formSubmitCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "subEvent",
                  "type": {
                    "text": "EventWithTarget<HTMLFormElement>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "this forces the validation message to be shown, if the control is invalid"
            },
            {
              "kind": "field",
              "name": "_handleBlurForValidation",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleInputForValidation",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "show-validation-on",
              "type": {
                "text": "ShowValidationOnPropertyOptions"
              },
              "default": "showValidationOn",
              "description": "Determines the behavior when the validation message should be shown on interaction with the input element.\nInput mode always shows the message while blur mode hides the message on typing.",
              "resolveInitializer": {
                "module": "src/mixins/validation-style/validation-style.mixin.ts"
              },
              "fieldName": "showValidationOn"
            },
            {
              "name": "show-validation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag that is used to determine if the component validation message should be shown.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "showValidation"
            },
            {
              "name": "validation-message-style",
              "type": {
                "text": "TListOfPassedSupportedValidationStyles[number]"
              },
              "description": "Component specific validation style for showing the validation message.\nDefaults to first supported style, if not explicitly set.",
              "fieldName": "validationMessageStyle"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "{\n    showValidationOnSubmit = true,\n    showValidationForPristine = false,\n    showValidationOn = 'blur',\n    supportedValidationMessageStyles,\n    defaultValidationMessageStyle,\n  }",
              "type": {
                "text": "ValidationStyleMixinOptions<TListOfPassedSupportedValidationStyles>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ValidationStyleMixin",
          "declaration": {
            "name": "ValidationStyleMixin",
            "module": "src/mixins/validation-style/validation-style.mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/visual-focus/delegate-focus.mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "DelegateFocusMixin",
          "members": [
            {
              "kind": "field",
              "name": "_focusableElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "focusCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "{ selector = '[zui-capture-focus]' }",
              "default": "{}"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DelegateFocusMixin",
          "declaration": {
            "name": "DelegateFocusMixin",
            "module": "src/mixins/visual-focus/delegate-focus.mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/visual-focus/focus-differentiation.mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "This mixin is used to differentiate between mouse focus and keyboard focus on a component.\nIt gives either the host the styling attribute 'zui-keyboard-focused' or 'zui-mouse-focused' depending, whether\nthe component itself should receive those or not.\n\nIf you add the _tagging attribute_ `zui-differentiate-focus` to a DOM element they will receive one of\nthose attributes, too.\n\nHowever, in most cases, you do not need to supply any tagging attributes, because the focus\ndifferentiation will fall back to the host element to determine focus type.\n\n\nExample:\n```\nclass MyExampleComponent extends FocusDifferentiationMixin(RealBaseElement) {\n  ...\n  protected override render(): TemplateResult | void {\n    return html`<span zui-differentiate-focus>\"Example\"</span>`;\n  }\n  ...\n}\n\n```\ncould be targeted with `span[zui-keyboard-focused]` if it receives keyboard focus",
          "name": "FocusDifferentiationMixin",
          "members": [
            {
              "kind": "field",
              "name": "_taggedDifferentiableElements",
              "type": {
                "text": "NodeListOf<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_keyboardActive",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "_differentiableElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "description": "Convenient getter to retrieve the target elements",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_addFocusListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_removeFocusListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateFocusAttributes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "onElement",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_handleFocusInEvent",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleFocusOutEvent",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleKeyDownEvent",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleMouseDownEvent",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleGlobalKeyDownEvent",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleGlobalMouseDownEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "{\n    /**\n     * By default, the input source is not updated once the targets are focused.\n     * This option allows to update the attributes while the focus remains on the targets.\n     */\n    updateWhileFocused = false,\n    /**\n     * Selector for specific focus listener targets to be used.\n     * Optionally, their ids will be used to provide explicit\n     * attributes on the host to be used as styling targets.\n     */\n    selector = '[zui-differentiate-focus]',\n  }",
              "default": "{}"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FocusDifferentiationMixin",
          "declaration": {
            "name": "FocusDifferentiationMixin",
            "module": "src/mixins/visual-focus/focus-differentiation.mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/icons/icon.mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "IconMixin",
          "members": [
            {
              "kind": "field",
              "name": "isIcon",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "tagging property used to use `*[zui-icon]` as a querySelector for zuiIcons",
              "attribute": "zui-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "IconSize"
              },
              "default": "defaultSize",
              "description": "The size of the Icon",
              "attribute": "size",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "zui-icon",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "tagging property used to use `*[zui-icon]` as a querySelector for zuiIcons",
              "fieldName": "isIcon"
            },
            {
              "name": "size",
              "type": {
                "text": "IconSize"
              },
              "default": "defaultSize",
              "description": "The size of the Icon",
              "resolveInitializer": {
                "module": "src/mixins/icons/icon.mixin.ts"
              },
              "fieldName": "size"
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "{ defaultSize }",
              "default": "{ defaultSize: 's16' }",
              "type": {
                "text": "{ defaultSize: IconSize }"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IconMixin",
          "declaration": {
            "name": "IconMixin",
            "module": "src/mixins/icons/icon.mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/disabled/disabled.interfaces.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/icons/icon.interfaces.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/validation-style/validation-style.interfaces.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/form-participation/form-participation.interfaces.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/form-participation/form-participation.types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/icons/icon.types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/directives/overlay/overlay.directive.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "OVERLAY_DIRECTIVE_STYLES",
          "default": "css`\n  ${unsafeCSS(style)}\n`"
        },
        {
          "kind": "class",
          "description": "This directive allows projecting arbitrary html content into an overlay.\nThe projected contents will be positioned relative to the host.",
          "name": "OverlayDirective",
          "slots": [
            {
              "description": "The default slot content will be projected into the overlay.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "portal",
              "default": "`${OVERLAY_PORTAL}-${generateUid()}`",
              "description": "The destination overlay name is passed through.",
              "attribute": "portal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placements",
              "type": {
                "text": "Placement[]"
              },
              "default": "['bottom-start']",
              "description": "Allowed placements of the overlay content relative to the host.\nMultiple values can be provided as comma separated list. The\nfirst setting will be applied initially.\nDefaults to `bottom-start`.",
              "attribute": "placements",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clone",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Clones projected contents instead of moving them.\nYou can not clone nested slots. If this is what you want use the shouldProjectSlots property.",
              "attribute": "clone",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to flip content if space is up or not.\nPossible flipping directions are set via the `placements` attribute.",
              "attribute": "flip",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flipPadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Allows setting a padding to the flip detection.",
              "attribute": "flip-padding",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "shouldProjectSlots",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true any slots in the to be projected content will be handled. Their slotted content will be transfered into the overlay and back when unmounting.\nThis is necessary if nested slots should be displayed properly in the portal.\nA slot should not be the first child of the portal as it will be flattened.\nAlways wrap your projected content in a non-slot element if you want it to be projected back to its origin after the portal is unmounted.",
              "attribute": "should-project-slots",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "positionReferenceCallback",
              "type": {
                "text": "() => VirtualElement"
              },
              "description": "An optional callback function which allows to reveal the positioning reference element.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "offsetHandler",
              "type": {
                "text": "Options['offset']"
              },
              "description": "An optional function which allows to customize the tooltip offset.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_popperInstance",
              "type": {
                "text": "PopperInstance | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "forcePositioning",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_positionSlotContents",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_startPositioning",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setPositioningOptions",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_endPositioning",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "portal",
              "default": "`${OVERLAY_PORTAL}-${generateUid()}`",
              "description": "The destination overlay name is passed through.",
              "fieldName": "portal"
            },
            {
              "name": "placements",
              "type": {
                "text": "Placement[]"
              },
              "default": "OVERLAY_DEFAULT_PLACEMENTS",
              "description": "Allowed placements of the overlay content relative to the host.\nMultiple values can be provided as comma separated list. The\nfirst setting will be applied initially.\nDefaults to `bottom-start`.",
              "resolveInitializer": {
                "module": "src/directives/overlay/overlay.directive.ts"
              },
              "fieldName": "placements"
            },
            {
              "name": "clone",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Clones projected contents instead of moving them.\nYou can not clone nested slots. If this is what you want use the shouldProjectSlots property.",
              "fieldName": "clone"
            },
            {
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to flip content if space is up or not.\nPossible flipping directions are set via the `placements` attribute.",
              "fieldName": "flip"
            },
            {
              "name": "flip-padding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Allows setting a padding to the flip detection.",
              "fieldName": "flipPadding"
            },
            {
              "name": "should-project-slots",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true any slots in the to be projected content will be handled. Their slotted content will be transfered into the overlay and back when unmounting.\nThis is necessary if nested slots should be displayed properly in the portal.\nA slot should not be the first child of the portal as it will be flattened.\nAlways wrap your projected content in a non-slot element if you want it to be projected back to its origin after the portal is unmounted.",
              "fieldName": "shouldProjectSlots"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zui-overlay-directive",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OVERLAY_DIRECTIVE_STYLES",
          "declaration": {
            "name": "OVERLAY_DIRECTIVE_STYLES",
            "module": "src/directives/overlay/overlay.directive.ts"
          }
        },
        {
          "kind": "js",
          "name": "OverlayDirective",
          "declaration": {
            "name": "OverlayDirective",
            "module": "src/directives/overlay/overlay.directive.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-overlay-directive",
          "declaration": {
            "name": "OverlayDirective",
            "module": "src/directives/overlay/overlay.directive.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/directives/portal/portal.directive.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "PORTAL_DIRECTIVE_STYLES",
          "default": "css`\n  ${unsafeCSS(style)}\n`"
        },
        {
          "kind": "class",
          "description": "This directive allows projecting arbitrary html elements into a portal.\nThe targeted portal (or at least a default portal) must exist in the DOM somewhere.",
          "name": "PortalDirective",
          "slots": [
            {
              "description": "The default slot content will be projected into the portal.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "portal",
              "type": {
                "text": "string | undefined"
              },
              "description": "The destination can be given to target a specific portal other then the default one.\nIt behaves like the slot attribute, but for portals.",
              "attribute": "portal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clone",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Clones projected contents instead of moving them.\nYou can not clone nested slots. If this is what you want use the shouldProjectSlots property.",
              "attribute": "clone",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "shouldProjectSlots",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true the projected Elements contained slots assigned Elements will handled as well\nThis is necessary if nested slots should be displayed properly in the portal.\nA slot should not be the first child of the portal as it will be flattened.\nAlways wrap your projected content in a non-slot element if you want it to be projected back to its origin after the portal is unmounted.",
              "attribute": "shouldProjectSlots",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_projectedElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "description": "Collects all slotted elements (!) to be taken into account for projection."
            },
            {
              "kind": "field",
              "name": "_portal",
              "type": {
                "text": "Portal | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "projectContents",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Projects the given slot elements contents to a portal.\n**Only one element (not a text node!) can be projected!**"
            }
          ],
          "attributes": [
            {
              "name": "portal",
              "type": {
                "text": "string | undefined"
              },
              "description": "The destination can be given to target a specific portal other then the default one.\nIt behaves like the slot attribute, but for portals.",
              "fieldName": "portal"
            },
            {
              "name": "clone",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Clones projected contents instead of moving them.\nYou can not clone nested slots. If this is what you want use the shouldProjectSlots property.",
              "fieldName": "clone"
            },
            {
              "name": "shouldProjectSlots",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true the projected Elements contained slots assigned Elements will handled as well\nThis is necessary if nested slots should be displayed properly in the portal.\nA slot should not be the first child of the portal as it will be flattened.\nAlways wrap your projected content in a non-slot element if you want it to be projected back to its origin after the portal is unmounted.",
              "fieldName": "shouldProjectSlots"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zui-portal-directive",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PORTAL_DIRECTIVE_STYLES",
          "declaration": {
            "name": "PORTAL_DIRECTIVE_STYLES",
            "module": "src/directives/portal/portal.directive.ts"
          }
        },
        {
          "kind": "js",
          "name": "PortalDirective",
          "declaration": {
            "name": "PortalDirective",
            "module": "src/directives/portal/portal.directive.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-portal-directive",
          "declaration": {
            "name": "PortalDirective",
            "module": "src/directives/portal/portal.directive.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/directives/validation-message/validation-message.directive.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "tooltipDirectiveStyles",
          "default": "css`\n  ${unsafeCSS(style)}\n`"
        },
        {
          "kind": "class",
          "description": "Directive that handles the display of the validation message, only works with ValidationStyleMixin-enabled hosts.",
          "name": "ValidationMessageDirective",
          "members": [
            {
              "kind": "field",
              "name": "WARNING_MESSAGE_PLACEMENTS",
              "type": {
                "text": "Placement[]"
              },
              "privacy": "private",
              "static": true,
              "default": "['bottom-start']"
            },
            {
              "kind": "field",
              "name": "messageAnchorReferenceCallback",
              "type": {
                "text": "(() => HTMLElement) | undefined"
              },
              "default": "undefined",
              "description": "Callback for an element that the validation message should be anchored to.\nOnly relevant for validation-message-style=\"static-tooltip\""
            },
            {
              "kind": "field",
              "name": "triggerHostReference",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "default": "undefined",
              "description": "Reference for an element that triggers the visibility of the validation message.\nOnly relevant for validation-message-style=\"cursor-anchored-tooltip\" and validation-message-style=\"component-anchored-tooltip\""
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The validation message set by the form-validation mixin of the host.\nBig TODO: Ideally there should not be an explicit dependency to the host. We have evaluated different solutions (Metadata, lifycycle, mutation observer) but none of them are satisfactory.\nWe aim to pass the message as a default slot once the portal has been refactored and accepts a text node (https://dev.azure.com/ZEISSgroup/DI_ZUi-Web/_workitems/edit/829178)",
              "attribute": "validation-message"
            },
            {
              "kind": "field",
              "name": "_showValidation",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_validationMessageStyle",
              "type": {
                "text": "ValidationMessageStyle"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_supportedValidationMessageStyles",
              "type": {
                "text": "ValidationMessageStyle[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_host",
              "type": {
                "text": "LitElement & FormValidationMixinInterface & ValidationStyleInterface<any>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_staticTooltipPortalUid",
              "privacy": "private",
              "default": "`validation-style-static-tooltip-warning-${generateUid()}`"
            },
            {
              "kind": "field",
              "name": "_tooltipOffset",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "validation-message",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The validation message set by the form-validation mixin of the host.\nBig TODO: Ideally there should not be an explicit dependency to the host. We have evaluated different solutions (Metadata, lifycycle, mutation observer) but none of them are satisfactory.\nWe aim to pass the message as a default slot once the portal has been refactored and accepts a text node (https://dev.azure.com/ZEISSgroup/DI_ZUi-Web/_workitems/edit/829178)",
              "fieldName": "validationMessage"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zui-validation-message-directive",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "tooltipDirectiveStyles",
          "declaration": {
            "name": "tooltipDirectiveStyles",
            "module": "src/directives/validation-message/validation-message.directive.ts"
          }
        },
        {
          "kind": "js",
          "name": "ValidationMessageDirective",
          "declaration": {
            "name": "ValidationMessageDirective",
            "module": "src/directives/validation-message/validation-message.directive.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-validation-message-directive",
          "declaration": {
            "name": "ValidationMessageDirective",
            "module": "src/directives/validation-message/validation-message.directive.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/directives/scrollable/scrollable.directive.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The scrollable directive is a feature component with limited UI implementation. It uses the low-level UI component `zui-scrollbar`\ninternally.\n\n## Functionality\nThis component is meant to be _wrapped around_ the scroll target to apply the custom ZUi scrollbars and behavior. It will\nnot break the browsers default scroll behavior but replaces the native scrollbars with custom implemented `zui-scrollbar`\nUI components. Those components are managed to visualize the available scroll space and the scroll progress.\n\n## Features\n- it automatically detects if scrollbars are necessary at all and toggles them for each axis accordingly\n- adds a corner square between two scrollbars to conduct scrollbar appearance and capture wheel events there as well\n- listens to wheel events on scrollbars to simulate mouse wheel scrolling on target by keeping the custom scrollbar drag\\\n  and click behavior\n\n## Figma\n- [Desktop - Component Library](https://www.figma.com/file/vMeLQZQBMU0gKnghKd23PI/%E2%9D%96-01-Desktop---Component-Library---4.1?node-id=13009%3A2745)\n- [Styleguide – Desktop](https://www.figma.com/file/h21HmGasnyWg8IJib5HEzm/%F0%9F%93%96--Styleguide---Desktop?node-id=1%3A102414)",
          "name": "ScrollableDirective",
          "cssProperties": [
            {
              "description": "sets the dimensions of the quadratic corner between the scrollbars",
              "name": "--zui-scrollable-corner-size"
            },
            {
              "description": "sets the height of the scrollable directive content explicitly",
              "name": "--zui-scrollable-height"
            },
            {
              "description": "sets the width of the scrollable directive content explicitly",
              "name": "--zui-scrollable-width"
            },
            {
              "description": "limits the height of the scroll wrapper until scrollbars appear",
              "name": "--zui-scrollable-max-height"
            },
            {
              "description": "limits the width of the scroll wrapper until scrollbars appear",
              "name": "--zui-scrollable-max-width"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "background",
              "type": {
                "text": "'hidden' | 'visible'"
              },
              "default": "'hidden'",
              "description": "**deprecated** use a solid background on interactions\nThe property will be removed, as there won't be any background options",
              "deprecated": "true",
              "attribute": "background",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hitarea",
              "type": {
                "text": "'enlarged' | 'minimal'"
              },
              "default": "'enlarged'",
              "description": "**deprecated** enlarge the hitarea (at least if vertical) _but not the background_\nThe property will be removed, as the hitarea now has a fixed size",
              "deprecated": "true",
              "attribute": "hitarea",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showTrack",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "show the track of the scrollbar with a solid background-color on interactions",
              "attribute": "show-track",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_wrapperRef",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_scrollbarHorizontalRef",
              "type": {
                "text": "Scrollbar | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_scrollbarVerticalRef",
              "type": {
                "text": "Scrollbar | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedNodes",
              "type": {
                "text": "Element[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_cornerColliding",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_showHorizontal",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_showVertical",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(this._updateScrollbarSizes.bind(this))"
            },
            {
              "kind": "field",
              "name": "_wrapperScrollOffsets",
              "type": {
                "text": "Position"
              },
              "privacy": "private",
              "default": "{ x: 0, y: 0 }"
            },
            {
              "kind": "field",
              "name": "_scrollHorizontalTimeout",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_scrollVerticalTimeout",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_previousScrollTop",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "method",
              "name": "_updateScroll",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ detail: { offset, orientation } }",
                  "type": {
                    "text": "GetZuiEvent<Scrollbar, 'ScrolledEvent'>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateWheel",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ deltaX, deltaY }",
                  "type": {
                    "text": "WheelEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateScrollbarSizes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateScrollbarPositions",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateScrollDirection",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleScroll",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleCornerEnter",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleCornerLeave",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "firstRendered",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "description": "The scroll event is fired when content is scrolled",
              "name": "scroll"
            },
            {
              "type": {
                "text": "GetZuiEvent<ScrollableDirective, 'ScrollUpEvent'>"
              },
              "description": "event is fired when the scrollbar scrolls up.",
              "name": "zui-scroll-up"
            },
            {
              "type": {
                "text": "GetZuiEvent<ScrollableDirective, 'ScrollDownEvent'>"
              },
              "description": "event is fired when the scrollbar scrolls down.",
              "name": "zui-scroll-down"
            }
          ],
          "attributes": [
            {
              "name": "background",
              "type": {
                "text": "'hidden' | 'visible'"
              },
              "default": "'hidden'",
              "description": "**deprecated** use a solid background on interactions\nThe property will be removed, as there won't be any background options",
              "deprecated": "true",
              "fieldName": "background"
            },
            {
              "name": "hitarea",
              "type": {
                "text": "'enlarged' | 'minimal'"
              },
              "default": "'enlarged'",
              "description": "**deprecated** enlarge the hitarea (at least if vertical) _but not the background_\nThe property will be removed, as the hitarea now has a fixed size",
              "deprecated": "true",
              "fieldName": "hitarea"
            },
            {
              "name": "show-track",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "show the track of the scrollbar with a solid background-color on interactions",
              "fieldName": "showTrack"
            }
          ],
          "mixins": [
            {
              "name": "WithEventsMixin",
              "module": "/src/mixins/events/events.mixin"
            }
          ],
          "superclass": {
            "module": "src/directives/scrollable/scrollable.directive.ts"
          },
          "tagName": "zui-scrollable-directive",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ScrollableDirective",
          "declaration": {
            "name": "ScrollableDirective",
            "module": "src/directives/scrollable/scrollable.directive.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-scrollable-directive",
          "declaration": {
            "name": "ScrollableDirective",
            "module": "src/directives/scrollable/scrollable.directive.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/directives/tooltip/tooltip.directive.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "TOOLTIP_DIRECTIVE_STYLES",
          "default": "css`\n  ${unsafeCSS(style)}\n`"
        },
        {
          "kind": "variable",
          "name": "TOOLTIP_PLACEMENTS",
          "type": {
            "text": "Placement[]"
          },
          "default": "[\n  'bottom-start',\n  'bottom',\n  'bottom-end',\n  'top-start',\n  'top',\n  'top-end',\n  'right-start',\n  'right',\n  'right-end',\n  'left-start',\n  'left',\n  'left-end',\n]"
        },
        {
          "kind": "variable",
          "name": "TOOLTIP_PORTAL",
          "type": {
            "text": "string"
          },
          "default": "'tooltip'"
        },
        {
          "kind": "variable",
          "name": "TOOLTIP_SHOW_DELAY",
          "type": {
            "text": "number"
          },
          "default": "300"
        },
        {
          "kind": "variable",
          "name": "TOOLTIP_HIDE_DELAY",
          "type": {
            "text": "number"
          },
          "default": "200"
        },
        {
          "kind": "variable",
          "name": "TOOLTIP_DEFAULT_EVENTS",
          "type": {
            "text": "ReadonlyArray<keyof HTMLElementEventMap>"
          },
          "default": "['keydown']"
        },
        {
          "kind": "variable",
          "name": "TOOLTIP_SHOW_EVENTS",
          "type": {
            "text": "ReadonlyArray<keyof HTMLElementEventMap>"
          },
          "default": "[\n  'focus',\n  'mouseenter',\n  'mousemove',\n  'click',\n]"
        },
        {
          "kind": "variable",
          "name": "TOOLTIP_HIDE_EVENTS",
          "type": {
            "text": "ReadonlyArray<keyof HTMLElementEventMap>"
          },
          "default": "['blur', 'mouseleave', 'keydown']"
        },
        {
          "kind": "class",
          "description": "This directive allows adding tooltip behavior to any element it is placed in.\nIt basically allows to use any element as it's carrying the logic to place the\nslotted element, without being limited to a specific one. Nevertheless we\nhighly recommended to use the `zui-tooltip` ui component as this is covered\nby our tests only.\nFor more informations on the tooltip itself, just visit its documentation.\n\n> Use arbitrary elements on your own risk. Stick to the provided\n> `zui-tooltip` component instead.\n\n> Don't forget to provide an `aria-describedby` attribute pointing to the\n> tooltip to improve accessibility.",
          "name": "TooltipDirective",
          "slots": [
            {
              "description": "The default slot content will be used as tooltip.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "TOOLTIP_FIXED_POSITIONING_OFFSET",
              "static": true,
              "default": "[0, 4]"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'tooltip'",
              "description": "enforces the \"role\" attribute for a11y reasons",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "delayed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "allows delaying the transitions\n(prevents tooltip from appearing until the cursor stops moving)",
              "attribute": "delayed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "anchoring",
              "type": {
                "text": "TooltipAnchoring"
              },
              "default": "'cursor'",
              "description": "whether to align the tooltip to the cursor or to the assigned component",
              "attribute": "anchoring",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "TooltipTrigger[]"
              },
              "default": "['click', 'focus']",
              "description": "defines the triggers responsible for toggling the tooltip;\nas the property is an array, the attribute is a **comma separated** list",
              "attribute": "trigger",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "triggerHostSelector",
              "type": {
                "text": "string"
              },
              "default": "'*'",
              "description": "Allows setting a custom trigger host selector.\nDefines the closest element upwards the tree matching the selector.",
              "attribute": "trigger-host-selector",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "triggerHostReference",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "default": "undefined",
              "description": "Allows setting a custom trigger host selector through a shadow DOM.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "internal flag for tooltip visibility to be targeted by css",
              "privacy": "private",
              "attribute": "zui-internal-visible",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "portal",
              "default": "`${TOOLTIP_PORTAL}-${generateUid()}`",
              "description": "The destination overlay name is passed through.",
              "attribute": "portal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_overlayRef",
              "type": {
                "text": "OverlayDirective | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_clientRect",
              "type": {
                "text": "ClientRectObject"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_triggerEvents",
              "privacy": "private",
              "default": "new Set<keyof HTMLElementEventMap>(TOOLTIP_DEFAULT_EVENTS)"
            },
            {
              "kind": "field",
              "name": "_triggerListeners",
              "privacy": "private",
              "default": "new Map<keyof HTMLElementEventMap, EventListener>()"
            },
            {
              "kind": "field",
              "name": "_pseudoCursor",
              "type": {
                "text": "VirtualElement"
              },
              "privacy": "private",
              "default": "{ getBoundingClientRect: () => this._clientRect as ClientRect }"
            },
            {
              "kind": "field",
              "name": "_visibilityTimeout",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hasBeenFocusedPreviously",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_parentElementRef",
              "type": {
                "text": "Element"
              },
              "privacy": "private",
              "description": "Reference to the parent element. This is used to be able to remove formerly added listeners"
            },
            {
              "kind": "method",
              "name": "_deriveTriggerEvents",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_addTriggerListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_removeTriggerListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleParentEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "K"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_addMoveListener",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_removeMoveListener",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updatePseudoCursor",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ clientX, clientY }",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPositionReference",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "VirtualElement"
                }
              }
            },
            {
              "kind": "method",
              "name": "offsetHandler",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "[number, number]"
                }
              },
              "parameters": [
                {
                  "name": "{ placement }",
                  "type": {
                    "text": "{ placement: Placement }"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'tooltip'",
              "description": "enforces the \"role\" attribute for a11y reasons",
              "fieldName": "role"
            },
            {
              "name": "delayed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "allows delaying the transitions\n(prevents tooltip from appearing until the cursor stops moving)",
              "fieldName": "delayed"
            },
            {
              "name": "anchoring",
              "type": {
                "text": "TooltipAnchoring"
              },
              "default": "'cursor'",
              "description": "whether to align the tooltip to the cursor or to the assigned component",
              "fieldName": "anchoring"
            },
            {
              "name": "trigger",
              "type": {
                "text": "TooltipTrigger[]"
              },
              "default": "['click', 'focus']",
              "description": "defines the triggers responsible for toggling the tooltip;\nas the property is an array, the attribute is a **comma separated** list",
              "fieldName": "trigger"
            },
            {
              "name": "trigger-host-selector",
              "type": {
                "text": "string"
              },
              "default": "'*'",
              "description": "Allows setting a custom trigger host selector.\nDefines the closest element upwards the tree matching the selector.",
              "fieldName": "triggerHostSelector"
            },
            {
              "name": "zui-internal-visible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "internal flag for tooltip visibility to be targeted by css",
              "fieldName": "visible"
            },
            {
              "name": "portal",
              "default": "`${TOOLTIP_PORTAL}-${generateUid()}`",
              "description": "The destination overlay name is passed through.",
              "fieldName": "portal"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "zui-tooltip-directive",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TOOLTIP_DIRECTIVE_STYLES",
          "declaration": {
            "name": "TOOLTIP_DIRECTIVE_STYLES",
            "module": "src/directives/tooltip/tooltip.directive.ts"
          }
        },
        {
          "kind": "js",
          "name": "TOOLTIP_PLACEMENTS",
          "declaration": {
            "name": "TOOLTIP_PLACEMENTS",
            "module": "src/directives/tooltip/tooltip.directive.ts"
          }
        },
        {
          "kind": "js",
          "name": "TOOLTIP_PORTAL",
          "declaration": {
            "name": "TOOLTIP_PORTAL",
            "module": "src/directives/tooltip/tooltip.directive.ts"
          }
        },
        {
          "kind": "js",
          "name": "TOOLTIP_SHOW_DELAY",
          "declaration": {
            "name": "TOOLTIP_SHOW_DELAY",
            "module": "src/directives/tooltip/tooltip.directive.ts"
          }
        },
        {
          "kind": "js",
          "name": "TOOLTIP_HIDE_DELAY",
          "declaration": {
            "name": "TOOLTIP_HIDE_DELAY",
            "module": "src/directives/tooltip/tooltip.directive.ts"
          }
        },
        {
          "kind": "js",
          "name": "TOOLTIP_DEFAULT_EVENTS",
          "declaration": {
            "name": "TOOLTIP_DEFAULT_EVENTS",
            "module": "src/directives/tooltip/tooltip.directive.ts"
          }
        },
        {
          "kind": "js",
          "name": "TOOLTIP_SHOW_EVENTS",
          "declaration": {
            "name": "TOOLTIP_SHOW_EVENTS",
            "module": "src/directives/tooltip/tooltip.directive.ts"
          }
        },
        {
          "kind": "js",
          "name": "TOOLTIP_HIDE_EVENTS",
          "declaration": {
            "name": "TOOLTIP_HIDE_EVENTS",
            "module": "src/directives/tooltip/tooltip.directive.ts"
          }
        },
        {
          "kind": "js",
          "name": "TooltipDirective",
          "declaration": {
            "name": "TooltipDirective",
            "module": "src/directives/tooltip/tooltip.directive.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zui-tooltip-directive",
          "declaration": {
            "name": "TooltipDirective",
            "module": "src/directives/tooltip/tooltip.directive.ts"
          }
        }
      ]
    }
  ]
}
