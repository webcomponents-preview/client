{
  "version": 3,
  "sources": ["../node_modules/prismjs/prism.js", "../node_modules/urlpattern-polyfill/dist/urlpattern.js", "../node_modules/urlpattern-polyfill/index.js", "../node_modules/@lit/reactive-element/src/css-tag.ts", "../node_modules/@lit/reactive-element/src/reactive-element.ts", "../node_modules/lit-html/src/lit-html.ts", "../node_modules/lit-element/src/lit-element.ts", "../node_modules/@lit/reactive-element/src/decorators/custom-element.ts", "../node_modules/@lit/reactive-element/src/decorators/property.ts", "../node_modules/@lit/reactive-element/src/decorators/state.ts", "../node_modules/@lit/reactive-element/src/decorators/base.ts", "../node_modules/@lit/reactive-element/src/decorators/event-options.ts", "../node_modules/@lit/reactive-element/src/decorators/query.ts", "../node_modules/@lit/reactive-element/src/decorators/query-all.ts", "../node_modules/@lit/reactive-element/src/decorators/query-assigned-elements.ts", "../node_modules/lit-html/src/directives/if-defined.ts", "../node_modules/lit-html/src/directives/map.ts", "../src/utils/color-scheme.utils.ts", "../src/mixins/color-schemable.mixin.ts", "../src/utils/config.utils.ts", "../src/components/features/markdown-example/markdown-example.component.scss", "../src/components/features/markdown-example/markdown-example.component.ts", "../node_modules/lit-html/src/directives/when.ts", "../src/components/features/navigation/navigation.component.scss", "../src/components/features/navigation/navigation.component.ts", "../src/components/features/navigation/navigation-item/navigation-item.component.scss", "../src/components/features/navigation/navigation-item/navigation-item.component.ts", "../src/components/features/navigation/navigation-search/navigation-search.component.scss", "../src/components/features/navigation/navigation-search/navigation-search.component.ts", "../node_modules/lit-html/src/static.ts", "../node_modules/lit-html/src/directive-helpers.ts", "../node_modules/lit-html/src/directive.ts", "../node_modules/lit-html/src/async-directive.ts", "../node_modules/lit-html/src/directives/ref.ts", "../src/components/features/preview/preview.component.scss", "../src/components/features/preview/preview.component.ts", "../node_modules/marked/src/defaults.ts", "../node_modules/marked/src/helpers.ts", "../node_modules/marked/src/Tokenizer.ts", "../node_modules/marked/src/rules.ts", "../node_modules/marked/src/Lexer.ts", "../node_modules/marked/src/Renderer.ts", "../node_modules/marked/src/TextRenderer.ts", "../node_modules/marked/src/Slugger.ts", "../node_modules/marked/src/Parser.ts", "../node_modules/marked/src/Hooks.ts", "../node_modules/marked/src/Instance.ts", "../node_modules/marked/src/marked.ts", "../node_modules/marked-highlight/src/index.js", "../src/utils/markdown.utils.ts", "../node_modules/lit-html/src/directives/private-async-helpers.ts", "../node_modules/lit-html/src/directives/until.ts", "../src/components/features/readme/readme.component.scss", "../src/components/features/readme/readme.component.ts", "../src/components/features/readme-frame/readme-frame.component.scss", "../src/components/features/readme-frame/readme-frame.component.ts", "../src/utils/plugin.utils.ts", "../src/components/features/stage/stage.component.scss", "../src/components/features/stage/stage.component.ts", "../src/components/features/toggle-color-scheme/toggle-color-scheme.component.scss", "../src/components/features/toggle-color-scheme/toggle-color-scheme.component.ts", "../src/components/features/toggle-sidebar/toggle-sidebar.component.scss", "../src/components/features/toggle-sidebar/toggle-sidebar.component.ts", "../src/components/features/topbar/topbar.component.scss", "../src/components/features/topbar/topbar.component.ts", "../src/mixins/editable.mixin.scss", "../node_modules/element-internals-polyfill/dist/index.js", "../src/mixins/editable.mixin.ts", "../src/components/forms/input-checkbox/input-checkbox.component.scss", "../src/components/forms/input-checkbox/input-checkbox.component.ts", "../src/components/forms/input-code/input-code.component.ts", "../node_modules/lit-code/build/lit-code.mjs", "../src/components/forms/input-code/input-code.component.scss", "../src/components/forms/input-key-value/input-key-value.component.scss", "../src/components/forms/input-key-value/input-key-value.component.ts", "../src/components/forms/input-key-value-pairs/input-key-value-pairs.component.scss", "../src/components/forms/input-key-value-pairs/input-key-value-pairs.component.ts", "../src/components/forms/input-number/input-number.component.scss", "../src/components/forms/input-number/input-number.component.ts", "../src/components/forms/input-radio/input-radio.component.scss", "../src/components/forms/input-radio/input-radio.component.ts", "../src/components/forms/input-select/input-select-option.component.ts", "../src/components/forms/input-select/input-select.component.scss", "../src/components/forms/input-select/input-select.component.ts", "../src/components/forms/input-text/input-text.component.scss", "../src/components/forms/input-text/input-text.component.ts", "../src/components/layout/aside/aside.component.scss", "../src/components/layout/aside/aside.component.ts", "../src/components/layout/layout/layout.component.scss", "../src/components/layout/layout/layout.component.ts", "../src/components/layout/main/main.component.scss", "../src/components/layout/main/main.component.ts", "../node_modules/lit-html/src/directives/class-map.ts", "../src/utils/compression.utils.ts", "../src/utils/dom.utils.ts", "../src/parsers/cem/utils.ts", "../src/parsers/cem/1.0.0/cem-field.ts", "../src/parsers/cem/1.0.0/cem-slot.ts", "../src/parsers/cem/1.0.0/cem-element.ts", "../src/parsers/cem/1.0.0/cem-parser.ts", "../src/parsers/cem/parse.ts", "../src/utils/manifest.utils.ts", "../src/utils/router.utils.ts", "../src/utils/parser.utils.ts", "../src/components/plugins/preview-editor-link/preview-editor-link.utils.ts", "../src/components/plugins/preview-editor-link/preview-editor-link.plugin.scss", "../src/components/plugins/preview-editor-link/preview-editor-link.plugin.ts", "../src/components/plugins/preview-editor-link/preview-editor-link-hint/preview-editor-link-hint.component.scss", "../src/components/plugins/preview-editor-link/preview-editor-link-hint/preview-editor-link-hint.component.ts", "../src/components/plugins/preview-simulate-viewports/preview-simulate-viewports.plugin.scss", "../src/components/plugins/preview-simulate-viewports/preview-simulate-viewports.plugin.ts", "../node_modules/lit-html/src/directives/keyed.ts", "../src/utils/debounce.utils.ts", "../src/components/plugins/stage-editor/stage-editor.utils.ts", "../src/components/plugins/stage-editor/stage-editor.plugin.scss", "../src/components/plugins/stage-editor/stage-editor.plugin.ts", "../src/components/plugins/stage-editor/stage-editor-controls/stage-editor-controls.component.scss", "../src/components/plugins/stage-editor/stage-editor-controls/stage-editor-controls.component.ts", "../node_modules/@open-wc/lit-helpers/src/spread.ts", "../node_modules/lit-html/src/directives/unsafe-html.ts", "../src/components/plugins/stage-editor/stage-editor-preview/stage-editor-preview.component.scss", "../src/components/plugins/stage-editor/stage-editor-preview/stage-editor-preview.component.ts", "../src/components/plugins/stage-examples/stage-examples.plugin.scss", "../src/components/plugins/stage-examples/stage-examples.plugin.ts", "../src/components/plugins/stage-readme/stage-readme.plugin.scss", "../src/components/plugins/stage-readme/stage-readme.plugin.ts", "../src/utils/navigation.utils.ts", "../src/mixins/routable.mixin.ts", "../src/components/root/root.routes.ts", "../src/components/root/root.component.scss", "../src/components/root/root.component.ts", "../src/components/root/root-navigation/root-navigation.component.scss", "../src/components/root/root-navigation/root-navigation.component.ts", "../src/components/ui/button/button.component.scss", "../src/components/ui/button/button.component.ts", "../src/components/ui/code/code.component.scss", "../src/components/ui/code/code.component.ts", "../src/components/ui/icon/icon.component.scss", "../src/components/ui/icon/icon.component.ts", "../src/components/ui/tabs/tabs.component.scss", "../src/components/ui/tabs/tabs.component.ts", "../src/components/ui/title/title.component.scss", "../src/components/ui/title/title.component.ts"],
  "sourceRoot": "src",
  "sourcesContent": ["\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\n/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t\t? self // if in worker\n\t\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self) {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t\t * additional languages or plugins yourself.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t\t *\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.manual = true;\n\t\t * // add a new <script> to load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tmanual: _self.Prism && _self.Prism.manual,\n\t\t/**\n\t\t * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n\t\t * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n\t\t * own worker, you don't want it to do this.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not add its own listeners to the worker.\n\t\t *\n\t\t * You obviously have to change this value before Prism executes. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.disableWorkerMessageHandler = true;\n\t\t * // Load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the script element that is currently executing.\n\t\t\t *\n\t\t\t * This does __not__ work for line script element.\n\t\t\t *\n\t\t\t * @returns {HTMLScriptElement | null}\n\t\t\t */\n\t\t\tcurrentScript: function () {\n\t\t\t\tif (typeof document === 'undefined') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t\t}\n\n\t\t\t\t// IE11 workaround\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t\t// this will not work for inline scripts\n\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t\t// A stack will look like this:\n\t\t\t\t\t//\n\t\t\t\t\t// Error\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\t\t/**\n\t\t * This is the most high-level function in Prism\u2019s API.\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t\t * each one of them.\n\t\t *\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t\t *\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAll: function (async, callback) {\n\t\t\t_.highlightAllUnder(document, async, callback);\n\t\t},\n\n\t\t/**\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t\t * {@link Prism.highlightElement} on each one of them.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-highlightall`\n\t\t * 2. `before-all-elements-highlight`\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\n\t\t *\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAllUnder: function (container, async, callback) {\n\t\t\tvar env = {\n\t\t\t\tcallback: callback,\n\t\t\t\tcontainer: container,\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t\t};\n\n\t\t\t_.hooks.run('before-highlightall', env);\n\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Highlights the code inside a single element.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-sanity-check`\n\t\t * 2. `before-highlight`\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n\t\t * 4. `before-insert`\n\t\t * 5. `after-highlight`\n\t\t * 6. `complete`\n\t\t *\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n\t\t * the element's language.\n\t\t *\n\t\t * @param {Element} element The element containing the code.\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t\t *\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\n\t\t * [Download page](https://prismjs.com/download.html).\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightElement: function (element, async, callback) {\n\t\t\t// Find language\n\t\t\tvar language = _.util.getLanguage(element);\n\t\t\tvar grammar = _.languages[language];\n\n\t\t\t// Set language on the element, if not present\n\t\t\t_.util.setLanguage(element, language);\n\n\t\t\t// Set language on the parent, for styling\n\t\t\tvar parent = element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\t\t_.util.setLanguage(parent, language);\n\t\t\t}\n\n\t\t\tvar code = element.textContent;\n\n\t\t\tvar env = {\n\t\t\t\telement: element,\n\t\t\t\tlanguage: language,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tcode: code\n\t\t\t};\n\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t}\n\n\t\t\t_.hooks.run('before-sanity-check', env);\n\n\t\t\t// plugins may change/add the parent/element\n\t\t\tparent = env.element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n\t\t\t\tparent.setAttribute('tabindex', '0');\n\t\t\t}\n\n\t\t\tif (!env.code) {\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_.hooks.run('before-highlight', env);\n\n\t\t\tif (!env.grammar) {\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (async && _self.Worker) {\n\t\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\t\tworker.onmessage = function (evt) {\n\t\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t\t};\n\n\t\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\t\tlanguage: env.language,\n\t\t\t\t\tcode: env.code,\n\t\t\t\t\timmediateClose: true\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you\u2019re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tif (!env.grammar) {\n\t\t\t\tthrow new Error('The language \"' + env.language + '\" has no grammar.');\n\t\t\t}\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\t_self.Prism = _;\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\n\tif (!_self.document) {\n\t\tif (!_self.addEventListener) {\n\t\t\t// in Node.js\n\t\t\treturn _;\n\t\t}\n\n\t\tif (!_.disableWorkerMessageHandler) {\n\t\t\t// In worker\n\t\t\t_self.addEventListener('message', function (evt) {\n\t\t\t\tvar message = JSON.parse(evt.data);\n\t\t\t\tvar lang = message.language;\n\t\t\t\tvar code = message.code;\n\t\t\t\tvar immediateClose = message.immediateClose;\n\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\t\tif (immediateClose) {\n\t\t\t\t\t_self.close();\n\t\t\t\t}\n\t\t\t}, false);\n\t\t}\n\n\t\treturn _;\n\t}\n\n\t// Get current script and highlight\n\tvar script = _.util.currentScript();\n\n\tif (script) {\n\t\t_.filename = script.src;\n\n\t\tif (script.hasAttribute('data-manual')) {\n\t\t\t_.manual = true;\n\t\t}\n\t}\n\n\tfunction highlightAutomaticallyCallback() {\n\t\tif (!_.manual) {\n\t\t\t_.highlightAll();\n\t\t}\n\t}\n\n\tif (!_.manual) {\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t\t// See https://github.com/PrismJS/prism/issues/2102\n\t\tvar readyState = document.readyState;\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _;\n\n}(_self));\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': {\n\t\tpattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n\t\tgreedy: true\n\t},\n\t'prolog': {\n\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\n\t\tgreedy: true\n\t},\n\t'doctype': {\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'internal-subset': {\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\n\t\t\t'doctype-tag': /^DOCTYPE/i,\n\t\t\t'name': /[^\\s<>'\"]+/\n\t\t}\n\t},\n\t'cdata': {\n\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\tgreedy: true\n\t},\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'special-attr': [],\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': [\n\t\t{\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\n\t\t\talias: 'named-entity'\n\t\t},\n\t\t/&#x?[\\da-f]{1,8};/i\n\t]\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function (env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n\t/**\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\n\t *\n\t * An example of an inlined language is CSS with `style` attributes.\n\t *\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addAttribute('style', 'css');\n\t */\n\tvalue: function (attrName, lang) {\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n\t\t\t\t'i'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attr-name': /^[^\\s=]+/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\n(function (Prism) {\n\n\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n\n\tPrism.languages.css = {\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t\t'atrule': {\n\t\t\tpattern: RegExp('@[\\\\w-](?:' + /[^;{\\s\"']|\\s+(?!\\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\\s*\\{))/.source),\n\t\t\tinside: {\n\t\t\t\t'rule': /^@[\\w-]+/,\n\t\t\t\t'selector-function-argument': {\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'selector'\n\t\t\t\t},\n\t\t\t\t'keyword': {\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t\t// See rest below\n\t\t\t}\n\t\t},\n\t\t'url': {\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^url/i,\n\t\t\t\t'punctuation': /^\\(|\\)$/,\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\n\t\t\t\t\talias: 'url'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'selector': {\n\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': {\n\t\t\tpattern: string,\n\t\t\tgreedy: true\n\t\t},\n\t\t'property': {\n\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'important': /!important\\b/i,\n\t\t'function': {\n\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[(){};:,]/\n\t};\n\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\n\tvar markup = Prism.languages.markup;\n\tif (markup) {\n\t\tmarkup.tag.addInlined('style', 'css');\n\t\tmarkup.tag.addAttribute('style', 'css');\n\t}\n\n}(Prism));\n\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'function': /\\b\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'number': {\n\t\tpattern: RegExp(\n\t\t\t/(^|[^\\w$])/.source +\n\t\t\t'(?:' +\n\t\t\t(\n\t\t\t\t// constant\n\t\t\t\t/NaN|Infinity/.source +\n\t\t\t\t'|' +\n\t\t\t\t// binary integer\n\t\t\t\t/0[bB][01]+(?:_[01]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// octal integer\n\t\t\t\t/0[oO][0-7]+(?:_[0-7]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// hexadecimal integer\n\t\t\t\t/0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal bigint\n\t\t\t\t/\\d+(?:_\\d+)*n/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal number (integer or float) but no bigint\n\t\t\t\t/(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source\n\t\t\t) +\n\t\t\t')' +\n\t\t\t/(?![\\w$])/.source\n\t\t),\n\t\tlookbehind: true\n\t},\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: RegExp(\n\t\t\t// lookbehind\n\t\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\n\t\t\t/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source +\n\t\t\t// Regex pattern:\n\t\t\t// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character\n\t\t\t// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible\n\t\t\t// with the only syntax, so we have to define 2 different regex patterns.\n\t\t\t/\\//.source +\n\t\t\t'(?:' +\n\t\t\t/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source +\n\t\t\t'|' +\n\t\t\t// `v` flag syntax. This supports 3 levels of nested character classes.\n\t\t\t/(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +\n\t\t\t')' +\n\t\t\t// lookahead\n\t\t\t/(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source\n\t\t),\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\n\t\t\t'regex-flags': /^[a-z]+$/,\n\t\t}\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'hashbang': {\n\t\tpattern: /^#!.*/,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\t'string-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'property'\n\t}\n});\n\nPrism.languages.insertBefore('javascript', 'operator', {\n\t'literal-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\talias: 'property'\n\t},\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n\n\t// add attribute support for all DOM events.\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\tPrism.languages.markup.tag.addAttribute(\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\n\t\t'javascript'\n\t);\n}\n\nPrism.languages.js = Prism.languages.javascript;\n\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\n\t\treturn;\n\t}\n\n\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n\tif (!Element.prototype.matches) {\n\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\t}\n\n\tvar LOADING_MESSAGE = 'Loading\u2026';\n\tvar FAILURE_MESSAGE = function (status, message) {\n\t\treturn '\u2716 Error ' + status + ' while fetching file: ' + message;\n\t};\n\tvar FAILURE_EMPTY_MESSAGE = '\u2716 Error: File does not exist or is empty';\n\n\tvar EXTENSIONS = {\n\t\t'js': 'javascript',\n\t\t'py': 'python',\n\t\t'rb': 'ruby',\n\t\t'ps1': 'powershell',\n\t\t'psm1': 'powershell',\n\t\t'sh': 'bash',\n\t\t'bat': 'batch',\n\t\t'h': 'c',\n\t\t'tex': 'latex'\n\t};\n\n\tvar STATUS_ATTR = 'data-src-status';\n\tvar STATUS_LOADING = 'loading';\n\tvar STATUS_LOADED = 'loaded';\n\tvar STATUS_FAILED = 'failed';\n\n\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'\n\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\n\n\t/**\n\t * Loads the given file.\n\t *\n\t * @param {string} src The URL or path of the source file to load.\n\t * @param {(result: string) => void} success\n\t * @param {(reason: string) => void} error\n\t */\n\tfunction loadFile(src, success, error) {\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open('GET', src, true);\n\t\txhr.onreadystatechange = function () {\n\t\t\tif (xhr.readyState == 4) {\n\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\t\tsuccess(xhr.responseText);\n\t\t\t\t} else {\n\t\t\t\t\tif (xhr.status >= 400) {\n\t\t\t\t\t\terror(FAILURE_MESSAGE(xhr.status, xhr.statusText));\n\t\t\t\t\t} else {\n\t\t\t\t\t\terror(FAILURE_EMPTY_MESSAGE);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\txhr.send(null);\n\t}\n\n\t/**\n\t * Parses the given range.\n\t *\n\t * This returns a range with inclusive ends.\n\t *\n\t * @param {string | null | undefined} range\n\t * @returns {[number, number | undefined] | undefined}\n\t */\n\tfunction parseRange(range) {\n\t\tvar m = /^\\s*(\\d+)\\s*(?:(,)\\s*(?:(\\d+)\\s*)?)?$/.exec(range || '');\n\t\tif (m) {\n\t\t\tvar start = Number(m[1]);\n\t\t\tvar comma = m[2];\n\t\t\tvar end = m[3];\n\n\t\t\tif (!comma) {\n\t\t\t\treturn [start, start];\n\t\t\t}\n\t\t\tif (!end) {\n\t\t\t\treturn [start, undefined];\n\t\t\t}\n\t\t\treturn [start, Number(end)];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tPrism.hooks.add('before-highlightall', function (env) {\n\t\tenv.selector += ', ' + SELECTOR;\n\t});\n\n\tPrism.hooks.add('before-sanity-check', function (env) {\n\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);\n\t\tif (pre.matches(SELECTOR)) {\n\t\t\tenv.code = ''; // fast-path the whole thing and go to complete\n\n\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\n\n\t\t\t// add code element with loading message\n\t\t\tvar code = pre.appendChild(document.createElement('CODE'));\n\t\t\tcode.textContent = LOADING_MESSAGE;\n\n\t\t\tvar src = pre.getAttribute('data-src');\n\n\t\t\tvar language = env.language;\n\t\t\tif (language === 'none') {\n\t\t\t\t// the language might be 'none' because there is no language set;\n\t\t\t\t// in this case, we want to use the extension as the language\n\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];\n\t\t\t\tlanguage = EXTENSIONS[extension] || extension;\n\t\t\t}\n\n\t\t\t// set language classes\n\t\t\tPrism.util.setLanguage(code, language);\n\t\t\tPrism.util.setLanguage(pre, language);\n\n\t\t\t// preload the language\n\t\t\tvar autoloader = Prism.plugins.autoloader;\n\t\t\tif (autoloader) {\n\t\t\t\tautoloader.loadLanguages(language);\n\t\t\t}\n\n\t\t\t// load file\n\t\t\tloadFile(\n\t\t\t\tsrc,\n\t\t\t\tfunction (text) {\n\t\t\t\t\t// mark as loaded\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);\n\n\t\t\t\t\t// handle data-range\n\t\t\t\t\tvar range = parseRange(pre.getAttribute('data-range'));\n\t\t\t\t\tif (range) {\n\t\t\t\t\t\tvar lines = text.split(/\\r\\n?|\\n/g);\n\n\t\t\t\t\t\t// the range is one-based and inclusive on both ends\n\t\t\t\t\t\tvar start = range[0];\n\t\t\t\t\t\tvar end = range[1] == null ? lines.length : range[1];\n\n\t\t\t\t\t\tif (start < 0) { start += lines.length; }\n\t\t\t\t\t\tstart = Math.max(0, Math.min(start - 1, lines.length));\n\t\t\t\t\t\tif (end < 0) { end += lines.length; }\n\t\t\t\t\t\tend = Math.max(0, Math.min(end, lines.length));\n\n\t\t\t\t\t\ttext = lines.slice(start, end).join('\\n');\n\n\t\t\t\t\t\t// add data-start for line numbers\n\t\t\t\t\t\tif (!pre.hasAttribute('data-start')) {\n\t\t\t\t\t\t\tpre.setAttribute('data-start', String(start + 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// highlight code\n\t\t\t\t\tcode.textContent = text;\n\t\t\t\t\tPrism.highlightElement(code);\n\t\t\t\t},\n\t\t\t\tfunction (error) {\n\t\t\t\t\t// mark as failed\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);\n\n\t\t\t\t\tcode.textContent = error;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t});\n\n\tPrism.plugins.fileHighlight = {\n\t\t/**\n\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.\n\t\t *\n\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.\n\t\t *\n\t\t * @param {ParentNode} [container=document]\n\t\t */\n\t\thighlight: function highlight(container) {\n\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);\n\n\t\t\tfor (var i = 0, element; (element = elements[i++]);) {\n\t\t\t\tPrism.highlightElement(element);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar logged = false;\n\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */\n\tPrism.fileHighlight = function () {\n\t\tif (!logged) {\n\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');\n\t\t\tlogged = true;\n\t\t}\n\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);\n\t};\n\n}());\n", "var k=class{type=3;name=\"\";prefix=\"\";value=\"\";suffix=\"\";modifier=3;constructor(t,r,n,o,c,l){this.type=t,this.name=r,this.prefix=n,this.value=o,this.suffix=c,this.modifier=l}hasCustomName(){return this.name!==\"\"&&typeof this.name!=\"number\"}},Pe=/[$_\\p{ID_Start}]/u,Se=/[$_\\u200C\\u200D\\p{ID_Continue}]/u,M=\".*\";function ke(e,t){return(t?/^[\\x00-\\xFF]*$/:/^[\\x00-\\x7F]*$/).test(e)}function v(e,t=!1){let r=[],n=0;for(;n<e.length;){let o=e[n],c=function(l){if(!t)throw new TypeError(l);r.push({type:\"INVALID_CHAR\",index:n,value:e[n++]})};if(o===\"*\"){r.push({type:\"ASTERISK\",index:n,value:e[n++]});continue}if(o===\"+\"||o===\"?\"){r.push({type:\"OTHER_MODIFIER\",index:n,value:e[n++]});continue}if(o===\"\\\\\"){r.push({type:\"ESCAPED_CHAR\",index:n++,value:e[n++]});continue}if(o===\"{\"){r.push({type:\"OPEN\",index:n,value:e[n++]});continue}if(o===\"}\"){r.push({type:\"CLOSE\",index:n,value:e[n++]});continue}if(o===\":\"){let l=\"\",s=n+1;for(;s<e.length;){let i=e.substr(s,1);if(s===n+1&&Pe.test(i)||s!==n+1&&Se.test(i)){l+=e[s++];continue}break}if(!l){c(`Missing parameter name at ${n}`);continue}r.push({type:\"NAME\",index:n,value:l}),n=s;continue}if(o===\"(\"){let l=1,s=\"\",i=n+1,a=!1;if(e[i]===\"?\"){c(`Pattern cannot start with \"?\" at ${i}`);continue}for(;i<e.length;){if(!ke(e[i],!1)){c(`Invalid character '${e[i]}' at ${i}.`),a=!0;break}if(e[i]===\"\\\\\"){s+=e[i++]+e[i++];continue}if(e[i]===\")\"){if(l--,l===0){i++;break}}else if(e[i]===\"(\"&&(l++,e[i+1]!==\"?\")){c(`Capturing groups are not allowed at ${i}`),a=!0;break}s+=e[i++]}if(a)continue;if(l){c(`Unbalanced pattern at ${n}`);continue}if(!s){c(`Missing pattern at ${n}`);continue}r.push({type:\"REGEX\",index:n,value:s}),n=i;continue}r.push({type:\"CHAR\",index:n,value:e[n++]})}return r.push({type:\"END\",index:n,value:\"\"}),r}function D(e,t={}){let r=v(e);t.delimiter??=\"/#?\",t.prefixes??=\"./\";let n=`[^${x(t.delimiter)}]+?`,o=[],c=0,l=0,s=\"\",i=new Set,a=f=>{if(l<r.length&&r[l].type===f)return r[l++].value},h=()=>a(\"OTHER_MODIFIER\")??a(\"ASTERISK\"),p=f=>{let u=a(f);if(u!==void 0)return u;let{type:d,index:T}=r[l];throw new TypeError(`Unexpected ${d} at ${T}, expected ${f}`)},O=()=>{let f=\"\",u;for(;u=a(\"CHAR\")??a(\"ESCAPED_CHAR\");)f+=u;return f},xe=f=>f,L=t.encodePart||xe,I=\"\",H=f=>{I+=f},$=()=>{I.length&&(o.push(new k(3,\"\",\"\",L(I),\"\",3)),I=\"\")},G=(f,u,d,T,Y)=>{let g=3;switch(Y){case\"?\":g=1;break;case\"*\":g=0;break;case\"+\":g=2;break}if(!u&&!d&&g===3){H(f);return}if($(),!u&&!d){if(!f)return;o.push(new k(3,\"\",\"\",L(f),\"\",g));return}let m;d?d===\"*\"?m=M:m=d:m=n;let R=2;m===n?(R=1,m=\"\"):m===M&&(R=0,m=\"\");let S;if(u?S=u:d&&(S=c++),i.has(S))throw new TypeError(`Duplicate name '${S}'.`);i.add(S),o.push(new k(R,S,L(f),m,L(T),g))};for(;l<r.length;){let f=a(\"CHAR\"),u=a(\"NAME\"),d=a(\"REGEX\");if(!u&&!d&&(d=a(\"ASTERISK\")),u||d){let g=f??\"\";t.prefixes.indexOf(g)===-1&&(H(g),g=\"\"),$();let m=h();G(g,u,d,\"\",m);continue}let T=f??a(\"ESCAPED_CHAR\");if(T){H(T);continue}if(a(\"OPEN\")){let g=O(),m=a(\"NAME\"),R=a(\"REGEX\");!m&&!R&&(R=a(\"ASTERISK\"));let S=O();p(\"CLOSE\");let be=h();G(g,m,R,S,be);continue}$(),p(\"END\")}return o}function x(e){return e.replace(/([.+*?^${}()[\\]|/\\\\])/g,\"\\\\$1\")}function X(e){return e&&e.ignoreCase?\"ui\":\"u\"}function Z(e,t,r){return F(D(e,r),t,r)}function y(e){switch(e){case 0:return\"*\";case 1:return\"?\";case 2:return\"+\";case 3:return\"\"}}function F(e,t,r={}){r.delimiter??=\"/#?\",r.prefixes??=\"./\",r.sensitive??=!1,r.strict??=!1,r.end??=!0,r.start??=!0,r.endsWith=\"\";let n=r.start?\"^\":\"\";for(let s of e){if(s.type===3){s.modifier===3?n+=x(s.value):n+=`(?:${x(s.value)})${y(s.modifier)}`;continue}t&&t.push(s.name);let i=`[^${x(r.delimiter)}]+?`,a=s.value;if(s.type===1?a=i:s.type===0&&(a=M),!s.prefix.length&&!s.suffix.length){s.modifier===3||s.modifier===1?n+=`(${a})${y(s.modifier)}`:n+=`((?:${a})${y(s.modifier)})`;continue}if(s.modifier===3||s.modifier===1){n+=`(?:${x(s.prefix)}(${a})${x(s.suffix)})`,n+=y(s.modifier);continue}n+=`(?:${x(s.prefix)}`,n+=`((?:${a})(?:`,n+=x(s.suffix),n+=x(s.prefix),n+=`(?:${a}))*)${x(s.suffix)})`,s.modifier===0&&(n+=\"?\")}let o=`[${x(r.endsWith)}]|$`,c=`[${x(r.delimiter)}]`;if(r.end)return r.strict||(n+=`${c}?`),r.endsWith.length?n+=`(?=${o})`:n+=\"$\",new RegExp(n,X(r));r.strict||(n+=`(?:${c}(?=${o}))?`);let l=!1;if(e.length){let s=e[e.length-1];s.type===3&&s.modifier===3&&(l=r.delimiter.indexOf(s)>-1)}return l||(n+=`(?=${c}|${o})`),new RegExp(n,X(r))}var b={delimiter:\"\",prefixes:\"\",sensitive:!0,strict:!0},B={delimiter:\".\",prefixes:\"\",sensitive:!0,strict:!0},q={delimiter:\"/\",prefixes:\"/\",sensitive:!0,strict:!0};function J(e,t){return e.length?e[0]===\"/\"?!0:!t||e.length<2?!1:(e[0]==\"\\\\\"||e[0]==\"{\")&&e[1]==\"/\":!1}function Q(e,t){return e.startsWith(t)?e.substring(t.length,e.length):e}function Ee(e,t){return e.endsWith(t)?e.substr(0,e.length-t.length):e}function W(e){return!e||e.length<2?!1:e[0]===\"[\"||(e[0]===\"\\\\\"||e[0]===\"{\")&&e[1]===\"[\"}var ee=[\"ftp\",\"file\",\"http\",\"https\",\"ws\",\"wss\"];function N(e){if(!e)return!0;for(let t of ee)if(e.test(t))return!0;return!1}function te(e,t){if(e=Q(e,\"#\"),t||e===\"\")return e;let r=new URL(\"https://example.com\");return r.hash=e,r.hash?r.hash.substring(1,r.hash.length):\"\"}function re(e,t){if(e=Q(e,\"?\"),t||e===\"\")return e;let r=new URL(\"https://example.com\");return r.search=e,r.search?r.search.substring(1,r.search.length):\"\"}function ne(e,t){return t||e===\"\"?e:W(e)?j(e):z(e)}function se(e,t){if(t||e===\"\")return e;let r=new URL(\"https://example.com\");return r.password=e,r.password}function ie(e,t){if(t||e===\"\")return e;let r=new URL(\"https://example.com\");return r.username=e,r.username}function ae(e,t,r){if(r||e===\"\")return e;if(t&&!ee.includes(t))return new URL(`${t}:${e}`).pathname;let n=e[0]==\"/\";return e=new URL(n?e:\"/-\"+e,\"https://example.com\").pathname,n||(e=e.substring(2,e.length)),e}function oe(e,t,r){return _(t)===e&&(e=\"\"),r||e===\"\"?e:K(e)}function ce(e,t){return e=Ee(e,\":\"),t||e===\"\"?e:A(e)}function _(e){switch(e){case\"ws\":case\"http\":return\"80\";case\"wws\":case\"https\":return\"443\";case\"ftp\":return\"21\";default:return\"\"}}function A(e){if(e===\"\")return e;if(/^[-+.A-Za-z0-9]*$/.test(e))return e.toLowerCase();throw new TypeError(`Invalid protocol '${e}'.`)}function le(e){if(e===\"\")return e;let t=new URL(\"https://example.com\");return t.username=e,t.username}function he(e){if(e===\"\")return e;let t=new URL(\"https://example.com\");return t.password=e,t.password}function z(e){if(e===\"\")return e;if(/[\\t\\n\\r #%/:<>?@[\\]^\\\\|]/g.test(e))throw new TypeError(`Invalid hostname '${e}'`);let t=new URL(\"https://example.com\");return t.hostname=e,t.hostname}function j(e){if(e===\"\")return e;if(/[^0-9a-fA-F[\\]:]/g.test(e))throw new TypeError(`Invalid IPv6 hostname '${e}'`);return e.toLowerCase()}function K(e){if(e===\"\"||/^[0-9]*$/.test(e)&&parseInt(e)<=65535)return e;throw new TypeError(`Invalid port '${e}'.`)}function fe(e){if(e===\"\")return e;let t=new URL(\"https://example.com\");return t.pathname=e[0]!==\"/\"?\"/-\"+e:e,e[0]!==\"/\"?t.pathname.substring(2,t.pathname.length):t.pathname}function ue(e){return e===\"\"?e:new URL(`data:${e}`).pathname}function pe(e){if(e===\"\")return e;let t=new URL(\"https://example.com\");return t.search=e,t.search.substring(1,t.search.length)}function de(e){if(e===\"\")return e;let t=new URL(\"https://example.com\");return t.hash=e,t.hash.substring(1,t.hash.length)}var U=class{#i;#n=[];#t={};#e=0;#s=1;#u=0;#c=0;#p=0;#d=0;#g=!1;constructor(t){this.#i=t}get result(){return this.#t}parse(){for(this.#n=v(this.#i,!0);this.#e<this.#n.length;this.#e+=this.#s){if(this.#s=1,this.#n[this.#e].type===\"END\"){if(this.#c===0){this.#P(),this.#l()?this.#r(9,1):this.#h()?(this.#r(8,1),this.#t.hash=\"\"):(this.#r(7,0),this.#t.search=\"\",this.#t.hash=\"\");continue}else if(this.#c===2){this.#f(5);continue}this.#r(10,0);break}if(this.#p>0)if(this.#T())this.#p-=1;else continue;if(this.#O()){this.#p+=1;continue}switch(this.#c){case 0:this.#S()&&(this.#t.username=\"\",this.#t.password=\"\",this.#t.hostname=\"\",this.#t.port=\"\",this.#t.pathname=\"\",this.#t.search=\"\",this.#t.hash=\"\",this.#f(1));break;case 1:if(this.#S()){this.#C();let t=7,r=1;this.#g&&(this.#t.pathname=\"/\"),this.#E()?(t=2,r=3):this.#g&&(t=2),this.#r(t,r)}break;case 2:this.#x()?this.#f(3):(this.#b()||this.#h()||this.#l())&&this.#f(5);break;case 3:this.#R()?this.#r(4,1):this.#x()&&this.#r(5,1);break;case 4:this.#x()&&this.#r(5,1);break;case 5:this.#A()?this.#d+=1:this.#w()&&(this.#d-=1),this.#y()&&!this.#d?this.#r(6,1):this.#b()?this.#r(7,0):this.#h()?this.#r(8,1):this.#l()&&this.#r(9,1);break;case 6:this.#b()?this.#r(7,0):this.#h()?this.#r(8,1):this.#l()&&this.#r(9,1);break;case 7:this.#h()?this.#r(8,1):this.#l()&&this.#r(9,1);break;case 8:this.#l()&&this.#r(9,1);break;case 9:break;case 10:break}}}#r(t,r){switch(this.#c){case 0:break;case 1:this.#t.protocol=this.#o();break;case 2:break;case 3:this.#t.username=this.#o();break;case 4:this.#t.password=this.#o();break;case 5:this.#t.hostname=this.#o();break;case 6:this.#t.port=this.#o();break;case 7:this.#t.pathname=this.#o();break;case 8:this.#t.search=this.#o();break;case 9:this.#t.hash=this.#o();break;case 10:break}this.#k(t,r)}#k(t,r){this.#c=t,this.#u=this.#e+r,this.#e+=r,this.#s=0}#P(){this.#e=this.#u,this.#s=0}#f(t){this.#P(),this.#c=t}#m(t){return t<0&&(t=this.#n.length-t),t<this.#n.length?this.#n[t]:this.#n[this.#n.length-1]}#a(t,r){let n=this.#m(t);return n.value===r&&(n.type===\"CHAR\"||n.type===\"ESCAPED_CHAR\"||n.type===\"INVALID_CHAR\")}#S(){return this.#a(this.#e,\":\")}#E(){return this.#a(this.#e+1,\"/\")&&this.#a(this.#e+2,\"/\")}#x(){return this.#a(this.#e,\"@\")}#R(){return this.#a(this.#e,\":\")}#y(){return this.#a(this.#e,\":\")}#b(){return this.#a(this.#e,\"/\")}#h(){if(this.#a(this.#e,\"?\"))return!0;if(this.#n[this.#e].value!==\"?\")return!1;let t=this.#m(this.#e-1);return t.type!==\"NAME\"&&t.type!==\"REGEX\"&&t.type!==\"CLOSE\"&&t.type!==\"ASTERISK\"}#l(){return this.#a(this.#e,\"#\")}#O(){return this.#n[this.#e].type==\"OPEN\"}#T(){return this.#n[this.#e].type==\"CLOSE\"}#A(){return this.#a(this.#e,\"[\")}#w(){return this.#a(this.#e,\"]\")}#o(){let t=this.#n[this.#e],r=this.#m(this.#u).index;return this.#i.substring(r,t.index)}#C(){let t={};Object.assign(t,b),t.encodePart=A;let r=Z(this.#o(),void 0,t);this.#g=N(r)}};var V=[\"protocol\",\"username\",\"password\",\"hostname\",\"port\",\"pathname\",\"search\",\"hash\"],E=\"*\";function ge(e,t){if(typeof e!=\"string\")throw new TypeError(\"parameter 1 is not of type 'string'.\");let r=new URL(e,t);return{protocol:r.protocol.substring(0,r.protocol.length-1),username:r.username,password:r.password,hostname:r.hostname,port:r.port,pathname:r.pathname,search:r.search!==\"\"?r.search.substring(1,r.search.length):void 0,hash:r.hash!==\"\"?r.hash.substring(1,r.hash.length):void 0}}function P(e,t){return t?C(e):e}function w(e,t,r){let n;if(typeof t.baseURL==\"string\")try{n=new URL(t.baseURL),e.protocol=P(n.protocol.substring(0,n.protocol.length-1),r),e.username=P(n.username,r),e.password=P(n.password,r),e.hostname=P(n.hostname,r),e.port=P(n.port,r),e.pathname=P(n.pathname,r),e.search=P(n.search.substring(1,n.search.length),r),e.hash=P(n.hash.substring(1,n.hash.length),r)}catch{throw new TypeError(`invalid baseURL '${t.baseURL}'.`)}if(typeof t.protocol==\"string\"&&(e.protocol=ce(t.protocol,r)),typeof t.username==\"string\"&&(e.username=ie(t.username,r)),typeof t.password==\"string\"&&(e.password=se(t.password,r)),typeof t.hostname==\"string\"&&(e.hostname=ne(t.hostname,r)),typeof t.port==\"string\"&&(e.port=oe(t.port,e.protocol,r)),typeof t.pathname==\"string\"){if(e.pathname=t.pathname,n&&!J(e.pathname,r)){let o=n.pathname.lastIndexOf(\"/\");o>=0&&(e.pathname=P(n.pathname.substring(0,o+1),r)+e.pathname)}e.pathname=ae(e.pathname,e.protocol,r)}return typeof t.search==\"string\"&&(e.search=re(t.search,r)),typeof t.hash==\"string\"&&(e.hash=te(t.hash,r)),e}function C(e){return e.replace(/([+*?:{}()\\\\])/g,\"\\\\$1\")}function Re(e){return e.replace(/([.+*?^${}()[\\]|/\\\\])/g,\"\\\\$1\")}function ye(e,t){t.delimiter??=\"/#?\",t.prefixes??=\"./\",t.sensitive??=!1,t.strict??=!1,t.end??=!0,t.start??=!0,t.endsWith=\"\";let r=\".*\",n=`[^${Re(t.delimiter)}]+?`,o=/[$_\\u200C\\u200D\\p{ID_Continue}]/u,c=\"\";for(let l=0;l<e.length;++l){let s=e[l];if(s.type===3){if(s.modifier===3){c+=C(s.value);continue}c+=`{${C(s.value)}}${y(s.modifier)}`;continue}let i=s.hasCustomName(),a=!!s.suffix.length||!!s.prefix.length&&(s.prefix.length!==1||!t.prefixes.includes(s.prefix)),h=l>0?e[l-1]:null,p=l<e.length-1?e[l+1]:null;if(!a&&i&&s.type===1&&s.modifier===3&&p&&!p.prefix.length&&!p.suffix.length)if(p.type===3){let O=p.value.length>0?p.value[0]:\"\";a=o.test(O)}else a=!p.hasCustomName();if(!a&&!s.prefix.length&&h&&h.type===3){let O=h.value[h.value.length-1];a=t.prefixes.includes(O)}a&&(c+=\"{\"),c+=C(s.prefix),i&&(c+=`:${s.name}`),s.type===2?c+=`(${s.value})`:s.type===1?i||(c+=`(${n})`):s.type===0&&(!i&&(!h||h.type===3||h.modifier!==3||a||s.prefix!==\"\")?c+=\"*\":c+=`(${r})`),s.type===1&&i&&s.suffix.length&&o.test(s.suffix[0])&&(c+=\"\\\\\"),c+=C(s.suffix),a&&(c+=\"}\"),s.modifier!==3&&(c+=y(s.modifier))}return c}var me=class{#i;#n={};#t={};#e={};#s={};constructor(t={},r,n){try{let o;if(typeof r==\"string\"?o=r:n=r,typeof t==\"string\"){let i=new U(t);if(i.parse(),t=i.result,o===void 0&&typeof t.protocol!=\"string\")throw new TypeError(\"A base URL must be provided for a relative constructor string.\");t.baseURL=o}else{if(!t||typeof t!=\"object\")throw new TypeError(\"parameter 1 is not of type 'string' and cannot convert to dictionary.\");if(o)throw new TypeError(\"parameter 1 is not of type 'string'.\")}typeof n>\"u\"&&(n={ignoreCase:!1});let c={ignoreCase:n.ignoreCase===!0},l={pathname:E,protocol:E,username:E,password:E,hostname:E,port:E,search:E,hash:E};this.#i=w(l,t,!0),_(this.#i.protocol)===this.#i.port&&(this.#i.port=\"\");let s;for(s of V){if(!(s in this.#i))continue;let i={},a=this.#i[s];switch(this.#t[s]=[],s){case\"protocol\":Object.assign(i,b),i.encodePart=A;break;case\"username\":Object.assign(i,b),i.encodePart=le;break;case\"password\":Object.assign(i,b),i.encodePart=he;break;case\"hostname\":Object.assign(i,B),W(a)?i.encodePart=j:i.encodePart=z;break;case\"port\":Object.assign(i,b),i.encodePart=K;break;case\"pathname\":N(this.#n.protocol)?(Object.assign(i,q,c),i.encodePart=fe):(Object.assign(i,b,c),i.encodePart=ue);break;case\"search\":Object.assign(i,b,c),i.encodePart=pe;break;case\"hash\":Object.assign(i,b,c),i.encodePart=de;break}try{this.#s[s]=D(a,i),this.#n[s]=F(this.#s[s],this.#t[s],i),this.#e[s]=ye(this.#s[s],i)}catch{throw new TypeError(`invalid ${s} pattern '${this.#i[s]}'.`)}}}catch(o){throw new TypeError(`Failed to construct 'URLPattern': ${o.message}`)}}test(t={},r){let n={pathname:\"\",protocol:\"\",username:\"\",password:\"\",hostname:\"\",port:\"\",search:\"\",hash:\"\"};if(typeof t!=\"string\"&&r)throw new TypeError(\"parameter 1 is not of type 'string'.\");if(typeof t>\"u\")return!1;try{typeof t==\"object\"?n=w(n,t,!1):n=w(n,ge(t,r),!1)}catch{return!1}let o;for(o of V)if(!this.#n[o].exec(n[o]))return!1;return!0}exec(t={},r){let n={pathname:\"\",protocol:\"\",username:\"\",password:\"\",hostname:\"\",port:\"\",search:\"\",hash:\"\"};if(typeof t!=\"string\"&&r)throw new TypeError(\"parameter 1 is not of type 'string'.\");if(typeof t>\"u\")return;try{typeof t==\"object\"?n=w(n,t,!1):n=w(n,ge(t,r),!1)}catch{return null}let o={};r?o.inputs=[t,r]:o.inputs=[t];let c;for(c of V){let l=this.#n[c].exec(n[c]);if(!l)return null;let s={};for(let[i,a]of this.#t[c].entries())if(typeof a==\"string\"||typeof a==\"number\"){let h=l[i+1];s[a]=h}o[c]={input:n[c]??\"\",groups:s}}return o}static compareComponent(t,r,n){let o=(i,a)=>{for(let h of[\"type\",\"modifier\",\"prefix\",\"value\",\"suffix\"]){if(i[h]<a[h])return-1;if(i[h]===a[h])continue;return 1}return 0},c=new k(3,\"\",\"\",\"\",\"\",3),l=new k(0,\"\",\"\",\"\",\"\",3),s=(i,a)=>{let h=0;for(;h<Math.min(i.length,a.length);++h){let p=o(i[h],a[h]);if(p)return p}return i.length===a.length?0:o(i[h]??c,a[h]??c)};return!r.#e[t]&&!n.#e[t]?0:r.#e[t]&&!n.#e[t]?s(r.#s[t],[l]):!r.#e[t]&&n.#e[t]?s([l],n.#s[t]):s(r.#s[t],n.#s[t])}get protocol(){return this.#e.protocol}get username(){return this.#e.username}get password(){return this.#e.password}get hostname(){return this.#e.hostname}get port(){return this.#e.port}get pathname(){return this.#e.pathname}get search(){return this.#e.search}get hash(){return this.#e.hash}};export{me as URLPattern};\n", "import { URLPattern } from \"./dist/urlpattern.js\";\n\nexport { URLPattern };\n\nif (!globalThis.URLPattern) {\n  globalThis.URLPattern = URLPattern;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets: boolean =\n  global.ShadowRoot &&\n  (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) &&\n  'adoptedStyleSheets' in Document.prototype &&\n  'replace' in CSSStyleSheet.prototype;\n\n/**\n * A CSSResult or native CSSStyleSheet.\n *\n * In browsers that support constructible CSS style sheets, CSSStyleSheet\n * object can be used for styling along side CSSResult from the `css`\n * template tag.\n */\nexport type CSSResultOrNative = CSSResult | CSSStyleSheet;\n\nexport type CSSResultArray = Array<CSSResultOrNative | CSSResultArray>;\n\n/**\n * A single CSSResult, CSSStyleSheet, or an array or nested arrays of those.\n */\nexport type CSSResultGroup = CSSResultOrNative | CSSResultArray;\n\nconst constructionToken = Symbol();\n\nconst cssTagCache = new WeakMap<TemplateStringsArray, CSSStyleSheet>();\n\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nexport class CSSResult {\n  // This property needs to remain unminified.\n  ['_$cssResult$'] = true;\n  readonly cssText: string;\n  private _styleSheet?: CSSStyleSheet;\n  private _strings: TemplateStringsArray | undefined;\n\n  private constructor(\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n        'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.'\n      );\n    }\n    this.cssText = cssText;\n    this._strings = strings;\n  }\n\n  // This is a getter so that it's lazy. In practice, this means stylesheets\n  // are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet | undefined {\n    // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n    // constructable.\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(\n          this.cssText\n        );\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n    return styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\ntype ConstructableCSSResult = CSSResult & {\n  new (\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ): CSSResult;\n};\n\nconst textFromCSSResult = (value: CSSResultGroup | number) => {\n  // This property needs to remain unminified.\n  if ((value as CSSResult)['_$cssResult$'] === true) {\n    return (value as CSSResult).cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n      `Value passed to 'css' function must be a 'css' function result: ` +\n        `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n        `to ensure page security.`\n    );\n  }\n};\n\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) =>\n  new (CSSResult as ConstructableCSSResult)(\n    typeof value === 'string' ? value : String(value),\n    undefined,\n    constructionToken\n  );\n\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\nexport const css = (\n  strings: TemplateStringsArray,\n  ...values: (CSSResultGroup | number)[]\n): CSSResult => {\n  const cssText =\n    strings.length === 1\n      ? strings[0]\n      : values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]\n        );\n  return new (CSSResult as ConstructableCSSResult)(\n    cssText,\n    strings,\n    constructionToken\n  );\n};\n\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (\n  renderRoot: ShadowRoot,\n  styles: Array<CSSResultOrNative>\n) => {\n  if (supportsAdoptingStyleSheets) {\n    (renderRoot as ShadowRoot).adoptedStyleSheets = styles.map((s) =>\n      s instanceof CSSStyleSheet ? s : s.styleSheet!\n    );\n  } else {\n    styles.forEach((s) => {\n      const style = document.createElement('style');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const nonce = (global as any)['litNonce'];\n      if (nonce !== undefined) {\n        style.setAttribute('nonce', nonce);\n      }\n      style.textContent = (s as CSSResult).cssText;\n      renderRoot.appendChild(style);\n    });\n  }\n};\n\nconst cssResultFromStyleSheet = (sheet: CSSStyleSheet) => {\n  let cssText = '';\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\n\nexport const getCompatibleStyle =\n  supportsAdoptingStyleSheets ||\n  (NODE_MODE && global.CSSStyleSheet === undefined)\n    ? (s: CSSResultOrNative) => s\n    : (s: CSSResultOrNative) =>\n        s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\n\nimport {\n  getCompatibleStyle,\n  adoptStyles,\n  CSSResultGroup,\n  CSSResultOrNative,\n} from './css-tag.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\n\nexport * from './css-tag.js';\nexport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\nif (NODE_MODE) {\n  global.customElements ??= customElements;\n}\n\nconst DEV_MODE = true;\n\nlet requestUpdateThenable: (name: string) => {\n  then: (\n    onfulfilled?: (value: boolean) => void,\n    _onrejected?: () => void\n  ) => void;\n};\n\nlet issueWarning: (code: string, warning: string) => void;\n\nconst trustedTypes = (global as unknown as {trustedTypes?: {emptyScript: ''}})\n  .trustedTypes;\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nconst polyfillSupport = DEV_MODE\n  ? global.reactiveElementPolyfillSupportDevMode\n  : global.reactiveElementPolyfillSupport;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> = (global.litIssuedWarnings ??=\n    new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n\n  // Issue polyfill support warning.\n  if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {\n    issueWarning(\n      'polyfill-support-missing',\n      `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\n        `the \\`polyfill-support\\` module has not been loaded.`\n    );\n  }\n\n  requestUpdateThenable = (name) => ({\n    then: (\n      onfulfilled?: (value: boolean) => void,\n      _onrejected?: () => void\n    ) => {\n      issueWarning(\n        'request-update-promise',\n        `The \\`requestUpdate\\` method should no longer return a Promise but ` +\n          `does so on \\`${name}\\`. Use \\`updateComplete\\` instead.`\n      );\n      if (onfulfilled !== undefined) {\n        onfulfilled(false);\n      }\n    },\n  });\n}\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ReactiveUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry = Update;\n    export interface Update {\n      kind: 'update';\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: ReactiveUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<ReactiveUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string | null, type?: TypeHint): Type;\n\n  /**\n   * Called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n  | ComplexAttributeConverter<Type>\n  | ((value: string | null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * When set to `true`, indicates the property is internal private state. The\n   * property should not be set by users. When using TypeScript, this property\n   * should be marked as `private` or `protected`, and it is also a common\n   * practice to use a leading `_` in the name. The property is not added to\n   * `observedAttributes`.\n   */\n  readonly state?: boolean;\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean | string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * A Map of property keys to values.\n *\n * Takes an optional type parameter T, which when specified as a non-any,\n * non-unknown type, will make the Map more strongly-typed, associating the map\n * keys with their corresponding value type on T.\n *\n * Use `PropertyValues<this>` when overriding ReactiveElement.update() and\n * other lifecycle methods in order to get stronger type-checking on keys\n * and values.\n */\n// This type is conditional so that if the parameter T is not specified, or\n// is `any`, the type will include `Map<PropertyKey, unknown>`. Since T is not\n// given in the uses of PropertyValues in this file, all uses here fallback to\n// meaning `Map<PropertyKey, unknown>`, but if a developer uses\n// `PropertyValues<this>` (or any other value for T) they will get a\n// strongly-typed Map type.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PropertyValues<T = any> = T extends object\n  ? PropertyValueMap<T>\n  : Map<PropertyKey, unknown>;\n\n/**\n * Do not use, instead prefer {@linkcode PropertyValues}.\n */\n// This type must be exported such that JavaScript generated by the Google\n// Closure Compiler can import a type reference.\nexport interface PropertyValueMap<T> extends Map<PropertyKey, unknown> {\n  get<K extends keyof T>(k: K): T[K];\n  set<K extends keyof T>(key: K, value: T[K]): this;\n  has<K extends keyof T>(k: K): boolean;\n  delete<K extends keyof T>(k: K): boolean;\n}\n\nexport const defaultConverter: ComplexAttributeConverter = {\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n\n  fromAttribute(value: string | null, type?: unknown) {\n    let fromValue: unknown = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value!) as unknown;\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  },\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n\n/**\n * A string representing one of the supported dev mode warning categories.\n */\nexport type WarningKind = 'change-in-update' | 'migration';\n\nexport type Initializer = (element: ReactiveElement) => void;\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class ReactiveElement\n  // In the Node build, this `extends` clause will be substituted with\n  // `(globalThis.HTMLElement ?? HTMLElement)`.\n  //\n  // This way, we will first prefer any global `HTMLElement` polyfill that the\n  // user has assigned, and then fall back to the `HTMLElement` shim which has\n  // been imported (see note at the top of this file about how this import is\n  // generated by Rollup). Note that the `HTMLElement` variable has been\n  // shadowed by this import, so it no longer refers to the global.\n  extends HTMLElement\n  implements ReactiveControllerHost\n{\n  // Note: these are patched in only in DEV_MODE.\n  /**\n   * Read or set all the enabled warning categories for this class.\n   *\n   * This property is only used in development builds.\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enabledWarnings?: WarningKind[];\n\n  /**\n   * Enable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Enable for all ReactiveElement subclasses\n   * ReactiveElement.enableWarning?.('migration');\n   *\n   * // Enable for only MyElement and subclasses\n   * MyElement.enableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Disable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Disable for all ReactiveElement subclasses\n   * ReactiveElement.disableWarning?.('migration');\n   *\n   * // Disable for only MyElement and subclasses\n   * MyElement.disableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static disableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer: Initializer) {\n    this.finalize();\n    (this._initializers ??= []).push(initializer);\n  }\n\n  static _initializers?: Initializer[];\n\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   * @nocollapse\n   */\n  private static __attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static [finalized] = true;\n\n  /**\n   * Memoized list of all element properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category properties\n   */\n  static elementProperties: PropertyDeclarationMap = new Map();\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring reactive properties. When\n   * a reactive property is set the element will update and render.\n   *\n   * By default properties are public fields, and as such, they should be\n   * considered as primarily settable by element users, either via attribute or\n   * the property itself.\n   *\n   * Generally, properties that are changed by the element should be private or\n   * protected fields and should use the `state: true` option. Properties\n   * marked as `state` do not reflect from the corresponding attribute\n   *\n   * However, sometimes element code does need to set a public property. This\n   * should typically only be done in response to user interaction, and an event\n   * should be fired informing the user; for example, a checkbox sets its\n   * `checked` property when clicked and fires a `changed` event. Mutating\n   * public properties should typically not be done for non-primitive (object or\n   * array) properties. In other cases when an element needs to manage state, a\n   * private property set with the `state: true` option should be used. When\n   * needed, state properties can be initialized via public properties to\n   * facilitate complex interactions.\n   * @nocollapse\n   * @category properties\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Memoized list of all element styles.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category styles\n   */\n  static elementStyles: Array<CSSResultOrNative> = [];\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the {@linkcode css} tag function, via constructible stylesheets, or\n   * imported from native CSS module scripts.\n   *\n   * Note on Content Security Policy:\n   *\n   * Element styles are implemented with `<style>` tags when the browser doesn't\n   * support adopted StyleSheets. To use such `<style>` tags with the style-src\n   * CSP directive, the style-src value must either include 'unsafe-inline' or\n   * `nonce-<base64-value>` with `<base64-value>` replaced be a server-generated\n   * nonce.\n   *\n   * To provide a nonce to use on generated `<style>` elements, set\n   * `window.litNonce` to a server-generated nonce in your page's HTML, before\n   * loading application code:\n   *\n   * ```html\n   * <script>\n   *   // Generated and unique per request:\n   *   window.litNonce = 'a1b2c3d4';\n   * </script>\n   * ```\n   * @nocollapse\n   * @category styles\n   */\n  static styles?: CSSResultGroup;\n\n  /**\n   * The set of properties defined by this class that caused an accessor to be\n   * added during `createProperty`.\n   * @nocollapse\n   */\n  private static __reactivePropertyKeys?: Set<PropertyKey>;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this.elementProperties.forEach((v, p) => {\n      const attr = this.__attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    // if this is a state property, force the attribute to false.\n    if (options.state) {\n      // Cast as any since this is readonly.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (options as any).attribute = false;\n    }\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure finalization has been kicked off.\n    this.finalize();\n    this.elementProperties.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {\n      const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        Object.defineProperty(this.prototype, name, descriptor);\n        if (DEV_MODE) {\n          // If this class doesn't have its own set, create one and initialize\n          // with the values in the set from the nearest ancestor class, if any.\n          if (!this.hasOwnProperty('__reactivePropertyKeys')) {\n            this.__reactivePropertyKeys = new Set(\n              this.__reactivePropertyKeys ?? []\n            );\n          }\n          this.__reactivePropertyKeys!.add(name);\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  protected static getPropertyDescriptor(\n    name: PropertyKey,\n    key: string | symbol,\n    options: PropertyDeclaration\n  ): PropertyDescriptor | undefined {\n    return {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: ReactiveElement, value: unknown) {\n        const oldValue = (this as {} as {[key: string]: unknown})[\n          name as string\n        ];\n        (this as {} as {[key: string]: unknown})[key as string] = value;\n        (this as unknown as ReactiveElement).requestUpdate(\n          name,\n          oldValue,\n          options\n        );\n      },\n      configurable: true,\n      enumerable: true,\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name: PropertyKey) {\n    return this.elementProperties.get(name) || defaultPropertyDeclaration;\n  }\n\n  /**\n   * Creates property accessors for registered properties, sets up element\n   * styling, and ensures any superclasses are also finalized. Returns true if\n   * the element was finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(finalized)) {\n      return false;\n    }\n    this[finalized] = true;\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this) as typeof ReactiveElement;\n    superCtor.finalize();\n    // Create own set of initializers for this class if any exist on the\n    // superclass and copy them down. Note, for a small perf boost, avoid\n    // creating initializers unless needed.\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    this.elementProperties = new Map(superCtor.elementProperties);\n    // initialize Map populated in observedAttributes\n    this.__attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...Object.getOwnPropertySymbols(props),\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeScript lack of support for symbol in\n        // index types\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n    this.elementStyles = this.finalizeStyles(this.styles);\n    // DEV mode warnings\n    if (DEV_MODE) {\n      const warnRemovedOrRenamed = (name: string, renamed = false) => {\n        if (this.prototype.hasOwnProperty(name)) {\n          issueWarning(\n            renamed ? 'renamed-api' : 'removed-api',\n            `\\`${name}\\` is implemented on class ${this.name}. It ` +\n              `has been ${renamed ? 'renamed' : 'removed'} ` +\n              `in this version of LitElement.`\n          );\n        }\n      };\n      warnRemovedOrRenamed('initialize');\n      warnRemovedOrRenamed('requestUpdateInternal');\n      warnRemovedOrRenamed('_getUpdateComplete', true);\n    }\n    return true;\n  }\n\n  /**\n   * Options used when calling `attachShadow`. Set this property to customize\n   * the options for the shadowRoot; for example, to create a closed\n   * shadowRoot: `{mode: 'closed'}`.\n   *\n   * Note, these options are used in `createRenderRoot`. If this method\n   * is customized, options should be respected if possible.\n   * @nocollapse\n   * @category rendering\n   */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  protected static finalizeStyles(\n    styles?: CSSResultGroup\n  ): Array<CSSResultOrNative> {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set((styles as Array<unknown>).flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s as CSSResultOrNative));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   * @category rendering\n   */\n  readonly renderRoot!: HTMLElement | ShadowRoot;\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static __attributeNameForProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration\n  ) {\n    const attribute = options.attribute;\n    return attribute === false\n      ? undefined\n      : typeof attribute === 'string'\n      ? attribute\n      : typeof name === 'string'\n      ? name.toLowerCase()\n      : undefined;\n  }\n\n  private __instanceProperties?: PropertyValues = new Map();\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private __updatePromise!: Promise<boolean>;\n\n  /**\n   * True if there is a pending update as a result of calling `requestUpdate()`.\n   * Should only be read.\n   * @category updates\n   */\n  isUpdatePending = false;\n\n  /**\n   * Is set to `true` after the first update. The element code cannot assume\n   * that `renderRoot` exists before the element `hasUpdated`.\n   * @category updates\n   */\n  hasUpdated = false;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   *\n   * @internal\n   */\n  _$changedProperties!: PropertyValues;\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private __reflectingProperties?: Map<PropertyKey, PropertyDeclaration>;\n\n  /**\n   * Name of currently reflecting property\n   */\n  private __reflectingProperty: PropertyKey | null = null;\n\n  /**\n   * Set of controllers.\n   */\n  private __controllers?: ReactiveController[];\n\n  constructor() {\n    super();\n    this.__initialize();\n  }\n\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   */\n  private __initialize() {\n    this.__updatePromise = new Promise<boolean>(\n      (res) => (this.enableUpdating = res)\n    );\n    this._$changedProperties = new Map();\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (this.constructor as typeof ReactiveElement)._initializers?.forEach((i) =>\n      i(this)\n    );\n  }\n\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller: ReactiveController) {\n    (this.__controllers ??= []).push(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller: ReactiveController) {\n    // Note, if the indexOf is -1, the >>> will flip the sign which makes the\n    // splice do nothing.\n    this.__controllers?.splice(this.__controllers.indexOf(controller) >>> 0, 1);\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private __saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof ReactiveElement).elementProperties.forEach(\n      (_v, p) => {\n        if (this.hasOwnProperty(p)) {\n          this.__instanceProperties!.set(p, this[p as keyof this]);\n          delete this[p as keyof this];\n        }\n      }\n    );\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  protected createRenderRoot(): Element | ShadowRoot {\n    const renderRoot =\n      this.shadowRoot ??\n      this.attachShadow(\n        (this.constructor as typeof ReactiveElement).shadowRootOptions\n      );\n    adoptStyles(\n      renderRoot,\n      (this.constructor as typeof ReactiveElement).elementStyles\n    );\n    return renderRoot;\n  }\n\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // create renderRoot before first update.\n    if (this.renderRoot === undefined) {\n      (\n        this as {\n          renderRoot: Element | DocumentFragment;\n        }\n      ).renderRoot = this.createRenderRoot();\n    }\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n  }\n\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  protected enableUpdating(_requestedUpdate: boolean) {}\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    this._$attributeToProperty(name, value);\n  }\n\n  private __propertyToAttribute(\n    name: PropertyKey,\n    value: unknown,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    const attr = (\n      this.constructor as typeof ReactiveElement\n    ).__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter =\n        (options.converter as ComplexAttributeConverter)?.toAttribute !==\n        undefined\n          ? (options.converter as ComplexAttributeConverter)\n          : defaultConverter;\n      const attrValue = converter.toAttribute!(value, options.type);\n      if (\n        DEV_MODE &&\n        (this.constructor as typeof ReactiveElement).enabledWarnings!.indexOf(\n          'migration'\n        ) >= 0 &&\n        attrValue === undefined\n      ) {\n        issueWarning(\n          'undefined-attribute-value',\n          `The attribute value for the ${name as string} property is ` +\n            `undefined on element ${this.localName}. The attribute will be ` +\n            `removed, but in the previous version of \\`ReactiveElement\\`, ` +\n            `the attribute would not have changed.`\n        );\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /** @internal */\n  _$attributeToProperty(name: string, value: string | null) {\n    const ctor = this.constructor as typeof ReactiveElement;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = (ctor.__attributeToPropertyMap as AttributeMap).get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter =\n        typeof options.converter === 'function'\n          ? {fromAttribute: options.converter}\n          : options.converter?.fromAttribute !== undefined\n          ? options.converter\n          : defaultConverter;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      this[propName as keyof this] = converter.fromAttribute!(\n        value,\n        options.type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ) as any;\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(\n    name?: PropertyKey,\n    oldValue?: unknown,\n    options?: PropertyDeclaration\n  ): void {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      options =\n        options ||\n        (this.constructor as typeof ReactiveElement).getPropertyOptions(name);\n      const hasChanged = options.hasChanged || notEqual;\n      if (hasChanged(this[name as keyof this], oldValue)) {\n        if (!this._$changedProperties.has(name)) {\n          this._$changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true && this.__reflectingProperty !== name) {\n          if (this.__reflectingProperties === undefined) {\n            this.__reflectingProperties = new Map();\n          }\n          this.__reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this.isUpdatePending && shouldRequestUpdate) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n    // Note, since this no longer returns a promise, in dev mode we return a\n    // thenable which warns if it's called.\n    return DEV_MODE\n      ? (requestUpdateThenable(this.localName) as unknown as void)\n      : undefined;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  protected scheduleUpdate(): void | Promise<unknown> {\n    return this.performUpdate();\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * Note: To ensure `performUpdate()` synchronously completes a pending update,\n   * it should not be overridden. In LitElement 2.x it was suggested to override\n   * `performUpdate()` to also customizing update scheduling. Instead, you should now\n   * override `scheduleUpdate()`. For backwards compatibility with LitElement 2.x,\n   * scheduling updates via `performUpdate()` continues to work, but will make\n   * also calling `performUpdate()` to synchronously process updates difficult.\n   *\n   * @category updates\n   */\n  protected performUpdate(): void | Promise<unknown> {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({kind: 'update'});\n    // create renderRoot before first update.\n    if (!this.hasUpdated) {\n      // Produce warning if any class properties are shadowed by class fields\n      if (DEV_MODE) {\n        const shadowedProperties: string[] = [];\n        (\n          this.constructor as typeof ReactiveElement\n        ).__reactivePropertyKeys?.forEach((p) => {\n          if (this.hasOwnProperty(p) && !this.__instanceProperties?.has(p)) {\n            shadowedProperties.push(p as string);\n          }\n        });\n        if (shadowedProperties.length) {\n          throw new Error(\n            `The following properties on element ${this.localName} will not ` +\n              `trigger updates as expected because they are set using class ` +\n              `fields: ${shadowedProperties.join(', ')}. ` +\n              `Native class fields and some compiled output will overwrite ` +\n              `accessors used for detecting changes. See ` +\n              `https://lit.dev/msg/class-field-shadowing ` +\n              `for more information.`\n          );\n        }\n      }\n    }\n    // Mixin instance properties once, if they exist.\n    if (this.__instanceProperties) {\n      // Use forEach so this works even if for/of loops are compiled to for loops\n      // expecting arrays\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.__instanceProperties!.forEach((v, p) => ((this as any)[p] = v));\n      this.__instanceProperties = undefined;\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  protected willUpdate(_changedProperties: PropertyValues): void {}\n\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties: PropertyValues) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (\n      DEV_MODE &&\n      this.isUpdatePending &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.indexOf(\n        'change-in-update'\n      ) >= 0\n    ) {\n      issueWarning(\n        'change-in-update',\n        `Element ${this.localName} scheduled an update ` +\n          `(generally because a property was set) ` +\n          `after an update completed, causing a new update to be scheduled. ` +\n          `This is inefficient and should be avoided unless the next update ` +\n          `can only be scheduled as a side effect of the previous update.`\n      );\n    }\n  }\n\n  private __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete(): Promise<boolean> {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  protected getUpdateComplete(): Promise<boolean> {\n    return this.__updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this.__reflectingProperties !== undefined) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this.__reflectingProperties.forEach((v, k) =>\n        this.__propertyToAttribute(k, this[k as keyof this], v)\n      );\n      this.__reflectingProperties = undefined;\n    }\n    this.__markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n\n// Apply polyfills if available\npolyfillSupport?.({ReactiveElement});\n\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = ['change-in-update'];\n  const ensureOwnWarnings = function (ctor: typeof ReactiveElement) {\n    if (\n      !ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))\n    ) {\n      ctor.enabledWarnings = ctor.enabledWarnings!.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    if (this.enabledWarnings!.indexOf(warning) < 0) {\n      this.enabledWarnings!.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings!.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings!.splice(i, 1);\n    }\n  };\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n(global.reactiveElementVersions ??= []).push('1.6.3');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// IMPORTANT: these imports must be type-only\nimport type {Directive, DirectiveResult, PartInfo} from './directive.js';\n\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst NODE_MODE = false;\n// Use window for browser builds because IE11 doesn't have globalThis.\nconst global = NODE_MODE ? globalThis : window;\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace LitUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | TemplatePrep\n      | TemplateInstantiated\n      | TemplateInstantiatedAndUpdated\n      | TemplateUpdating\n      | BeginRender\n      | EndRender\n      | CommitPartEntry\n      | SetPartValue;\n    export interface TemplatePrep {\n      kind: 'template prep';\n      template: Template;\n      strings: TemplateStringsArray;\n      clonableTemplate: HTMLTemplateElement;\n      parts: TemplatePart[];\n    }\n    export interface BeginRender {\n      kind: 'begin render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart | undefined;\n    }\n    export interface EndRender {\n      kind: 'end render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart;\n    }\n    export interface TemplateInstantiated {\n      kind: 'template instantiated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateInstantiatedAndUpdated {\n      kind: 'template instantiated and updated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateUpdating {\n      kind: 'template updating';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface SetPartValue {\n      kind: 'set part';\n      part: Part;\n      value: unknown;\n      valueIndex: number;\n      values: unknown[];\n      templateInstance: TemplateInstance;\n    }\n\n    export type CommitPartEntry =\n      | CommitNothingToChildEntry\n      | CommitText\n      | CommitNode\n      | CommitAttribute\n      | CommitProperty\n      | CommitBooleanAttribute\n      | CommitEventListener\n      | CommitToElementBinding;\n\n    export interface CommitNothingToChildEntry {\n      kind: 'commit nothing to child';\n      start: ChildNode;\n      end: ChildNode | null;\n      parent: Disconnectable | undefined;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitText {\n      kind: 'commit text';\n      node: Text;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitNode {\n      kind: 'commit node';\n      start: Node;\n      parent: Disconnectable | undefined;\n      value: Node;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitAttribute {\n      kind: 'commit attribute';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitProperty {\n      kind: 'commit property';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitBooleanAttribute {\n      kind: 'commit boolean attribute';\n      element: Element;\n      name: string;\n      value: boolean;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitEventListener {\n      kind: 'commit event listener';\n      element: Element;\n      name: string;\n      value: unknown;\n      oldListener: unknown;\n      options: RenderOptions | undefined;\n      // True if we're removing the old event listener (e.g. because settings changed, or value is nothing)\n      removeListener: boolean;\n      // True if we're adding a new event listener (e.g. because first render, or settings changed)\n      addListener: boolean;\n    }\n\n    export interface CommitToElementBinding {\n      kind: 'commit to element binding';\n      element: Element;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: LitUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<LitUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n// Used for connecting beginRender and endRender events when there are nested\n// renders when errors are thrown preventing an endRender event from being\n// called.\nlet debugLogRenderId = 0;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  global.litIssuedWarnings ??= new Set();\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (!global.litIssuedWarnings!.has(warning)) {\n      console.warn(warning);\n      global.litIssuedWarnings!.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n}\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  global.ShadyDOM?.inUse &&\n  global.ShadyDOM?.noPatch === true\n    ? global.ShadyDOM!.wrap\n    : (node: Node) => node;\n\nconst trustedTypes = (global as unknown as Partial<Window>).trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n  ? trustedTypes.createPolicy('lit-html', {\n      createHTML: (s) => s,\n    })\n  : undefined;\n\n/**\n * Used to sanitize any value before it is written into the DOM. This can be\n * used to implement a security policy of allowed and disallowed values in\n * order to prevent XSS attacks.\n *\n * One way of using this callback would be to check attributes and properties\n * against a list of high risk fields, and require that values written to such\n * fields be instances of a class which is safe by construction. Closure's Safe\n * HTML Types is one implementation of this technique (\n * https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).\n * The TrustedTypes polyfill in API-only mode could also be used as a basis\n * for this technique (https://github.com/WICG/trusted-types).\n *\n * @param node The HTML node (usually either a #text node or an Element) that\n *     is being written to. Note that this is just an exemplar node, the write\n *     may take place against another instance of the same class of node.\n * @param name The name of an attribute or property (for example, 'href').\n * @param type Indicates whether the write that's about to be performed will\n *     be to a property or a node.\n * @return A function that will sanitize this class of writes.\n */\nexport type SanitizerFactory = (\n  node: Node,\n  name: string,\n  type: 'property' | 'attribute'\n) => ValueSanitizer;\n\n/**\n * A function which can sanitize values that will be written to a specific kind\n * of DOM sink.\n *\n * See SanitizerFactory.\n *\n * @param value The value to sanitize. Will be the actual value passed into\n *     the lit-html template literal, so this could be of any type.\n * @return The value to write to the DOM. Usually the same as the input value,\n *     unless sanitization is needed.\n */\nexport type ValueSanitizer = (value: unknown) => unknown;\n\nconst identityFunction: ValueSanitizer = (value: unknown) => value;\nconst noopSanitizer: SanitizerFactory = (\n  _node: Node,\n  _name: string,\n  _type: 'property' | 'attribute'\n) => identityFunction;\n\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer: SanitizerFactory) => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(\n      `Attempted to overwrite existing lit-html security policy.` +\n        ` setSanitizeDOMValueFactory should be called at most once.`\n    );\n  }\n  sanitizerFactoryInternal = newSanitizer;\n};\n\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\n\nconst createSanitizer: SanitizerFactory = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n};\n\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$lit$';\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${String(Math.random()).slice(9)}$`;\n\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\n\nconst d =\n  NODE_MODE && global.document === undefined\n    ? ({\n        createTreeWalker() {\n          return {};\n        },\n      } as unknown as Document)\n    : document;\n\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = () => d.createComment('');\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\nconst isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value: unknown): value is Iterable<unknown> =>\n  isArray(value) ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  typeof (value as any)?.[Symbol.iterator] === 'function';\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  'g'\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\n\ntype ResultType = typeof HTML_RESULT | typeof SVG_RESULT;\n\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg}.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n */\nexport type TemplateResult<T extends ResultType = ResultType> = {\n  // This property needs to remain unminified.\n  ['_$litType$']: T;\n  strings: TemplateStringsArray;\n  values: unknown[];\n};\n\nexport type HTMLTemplateResult = TemplateResult<typeof HTML_RESULT>;\n\nexport type SVGTemplateResult = TemplateResult<typeof SVG_RESULT>;\n\nexport interface CompiledTemplateResult {\n  // This is a factory in order to make template initialization lazy\n  // and allow ShadyRenderOptions scope to be passed in.\n  // This property needs to remain unminified.\n  ['_$litType$']: CompiledTemplate;\n  values: unknown[];\n}\n\nexport interface CompiledTemplate extends Omit<Template, 'el'> {\n  // el is overridden to be optional. We initialize it on first render\n  el?: HTMLTemplateElement;\n\n  // The prepared HTML string to create a template element from.\n  // The type is a TemplateStringsArray to guarantee that the value came from\n  // source code, preventing a JSON injection attack.\n  h: TemplateStringsArray;\n}\n\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag =\n  <T extends ResultType>(type: T) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult<T> => {\n    // Warn against templates octal escape sequences\n    // We do this here rather than in render so that the warning is closer to the\n    // template definition.\n    if (DEV_MODE && strings.some((s) => s === undefined)) {\n      console.warn(\n        'Some template strings are undefined.\\n' +\n          'This is probably caused by illegal octal escape sequences.'\n      );\n    }\n    return {\n      // This property needs to remain unminified.\n      ['_$litType$']: type,\n      strings,\n      values,\n    };\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\nexport const html = tag(HTML_RESULT);\n\n/**\n * Interprets a template literal as an SVG fragment that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n *\n * const myImage = html`\n *   <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n *     ${rect}\n *   </svg>`;\n * ```\n *\n * The `svg` *tag function* should only be used for SVG fragments, or elements\n * that would be contained **inside** an `<svg>` HTML element. A common error is\n * placing an `<svg>` *element* in a template tagged with the `svg` tag\n * function. The `<svg>` element is an HTML element and should be used within a\n * template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an SVG fragment from the\n * `render()` method, as the SVG fragment will be contained within the element's\n * shadow root and thus cannot be used within an `<svg>` HTML element.\n */\nexport const svg = tag(SVG_RESULT);\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = Symbol.for('lit-noChange');\n\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\nexport const nothing = Symbol.for('lit-nothing');\n\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - the must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap<TemplateStringsArray, Template>();\n\n/**\n * Object specifying options for controlling lit-html rendering. Note that\n * while `render` may be called multiple times on the same `container` (and\n * `renderBefore` reference node) to efficiently update the rendered content,\n * only the options passed in during the first render are respected during\n * the lifetime of renders to that unique `container` + `renderBefore`\n * combination.\n */\nexport interface RenderOptions {\n  /**\n   * An object to use as the `this` value for event listeners. It's often\n   * useful to set this to the host component rendering a template.\n   */\n  host?: object;\n  /**\n   * A DOM node before which to render content in the container.\n   */\n  renderBefore?: ChildNode | null;\n  /**\n   * Node used for cloning the template (`importNode` will be called on this\n   * node). This controls the `ownerDocument` of the rendered DOM, along with\n   * any inherited context. Defaults to the global `document`.\n   */\n  creationScope?: {importNode(node: Node, deep?: boolean): Node};\n  /**\n   * The initial connected state for the top-level part being rendered. If no\n   * `isConnected` option is set, `AsyncDirective`s will be connected by\n   * default. Set to `false` if the initial render occurs in a disconnected tree\n   * and `AsyncDirective`s should see `isConnected === false` for their initial\n   * render. The `part.setConnected()` method must be used subsequent to initial\n   * render to change the connected state of the part.\n   */\n  isConnected?: boolean;\n}\n\nconst walker = d.createTreeWalker(\n  d,\n  129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */,\n  null,\n  false\n);\n\nlet sanitizerFactoryInternal: SanitizerFactory = noopSanitizer;\n\n//\n// Classes only below here, const variable declarations only above here...\n//\n// Keeping variable declarations and classes together improves minification.\n// Interfaces and type aliases can be interleaved freely.\n//\n\n// Type for classes that have a `_directive` or `_directives[]` field, used by\n// `resolveDirective`\nexport interface DirectiveParent {\n  _$parent?: DirectiveParent;\n  _$isConnected: boolean;\n  __directive?: Directive;\n  __directives?: Array<Directive | undefined>;\n}\n\nfunction trustFromTemplateString(\n  tsa: TemplateStringsArray,\n  stringFromTSA: string\n): TrustedHTML {\n  // A security check to prevent spoofing of Lit template results.\n  // In the future, we may be able to replace this with Array.isTemplateObject,\n  // though we might need to make that check inside of the html and svg\n  // functions, because precompiled templates don't come in as\n  // TemplateStringArray objects.\n  if (!Array.isArray(tsa) || !tsa.hasOwnProperty('raw')) {\n    let message = 'invalid template strings array';\n    if (DEV_MODE) {\n      message = `\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n          If you're using the html or svg tagged template functions normally\n          and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        `\n        .trim()\n        .replace(/\\n */g, '\\n');\n    }\n    throw new Error(message);\n  }\n  return policy !== undefined\n    ? policy.createHTML(stringFromTSA)\n    : (stringFromTSA as unknown as TrustedHTML);\n}\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment markers denoting the `ChildPart`s\n * and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType\n): [TrustedHTML, Array<string | undefined>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string | undefined> = [];\n  let html = type === SVG_RESULT ? '<svg>' : '';\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          if (DEV_MODE) {\n            throw new Error(\n              'Bindings in tag names are not supported. Please use static templates instead. ' +\n                'See https://lit.dev/docs/templates/expressions/#static-expressions'\n            );\n          }\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n              ? doubleQuoteAttrEndRegex\n              : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    if (DEV_MODE) {\n      // If we have a attrNameEndIndex, which indicates that we should\n      // rewrite the attribute name, assert that we're in a valid attribute\n      // position - either in a tag, or a quoted attribute value.\n      console.assert(\n        attrNameEndIndex === -1 ||\n          regex === tagEndRegex ||\n          regex === singleQuoteAttrEndRegex ||\n          regex === doubleQuoteAttrEndRegex,\n        'unexpected parse state B'\n      );\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n        ? (attrNames.push(attrName!),\n          s.slice(0, attrNameEndIndex) +\n            boundAttributeSuffix +\n            s.slice(attrNameEndIndex)) +\n          marker +\n          end\n        : s +\n          marker +\n          (attrNameEndIndex === -2 ? (attrNames.push(undefined), i) : end);\n  }\n\n  const htmlResult: string | TrustedHTML =\n    html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : '');\n\n  // Returned as an array for terseness\n  return [trustFromTemplateString(strings, htmlResult), attrNames];\n};\n\n/** @internal */\nexport type {Template};\nclass Template {\n  /** @internal */\n  el!: HTMLTemplateElement;\n\n  parts: Array<TemplatePart> = [];\n\n  constructor(\n    // This property needs to remain unminified.\n    {strings, ['_$litType$']: type}: TemplateResult,\n    options?: RenderOptions\n  ) {\n    let node: Node | null;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts;\n\n    // Create template element\n    const [html, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html, options);\n    walker.currentNode = this.el.content;\n\n    // Reparent SVG nodes into template root\n    if (type === SVG_RESULT) {\n      const content = this.el.content;\n      const svgElement = content.firstChild!;\n      svgElement.remove();\n      content.append(...svgElement.childNodes);\n    }\n\n    // Walk the template to find binding markers and create TemplateParts\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        if (DEV_MODE) {\n          const tag = (node as Element).localName;\n          // Warn if `textarea` includes an expression and throw if `template`\n          // does since these are not supported. We do this by checking\n          // innerHTML for anything that looks like a marker. This catches\n          // cases like bindings in textarea there markers turn into text nodes.\n          if (\n            /^(?:textarea|template)$/i!.test(tag) &&\n            (node as Element).innerHTML.includes(marker)\n          ) {\n            const m =\n              `Expressions are not supported inside \\`${tag}\\` ` +\n              `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +\n              `information.`;\n            if (tag === 'template') {\n              throw new Error(m);\n            } else issueWarning('', m);\n          }\n        }\n        // TODO (justinfagnani): for attempted dynamic tag names, we don't\n        // increment the bindingIndex, and it'll be off by 1 in the element\n        // and off by two after it.\n        if ((node as Element).hasAttributes()) {\n          // We defer removing bound attributes because on IE we might not be\n          // iterating attributes in their template order, and would sometimes\n          // remove an attribute that we still need to create a part for.\n          const attrsToRemove = [];\n          for (const name of (node as Element).getAttributeNames()) {\n            // `name` is the name of the attribute we're iterating over, but not\n            // _necessarily_ the name of the attribute we will create a part\n            // for. They can be different in browsers that don't iterate on\n            // attributes in source order. In that case the attrNames array\n            // contains the attribute name we'll process next. We only need the\n            // attribute name here to know if we should process a bound attribute\n            // on this element.\n            if (\n              name.endsWith(boundAttributeSuffix) ||\n              name.startsWith(marker)\n            ) {\n              const realName = attrNames[attrNameIndex++];\n              attrsToRemove.push(name);\n              if (realName !== undefined) {\n                // Lowercase for case-sensitive SVG attributes like viewBox\n                const value = (node as Element).getAttribute(\n                  realName.toLowerCase() + boundAttributeSuffix\n                )!;\n                const statics = value.split(marker);\n                const m = /([.?@])?(.*)/.exec(realName)!;\n                parts.push({\n                  type: ATTRIBUTE_PART,\n                  index: nodeIndex,\n                  name: m[2],\n                  strings: statics,\n                  ctor:\n                    m[1] === '.'\n                      ? PropertyPart\n                      : m[1] === '?'\n                      ? BooleanAttributePart\n                      : m[1] === '@'\n                      ? EventPart\n                      : AttributePart,\n                });\n              } else {\n                parts.push({\n                  type: ELEMENT_PART,\n                  index: nodeIndex,\n                });\n              }\n            }\n          }\n          for (const name of attrsToRemove) {\n            (node as Element).removeAttribute(name);\n          }\n        }\n        // TODO (justinfagnani): benchmark the regex against testing for each\n        // of the 3 raw text element names.\n        if (rawTextElement.test((node as Element).tagName)) {\n          // For raw text elements we need to split the text content on\n          // markers, create a Text node for each segment, and create\n          // a TemplatePart for each marker.\n          const strings = (node as Element).textContent!.split(marker);\n          const lastIndex = strings.length - 1;\n          if (lastIndex > 0) {\n            (node as Element).textContent = trustedTypes\n              ? (trustedTypes.emptyScript as unknown as '')\n              : '';\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            // We can't use empty text nodes as markers because they're\n            // normalized when cloning in IE (could simplify when\n            // IE is no longer supported)\n            for (let i = 0; i < lastIndex; i++) {\n              (node as Element).append(strings[i], createMarker());\n              // Walk past the marker node we just added\n              walker.nextNode();\n              parts.push({type: CHILD_PART, index: ++nodeIndex});\n            }\n            // Note because this marker is added after the walker's current\n            // node, it will be walked to in the outer loop (and ignored), so\n            // we don't need to adjust nodeIndex here\n            (node as Element).append(strings[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = (node as Comment).data;\n        if (data === markerMatch) {\n          parts.push({type: CHILD_PART, index: nodeIndex});\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            parts.push({type: COMMENT_PART, index: nodeIndex});\n            // Move to the end of the match\n            i += marker.length - 1;\n          }\n        }\n      }\n      nodeIndex++;\n    }\n    // We could set walker.currentNode to another node here to prevent a memory\n    // leak, but every time we prepare a template, we immediately render it\n    // and re-use the walker in new TemplateInstance._clone().\n    debugLogEvent?.({\n      kind: 'template prep',\n      template: this,\n      clonableTemplate: this.el,\n      parts: this.parts,\n      strings,\n    });\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @nocollapse */\n  static createElement(html: TrustedHTML, _options?: RenderOptions) {\n    const el = d.createElement('template');\n    el.innerHTML = html as unknown as string;\n    return el;\n  }\n}\n\nexport interface Disconnectable {\n  _$parent?: Disconnectable;\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // Rather than hold connection state on instances, Disconnectables recursively\n  // fetch the connection state from the RootPart they are connected in via\n  // getters up the Disconnectable tree via _$parent references. This pushes the\n  // cost of tracking the isConnected state to `AsyncDirectives`, and avoids\n  // needing to pass all Disconnectables (parts, template instances, and\n  // directives) their connection state each time it changes, which would be\n  // costly for trees that have no AsyncDirectives.\n  _$isConnected: boolean;\n}\n\nfunction resolveDirective(\n  part: ChildPart | AttributePart | ElementPart,\n  value: unknown,\n  parent: DirectiveParent = part,\n  attributeIndex?: number\n): unknown {\n  // Bail early if the value is explicitly noChange. Note, this means any\n  // nested directive is still attached and is not run.\n  if (value === noChange) {\n    return value;\n  }\n  let currentDirective =\n    attributeIndex !== undefined\n      ? (parent as AttributePart).__directives?.[attributeIndex]\n      : (parent as ChildPart | ElementPart | Directive).__directive;\n  const nextDirectiveConstructor = isPrimitive(value)\n    ? undefined\n    : // This property needs to remain unminified.\n      (value as DirectiveResult)['_$litDirective$'];\n  if (currentDirective?.constructor !== nextDirectiveConstructor) {\n    // This property needs to remain unminified.\n    currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part as PartInfo);\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n    if (attributeIndex !== undefined) {\n      ((parent as AttributePart).__directives ??= [])[attributeIndex] =\n        currentDirective;\n    } else {\n      (parent as ChildPart | Directive).__directive = currentDirective;\n    }\n  }\n  if (currentDirective !== undefined) {\n    value = resolveDirective(\n      part,\n      currentDirective._$resolve(part, (value as DirectiveResult).values),\n      currentDirective,\n      attributeIndex\n    );\n  }\n  return value;\n}\n\nexport type {TemplateInstance};\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance implements Disconnectable {\n  _$template: Template;\n  _$parts: Array<Part | undefined> = [];\n\n  /** @internal */\n  _$parent: ChildPart;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  constructor(template: Template, parent: ChildPart) {\n    this._$template = template;\n    this._$parent = parent;\n  }\n\n  // Called by ChildPart parentNode getter\n  get parentNode() {\n    return this._$parent.parentNode;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  // This method is separate from the constructor because we need to return a\n  // DocumentFragment and we don't want to hold onto it with an instance field.\n  _clone(options: RenderOptions | undefined) {\n    const {\n      el: {content},\n      parts: parts,\n    } = this._$template;\n    const fragment = (options?.creationScope ?? d).importNode(content, true);\n    walker.currentNode = fragment;\n\n    let node = walker.nextNode()!;\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part: Part | undefined;\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(\n            node as HTMLElement,\n            node.nextSibling,\n            this,\n            options\n          );\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(\n            node as HTMLElement,\n            templatePart.name,\n            templatePart.strings,\n            this,\n            options\n          );\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node as HTMLElement, this, options);\n        }\n        this._$parts.push(part);\n        templatePart = parts[++partIndex];\n      }\n      if (nodeIndex !== templatePart?.index) {\n        node = walker.nextNode()!;\n        nodeIndex++;\n      }\n    }\n    // We need to set the currentNode away from the cloned tree so that we\n    // don't hold onto the tree even if the tree is detached and should be\n    // freed.\n    walker.currentNode = d;\n    return fragment;\n  }\n\n  _update(values: Array<unknown>) {\n    let i = 0;\n    for (const part of this._$parts) {\n      if (part !== undefined) {\n        debugLogEvent?.({\n          kind: 'set part',\n          part,\n          value: values[i],\n          valueIndex: i,\n          values,\n          templateInstance: this,\n        });\n        if ((part as AttributePart).strings !== undefined) {\n          (part as AttributePart)._$setValue(values, part as AttributePart, i);\n          // The number of values the part consumes is part.strings.length - 1\n          // since values are in between template spans. We increment i by 1\n          // later in the loop, so increment it by part.strings.length - 2 here\n          i += (part as AttributePart).strings!.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n      i++;\n    }\n  }\n}\n\n/*\n * Parts\n */\ntype AttributeTemplatePart = {\n  readonly type: typeof ATTRIBUTE_PART;\n  readonly index: number;\n  readonly name: string;\n  readonly ctor: typeof AttributePart;\n  readonly strings: ReadonlyArray<string>;\n};\ntype ChildTemplatePart = {\n  readonly type: typeof CHILD_PART;\n  readonly index: number;\n};\ntype ElementTemplatePart = {\n  readonly type: typeof ELEMENT_PART;\n  readonly index: number;\n};\ntype CommentTemplatePart = {\n  readonly type: typeof COMMENT_PART;\n  readonly index: number;\n};\n\n/**\n * A TemplatePart represents a dynamic part in a template, before the template\n * is instantiated. When a template is instantiated Parts are created from\n * TemplateParts.\n */\ntype TemplatePart =\n  | ChildTemplatePart\n  | AttributeTemplatePart\n  | ElementTemplatePart\n  | CommentTemplatePart;\n\nexport type Part =\n  | ChildPart\n  | AttributePart\n  | PropertyPart\n  | BooleanAttributePart\n  | ElementPart\n  | EventPart;\n\nexport type {ChildPart};\nclass ChildPart implements Disconnectable {\n  readonly type = CHILD_PART;\n  readonly options: RenderOptions | undefined;\n  _$committedValue: unknown = nothing;\n  /** @internal */\n  __directive?: Directive;\n  /** @internal */\n  _$startNode: ChildNode;\n  /** @internal */\n  _$endNode: ChildNode | null;\n  private _textSanitizer: ValueSanitizer | undefined;\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n  /**\n   * Connection state for RootParts only (i.e. ChildPart without _$parent\n   * returned from top-level `render`). This field is unsed otherwise. The\n   * intention would clearer if we made `RootPart` a subclass of `ChildPart`\n   * with this field (and a different _$isConnected getter), but the subclass\n   * caused a perf regression, possibly due to making call sites polymorphic.\n   * @internal\n   */\n  __isConnected: boolean;\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    // ChildParts that are not at the root should always be created with a\n    // parent; only RootChildNode's won't, so they return the local isConnected\n    // state\n    return this._$parent?._$isConnected ?? this.__isConnected;\n  }\n\n  // The following fields will be patched onto ChildParts when required by\n  // AsyncDirective\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /** @internal */\n  _$notifyConnectionChanged?(\n    isConnected: boolean,\n    removeFromParent?: boolean,\n    from?: number\n  ): void;\n  /** @internal */\n  _$reparentDisconnectables?(parent: Disconnectable): void;\n\n  constructor(\n    startNode: ChildNode,\n    endNode: ChildNode | null,\n    parent: TemplateInstance | ChildPart | undefined,\n    options: RenderOptions | undefined\n  ) {\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options;\n    // Note __isConnected is only ever accessed on RootParts (i.e. when there is\n    // no _$parent); the value on a non-root-part is \"don't care\", but checking\n    // for parent would be more code\n    this.__isConnected = options?.isConnected ?? true;\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      // Explicitly initialize for consistent class shape.\n      this._textSanitizer = undefined;\n    }\n  }\n\n  /**\n   * The parent node into which the part renders its content.\n   *\n   * A ChildPart's content consists of a range of adjacent child nodes of\n   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n   * `.endNode`).\n   *\n   * - If both `.startNode` and `.endNode` are non-null, then the part's content\n   * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n   *\n   * - If `.startNode` is non-null but `.endNode` is null, then the part's\n   * content consists of all siblings following `.startNode`, up to and\n   * including the last child of `.parentNode`. If `.endNode` is non-null, then\n   * `.startNode` will always be non-null.\n   *\n   * - If both `.endNode` and `.startNode` are null, then the part's content\n   * consists of all child nodes of `.parentNode`.\n   */\n  get parentNode(): Node {\n    let parentNode: Node = wrap(this._$startNode).parentNode!;\n    const parent = this._$parent;\n    if (\n      parent !== undefined &&\n      parentNode?.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */\n    ) {\n      // If the parentNode is a DocumentFragment, it may be because the DOM is\n      // still in the cloned fragment during initial render; if so, get the real\n      // parentNode the part will be committed into by asking the parent.\n      parentNode = (parent as ChildPart | TemplateInstance).parentNode;\n    }\n    return parentNode;\n  }\n\n  /**\n   * The part's leading marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get startNode(): Node | null {\n    return this._$startNode;\n  }\n\n  /**\n   * The part's trailing marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get endNode(): Node | null {\n    return this._$endNode;\n  }\n\n  _$setValue(value: unknown, directiveParent: DirectiveParent = this): void {\n    if (DEV_MODE && this.parentNode === null) {\n      throw new Error(\n        `This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`\n      );\n    }\n    value = resolveDirective(this, value, directiveParent);\n    if (isPrimitive(value)) {\n      // Non-rendering child values. It's important that these do not render\n      // empty text nodes to avoid issues with preventing default <slot>\n      // fallback content.\n      if (value === nothing || value == null || value === '') {\n        if (this._$committedValue !== nothing) {\n          debugLogEvent?.({\n            kind: 'commit nothing to child',\n            start: this._$startNode,\n            end: this._$endNode,\n            parent: this._$parent,\n            options: this.options,\n          });\n          this._$clear();\n        }\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      }\n      // This property needs to remain unminified.\n    } else if ((value as TemplateResult)['_$litType$'] !== undefined) {\n      this._commitTemplateResult(value as TemplateResult);\n    } else if ((value as Node).nodeType !== undefined) {\n      if (DEV_MODE && this.options?.host === value) {\n        this._commitText(\n          `[probable mistake: rendered a template's host in itself ` +\n            `(commonly caused by writing \\${this} in a template]`\n        );\n        console.warn(\n          `Attempted to render the template host`,\n          value,\n          `inside itself. This is almost always a mistake, and in dev mode `,\n          `we render some warning text. In production however, we'll `,\n          `render it, which will usually result in an error, and sometimes `,\n          `in the element disappearing from the DOM.`\n        );\n        return;\n      }\n      this._commitNode(value as Node);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert<T extends Node>(node: T) {\n    return wrap(wrap(this._$startNode).parentNode!).insertBefore(\n      node,\n      this._$endNode\n    );\n  }\n\n  private _commitNode(value: Node): void {\n    if (this._$committedValue !== value) {\n      this._$clear();\n      if (\n        ENABLE_EXTRA_SECURITY_HOOKS &&\n        sanitizerFactoryInternal !== noopSanitizer\n      ) {\n        const parentNodeName = this._$startNode.parentNode?.nodeName;\n        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n          let message = 'Forbidden';\n          if (DEV_MODE) {\n            if (parentNodeName === 'STYLE') {\n              message =\n                `Lit does not support binding inside style nodes. ` +\n                `This is a security risk, as style injection attacks can ` +\n                `exfiltrate data and spoof UIs. ` +\n                `Consider instead using css\\`...\\` literals ` +\n                `to compose styles, and make do dynamic styling with ` +\n                `css custom properties, ::parts, <slot>s, ` +\n                `and by mutating the DOM rather than stylesheets.`;\n            } else {\n              message =\n                `Lit does not support binding inside script nodes. ` +\n                `This is a security risk, as it could allow arbitrary ` +\n                `code execution.`;\n            }\n          }\n          throw new Error(message);\n        }\n      }\n      debugLogEvent?.({\n        kind: 'commit node',\n        start: this._$startNode,\n        parent: this._$parent,\n        value: value,\n        options: this.options,\n      });\n      this._$committedValue = this._insert(value);\n    }\n  }\n\n  private _commitText(value: unknown): void {\n    // If the committed value is a primitive it means we called _commitText on\n    // the previous render, and we know that this._$startNode.nextSibling is a\n    // Text node. We can now just replace the text content (.data) of the node.\n    if (\n      this._$committedValue !== nothing &&\n      isPrimitive(this._$committedValue)\n    ) {\n      const node = wrap(this._$startNode).nextSibling as Text;\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n      }\n      debugLogEvent?.({\n        kind: 'commit text',\n        node,\n        value,\n        options: this.options,\n      });\n      (node as Text).data = value as string;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = d.createTextNode('');\n        this._commitNode(textNode);\n        // When setting text content, for security purposes it matters a lot\n        // what the parent is. For example, <style> and <script> need to be\n        // handled with care, while <span> does not. So first we need to put a\n        // text node into the document, then we can sanitize its content.\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n        debugLogEvent?.({\n          kind: 'commit text',\n          node: textNode,\n          value,\n          options: this.options,\n        });\n        textNode.data = value as string;\n      } else {\n        this._commitNode(d.createTextNode(value as string));\n        debugLogEvent?.({\n          kind: 'commit text',\n          node: wrap(this._$startNode).nextSibling as Text,\n          value,\n          options: this.options,\n        });\n      }\n    }\n    this._$committedValue = value;\n  }\n\n  private _commitTemplateResult(\n    result: TemplateResult | CompiledTemplateResult\n  ): void {\n    // This property needs to remain unminified.\n    const {values, ['_$litType$']: type} = result;\n    // If $litType$ is a number, result is a plain TemplateResult and we get\n    // the template from the template cache. If not, result is a\n    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n    // to create the <template> element the first time we see it.\n    const template: Template | CompiledTemplate =\n      typeof type === 'number'\n        ? this._$getTemplate(result as TemplateResult)\n        : (type.el === undefined &&\n            (type.el = Template.createElement(\n              trustFromTemplateString(type.h, type.h[0]),\n              this.options\n            )),\n          type);\n\n    if ((this._$committedValue as TemplateInstance)?._$template === template) {\n      debugLogEvent?.({\n        kind: 'template updating',\n        template,\n        instance: this._$committedValue as TemplateInstance,\n        parts: (this._$committedValue as TemplateInstance)._$parts,\n        options: this.options,\n        values,\n      });\n      (this._$committedValue as TemplateInstance)._update(values);\n    } else {\n      const instance = new TemplateInstance(template as Template, this);\n      const fragment = instance._clone(this.options);\n      debugLogEvent?.({\n        kind: 'template instantiated',\n        template,\n        instance,\n        parts: instance._$parts,\n        options: this.options,\n        fragment,\n        values,\n      });\n      instance._update(values);\n      debugLogEvent?.({\n        kind: 'template instantiated and updated',\n        template,\n        instance,\n        parts: instance._$parts,\n        options: this.options,\n        fragment,\n        values,\n      });\n      this._commitNode(fragment);\n      this._$committedValue = instance;\n    }\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @internal */\n  _$getTemplate(result: TemplateResult) {\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n      templateCache.set(result.strings, (template = new Template(result)));\n    }\n    return template;\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If value is an array, then the previous render was of an\n    // iterable and value will contain the ChildParts from the previous\n    // render. If value is not an array, clear this part and make a new\n    // array for ChildParts.\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n      this._$clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this._$committedValue as ChildPart[];\n    let partIndex = 0;\n    let itemPart: ChildPart | undefined;\n\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        // If no existing part, create a new one\n        // TODO (justinfagnani): test perf impact of always creating two parts\n        // instead of sharing parts between nodes\n        // https://github.com/lit/lit/issues/1266\n        itemParts.push(\n          (itemPart = new ChildPart(\n            this._insert(createMarker()),\n            this._insert(createMarker()),\n            this,\n            this.options\n          ))\n        );\n      } else {\n        // Reuse an existing part\n        itemPart = itemParts[partIndex];\n      }\n      itemPart._$setValue(item);\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // itemParts always have end nodes\n      this._$clear(\n        itemPart && wrap(itemPart._$endNode!).nextSibling,\n        partIndex\n      );\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n    }\n  }\n\n  /**\n   * Removes the nodes contained within this Part from the DOM.\n   *\n   * @param start Start node to clear from, for clearing a subset of the part's\n   *     DOM (used when truncating iterables)\n   * @param from  When `start` is specified, the index within the iterable from\n   *     which ChildParts are being removed, used for disconnecting directives in\n   *     those Parts.\n   *\n   * @internal\n   */\n  _$clear(\n    start: ChildNode | null = wrap(this._$startNode).nextSibling,\n    from?: number\n  ) {\n    this._$notifyConnectionChanged?.(false, true, from);\n    while (start && start !== this._$endNode) {\n      const n = wrap(start!).nextSibling;\n      (wrap(start!) as Element).remove();\n      start = n;\n    }\n  }\n  /**\n   * Implementation of RootPart's `isConnected`. Note that this metod\n   * should only be called on `RootPart`s (the `ChildPart` returned from a\n   * top-level `render()` call). It has no effect on non-root ChildParts.\n   * @param isConnected Whether to set\n   * @internal\n   */\n  setConnected(isConnected: boolean) {\n    if (this._$parent === undefined) {\n      this.__isConnected = isConnected;\n      this._$notifyConnectionChanged?.(isConnected);\n    } else if (DEV_MODE) {\n      throw new Error(\n        'part.setConnected() may only be called on a ' +\n          'RootPart returned from render().'\n      );\n    }\n  }\n}\n\n/**\n * A top-level `ChildPart` returned from `render` that manages the connected\n * state of `AsyncDirective`s created throughout the tree below it.\n */\nexport interface RootPart extends ChildPart {\n  /**\n   * Sets the connection state for `AsyncDirective`s contained within this root\n   * ChildPart.\n   *\n   * lit-html does not automatically monitor the connectedness of DOM rendered;\n   * as such, it is the responsibility of the caller to `render` to ensure that\n   * `part.setConnected(false)` is called before the part object is potentially\n   * discarded, to ensure that `AsyncDirective`s have a chance to dispose of\n   * any resources being held. If a `RootPart` that was previously\n   * disconnected is subsequently re-connected (and its `AsyncDirective`s should\n   * re-connect), `setConnected(true)` should be called.\n   *\n   * @param isConnected Whether directives within this tree should be connected\n   * or not\n   */\n  setConnected(isConnected: boolean): void;\n}\n\nexport type {AttributePart};\nclass AttributePart implements Disconnectable {\n  readonly type = ATTRIBUTE_PART as\n    | typeof ATTRIBUTE_PART\n    | typeof PROPERTY_PART\n    | typeof BOOLEAN_ATTRIBUTE_PART\n    | typeof EVENT_PART;\n  readonly element: HTMLElement;\n  readonly name: string;\n  readonly options: RenderOptions | undefined;\n\n  /**\n   * If this attribute part represents an interpolation, this contains the\n   * static strings of the interpolation. For single-value, complete bindings,\n   * this is undefined.\n   */\n  readonly strings?: ReadonlyArray<string>;\n  /** @internal */\n  _$committedValue: unknown | Array<unknown> = nothing;\n  /** @internal */\n  __directives?: Array<Directive | undefined>;\n  /** @internal */\n  _$parent: Disconnectable;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  protected _sanitizer: ValueSanitizer | undefined;\n\n  get tagName() {\n    return this.element.tagName;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n      this._$committedValue = new Array(strings.length - 1).fill(new String());\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n\n  /**\n   * Sets the value of this part by resolving the value from possibly multiple\n   * values and static strings and committing it to the DOM.\n   * If this part is single-valued, `this._strings` will be undefined, and the\n   * method will be called with a single value argument. If this part is\n   * multi-value, `this._strings` will be defined, and the method is called\n   * with the value array of the part's owning TemplateInstance, and an offset\n   * into the value array from which the values should be read.\n   * This method is overloaded this way to eliminate short-lived array slices\n   * of the template instance values, and allow a fast-path for single-valued\n   * parts.\n   *\n   * @param value The part value, or an array of values for multi-valued parts\n   * @param valueIndex the index to start reading values from. `undefined` for\n   *   single-valued parts\n   * @param noCommit causes the part to not commit its value to the DOM. Used\n   *   in hydration to prime attribute parts with their first-rendered value,\n   *   but not set the attribute, and in SSR to no-op the DOM operation and\n   *   capture the value for serialization.\n   *\n   * @internal\n   */\n  _$setValue(\n    value: unknown | Array<unknown>,\n    directiveParent: DirectiveParent = this,\n    valueIndex?: number,\n    noCommit?: boolean\n  ) {\n    const strings = this.strings;\n\n    // Whether any of the values has changed, for dirty-checking\n    let change = false;\n\n    if (strings === undefined) {\n      // Single-value binding case\n      value = resolveDirective(this, value, directiveParent, 0);\n      change =\n        !isPrimitive(value) ||\n        (value !== this._$committedValue && value !== noChange);\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      // Interpolation case\n      const values = value as Array<unknown>;\n      value = strings[0];\n\n      let i, v;\n      for (i = 0; i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex! + i], directiveParent, i);\n\n        if (v === noChange) {\n          // If the user-provided value is `noChange`, use the previous value\n          v = (this._$committedValue as Array<unknown>)[i];\n        }\n        change ||=\n          !isPrimitive(v) || v !== (this._$committedValue as Array<unknown>)[i];\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v ?? '') + strings[i + 1];\n        }\n        // We always record each value, even if one is `nothing`, for future\n        // change detection.\n        (this._$committedValue as Array<unknown>)[i] = v;\n      }\n    }\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (value === nothing) {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(\n            this.element,\n            this.name,\n            'attribute'\n          );\n        }\n        value = this._sanitizer(value ?? '');\n      }\n      debugLogEvent?.({\n        kind: 'commit attribute',\n        element: this.element,\n        name: this.name,\n        value,\n        options: this.options,\n      });\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        (value ?? '') as string\n      );\n    }\n  }\n}\n\nexport type {PropertyPart};\nclass PropertyPart extends AttributePart {\n  override readonly type = PROPERTY_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(\n          this.element,\n          this.name,\n          'property'\n        );\n      }\n      value = this._sanitizer(value);\n    }\n    debugLogEvent?.({\n      kind: 'commit property',\n      element: this.element,\n      name: this.name,\n      value,\n      options: this.options,\n    });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.element as any)[this.name] = value === nothing ? undefined : value;\n  }\n}\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nexport type {BooleanAttributePart};\nclass BooleanAttributePart extends AttributePart {\n  override readonly type = BOOLEAN_ATTRIBUTE_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    debugLogEvent?.({\n      kind: 'commit boolean attribute',\n      element: this.element,\n      name: this.name,\n      value: !!(value && value !== nothing),\n      options: this.options,\n    });\n    if (value && value !== nothing) {\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        emptyStringForBooleanAttribute\n      );\n    } else {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    }\n  }\n}\n\ntype EventListenerWithOptions = EventListenerOrEventListenerObject &\n  Partial<AddEventListenerOptions>;\n\n/**\n * An AttributePart that manages an event listener via add/removeEventListener.\n *\n * This part works by adding itself as the event listener on an element, then\n * delegating to the value passed to it. This reduces the number of calls to\n * add/removeEventListener if the listener changes frequently, such as when an\n * inline function is used as a listener.\n *\n * Because event options are passed when adding listeners, we must take case\n * to add and remove the part as a listener when the event options change.\n */\nexport type {EventPart};\nclass EventPart extends AttributePart {\n  override readonly type = EVENT_PART;\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    super(element, name, strings, parent, options);\n\n    if (DEV_MODE && this.strings !== undefined) {\n      throw new Error(\n        `A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` +\n          'invalid content. Event listeners in templates must have exactly ' +\n          'one expression and no surrounding text.'\n      );\n    }\n  }\n\n  // EventPart does not use the base _$setValue/_resolveValue implementation\n  // since the dirty checking is more complex\n  /** @internal */\n  override _$setValue(\n    newListener: unknown,\n    directiveParent: DirectiveParent = this\n  ) {\n    newListener =\n      resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n    if (newListener === noChange) {\n      return;\n    }\n    const oldListener = this._$committedValue;\n\n    // If the new value is nothing or any options change we have to remove the\n    // part as a listener.\n    const shouldRemoveListener =\n      (newListener === nothing && oldListener !== nothing) ||\n      (newListener as EventListenerWithOptions).capture !==\n        (oldListener as EventListenerWithOptions).capture ||\n      (newListener as EventListenerWithOptions).once !==\n        (oldListener as EventListenerWithOptions).once ||\n      (newListener as EventListenerWithOptions).passive !==\n        (oldListener as EventListenerWithOptions).passive;\n\n    // If the new value is not nothing and we removed the listener, we have\n    // to add the part as a listener.\n    const shouldAddListener =\n      newListener !== nothing &&\n      (oldListener === nothing || shouldRemoveListener);\n\n    debugLogEvent?.({\n      kind: 'commit event listener',\n      element: this.element,\n      name: this.name,\n      value: newListener,\n      options: this.options,\n      removeListener: shouldRemoveListener,\n      addListener: shouldAddListener,\n      oldListener,\n    });\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n        this.name,\n        this,\n        oldListener as EventListenerWithOptions\n      );\n    }\n    if (shouldAddListener) {\n      // Beware: IE11 and Chrome 41 don't like using the listener as the\n      // options object. Figure out how to deal w/ this in IE11 - maybe\n      // patch addEventListener?\n      this.element.addEventListener(\n        this.name,\n        this,\n        newListener as EventListenerWithOptions\n      );\n    }\n    this._$committedValue = newListener;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this._$committedValue === 'function') {\n      this._$committedValue.call(this.options?.host ?? this.element, event);\n    } else {\n      (this._$committedValue as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\nexport type {ElementPart};\nclass ElementPart implements Disconnectable {\n  readonly type = ELEMENT_PART;\n\n  /** @internal */\n  __directive?: Directive;\n\n  // This is to ensure that every Part has a _$committedValue\n  _$committedValue: undefined;\n\n  /** @internal */\n  _$parent!: Disconnectable;\n\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  options: RenderOptions | undefined;\n\n  constructor(\n    public element: Element,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this._$parent = parent;\n    this.options = options;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  _$setValue(value: unknown): void {\n    debugLogEvent?.({\n      kind: 'commit to element binding',\n      element: this.element,\n      value,\n      options: this.options,\n    });\n    resolveDirective(this, value);\n  }\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LH = {\n  // Used in lit-ssr\n  _boundAttributeSuffix: boundAttributeSuffix,\n  _marker: marker,\n  _markerMatch: markerMatch,\n  _HTML_RESULT: HTML_RESULT,\n  _getTemplateHtml: getTemplateHtml,\n  // Used in tests and private-ssr-support\n  _TemplateInstance: TemplateInstance,\n  _isIterable: isIterable,\n  _resolveDirective: resolveDirective,\n  _ChildPart: ChildPart,\n  _AttributePart: AttributePart,\n  _BooleanAttributePart: BooleanAttributePart,\n  _EventPart: EventPart,\n  _PropertyPart: PropertyPart,\n  _ElementPart: ElementPart,\n};\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? global.litHtmlPolyfillSupportDevMode\n  : global.litHtmlPolyfillSupport;\npolyfillSupport?.(Template, ChildPart);\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n(global.litHtmlVersions ??= []).push('2.8.0');\nif (DEV_MODE && global.litHtmlVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. ` +\n      `Loading multiple versions is not recommended.`\n  );\n}\n\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n *\n * This example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\n * it to the container `document.body`.\n *\n * ```js\n * import {html, render} from 'lit';\n *\n * const name = \"Zoe\";\n * render(html`<p>Hello, ${name}!</p>`, document.body);\n * ```\n *\n * @param value Any [renderable\n *   value](https://lit.dev/docs/templates/expressions/#child-expressions),\n *   typically a {@linkcode TemplateResult} created by evaluating a template tag\n *   like {@linkcode html} or {@linkcode svg}.\n * @param container A DOM container to render to. The first render will append\n *   the rendered value to the container, and subsequent renders will\n *   efficiently update the rendered value if the same result type was\n *   previously rendered there.\n * @param options See {@linkcode RenderOptions} for options documentation.\n * @see\n * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}\n */\nexport const render = (\n  value: unknown,\n  container: HTMLElement | DocumentFragment,\n  options?: RenderOptions\n): RootPart => {\n  if (DEV_MODE && container == null) {\n    // Give a clearer error message than\n    //     Uncaught TypeError: Cannot read properties of null (reading\n    //     '_$litPart$')\n    // which reads like an internal Lit error.\n    throw new TypeError(`The container to render into may not be ${container}`);\n  }\n  const renderId = DEV_MODE ? debugLogRenderId++ : 0;\n  const partOwnerNode = options?.renderBefore ?? container;\n  // This property needs to remain unminified.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let part: ChildPart = (partOwnerNode as any)['_$litPart$'];\n  debugLogEvent?.({\n    kind: 'begin render',\n    id: renderId,\n    value,\n    container,\n    options,\n    part,\n  });\n  if (part === undefined) {\n    const endNode = options?.renderBefore ?? null;\n    // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (partOwnerNode as any)['_$litPart$'] = part = new ChildPart(\n      container.insertBefore(createMarker(), endNode),\n      endNode,\n      undefined,\n      options ?? {}\n    );\n  }\n  part._$setValue(value);\n  debugLogEvent?.({\n    kind: 'end render',\n    id: renderId,\n    value,\n    container,\n    options,\n    part,\n  });\n  return part as RootPart;\n};\n\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n  if (DEV_MODE) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse =\n      _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * The main LitElement module, which defines the {@linkcode LitElement} base\n * class and related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import {@linkcode LitElement} and {@linkcode html} from this module to\n * create a component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html\n * templating. The `ReactiveElement` class is provided for users that want to\n * build their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport {PropertyValues, ReactiveElement} from '@lit/reactive-element';\nimport {render, RenderOptions, noChange, RootPart} from 'lit-html';\nexport * from '@lit/reactive-element';\nexport * from 'lit-html';\n\nimport {LitUnstable} from 'lit-html';\nimport {ReactiveUnstable} from '@lit/reactive-element';\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Unstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | LitUnstable.DebugLog.Entry\n      | ReactiveUnstable.DebugLog.Entry;\n  }\n}\n\n// For backwards compatibility export ReactiveElement as UpdatingElement. Note,\n// IE transpilation requires exporting like this.\nexport const UpdatingElement = ReactiveElement;\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the {@linkcode LitElement.properties properties} property or the\n * {@linkcode property} decorator.\n */\nexport class LitElement extends ReactiveElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   *\n   * Note this property name is a string to prevent breaking Closure JS Compiler\n   * optimizations. See @lit/reactive-element for more information.\n   */\n  protected static override ['finalized'] = true;\n\n  // This property needs to remain unminified.\n  static ['_$litElement$'] = true;\n\n  /**\n   * @category rendering\n   */\n  readonly renderOptions: RenderOptions = {host: this};\n\n  private __childPart: RootPart | undefined = undefined;\n\n  /**\n   * @category rendering\n   */\n  protected override createRenderRoot() {\n    const renderRoot = super.createRenderRoot();\n    // When adoptedStyleSheets are shimmed, they are inserted into the\n    // shadowRoot by createRenderRoot. Adjust the renderBefore node so that\n    // any styles in Lit content render before adoptedStyleSheets. This is\n    // important so that adoptedStyleSheets have precedence over styles in\n    // the shadowRoot.\n    this.renderOptions.renderBefore ??= renderRoot!.firstChild as ChildNode;\n    return renderRoot;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected override update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const value = this.render();\n    if (!this.hasUpdated) {\n      this.renderOptions.isConnected = this.isConnected;\n    }\n    super.update(changedProperties);\n    this.__childPart = render(value, this.renderRoot, this.renderOptions);\n  }\n\n  /**\n   * Invoked when the component is added to the document's DOM.\n   *\n   * In `connectedCallback()` you should setup tasks that should only occur when\n   * the element is connected to the document. The most common of these is\n   * adding event listeners to nodes external to the element, like a keydown\n   * event handler added to the window.\n   *\n   * ```ts\n   * connectedCallback() {\n   *   super.connectedCallback();\n   *   addEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * Typically, anything done in `connectedCallback()` should be undone when the\n   * element is disconnected, in `disconnectedCallback()`.\n   *\n   * @category lifecycle\n   */\n  override connectedCallback() {\n    super.connectedCallback();\n    this.__childPart?.setConnected(true);\n  }\n\n  /**\n   * Invoked when the component is removed from the document's DOM.\n   *\n   * This callback is the main signal to the element that it may no longer be\n   * used. `disconnectedCallback()` should ensure that nothing is holding a\n   * reference to the element (such as event listeners added to nodes external\n   * to the element), so that it is free to be garbage collected.\n   *\n   * ```ts\n   * disconnectedCallback() {\n   *   super.disconnectedCallback();\n   *   window.removeEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * An element may be re-connected after being disconnected.\n   *\n   * @category lifecycle\n   */\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__childPart?.setConnected(false);\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `ChildPart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   * @category rendering\n   */\n  protected render(): unknown {\n    return noChange;\n  }\n}\n\n// Install hydration if available\nglobalThis.litElementHydrateSupport?.({LitElement});\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? globalThis.litElementPolyfillSupportDevMode\n  : globalThis.litElementPolyfillSupport;\npolyfillSupport?.({LitElement});\n\n// DEV mode warnings\nif (DEV_MODE) {\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  // Note, for compatibility with closure compilation, this access\n  // needs to be as a string property index.\n  (LitElement as any)['finalize'] = function (this: typeof LitElement) {\n    const finalized = (ReactiveElement as any).finalize.call(this);\n    if (!finalized) {\n      return false;\n    }\n    const warnRemovedOrRenamed = (obj: any, name: string, renamed = false) => {\n      if (obj.hasOwnProperty(name)) {\n        const ctorName = (typeof obj === 'function' ? obj : obj.constructor)\n          .name;\n        issueWarning(\n          renamed ? 'renamed-api' : 'removed-api',\n          `\\`${name}\\` is implemented on class ${ctorName}. It ` +\n            `has been ${renamed ? 'renamed' : 'removed'} ` +\n            `in this version of LitElement.`\n        );\n      }\n    };\n    warnRemovedOrRenamed(this, 'render');\n    warnRemovedOrRenamed(this, 'getStyles', true);\n    warnRemovedOrRenamed((this as typeof LitElement).prototype, 'adoptStyles');\n    return true;\n  };\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LE object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-html, since this module re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LE = {\n  _$attributeToProperty: (\n    el: LitElement,\n    name: string,\n    value: string | null\n  ) => {\n    // eslint-disable-next-line\n    (el as any)._$attributeToProperty(name, value);\n  },\n  // eslint-disable-next-line\n  _$changedProperties: (el: LitElement) => (el as any)._$changedProperties,\n};\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n(globalThis.litElementVersions ??= []).push('3.3.3');\nif (DEV_MODE && globalThis.litElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport {Constructor, ClassDescriptor} from './base.js';\n\n/**\n * Allow for custom element classes with private constructors\n */\ntype CustomElementClass = Omit<typeof HTMLElement, 'new'>;\n\nconst legacyCustomElement = (tagName: string, clazz: CustomElementClass) => {\n  customElements.define(tagName, clazz as CustomElementConstructor);\n  // Cast as any because TS doesn't recognize the return type as being a\n  // subtype of the decorated class when clazz is typed as\n  // `Constructor<HTMLElement>` for some reason.\n  // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n  // applied to elements however.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return clazz as any;\n};\n\nconst standardCustomElement = (\n  tagName: string,\n  descriptor: ClassDescriptor\n) => {\n  const {kind, elements} = descriptor;\n  return {\n    kind,\n    elements,\n    // This callback is called once the class is otherwise fully defined\n    finisher(clazz: Constructor<HTMLElement>) {\n      customElements.define(tagName, clazz);\n    },\n  };\n};\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```js\n * @customElement('my-element')\n * class MyElement extends LitElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The tag name of the custom element to define.\n */\nexport const customElement =\n  (tagName: string) =>\n  (classOrDescriptor: CustomElementClass | ClassDescriptor) =>\n    typeof classOrDescriptor === 'function'\n      ? legacyCustomElement(tagName, classOrDescriptor)\n      : standardCustomElement(tagName, classOrDescriptor as ClassDescriptor);\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport {PropertyDeclaration, ReactiveElement} from '../reactive-element.js';\nimport {ClassElement} from './base.js';\n\nconst standardProperty = (\n  options: PropertyDeclaration,\n  element: ClassElement\n) => {\n  // When decorating an accessor, pass it through and add property metadata.\n  // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n  // stomp over the user's accessor.\n  if (\n    element.kind === 'method' &&\n    element.descriptor &&\n    !('value' in element.descriptor)\n  ) {\n    return {\n      ...element,\n      finisher(clazz: typeof ReactiveElement) {\n        clazz.createProperty(element.key, options);\n      },\n    };\n  } else {\n    // createProperty() takes care of defining the property, but we still\n    // must return some kind of descriptor, so return a descriptor for an\n    // unused prototype field. The finisher calls createProperty().\n    return {\n      kind: 'field',\n      key: Symbol(),\n      placement: 'own',\n      descriptor: {},\n      // store the original key so subsequent decorators have access to it.\n      originalKey: element.key,\n      // When @babel/plugin-proposal-decorators implements initializers,\n      // do this instead of the initializer below. See:\n      // https://github.com/babel/babel/issues/9260 extras: [\n      //   {\n      //     kind: 'initializer',\n      //     placement: 'own',\n      //     initializer: descriptor.initializer,\n      //   }\n      // ],\n      initializer(this: {[key: string]: unknown}) {\n        if (typeof element.initializer === 'function') {\n          this[element.key as string] = element.initializer.call(this);\n        }\n      },\n      finisher(clazz: typeof ReactiveElement) {\n        clazz.createProperty(element.key, options);\n      },\n    };\n  }\n};\n\nconst legacyProperty = (\n  options: PropertyDeclaration,\n  proto: Object,\n  name: PropertyKey\n) => {\n  (proto.constructor as typeof ReactiveElement).createProperty(name, options);\n};\n\n/**\n * A property decorator which creates a reactive property that reflects a\n * corresponding attribute value. When a decorated property is set\n * the element will update and render. A {@linkcode PropertyDeclaration} may\n * optionally be supplied to configure property features.\n *\n * This decorator should only be used for public fields. As public fields,\n * properties should be considered as primarily settable by element users,\n * either via attribute or the property itself.\n *\n * Generally, properties that are changed by the element should be private or\n * protected fields and should use the {@linkcode state} decorator.\n *\n * However, sometimes element code does need to set a public property. This\n * should typically only be done in response to user interaction, and an event\n * should be fired informing the user; for example, a checkbox sets its\n * `checked` property when clicked and fires a `changed` event. Mutating public\n * properties should typically not be done for non-primitive (object or array)\n * properties. In other cases when an element needs to manage state, a private\n * property decorated via the {@linkcode state} decorator should be used. When\n * needed, state properties can be initialized via public properties to\n * facilitate complex interactions.\n *\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (protoOrDescriptor: Object | ClassElement, name?: PropertyKey): any =>\n    name !== undefined\n      ? legacyProperty(options!, protoOrDescriptor as Object, name)\n      : standardProperty(options!, protoOrDescriptor as ClassElement);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {property} from './property.js';\n\nexport interface InternalPropertyDeclaration<Type = unknown> {\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n}\n\n/**\n * Declares a private or protected reactive property that still triggers\n * updates to the element when it changes. It does not reflect from the\n * corresponding attribute.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n * @category Decorator\n */\nexport function state(options?: InternalPropertyDeclaration) {\n  return property({\n    ...options,\n    state: true,\n  });\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\n\n/**\n * Generates a public interface type that removes private and protected fields.\n * This allows accepting otherwise compatible versions of the type (e.g. from\n * multiple copies of the same package in `node_modules`).\n */\nexport type Interface<T> = {\n  [K in keyof T]: T[K];\n};\n\nexport type Constructor<T> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any[]): T;\n};\n\n// From the TC39 Decorators proposal\nexport interface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => void | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\nexport interface ClassElement {\n  kind: 'field' | 'method';\n  key: PropertyKey;\n  placement: 'static' | 'prototype' | 'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => void | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nexport const legacyPrototypeMethod = (\n  descriptor: PropertyDescriptor,\n  proto: Object,\n  name: PropertyKey\n) => {\n  Object.defineProperty(proto, name, descriptor);\n};\n\nexport const standardPrototypeMethod = (\n  descriptor: PropertyDescriptor,\n  element: ClassElement\n) => ({\n  kind: 'method',\n  placement: 'prototype',\n  key: element.key,\n  descriptor,\n});\n\n/**\n * Helper for decorating a property that is compatible with both TypeScript\n * and Babel decorators. The optional `finisher` can be used to perform work on\n * the class. The optional `descriptor` should return a PropertyDescriptor\n * to install for the given property.\n *\n * @param finisher {function} Optional finisher method; receives the element\n * constructor and property key as arguments and has no return value.\n * @param descriptor {function} Optional descriptor method; receives the\n * property key as an argument and returns a property descriptor to define for\n * the given property.\n * @returns {ClassElement|void}\n */\nexport const decorateProperty =\n  ({\n    finisher,\n    descriptor,\n  }: {\n    finisher?:\n      | ((ctor: typeof ReactiveElement, property: PropertyKey) => void)\n      | null;\n    descriptor?: (property: PropertyKey) => PropertyDescriptor;\n  }) =>\n  (\n    protoOrDescriptor: Interface<ReactiveElement> | ClassElement,\n    name?: PropertyKey\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any => {\n    // TypeScript / Babel legacy mode\n    if (name !== undefined) {\n      const ctor = (protoOrDescriptor as ReactiveElement)\n        .constructor as typeof ReactiveElement;\n      if (descriptor !== undefined) {\n        Object.defineProperty(protoOrDescriptor, name, descriptor(name));\n      }\n      finisher?.(ctor, name!);\n      // Babel standard mode\n    } else {\n      // Note, the @property decorator saves `key` as `originalKey`\n      // so try to use it here.\n      const key =\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (protoOrDescriptor as any).originalKey ??\n        (protoOrDescriptor as ClassElement).key;\n      const info: ClassElement =\n        descriptor != undefined\n          ? {\n              kind: 'method',\n              placement: 'prototype',\n              key,\n              descriptor: descriptor((protoOrDescriptor as ClassElement).key),\n            }\n          : {...(protoOrDescriptor as ClassElement), key};\n      if (finisher != undefined) {\n        info.finisher = function <ReactiveElement>(\n          ctor: Constructor<ReactiveElement>\n        ) {\n          finisher(ctor as unknown as typeof ReactiveElement, key);\n        };\n      }\n      return info;\n    }\n  };\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\nimport {decorateProperty} from './base.js';\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function eventOptions(options: AddEventListenerOptions) {\n  return decorateProperty({\n    finisher: (ctor: typeof ReactiveElement, name: PropertyKey) => {\n      Object.assign(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ctor.prototype[name as keyof ReactiveElement] as any,\n        options\n      );\n    },\n  });\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\nimport {decorateProperty} from './base.js';\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n *     once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first: HTMLDivElement;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector: string, cache?: boolean) {\n  return decorateProperty({\n    descriptor: (name: PropertyKey) => {\n      const descriptor = {\n        get(this: ReactiveElement) {\n          return this.renderRoot?.querySelector(selector) ?? null;\n        },\n        enumerable: true,\n        configurable: true,\n      };\n      if (cache) {\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        descriptor.get = function (this: ReactiveElement) {\n          if (\n            (this as unknown as {[key: string]: Element | null})[\n              key as string\n            ] === undefined\n          ) {\n            (this as unknown as {[key: string]: Element | null})[\n              key as string\n            ] = this.renderRoot?.querySelector(selector) ?? null;\n          }\n          return (this as unknown as {[key: string]: Element | null})[\n            key as string\n          ];\n        };\n      }\n      return descriptor;\n    },\n  });\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\nimport {decorateProperty} from './base.js';\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * ```ts\n * class MyElement {\n *   @queryAll('div')\n *   divs: NodeListOf<HTMLDivElement>;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAll(selector: string) {\n  return decorateProperty({\n    descriptor: (_name: PropertyKey) => ({\n      get(this: ReactiveElement) {\n        return this.renderRoot?.querySelectorAll(selector) ?? [];\n      },\n      enumerable: true,\n      configurable: true,\n    }),\n  });\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {decorateProperty} from './base.js';\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {QueryAssignedNodesOptions} from './query-assigned-nodes.js';\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\n/**\n * A tiny module scoped polyfill for HTMLSlotElement.assignedElements.\n */\nconst slotAssignedElements =\n  global.HTMLSlotElement?.prototype.assignedElements != null\n    ? (slot: HTMLSlotElement, opts?: AssignedNodesOptions) =>\n        slot.assignedElements(opts)\n    : (slot: HTMLSlotElement, opts?: AssignedNodesOptions) =>\n        slot\n          .assignedNodes(opts)\n          .filter(\n            (node): node is Element => node.nodeType === Node.ELEMENT_NODE\n          );\n\n/**\n * Options for the {@linkcode queryAssignedElements} decorator. Extends the\n * options that can be passed into\n * [HTMLSlotElement.assignedElements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n */\nexport interface QueryAssignedElementsOptions\n  extends QueryAssignedNodesOptions {\n  /**\n   * CSS selector used to filter the elements returned. For example, a selector\n   * of `\".item\"` will only include elements with the `item` class.\n   */\n  selector?: string;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\nexport function queryAssignedElements(options?: QueryAssignedElementsOptions) {\n  const {slot, selector} = options ?? {};\n  return decorateProperty({\n    descriptor: (_name: PropertyKey) => ({\n      get(this: ReactiveElement) {\n        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        const elements =\n          slotEl != null ? slotAssignedElements(slotEl, options) : [];\n        if (selector) {\n          return elements.filter((node) => node.matches(selector));\n        }\n        return elements;\n      },\n      enumerable: true,\n      configurable: true,\n    }),\n  });\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing} from '../lit-html.js';\n\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = <T>(value: T) => value ?? nothing;\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Returns an iterable containing the result of calling `f(value)` on each\n * value in `items`.\n *\n * @example\n *\n * ```ts\n * render() {\n *   return html`\n *     <ul>\n *       ${map(items, (i) => html`<li>${i}</li>`)}\n *     </ul>\n *   `;\n * }\n * ```\n */\nexport function* map<T>(\n  items: Iterable<T> | undefined,\n  f: (value: T, index: number) => unknown\n) {\n  if (items !== undefined) {\n    let i = 0;\n    for (const value of items) {\n      yield f(value, i++);\n    }\n  }\n}\n", "import type { ColorSchemableInterface } from '@/mixins/color-schemable.mixin.js';\n\ndeclare global {\n  interface WindowEventMap {\n    'wcp-color-scheme:toggle': CustomEvent<ColorScheme | null>;\n  }\n}\n\nexport type ColorScheme = 'light' | 'dark';\n\n// module stores global state\nconst colorSchemables = new Set<ColorSchemableInterface>();\nlet colorSchemeState: ColorScheme | undefined = matchMedia('(prefers-color-scheme: dark)').matches\n  ? ('dark' as const)\n  : ('light' as const);\n\n// and makes them accessible\nexport const getColorSchemeState = () => colorSchemeState;\nexport const addColorSchemable = (element: ColorSchemableInterface) => colorSchemables.add(element);\nexport const removeColorSchemable = (element: ColorSchemableInterface) => colorSchemables.delete(element);\n\n// track changes to color scheme\nfunction handleColorSchemeChange({ detail }: CustomEvent<ColorScheme | null>) {\n  // update state in module\n  colorSchemeState = detail ?? undefined;\n  colorSchemables.forEach((colorSchemable) => (colorSchemable.colorScheme = colorSchemeState));\n}\n\n// bind a single listener to keep track of changes\nwindow.addEventListener('wcp-color-scheme:toggle', handleColorSchemeChange, false);\n", "import { LitElement } from 'lit';\nimport { property } from 'lit/decorators/property.js';\n\nimport type { Constructor } from '@/utils/mixin.types.js';\nimport {\n  type ColorScheme,\n  getColorSchemeState,\n  addColorSchemable,\n  removeColorSchemable,\n} from '@/utils/color-scheme.utils.js';\n\nexport declare class ColorSchemableInterface {\n  colorScheme?: ColorScheme;\n}\n\n// provide a mixin to make a component color schemable\nexport const ColorSchemable = <T extends Constructor<LitElement>>(superClass: T) => {\n  class ColorSchemableElement extends superClass {\n    /**\n     * @internal - used to reflect the color scheme to the element\n     */\n    @property({ type: String, reflect: true, attribute: 'color-scheme' })\n    colorScheme?: ColorScheme = getColorSchemeState();\n\n    override connectedCallback() {\n      super.connectedCallback();\n      addColorSchemable(this);\n    }\n\n    override disconnectedCallback() {\n      super.disconnectedCallback();\n      removeColorSchemable(this);\n    }\n  }\n  return ColorSchemableElement as Constructor<ColorSchemableInterface> & T;\n};\n", "// this type will be used to derive the config schema from\nexport type Config = {\n  excludeElements: string[];\n\n  /**\n   * Allows setting an initial element to be displayed if no other element is selected.\n   * If omitted, the first element will be used.\n   */\n  initialActiveElement?: string;\n\n  /**\n   * The code previews always consist of two tabs, one for the code and one for the preview.\n   * This property defines the initial tab to be selected.\n   */\n  initialCodePreviewTab: 'code' | 'preview';\n\n  /**\n   * The initial tab to be selected in the preview. Will match the name of the plugin.\n   */\n  initialPreviewTab: string;\n\n  /**\n   * The plugins to be used for the preview.\n   * Set to the viewport plugin by default.\n   */\n  previewPlugins: string[];\n\n  /**\n   * The plugins to be used for the preview frame.\n   * Defaults to examples, readme and viewer.\n   */\n  previewFramePlugins: string[];\n\n  /**\n   * Defines readmes to be loaded from external sources to be displayed in the navigation.\n   */\n  additionalReadmes: {\n    name: string;\n    url: string;\n  }[];\n\n  /**\n   * Labels to be translated or customized\n   */\n  labels: {\n    /**\n     * The name of the group to be used for eventually configured additional readmes.\n     */\n    additionalReadmeGroupName: string;\n    /**\n     * If the navigation is empty, either because no readmes nor elements are found or\n     * because the search query does not match any elements, use this label as fallback.\n     */\n    emptyNavigation: string;\n    /**\n     * If no groups for elements are defined, use this label as fallback for all elements\n     */\n    fallbackGroupName: string;\n    /**\n     * The title of the application, displayed in sidebar header and browser tab\n     */\n    title: string;\n  };\n};\n\ndeclare global {\n  interface WCP {\n    config: Config;\n  }\n\n  interface Window {\n    wcp: WCP;\n  }\n}\n\n// default config, to be customized (even partially)\nexport const defaultConfig = {\n  excludeElements: [],\n  initialActiveElement: undefined,\n  initialCodePreviewTab: 'preview',\n  initialPreviewTab: 'viewer',\n  previewPlugins: ['wcp-preview-simulate-viewports', 'wcp-preview-editor-link'],\n  previewFramePlugins: ['wcp-stage-examples', 'wcp-stage-readme', 'wcp-stage-editor'],\n  additionalReadmes: [],\n  labels: {\n    title: 'Web Component Preview',\n    additionalReadmeGroupName: 'Readmes',\n    fallbackGroupName: 'Components',\n    emptyNavigation: 'No readmes nor elements found.',\n  },\n} satisfies Config;\n\n// merge the default config with the given config\nexport function mergeConfigWithDefaults(config: Partial<Config>): Config {\n  return {\n    ...defaultConfig,\n    ...config,\n    labels: {\n      ...defaultConfig.labels,\n      ...config.labels,\n    },\n  };\n}\n\n// mostly used internally\nexport async function loadConfig(url = 'config.json'): Promise<Config> {\n  const response = await fetch(url);\n  const config = mergeConfigWithDefaults(await response.json());\n  \n  if (window.wcp === undefined) {\n    window.wcp = {} as Window['wcp'];\n  }\n  if (window.wcp.config === undefined) {\n    window.wcp.config = config;\n  }\n\n  return getConfig();\n}\n\n// convenience function to retrieve the config\nexport function getConfig(): Config {\n  return window.wcp.config;\n}\n", "export default `\n:host {\n  ---wcp-markdown-example-spacing: var(--wcp-markdown-example-spacing, 0 calc(var(--wcp-base-size, 10px) * 1));\n  ---wcp-markdown-example-border-radius: var(--wcp-markdown-example-border-radius, var(--wcp-border-radius));\n  ---wcp-markdown-example-border-width: var(--wcp-markdown-example-border-width, 1px);\n  ---wcp-markdown-example-dark-border-color: var(--wcp-markdown-example-dark-border-color, var(--wcp-color-grey-24));\n  ---wcp-markdown-example-light-border-color: var(--wcp-markdown-example-light-border-color, var(--wcp-color-grey-65));\n}\n@media (prefers-color-scheme: dark) {\n  :host {\n    ---wcp-markdown-example-border-color: var(---wcp-markdown-example-dark-border-color);\n  }\n}\n:host([color-scheme=dark]):host {\n  ---wcp-markdown-example-border-color: var(---wcp-markdown-example-dark-border-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    ---wcp-markdown-example-border-color: var(---wcp-markdown-example-light-border-color);\n  }\n}\n:host([color-scheme=light]):host {\n  ---wcp-markdown-example-border-color: var(---wcp-markdown-example-light-border-color);\n}\n\n:host {\n  display: block;\n  padding: var(---wcp-markdown-example-spacing);\n  border: var(---wcp-markdown-example-border-width) solid var(---wcp-markdown-example-border-color);\n  border-radius: var(---wcp-markdown-example-border-radius);\n}\n\nslot[name=code]::slotted(pre) {\n  margin: 0;\n}\n\nwcp-tabs::part(preview-panel) {\n  padding: 0;\n  overflow: hidden;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { map } from 'lit/directives/map.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\nimport { getConfig } from '@/utils/config.utils.js';\n\nimport styles from './markdown-example.component.scss';\n\nconst MARKDOWN_EXAMPLE_TABS = { preview: { label: 'Preview' }, code: { label: 'Code' } };\n\n/**\n * Shows an inline code example and a preview of the element in the readme.\n * This is used in the markdown formatter to render `html` examples.\n *\n * In most cases you don't want to use this component directly, but rather use the `wcp-readme` element instead,\n * or the enhanced markdown renderer which instruments this element under the hood. It can be used with the\n * `renderMarkdown` function provided by the `@/utils/markdown.utils`.\n *\n * @example\n * ### Shows arbitrary HTML code example\n *\n * ```html\n * <wcp-markdown-example>\n *   <pre slot=\"code\">\n * &lt;h1&gt;Readme&lt;/h1&gt;\n * &lt;p&gt;Some readme content&lt;/p&gt;\n *   </pre>\n *   <div slot=\"preview\">\n *     <h1>Readme</h1>\n *     <p>Some readme content</p>\n *   </div>\n * </wcp-markdown-example>\n * ```\n *\n * @slot code - Code example\n * @slot preview - Rendered example preview\n *\n * @cssprop --wcp-markdown-example-spacing - Inner padding of the example\n * @cssprop --wcp-markdown-example-border-radius - Border radius of the example\n * @cssprop --wcp-markdown-example-border-width - Border width of the example\n *\n * @cssprop --wcp-markdown-example-dark-border-color - Border color of the example in dark mode\n * @cssprop --wcp-markdown-example-light-border-color - Border color of the example in light mode\n */\n@customElement('wcp-markdown-example')\nexport class MarkdownExample extends ColorSchemable(LitElement) {\n  static override readonly styles = unsafeCSS(styles);\n\n  readonly #config = getConfig();\n\n  protected override render(): TemplateResult {\n    return html`\n      <wcp-tabs .tabs=\"${MARKDOWN_EXAMPLE_TABS}\" active-tab=\"${ifDefined(this.#config.initialCodePreviewTab)}\">\n        ${map(Object.keys(MARKDOWN_EXAMPLE_TABS), (tab) => html`<slot name=\"${tab}\" slot=\"${tab}\"></slot>`)}\n      </wcp-tabs>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-markdown-example': MarkdownExample;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * When `condition` is true, returns the result of calling `trueCase()`, else\n * returns the result of calling `falseCase()` if `falseCase` is defined.\n *\n * This is a convenience wrapper around a ternary expression that makes it a\n * little nicer to write an inline conditional without an else.\n *\n * @example\n *\n * ```ts\n * render() {\n *   return html`\n *     ${when(this.user, () => html`User: ${this.user.username}`, () => html`Sign In...`)}\n *   `;\n * }\n * ```\n */\nexport function when<T, F>(\n  condition: true,\n  trueCase: () => T,\n  falseCase?: () => F\n): T;\nexport function when<T, F = undefined>(\n  condition: false,\n  trueCase: () => T,\n  falseCase?: () => F\n): F;\nexport function when<T, F = undefined>(\n  condition: unknown,\n  trueCase: () => T,\n  falseCase?: () => F\n): T | F;\nexport function when(\n  condition: unknown,\n  trueCase: () => unknown,\n  falseCase?: () => unknown\n): unknown {\n  return condition ? trueCase() : falseCase?.();\n}\n", "export default `\n:host {\n  ---wcp-navigation-spacing: var(--wcp-navigation-spacing, 0 0 calc(var(--wcp-base-size, 10px) * 1));\n  ---wcp-navigation-spacing-items: var(--wcp-navigation-spacing-items, 0);\n  ---wcp-navigation-spacing-headline: var(--wcp-navigation-spacing-headline, calc(var(--wcp-base-size, 10px) * 1.5) 0 calc(var(--wcp-base-size, 10px) * 1) calc(var(--wcp-base-size, 10px) * 2));\n  ---wcp-navigation-dark-border-color: var(--wcp-navigation-headline-dark-border-color, var(--wcp-color-grey-24));\n  ---wcp-navigation-light-border-color: var(--wcp-navigation-headline-light-border-color, var(--wcp-color-blue-24));\n  ---wcp-navigation-headline-size: var(--wcp-navigation-headline-size, .8em);\n  ---wcp-navigation-headline-weight: var(--wcp-navigation-headline-weight, 200);\n  ---wcp-navigation-headline-spacing: var(--wcp-navigation-headline-spacing, .1em);\n  ---wcp-navigation-headline-dark-background: var(--wcp-navigation-headline-dark-background, var(--wcp-color-blue-13));\n  ---wcp-navigation-headline-light-background: var(--wcp-navigation-headline-light-background, var(--wcp-color-blue-17));\n}\n@media (prefers-color-scheme: dark) {\n  :host {\n    ---wcp-navigation-headline-background: var(---wcp-navigation-headline-dark-background);\n    ---wcp-navigation-border-color: var(---wcp-navigation-dark-border-color);\n  }\n}\n:host([color-scheme=dark]):host {\n  ---wcp-navigation-headline-background: var(---wcp-navigation-headline-dark-background);\n  ---wcp-navigation-border-color: var(---wcp-navigation-dark-border-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    ---wcp-navigation-headline-background: var(---wcp-navigation-headline-light-background);\n    ---wcp-navigation-border-color: var(---wcp-navigation-light-border-color);\n  }\n}\n:host([color-scheme=light]):host {\n  ---wcp-navigation-headline-background: var(---wcp-navigation-headline-light-background);\n  ---wcp-navigation-border-color: var(---wcp-navigation-light-border-color);\n}\n\n:host {\n  display: block;\n}\n\n:host(:not([headline])) {\n  border-top: 1px solid var(---wcp-navigation-border-color);\n}\n\nh3 {\n  position: sticky;\n  top: 0;\n  z-index: 1;\n  margin: 0;\n  padding: var(---wcp-navigation-spacing-headline);\n  background-color: var(---wcp-navigation-headline-background);\n  font-size: var(---wcp-navigation-headline-size);\n  font-weight: var(---wcp-navigation-headline-weight);\n  letter-spacing: var(---wcp-navigation-headline-spacing);\n  line-height: 1;\n}\nh3 span {\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-transform: uppercase;\n}\nh3::before {\n  content: \"\";\n  position: absolute;\n  top: -1px;\n  right: 0;\n  bottom: auto;\n  left: 0;\n  height: 1px;\n  background-color: var(---wcp-navigation-border-color);\n}\n\nnav {\n  position: relative;\n  padding: var(---wcp-navigation-spacing);\n  display: flex;\n  flex-direction: column;\n  gap: var(---wcp-navigation-spacing-items);\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { when } from 'lit/directives/when.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\n\nimport styles from './navigation.component.scss';\n\n/**\n * @element wcp-navigation\n *\n * @example\n * ### Usage with headline\n *\n * ```html\n * <wcp-navigation headline=\"Navigation\">\n *   <wcp-navigation-item href=\"/home\">Home</wcp-navigation-item>\n *   <wcp-navigation-item href=\"/about\">About</wcp-navigation-item>\n * </wcp-navigation>\n * ```\n *\n * @slot - Default slot for navigation items\n *\n * @cssprop --wcp-navigation-spacing - Spacing between navigation and headline\n * @cssprop --wcp-navigation-spacing-items - Spacing between navigation items\n * @cssprop --wcp-navigation-spacing-headline - Inner padding of the navigation headline\n * @cssprop --wcp-navigation-dark-border-color - Border color of the navigation headline in dark mode\n * @cssprop --wcp-navigation-light-border-color - Border color of the navigation headline in light mode\n * @cssprop --wcp-navigation-headline-size - Font size of the navigation headline\n * @cssprop --wcp-navigation-headline-weight - Font weight of the navigation headline\n * @cssprop --wcp-navigation-headline-spacing - Letter spacing of the navigation headline\n * @cssprop --wcp-navigation-headline-dark-background - Background color of the navigation headline in dark mode\n * @cssprop --wcp-navigation-headline-light-background - Background color of the navigation headline in light mode\n */\n@customElement('wcp-navigation')\nexport class Navigation extends ColorSchemable(LitElement) {\n  static override readonly styles = unsafeCSS(styles);\n\n  @property({ type: String, reflect: true })\n  headline?: string;\n\n  protected override render(): TemplateResult {\n    return html`\n      ${when(this.headline !== undefined, () => html`<h3><span>${this.headline}</span></h3>`)}\n      <nav>\n        <slot></slot>\n      </nav>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-navigation': Navigation;\n  }\n}\n", "export default `\n:host {\n  ---wcp-navigation-item-spacing: var(--wcp-navigation-item-spacing, calc(var(--wcp-base-size, 10px) * 0.75) calc(var(--wcp-base-size, 10px) * 2));\n  ---wcp-navigation-item-dark-passive-background: var(--wcp-navigation-item-dark-passive-background, transparent);\n  ---wcp-navigation-item-dark-passive-color: var(--wcp-navigation-item-dark-passive-color, inherit);\n  ---wcp-navigation-item-dark-hover-background: var(--wcp-navigation-item-dark-hover-background, var(--wcp-color-blue-17));\n  ---wcp-navigation-item-dark-hover-color: var(--wcp-navigation-item-dark-hover-color, inherit);\n  ---wcp-navigation-item-dark-active-background: var(--wcp-navigation-item-dark-active-background, var(--wcp-color-blue-20));\n  ---wcp-navigation-item-dark-active-color: var(--wcp-navigation-item-dark-active-color, inherit);\n  ---wcp-navigation-item-light-passive-background: var(--wcp-navigation-item-light-passive-background, transparent);\n  ---wcp-navigation-item-light-passive-color: var(--wcp-navigation-item-light-passive-color, inherit);\n  ---wcp-navigation-item-light-hover-background: var(--wcp-navigation-item-light-hover-background, var(--wcp-color-blue-24));\n  ---wcp-navigation-item-light-hover-color: var(--wcp-navigation-item-light-hover-color, inherit);\n  ---wcp-navigation-item-light-active-background: var(--wcp-navigation-item-light-active-background, var(--wcp-color-blue-27));\n  ---wcp-navigation-item-light-active-color: var(--wcp-navigation-item-light-active-color, inherit);\n}\n\n@media (prefers-color-scheme: dark) {\n  :host(:not([active])) {\n    ---wcp-navigation-item-background: var(---wcp-navigation-item-dark-passive-background);\n    ---wcp-navigation-item-color: var(---wcp-navigation-item-dark-passive-color);\n  }\n}\n:host([color-scheme=dark]):host(:not([active])) {\n  ---wcp-navigation-item-background: var(---wcp-navigation-item-dark-passive-background);\n  ---wcp-navigation-item-color: var(---wcp-navigation-item-dark-passive-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host(:not([active])) {\n    ---wcp-navigation-item-background: var(---wcp-navigation-item-light-passive-background);\n    ---wcp-navigation-item-color: var(---wcp-navigation-item-light-passive-color);\n  }\n}\n:host([color-scheme=light]):host(:not([active])) {\n  ---wcp-navigation-item-background: var(---wcp-navigation-item-light-passive-background);\n  ---wcp-navigation-item-color: var(---wcp-navigation-item-light-passive-color);\n}\n\n@media (prefers-color-scheme: dark) {\n  :host([active]) {\n    ---wcp-navigation-item-background: var(---wcp-navigation-item-dark-active-background);\n    ---wcp-navigation-item-color: var(---wcp-navigation-item-dark-active-color);\n  }\n}\n:host([color-scheme=dark]):host([active]) {\n  ---wcp-navigation-item-background: var(---wcp-navigation-item-dark-active-background);\n  ---wcp-navigation-item-color: var(---wcp-navigation-item-dark-active-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host([active]) {\n    ---wcp-navigation-item-background: var(---wcp-navigation-item-light-active-background);\n    ---wcp-navigation-item-color: var(---wcp-navigation-item-light-active-color);\n  }\n}\n:host([color-scheme=light]):host([active]) {\n  ---wcp-navigation-item-background: var(---wcp-navigation-item-light-active-background);\n  ---wcp-navigation-item-color: var(---wcp-navigation-item-light-active-color);\n}\n\n@media (prefers-color-scheme: dark) {\n  :host(:not([active])) a:hover {\n    ---wcp-navigation-item-background: var(---wcp-navigation-item-dark-hover-background);\n    ---wcp-navigation-item-color: var(---wcp-navigation-item-dark-hover-color);\n  }\n}\n:host([color-scheme=dark]):host(:not([active])) a:hover {\n  ---wcp-navigation-item-background: var(---wcp-navigation-item-dark-hover-background);\n  ---wcp-navigation-item-color: var(---wcp-navigation-item-dark-hover-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host(:not([active])) a:hover {\n    ---wcp-navigation-item-background: var(---wcp-navigation-item-light-hover-background);\n    ---wcp-navigation-item-color: var(---wcp-navigation-item-light-hover-color);\n  }\n}\n:host([color-scheme=light]):host(:not([active])) a:hover {\n  ---wcp-navigation-item-background: var(---wcp-navigation-item-light-hover-background);\n  ---wcp-navigation-item-color: var(---wcp-navigation-item-light-hover-color);\n}\n\na,\nspan {\n  display: block;\n  padding: var(---wcp-navigation-item-spacing);\n  -webkit-text-decoration: none;\n  text-decoration: none;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  background-color: var(---wcp-navigation-item-background);\n  color: var(---wcp-navigation-item-color);\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { when } from 'lit/directives/when.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\n\nimport styles from './navigation-item.component.scss';\n\n/**\n * @element wcp-navigation-item\n * \n * @example\n * ### Non-interactive\n *\n * This will probably only be used for the active item.\n *\n * ```html\n * <wcp-navigation-item>\n *   Non-interactive\n * </wcp-navigation-item>\n * ```\n *\n * @example\n * ### With link\n *\n * ```html\n * <wcp-navigation-item href=\"/home\">\n *   Home\n * </wcp-navigation-item>\n * ```\n * \n * @slot - Default slot for contents\n * \n * @cssprop --wcp-navigation-item-spacing - Inner padding of the item\n * \n * @cssprop --wcp-navigation-item-dark-passive-background - Background color of the item when non interactive in dark mode\n * @cssprop --wcp-navigation-item-dark-hover-background - Background color of the item when hovered in dark mode\n * @cssprop --wcp-navigation-item-dark-active-background - Background color of the item when active in dark mode\n * \n * @cssprop --wcp-navigation-item-dark-passive-color - Text color of the item when non interactive in dark mode\n * @cssprop --wcp-navigation-item-dark-hover-color - Text color of the item when hovered in dark mode\n * @cssprop --wcp-navigation-item-dark-active-color - Text color of the item when active in dark mode\n * \n * @cssprop --wcp-navigation-item-light-passive-background - Background color of the item when non interactive in light mode\n * @cssprop --wcp-navigation-item-light-hover-background - Background color of the item when hovered in light mode\n * @cssprop --wcp-navigation-item-light-active-background - Background color of the item when active in light mode\n * \n * @cssprop --wcp-navigation-item-light-passive-color - Text color of the item when non interactive in light mode\n * @cssprop --wcp-navigation-item-light-hover-color - Text color of the item when hovered in light mode\n * @cssprop --wcp-navigation-item-light-active-color - Text color of the item when active in light mode\n */\n@customElement('wcp-navigation-item')\nexport class NavigationItem extends ColorSchemable(LitElement) {\n  static override readonly styles = unsafeCSS(styles);\n\n  @property({ type: Boolean, reflect: true })\n  active = false;\n\n  @property({ type: String, reflect: true })\n  href?: string;\n\n  protected override render(): TemplateResult {\n    return html`\n      ${when(\n        this.href !== undefined,\n        () => html`<a href=\"${ifDefined(this.href)}\"><slot></slot></a>`,\n        () => html`<span><slot></slot></span>`\n      )}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-navigation-item': NavigationItem;\n  }\n}\n", "export default `\n:host {\n  ---wcp-navigation-search-spacing: var(--wcp-navigation-search-spacing, 0 calc(var(--wcp-base-size, 10px) * 1) calc(var(--wcp-base-size, 10px) * 1));\n  ---wcp-navigation-search-dark-border-color: var(--wcp-navigation-search-dark-border-color, var(--wcp-color-grey-24));\n  ---wcp-navigation-search-light-border-color: var(--wcp-navigation-search-light-border-color, var(--wcp-color-blue-24));\n  ---wcp-navigation-search-passive-dark-stroke: var(--wcp-navigation-search-passive-dark-stroke, var(--wcp-color-grey-24));\n  ---wcp-navigation-search-passive-light-stroke: var(--wcp-navigation-search-passive-light-stroke, var(--wcp-color-blue-24));\n}\n@media (prefers-color-scheme: dark) {\n  :host {\n    ---wcp-navigation-search-border-color: var(---wcp-navigation-search-dark-border-color);\n    ---wcp-navigation-search-passive-stroke: var(---wcp-navigation-search-passive-dark-stroke);\n  }\n}\n:host([color-scheme=dark]):host {\n  ---wcp-navigation-search-border-color: var(---wcp-navigation-search-dark-border-color);\n  ---wcp-navigation-search-passive-stroke: var(---wcp-navigation-search-passive-dark-stroke);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    ---wcp-navigation-search-border-color: var(---wcp-navigation-search-light-border-color);\n    ---wcp-navigation-search-passive-stroke: var(---wcp-navigation-search-passive-light-stroke);\n  }\n}\n:host([color-scheme=light]):host {\n  ---wcp-navigation-search-border-color: var(---wcp-navigation-search-light-border-color);\n  ---wcp-navigation-search-passive-stroke: var(---wcp-navigation-search-passive-light-stroke);\n}\n\n:host {\n  ---wcp-navigation-search-stroke: var(---wcp-navigation-search-passive-stroke);\n  --wcp-input-text-dark-border: var(---wcp-navigation-search-passive-dark-stroke);\n  --wcp-input-text-light-border: var(---wcp-navigation-search-passive-light-stroke);\n}\n\n:host(:focus-within) {\n  ---wcp-navigation-search-stroke: var(---wcp-navigation-search-active-stroke);\n  --wcp-input-text-dark-border: var(---wcp-navigation-search-active-dark-stroke);\n  --wcp-input-text-light-border: var(---wcp-navigation-search-active-light-stroke);\n}\n\n:host {\n  display: block;\n  padding: var(---wcp-navigation-search-spacing);\n  line-height: 1;\n  border-bottom: 1px solid var(---wcp-navigation-search-border-color);\n}\n\nwcp-icon[name=search] {\n  --wcp-icon-size: 18;\n  color: var(---wcp-navigation-search-stroke);\n  padding-left: calc(10px * 1);\n  padding-left: calc(var(--wcp-base-size, 10px) * 1);\n  pointer-events: none;\n}\n\nwcp-button {\n  margin: calc(10px * 0.1) calc(10px * 0.3) 0 0;\n  margin: calc(var(--wcp-base-size, 10px) * 0.1) calc(var(--wcp-base-size, 10px) * 0.3) 0 0;\n}\nwcp-button::part(button) {\n  color: var(---wcp-navigation-search-stroke);\n  padding: calc(10px * 0.1);\n  padding: calc(var(--wcp-base-size, 10px) * 0.1);\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property } from 'lit/decorators.js';\nimport { when } from 'lit/directives/when.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\n\nimport styles from './navigation-search.component.scss';\n\n/**\n * @element wcp-navigation-search\n *\n * @emits wcp-navigation-search:search - Fired when the search term changes. Carries the new search term with it.\n *\n * @cssprop --wcp-navigation-search-spacing - The spacing around the search input.\n * \n * @cssprop --wcp-navigation-search-dark-border-color - The border color of the search input in dark mode.\n * @cssprop --wcp-navigation-search-light-border-color - The border color of the search input in light mode.\n * \n * @cssprop --wcp-navigation-search-passive-dark-stroke - The stroke color of the search input in dark mode when not focused.\n * @cssprop --wcp-navigation-search-passive-light-stroke - The stroke color of the search input in light mode when not focused.\n * \n * @cssprop --wcp-navigation-search-active-dark-stroke - The stroke color of the search input in dark mode when focused.\n * @cssprop --wcp-navigation-search-active-light-stroke - The stroke color of the search input in light mode when focused.\n */\n@customElement('wcp-navigation-search')\nexport class NavigationSearch extends ColorSchemable(LitElement) {\n  static override readonly styles = unsafeCSS(styles);\n\n  @property({ type: String, reflect: true })\n  term = '';\n\n  @eventOptions({ passive: true })\n  protected handleSearchInput(event: InputEvent) {\n    const { value } = event.target as HTMLInputElement;\n    this.#updateSearchTerm(value);\n  }\n\n  @eventOptions({ passive: true })\n  protected handleResetClick() {\n    this.#updateSearchTerm('');\n  }\n\n  #updateSearchTerm(term: string) {\n    this.term = term;\n    this.dispatchEvent(new CustomEvent('wcp-navigation-search:search', { detail: term }));\n  }\n\n  protected override render(): TemplateResult {\n    return html`\n      <wcp-input-text type=\"search\" .value=\"${this.term}\" @input=\"${this.handleSearchInput}\">\n        <wcp-icon slot=\"before\" name=\"search\"></wcp-icon>\n        ${when(\n          this.term.length > 0,\n          () => html`\n            <wcp-button slot=\"after\" kind=\"icon\" @click=\"${this.handleResetClick}\">\n              <wcp-icon name=\"close\"></wcp-icon>\n            </wcp-button>\n          `\n        )}\n      </wcp-input-text>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    'wcp-navigation-search:search': CustomEvent<string>;\n  }\n\n  interface HTMLElementTagNameMap {\n    'wcp-navigation-search': NavigationSearch;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Any new exports need to be added to the export statement in\n// `packages/lit/src/index.all.ts`.\n\nimport {html as coreHtml, svg as coreSvg, TemplateResult} from './lit-html.js';\n\nexport interface StaticValue {\n  /** The value to interpolate as-is into the template. */\n  _$litStatic$: string;\n\n  /**\n   * A value that can't be decoded from ordinary JSON, make it harder for\n   * a attacker-controlled data that goes through JSON.parse to produce a valid\n   * StaticValue.\n   */\n  r: typeof brand;\n}\n\n/**\n * Prevents JSON injection attacks.\n *\n * The goals of this brand:\n *   1) fast to check\n *   2) code is small on the wire\n *   3) multiple versions of Lit in a single page will all produce mutually\n *      interoperable StaticValues\n *   4) normal JSON.parse (without an unusual reviver) can not produce a\n *      StaticValue\n *\n * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but\n * we don't care about the key, so we break ties via (2) and use the empty\n * string.\n */\nconst brand = Symbol.for('');\n\n/** Safely extracts the string part of a StaticValue. */\nconst unwrapStaticValue = (value: unknown): string | undefined => {\n  if ((value as Partial<StaticValue>)?.r !== brand) {\n    return undefined;\n  }\n  return (value as Partial<StaticValue>)?.['_$litStatic$'];\n};\n\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Note that this function is unsafe to use on untrusted content, as it will be\n * directly parsed into HTML. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nexport const unsafeStatic = (value: string): StaticValue => ({\n  ['_$litStatic$']: value,\n  r: brand,\n});\n\nconst textFromStatic = (value: StaticValue) => {\n  if (value['_$litStatic$'] !== undefined) {\n    return value['_$litStatic$'];\n  } else {\n    throw new Error(\n      `Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`\n    );\n  }\n};\n\n/**\n * Tags a string literal so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * The only values that may be used in template expressions are other tagged\n * `literal` results or `unsafeStatic` values (note that untrusted content\n * should never be passed to `unsafeStatic`).\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Static values can be changed, but they will cause a complete re-render since\n * they effectively create a new template.\n */\nexport const literal = (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): StaticValue => ({\n  ['_$litStatic$']: values.reduce(\n    (acc, v, idx) => acc + textFromStatic(v as StaticValue) + strings[idx + 1],\n    strings[0]\n  ) as string,\n  r: brand,\n});\n\nconst stringsCache = new Map<string, TemplateStringsArray>();\n\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nexport const withStatic =\n  (coreTag: typeof coreHtml | typeof coreSvg) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult => {\n    const l = values.length;\n    let staticValue: string | undefined;\n    let dynamicValue: unknown;\n    const staticStrings: Array<string> = [];\n    const dynamicValues: Array<unknown> = [];\n    let i = 0;\n    let hasStatics = false;\n    let s: string;\n\n    while (i < l) {\n      s = strings[i];\n      // Collect any unsafeStatic values, and their following template strings\n      // so that we treat a run of template strings and unsafe static values as\n      // a single template string.\n      while (\n        i < l &&\n        ((dynamicValue = values[i]),\n        (staticValue = unwrapStaticValue(dynamicValue))) !== undefined\n      ) {\n        s += staticValue + strings[++i];\n        hasStatics = true;\n      }\n      // If the last value is static, we don't need to push it.\n      if (i !== l) {\n        dynamicValues.push(dynamicValue);\n      }\n      staticStrings.push(s);\n      i++;\n    }\n    // If the last value isn't static (which would have consumed the last\n    // string), then we need to add the last string.\n    if (i === l) {\n      staticStrings.push(strings[l]);\n    }\n\n    if (hasStatics) {\n      const key = staticStrings.join('$$lit$$');\n      strings = stringsCache.get(key)!;\n      if (strings === undefined) {\n        // Beware: in general this pattern is unsafe, and doing so may bypass\n        // lit's security checks and allow an attacker to execute arbitrary\n        // code and inject arbitrary content.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (staticStrings as any).raw = staticStrings;\n        stringsCache.set(\n          key,\n          (strings = staticStrings as unknown as TemplateStringsArray)\n        );\n      }\n      values = dynamicValues;\n    }\n    return coreTag(strings, ...values);\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const html = withStatic(coreHtml);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const svg = withStatic(coreSvg);\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  TemplateResult,\n  CompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is TemplateResult | CompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is TemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is TemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as TemplateResult)?.['_$litType$'] !== undefined\n    : (value as TemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Disconnectable, Part} from './lit-html.js';\n\nexport {\n  AttributePart,\n  BooleanAttributePart,\n  ChildPart,\n  ElementPart,\n  EventPart,\n  Part,\n  PropertyPart,\n} from './lit-html.js';\n\nexport interface DirectiveClass {\n  new (part: PartInfo): Directive;\n}\n\n/**\n * This utility type extracts the signature of a directive class's render()\n * method so we can use it for the type of the generated directive function.\n */\nexport type DirectiveParameters<C extends Directive> = Parameters<C['render']>;\n\n/**\n * A generated directive function doesn't evaluate the directive, but just\n * returns a DirectiveResult object that captures the arguments.\n */\nexport interface DirectiveResult<C extends DirectiveClass = DirectiveClass> {\n  /**\n   * This property needs to remain unminified.\n   * @internal */\n  ['_$litDirective$']: C;\n  /** @internal */\n  values: DirectiveParameters<InstanceType<C>>;\n}\n\nexport const PartType = {\n  ATTRIBUTE: 1,\n  CHILD: 2,\n  PROPERTY: 3,\n  BOOLEAN_ATTRIBUTE: 4,\n  EVENT: 5,\n  ELEMENT: 6,\n} as const;\n\nexport type PartType = (typeof PartType)[keyof typeof PartType];\n\nexport interface ChildPartInfo {\n  readonly type: typeof PartType.CHILD;\n}\n\nexport interface AttributePartInfo {\n  readonly type:\n    | typeof PartType.ATTRIBUTE\n    | typeof PartType.PROPERTY\n    | typeof PartType.BOOLEAN_ATTRIBUTE\n    | typeof PartType.EVENT;\n  readonly strings?: ReadonlyArray<string>;\n  readonly name: string;\n  readonly tagName: string;\n}\n\nexport interface ElementPartInfo {\n  readonly type: typeof PartType.ELEMENT;\n}\n\n/**\n * Information about the part a directive is bound to.\n *\n * This is useful for checking that a directive is attached to a valid part,\n * such as with directive that can only be used on attribute bindings.\n */\nexport type PartInfo = ChildPartInfo | AttributePartInfo | ElementPartInfo;\n\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive =\n  <C extends DirectiveClass>(c: C) =>\n  (...values: DirectiveParameters<InstanceType<C>>): DirectiveResult<C> => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n  });\n\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport abstract class Directive implements Disconnectable {\n  //@internal\n  __part!: Part;\n  //@internal\n  __attributeIndex: number | undefined;\n  //@internal\n  __directive?: Directive;\n\n  //@internal\n  _$parent!: Disconnectable;\n\n  // These will only exist on the AsyncDirective subclass\n  //@internal\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // This property needs to remain unminified.\n  //@internal\n  ['_$notifyDirectiveConnectionChanged']?(isConnected: boolean): void;\n\n  constructor(_partInfo: PartInfo) {}\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  /** @internal */\n  _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    this.__part = part;\n    this._$parent = parent;\n    this.__attributeIndex = attributeIndex;\n  }\n  /** @internal */\n  _$resolve(part: Part, props: Array<unknown>): unknown {\n    return this.update(part, props);\n  }\n\n  abstract render(...props: Array<unknown>): unknown;\n\n  update(_part: Part, props: Array<unknown>): unknown {\n    return this.render(...props);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback: WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n> = new WeakMap();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n", "export default `\n:host {\n  ---wcp-preview-menu-dark-border-color: var(--wcp-frame-menu-dark-border-color, var(--wcp-color-grey-24));\n  ---wcp-preview-menu-light-border-color: var(--wcp-frame-menu-light-border-color, var(--wcp-color-grey-65));\n}\n\n:host {\n  display: block;\n  position: relative;\n  min-height: calc(10px * 4.2);\n  min-height: calc(var(--wcp-base-size, 10px) * 4.2);\n}\n@media (prefers-color-scheme: dark) {\n  :host {\n    ---wcp-preview-menu-border-color: var(---wcp-preview-menu-dark-border-color);\n  }\n}\n:host([color-scheme=dark]):host {\n  ---wcp-preview-menu-border-color: var(---wcp-preview-menu-dark-border-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    ---wcp-preview-menu-border-color: var(---wcp-preview-menu-light-border-color);\n  }\n}\n:host([color-scheme=light]):host {\n  ---wcp-preview-menu-border-color: var(---wcp-preview-menu-light-border-color);\n}\n\n:host {\n  display: flex;\n  flex-direction: column-reverse;\n}\n\nnav {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 0 calc(10px * 1);\n  gap: 0 calc(var(--wcp-base-size, 10px) * 1);\n  align-items: center;\n  justify-content: flex-start;\n  border-bottom: 1px solid var(---wcp-preview-menu-border-color);\n}\n\n.plugin:not([available]) {\n  display: none;\n}\n\nhr {\n  margin: 0;\n  padding: 0;\n  height: calc(10px * 2.2);\n  height: calc(var(--wcp-base-size, 10px) * 2.2);\n  width: 1px;\n  background-color: var(---wcp-preview-menu-border-color);\n  border: 0;\n}\nhr:has(+ .plugin:not([available])) {\n  display: none;\n}\n\nsection {\n  position: relative;\n  isolation: isolate;\n  padding: 10px;\n}\n\n#wrapper {\n  position: relative;\n  margin: 0 auto;\n}\n\n#stage {\n  display: block;\n  contain: content;\n  isolation: isolate;\n  overflow: auto;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { unsafeStatic, html as staticHtml } from 'lit/static-html.js';\nimport { customElement, state, property } from 'lit/decorators.js';\nimport { map } from 'lit/directives/map.js';\nimport { ref } from 'lit/directives/ref.js';\nimport { when } from 'lit/directives/when.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\nimport { getConfig } from '@/utils/config.utils.js';\n\nimport styles from './preview.component.scss';\n\n/**\n * Previews given content.\n *\n * @element wcp-preview\n *\n * @cssprop --wcp-preview-menu-dark-border-color - Border color of the plugin menu in dark mode.\n * @cssprop --wcp-preview-menu-light-border-color - Border color of the plugin menu in light mode.\n *\n * @slot - The content to preview.\n *\n * @example\n * ```html\n * <wcp-preview>\n *   <wcp-button>Example button</wcp-button>\n * </wcp-preview>\n * ```\n */\n@customElement('wcp-preview')\nexport class Preview extends ColorSchemable(LitElement) {\n  static override readonly styles = unsafeCSS(styles);\n\n  readonly #config = getConfig();\n\n  @state()\n  private container?: HTMLElement;\n\n  @property({ type: String, reflect: true, attribute: 'preview-tag-name' })\n  previewTagName?: string;\n\n  #handleRouteChange = () => this.requestUpdate();\n\n  override async connectedCallback() {\n    super.connectedCallback();\n\n    window.addEventListener('hashchange', this.#handleRouteChange, false);\n  }\n\n  override disconnectedCallback() {\n    window.removeEventListener('hashchange', this.#handleRouteChange, false);\n\n    super.disconnectedCallback();\n  }\n\n  private handleContainerRef(container?: Element) {\n    this.container = container as HTMLDivElement | undefined;\n  }\n\n  protected override render(): TemplateResult {\n    return html`\n      <section>\n        <div id=\"wrapper\">\n          <div id=\"stage\" ${ref(this.handleContainerRef)}>\n            <slot></slot>\n          </div>\n        </div>\n      </section>\n\n      ${when(\n        this.container !== undefined,\n        () => html`\n          <nav>\n            ${map(\n              this.#config.previewPlugins ?? [],\n              (plugin, index) => html`\n                ${when(index > 0, () => html`<hr />`)} ${staticHtml`\n                  <${unsafeStatic(plugin)}\n                    class=\"plugin\"\n                    .container=\"${this.container}\"\n                    preview-tag-name=\"${this.previewTagName}\"\n                  ></${unsafeStatic(plugin)}>\n                `}\n              `\n            )}\n          </nav>\n        `\n      )}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-preview': Preview;\n  }\n}\n", "import type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Gets the original marked default options.\n */\nexport function _getDefaults(): MarkedOptions {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    hooks: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nexport let _defaults = _getDefaults();\n\nexport function changeDefaults(newDefaults: MarkedOptions) {\n  _defaults = newDefaults;\n}\n", "import type { MarkedOptions } from './MarkedOptions.ts';\nimport type { ResultCallback } from './marked.ts';\nimport type { Rule } from './rules.ts';\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch: string) => escapeReplacements[ch];\n\nexport function escape(html: string, encode?: boolean) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\nexport function unescape(html: string) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\nexport function edit(regex: Rule, opt?: string) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name: string | RegExp, val: string | RegExp) => {\n      val = typeof val === 'object' && 'source' in val ? val.source : val;\n      val = val.replace(caret, '$1');\n      regex = (regex as string).replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nexport function cleanUrl(sanitize: boolean | undefined, base: string | undefined | null, href: string) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls: Record<string, string> = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\nexport function resolveUrl(base: string, href: string) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nexport const noopTest = { exec: () => null };\n\nexport function splitCells(tableRow: string, count: number) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str: string, c: string, invert?: boolean) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nexport function findClosingBracket(str: string, b: string) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nexport function checkDeprecations(opt: MarkedOptions, callback?: ResultCallback) {\n  if (!opt || opt.silent) {\n    return;\n  }\n\n  if (callback) {\n    console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\n  }\n\n  if (opt.sanitize || opt.sanitizer) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n\n  if (opt.highlight || opt.langPrefix !== 'language-') {\n    console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\n  }\n\n  if (opt.mangle) {\n    console.warn('marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.');\n  }\n\n  if (opt.baseUrl) {\n    console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\n  }\n\n  if (opt.smartypants) {\n    console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\n  }\n\n  if (opt.xhtml) {\n    console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\n  }\n\n  if (opt.headerIds || opt.headerPrefix) {\n    console.warn('marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.');\n  }\n}\n", "import { _defaults } from './defaults.ts';\nimport {\n  rtrim,\n  splitCells,\n  escape,\n  findClosingBracket\n} from './helpers.ts';\nimport { _Lexer } from './Lexer.ts';\nimport type { Links, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nfunction outputLink(cap: string[], link: Pick<Tokens.Link, 'href' | 'title'>, raw: string, lexer: _Lexer): Tokens.Link | Tokens.Image {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token: Tokens.Link = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw: string, text: string) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n  options: MarkedOptions;\n  rules: any;\n  lexer!: _Lexer;\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  space(src: string): Tokens.Space | undefined {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src: string): Tokens.Hr | undefined {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src: string): Tokens.Blockquote | undefined {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src: string): Tokens.List | undefined {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list: Tokens.List = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: [] as Tokens.ListItem[]\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t: string) => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      (list.items[list.items.length - 1] as Tokens.ListItem).text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens!.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw!));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src: string): Tokens.HTML | Tokens.Paragraph | undefined {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token: Tokens.HTML | Tokens.Paragraph = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        const paragraph = token as unknown as Tokens.Paragraph;\n        paragraph.type = 'paragraph';\n        paragraph.text = text;\n        paragraph.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src: string): Tokens.Def | undefined {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src: string): Tokens.Table | undefined {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item: Tokens.Table = {\n        type: 'table',\n        // splitCells expects a number as second argument\n        // @ts-expect-error\n        header: splitCells(cap[1]).map(c => {\n          return { text: c };\n        }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i]!)) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i]!)) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i]!)) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i] as unknown as string, item.header.length).map(c => {\n            return { text: c };\n          });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src: string): Tokens.Paragraph | undefined {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src: string): Tokens.Text | undefined {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src: string): Tokens.Escape | undefined {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src: string): Tokens.Tag | undefined {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src: string): Tokens.Link | Tokens.Image | undefined {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n      || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src: string, maskedSrc: string, prevChar = ''): Tokens.Em | Tokens.Strong | undefined {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + rLength + 1);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src: string): Tokens.Codespan | undefined {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src: string): Tokens.Br | undefined {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src: string): Tokens.Del | undefined {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src: string, mangle: (cap: string) => string): Tokens.Link | undefined {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src: string, mangle: (cap: string) => string): Tokens.Link | undefined {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src: string, smartypants: (cap: string) => string): Tokens.Text | undefined {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n", "import {\n  noopTest,\n  edit\n} from './helpers.ts';\n\nexport type Rule = RegExp | string;\n\nexport interface Rules {\n  [ruleName: string]: Pick<RegExp, 'exec'> | Rule | Rules;\n}\n\ntype BlockRuleNames =\n    | 'newline'\n    | 'code'\n    | 'fences'\n    | 'hr'\n    | 'heading'\n    | 'blockquote'\n    | 'list'\n    | 'html'\n    | 'def'\n    | 'lheading'\n    | '_paragraph'\n    | 'text'\n    | '_label'\n    | '_title'\n    | 'bullet'\n    | 'listItemStart'\n    | '_tag'\n    | '_comment'\n    | 'paragraph'\n    | 'uote' ;\n\ntype BlockSubRuleNames = 'normal' | 'gfm' | 'pedantic';\n\ntype InlineRuleNames =\n    | 'escape'\n    | 'autolink'\n    | 'tag'\n    | 'link'\n    | 'reflink'\n    | 'nolink'\n    | 'reflinkSearch'\n    | 'code'\n    | 'br'\n    | 'text'\n    | '_punctuation'\n    | 'punctuation'\n    | 'blockSkip'\n    | 'escapedEmSt'\n    | '_comment'\n    | '_escapes'\n    | '_scheme'\n    | '_email'\n    | '_attribute'\n    | '_label'\n    | '_href'\n    | '_title'\n    | 'strong'\n    | '_extended_email'\n    | '_backpedal';\n\ntype InlineSubRuleNames = 'gfm' | 'emStrong' | 'normal' | 'pedantic'| 'breaks';\n\n/**\n * Block-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nexport const block: Record<BlockRuleNames, Rule> & Record<BlockSubRuleNames, Rules> & Rules = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.lheading = edit(block.lheading)\n  .replace(/bull/g, block.bullet) // lists can interrupt\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = { ...block };\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = {\n  ...block.normal,\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\n\nblock.gfm.table = edit(block.gfm.table as Rule)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table as RegExp) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = {\n  ...block.normal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph as Rule)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n};\n\n/**\n * Inline-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nexport const inline: Record<InlineRuleNames, Rule> & Record<InlineSubRuleNames, Rules> & Rules = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n    rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^((?![*_])[\\spunctuation])/\n};\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim as Rule, 'u')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst as Rule, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd as Rule, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.anyPunctuation = edit(inline.anyPunctuation as Rule, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = edit(inline._escapes, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = { ...inline };\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = {\n  ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n};\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = {\n  ...inline.normal,\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n\ninline.gfm.url = edit(inline.gfm.url as Rule, 'i')\n  .replace('email', inline.gfm._extended_email as RegExp)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = {\n  ...inline.gfm,\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text as Rule)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n};\n", "import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { block, inline } from './rules.ts';\nimport type { Token, TokensList } from './Tokens.ts';\nimport type { MarkedOptions, TokenizerExtension } from './MarkedOptions.ts';\nimport type { Rules } from './rules.ts';\n\n/**\n * smartypants text replacement\n */\nfunction smartypants(text: string) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n */\nfunction mangle(text: string) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nexport class _Lexer {\n  tokens: TokensList;\n  options: MarkedOptions;\n  state: {\n    inLink: boolean;\n    inRawBlock: boolean;\n    top: boolean;\n  };\n\n  private tokenizer: _Tokenizer;\n  private inlineQueue: {src: string, tokens: Token[]}[];\n\n  constructor(options?: MarkedOptions) {\n    // TokenList cannot be created in one go\n    // @ts-expect-error\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules(): Rules {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src: string) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src: string, tokens?: Token[]): Token[];\n  blockTokens(src: string, tokens?: TokensList): TokensList;\n  blockTokens(src: string, tokens: Token[] = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer: TokenizerExtension['tokenizer']) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src: string, tokens: Token[] = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src: string, tokens: Token[] = []): Token[] {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n", "import { _defaults } from './defaults.ts';\nimport {\n  cleanUrl,\n  escape\n} from './helpers.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport { Slugger } from './marked.ts';\n\n/**\n * Renderer\n */\nexport class _Renderer {\n  options: MarkedOptions;\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  code(code: string, infostring: string | undefined, escaped: boolean): string {\n    const lang = (infostring || '').match(/\\S*/)![0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  blockquote(quote: string): string {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html: string, block?: boolean) : string {\n    return html;\n  }\n\n  heading(text: string, level: number, raw: string, slugger: Slugger): string {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr(): string {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body: string, ordered: boolean, start: number | ''): string {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(text: string, task: boolean, checked: boolean): string {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked: boolean): string {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  paragraph(text: string): string {\n    return `<p>${text}</p>\\n`;\n  }\n\n  table(header: string, body: string): string {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  tablerow(content: string): string {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content: string, flags: {\n    header: boolean;\n    align: 'center' | 'left' | 'right' | null;\n  }): string {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   */\n  strong(text: string): string {\n    return `<strong>${text}</strong>`;\n  }\n\n  em(text: string): string {\n    return `<em>${text}</em>`;\n  }\n\n  codespan(text: string): string {\n    return `<code>${text}</code>`;\n  }\n\n  br(): string {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  del(text: string): string {\n    return `<del>${text}</del>`;\n  }\n\n  link(href: string, title: string | null | undefined, text: string): string {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href) as any;\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image(href: string, title: string | null, text: string): string {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href) as any;\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text: string) : string {\n    return text;\n  }\n}\n", "/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n  // no need for block level renderers\n  strong(text: string) {\n    return text;\n  }\n\n  em(text: string) {\n    return text;\n  }\n\n  codespan(text: string) {\n    return text;\n  }\n\n  del(text: string) {\n    return text;\n  }\n\n  html(text: string) {\n    return text;\n  }\n\n  text(text: string) {\n    return text;\n  }\n\n  link(href: string, title: string | null | undefined, text: string) {\n    return '' + text;\n  }\n\n  image(href: string, title: string | null, text: string) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n", "import type { SluggerOptions } from './MarkedOptions.ts';\n\n/**\n * Slugger generates header id\n */\nexport class _Slugger {\n  seen: { [slugValue: string]: number };\n\n  constructor() {\n    this.seen = {};\n  }\n\n  serialize(value: string) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   */\n  getNextSafeSlug(originalSlug: string, isDryRun: boolean | undefined) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   */\n  slug(value: string, options: SluggerOptions = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n", "import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Slugger } from './Slugger.ts';\nimport { _defaults } from './defaults.ts';\nimport {\n  unescape\n} from './helpers.ts';\nimport type { Token, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n  options: MarkedOptions;\n  renderer: _Renderer;\n  textRenderer: _TextRenderer;\n  slugger: _Slugger;\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new _TextRenderer();\n    this.slugger = new _Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens: Token[], top = true): string {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens) as string,\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer) as string),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            !!token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens)!,\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens)!,\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens)!;\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(!!checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  } as Tokens.Text);\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, !!checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token.text, token.block);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens)!);\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body!) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens: Token[], renderer?: _Renderer | _TextRenderer): string {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n", "import { _defaults } from './defaults.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nexport class _Hooks {\n  options: MarkedOptions;\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess'\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown: string) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html: string | undefined) {\n    return html;\n  }\n}\n", "import { _getDefaults } from './defaults.js';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Slugger } from './Slugger.ts';\nimport {\n  checkDeprecations,\n  escape\n} from './helpers.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport type ResultCallback = (error: Error | null, parseResult?: string) => undefined | void;\n\nexport class Marked {\n  defaults = _getDefaults();\n  options = this.setOptions;\n\n  parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n  parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n\n  Parser = _Parser;\n  parser = _Parser.parse;\n  Renderer = _Renderer;\n  TextRenderer = _TextRenderer;\n  Lexer = _Lexer;\n  lexer = _Lexer.lex;\n  Tokenizer = _Tokenizer;\n  Slugger = _Slugger;\n  Hooks = _Hooks;\n\n  constructor(...args: MarkedExtension[]) {\n    this.use(...args);\n  }\n\n  /**\n   * Run callback for every token\n   */\n  walkTokens <T = void>(tokens: Token[] | TokensList, callback: (token: Token) => T | T[]) {\n    let values: T[] = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          for (const cell of token.header) {\n            values = values.concat(this.walkTokens(cell.tokens!, callback));\n          }\n          for (const row of token.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens!, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          values = values.concat(this.walkTokens(token.items, callback));\n          break;\n        }\n        default: {\n          if (this.defaults.extensions && this.defaults.extensions.childTokens && this.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n            this.defaults.extensions.childTokens[token.type].forEach((childTokens) => {\n              values = values.concat(this.walkTokens(token[childTokens], callback));\n            });\n          } else if (token.tokens) {\n            values = values.concat(this.walkTokens(token.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args: MarkedExtension[]) {\n    const extensions: NonNullable<MarkedOptions['extensions']> = this.defaults.extensions || { renderers: {}, childTokens: {} } as NonNullable<MarkedOptions['extensions']>;\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack } as MarkedOptions;\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            if (extensions[ext.level]) {\n              extensions[ext.level].unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start!);\n                } else {\n                  extensions.startBlock = [ext.start!];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start!);\n                } else {\n                  extensions.startInline = [ext.start!];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          const prevRenderer = renderer[prop];\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[prop] = (...args: unknown[]) => {\n            let ret = pack.renderer![prop].apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret;\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          const prevTokenizer = tokenizer[prop];\n          // Replace tokenizer with func to run extension, but fall back if false\n          tokenizer[prop] = (...args: unknown[]) => {\n            let ret = pack.tokenizer![prop].apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          const prevHook = hooks[prop];\n          if (_Hooks.passThroughHooks.has(prop)) {\n            hooks[prop as 'preprocess' | 'postprocess'] = (arg: string | undefined) => {\n              if (this.defaults.async) {\n                return Promise.resolve(pack.hooks![prop].call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = pack.hooks![prop].call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[prop] = (...args) => {\n              let ret = pack.hooks![prop].apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        opts.walkTokens = function(token) {\n          let values: Array<Promise<void> | void> = [];\n          values.push(pack.walkTokens!.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  #parseMarkdown(lexer: (src: string, options?: MarkedOptions) => TokensList | Token[], parser: (tokens: Token[], options?: MarkedOptions) => string | undefined) {\n    return (src: string, optOrCallback?: MarkedOptions | ResultCallback | undefined | null, callback?: ResultCallback | undefined): string | Promise<string | undefined> | undefined => {\n      if (typeof optOrCallback === 'function') {\n        callback = optOrCallback;\n        optOrCallback = null;\n      }\n\n      const origOpt = { ...optOrCallback };\n      const opt = { ...this.defaults, ...origOpt };\n      const throwError = this.#onError(!!opt.silent, !!opt.async, callback);\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      checkDeprecations(opt, callback);\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n      }\n\n      if (callback) {\n        const highlight = opt.highlight;\n        let tokens: TokensList | Token[];\n\n        try {\n          if (opt.hooks) {\n            src = opt.hooks.preprocess(src);\n          }\n          tokens = lexer(src, opt);\n        } catch (e) {\n          return throwError(e as Error);\n        }\n\n        const done = (err?: Error) => {\n          let out;\n\n          if (!err) {\n            try {\n              if (opt.walkTokens) {\n                this.walkTokens(tokens, opt.walkTokens);\n              }\n              out = parser(tokens, opt)!;\n              if (opt.hooks) {\n                out = opt.hooks.postprocess(out);\n              }\n            } catch (e) {\n              err = e as Error;\n            }\n          }\n\n          opt.highlight = highlight;\n\n          return err\n            ? throwError(err)\n            : callback!(null, out) as undefined;\n        };\n\n        if (!highlight || highlight.length < 3) {\n          return done();\n        }\n\n        delete opt.highlight;\n\n        if (!tokens.length) return done();\n\n        let pending = 0;\n        this.walkTokens(tokens, (token) => {\n          if (token.type === 'code') {\n            pending++;\n            setTimeout(() => {\n              highlight(token.text, token.lang, (err, code) => {\n                if (err) {\n                  return done(err);\n                }\n                if (code != null && code !== token.text) {\n                  token.text = code;\n                  token.escaped = true;\n                }\n\n                pending--;\n                if (pending === 0) {\n                  done();\n                }\n              });\n            }, 0);\n          }\n        });\n\n        if (pending === 0) {\n          done();\n        }\n\n        return;\n      }\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        const tokens = lexer(src, opt);\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n        return html;\n      } catch (e) {\n        return throwError(e as Error);\n      }\n    };\n  }\n\n  #onError(silent: boolean, async: boolean, callback?: ResultCallback) {\n    return (e: Error): string | Promise<string> | undefined => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        if (callback) {\n          callback(null, msg);\n          return;\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      if (callback) {\n        callback(e);\n        return;\n      }\n      throw e;\n    };\n  }\n}\n", "import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Slugger } from './Slugger.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport {\n  _getDefaults,\n  changeDefaults,\n  _defaults\n} from './defaults.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport type ResultCallback = (error: Error | null, parseResult?: string) => undefined | void;\n\nconst markedInstance = new Marked();\n\n/**\n * Compiles markdown to HTML asynchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options, having async: true\n * @return Promise of string of compiled HTML\n */\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\n\n/**\n * Compiles markdown to HTML synchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Optional hash of options\n * @return String of compiled HTML\n */\nexport function marked(src: string, options?: MarkedOptions): string;\n\n/**\n * Compiles markdown to HTML asynchronously with a callback.\n *\n * @param src String of markdown source to be compiled\n * @param callback Function called when the markdownString has been fully parsed when using async highlighting\n */\nexport function marked(src: string, callback: ResultCallback): void;\n\n/**\n * Compiles markdown to HTML asynchronously with a callback.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @param callback Function called when the markdownString has been fully parsed when using async highlighting\n */\nexport function marked(\n    src: string,\n    options: MarkedOptions,\n    callback: ResultCallback,\n): void;\nexport function marked(src: string, opt?: MarkedOptions | ResultCallback, callback?: ResultCallback): string | Promise<string | undefined> | undefined {\n  return markedInstance.parse(src, opt, callback);\n}\n\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\nmarked.setOptions = function(options: MarkedOptions) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\n\nmarked.defaults = _defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args: MarkedExtension[]) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function <T = void>(tokens: Token[] | TokensList, callback: (token: Token) => T | T[]) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Slugger = _Slugger;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\n\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Slugger as Slugger } from './Slugger.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\nexport type * from './MarkedOptions.ts';\nexport type * from './rules.ts';\nexport type * from './Tokens.ts';\n", "export function markedHighlight(options) {\n  if (typeof options === 'function') {\n    options = {\n      highlight: options\n    };\n  }\n\n  if (!options || typeof options.highlight !== 'function') {\n    throw new Error('Must provide highlight function');\n  }\n\n  if (typeof options.langPrefix !== 'string') {\n    options.langPrefix = 'language-';\n  }\n\n  return {\n    async: !!options.async,\n    walkTokens(token) {\n      if (token.type !== 'code') {\n        return;\n      }\n\n      const lang = getLang(token);\n\n      if (options.async) {\n        return Promise.resolve(options.highlight(token.text, lang)).then(updateToken(token));\n      }\n\n      const code = options.highlight(token.text, lang);\n      updateToken(token)(code);\n    },\n    renderer: {\n      code(code, infoString, escaped) {\n        const lang = (infoString || '').match(/\\S*/)[0];\n        const classAttr = lang\n          ? ` class=\"${options.langPrefix}${escape(lang)}\"`\n          : '';\n        code = code.replace(/\\n$/, '');\n        return `<pre><code${classAttr}>${escaped ? code : escape(code, true)}\\n</code></pre>`;\n      }\n    }\n  };\n}\n\nfunction getLang(token) {\n  return (token.lang || '').match(/\\S*/)[0];\n}\n\nfunction updateToken(token) {\n  return (code) => {\n    if (typeof code === 'string' && code !== token.text) {\n      token.escaped = true;\n      token.text = code;\n    }\n  };\n}\n\n// copied from marked helpers\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n", "import { marked, Renderer } from 'marked';\nimport { markedHighlight } from 'marked-highlight';\nimport * as Prism from 'prismjs';\n\nexport function getCodeExample(slot: HTMLSlotElement): string {\n  return slot.assignedElements().reduce((acc, el) => `${acc}\\n${el.outerHTML}`, '');\n}\n\n/**\n * Custom marked renderer to wrap code in a custom element.\n */\nexport class CustomRenderer extends Renderer {\n  // for some unknown reason, the raw code is no more available in the code renderer since we switched\n  // marked to asynchronous highlighting. Thus, we store the raw code along with the highlighted code\n  // for later use in this convenient internal map.\n  #rawCodeMap = new Map<string, string>();\n\n  constructor(private readonly addCodePreview = true, private readonly previewTagName?: string) {\n    super();\n  }\n\n  storeRawCode(raw: string, highlighted: string) {\n    this.#rawCodeMap.set(highlighted, raw);\n  }\n\n  override code(code: string, language = 'plaintext', escaped = false): string {\n    // do not use example component for anything but html examples\n    if (language !== 'html' || !this.addCodePreview || (escaped && !this.#rawCodeMap.has(code))) {\n      return `<wcp-code>${super.code(code, language, escaped)}</wcp-code>`;\n    }\n\n    // if a tag name is provided, use it to parametrize the preview component\n    const previewTagName = this.previewTagName ? ` preview-tag-name=\"${this.previewTagName}\"` : '';\n    const raw = escaped ? this.#rawCodeMap.get(code) : code;\n\n    // wrap the code in a custom element to preview it\n    return `\n      <wcp-markdown-example>\n        <wcp-code slot=\"code\">${super.code(code, language, escaped)}</wcp-code>\n        <wcp-preview slot=\"preview\"${previewTagName}>${raw}</wcp-preview>\n      </wcp-markdown-example>\n    `;\n  }\n}\n\nexport function resolveRelativePath(path: string): string {\n  const stripLeadingSlash = (str: string) => str.replace(/^\\//, '');\n  const url = new URL(`/${stripLeadingSlash(path)}`, location.origin);\n  return stripLeadingSlash(url.pathname);\n}\n\n/**\n * Only relative links will be handled. If a markdown file (*.md, *.mdx) is linked, it will be prefixed with the route additionally.\n */\nexport function prefixRelativeUrls(markdown: string, currentPath: string, basePath = ''): string {\n  const currentDir = currentPath.substring(0, currentPath.lastIndexOf('/') + 1);\n  // https://regex101.com/r/mi812s/7\n  return markdown.replace(\n    /((?:\\[[^\\]]*\\]\\()|(?:href|src)=[\"'])(?!(?:[a-z]+:\\/\\/)|\\/)(?:\\.\\/)?([^)]*?)(\\.mdx?)?(?:#(.*?))?(\\)|[\"'])/gi,\n    (_, before, path = '', ext = '', hash = '', after) => {\n      const isMarkdownLink = ext !== '';\n      const hasPath = path !== '';\n      const hasHash = hash !== '';\n      const isHashLink = hasHash && !hasPath;\n      if (isMarkdownLink || isHashLink) {\n        const nextPath = hasPath ? resolveRelativePath(`${currentDir}${path}${ext}`) : currentPath;\n        const link = encodeURIComponent(nextPath);\n        const section = hasHash ? `/${hash}` : '';\n        return `${before}${basePath}${link}${section}${after}`;\n      }\n      // is any assetic relative link\n      const nextPath = resolveRelativePath(`${currentDir}${path}${ext}`);\n      return [before, nextPath, after].join('');\n    }\n  );\n}\n\n/**\n * Maps a given markdown code block language to a prism grammar.\n */\nexport function mapLangToGrammar(lang: string): string {\n  switch (lang) {\n    case 'ts':\n      return 'prism-typescript';\n    case 'js':\n      return 'prism-javascript';\n    case 'html':\n      return 'prism-cshtml';\n    default:\n      return `prism-${lang}`;\n  }\n}\n\n/**\n * Convenience function to render a given markdown string to html.\n */\nexport async function renderMarkdown(\n  markdown: string,\n  addCodePreview = true,\n  previewTagName?: string\n): Promise<string> {\n  // prepare an individual renderer\n  const renderer = new CustomRenderer(addCodePreview, previewTagName);\n\n  // instruct individual highlighting for language\n  marked.use(\n    markedHighlight({\n      async: true,\n      async highlight(code, lang) {\n        // no language, no highlight\n        if (lang === undefined) return code;\n        // load grammar if not already loaded\n        if (!Prism.languages[lang]) {\n          try {\n            await import(`/grammars/${mapLangToGrammar(lang)}.js`);\n          } catch (e) {\n            return code;\n          }\n        }\n        // highlight code and store it for later use in renderer\n        const highlighted = Prism.highlight(code, Prism.languages[lang], lang);\n        renderer.storeRawCode(code, highlighted);\n        return highlighted;\n      },\n    })\n  );\n\n  return marked(markdown, { renderer });\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Note, this module is not included in package exports so that it's private to\n// our first-party directives. If it ends up being useful, we can open it up and\n// export it.\n\n/**\n * Helper to iterate an AsyncIterable in its own closure.\n * @param iterable The iterable to iterate\n * @param callback The callback to call for each value. If the callback returns\n * `false`, the loop will be broken.\n */\nexport const forAwaitOf = async <T>(\n  iterable: AsyncIterable<T>,\n  callback: (value: T) => Promise<boolean>\n) => {\n  for await (const v of iterable) {\n    if ((await callback(v)) === false) {\n      return;\n    }\n  }\n};\n\n/**\n * Holds a reference to an instance that can be disconnected and reconnected,\n * so that a closure over the ref (e.g. in a then function to a promise) does\n * not strongly hold a ref to the instance. Approximates a WeakRef but must\n * be manually connected & disconnected to the backing instance.\n */\nexport class PseudoWeakRef<T> {\n  private _ref?: T;\n  constructor(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Disassociates the ref with the backing instance.\n   */\n  disconnect() {\n    this._ref = undefined;\n  }\n  /**\n   * Reassociates the ref with the backing instance.\n   */\n  reconnect(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Retrieves the backing instance (will be undefined when disconnected)\n   */\n  deref() {\n    return this._ref;\n  }\n}\n\n/**\n * A helper to pause and resume waiting on a condition in an async function\n */\nexport class Pauser {\n  private _promise?: Promise<void> = undefined;\n  private _resolve?: () => void = undefined;\n  /**\n   * When paused, returns a promise to be awaited; when unpaused, returns\n   * undefined. Note that in the microtask between the pauser being resumed\n   * an an await of this promise resolving, the pauser could be paused again,\n   * hence callers should check the promise in a loop when awaiting.\n   * @returns A promise to be awaited when paused or undefined\n   */\n  get() {\n    return this._promise;\n  }\n  /**\n   * Creates a promise to be awaited\n   */\n  pause() {\n    this._promise ??= new Promise((resolve) => (this._resolve = resolve));\n  }\n  /**\n   * Resolves the promise which may be awaited\n   */\n  resume() {\n    this._resolve?.();\n    this._promise = this._resolve = undefined;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Part, noChange} from '../lit-html.js';\nimport {isPrimitive} from '../directive-helpers.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\nimport {Pauser, PseudoWeakRef} from './private-async-helpers.js';\n\nconst isPromise = (x: unknown) => {\n  return !isPrimitive(x) && typeof (x as {then?: unknown}).then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\n\nexport class UntilDirective extends AsyncDirective {\n  private __lastRenderedIndex: number = _infinity;\n  private __values: unknown[] = [];\n  private __weakThis = new PseudoWeakRef(this);\n  private __pauser = new Pauser();\n\n  render(...args: Array<unknown>) {\n    return args.find((x) => !isPromise(x)) ?? noChange;\n  }\n\n  override update(_part: Part, args: Array<unknown>) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser;\n\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i];\n\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0;\n\n      // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n      Promise.resolve(value).then(async (result: unknown) => {\n        // If we're disconnected, wait until we're (maybe) reconnected\n        // The while loop here handles the case that the connection state\n        // thrashes, causing the pauser to resume and then get re-paused\n        while (pauser.get()) {\n          await pauser.get();\n        }\n        // If the callback gets here and there is no `this`, it means that the\n        // directive has been disconnected and garbage collected and we don't\n        // need to do anything else\n        const _this = weakThis.deref();\n        if (_this !== undefined) {\n          const index = _this.__values.indexOf(value);\n          // If state.values doesn't contain the value, we've re-rendered without\n          // the value, so don't render it. Then, only render if the value is\n          // higher-priority than what's already been rendered.\n          if (index > -1 && index < _this.__lastRenderedIndex) {\n            _this.__lastRenderedIndex = index;\n            _this.setValue(result);\n          }\n        }\n      });\n    }\n\n    return noChange;\n  }\n\n  override disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n\n  override reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};\n", "export default `\n:host {\n  ---wcp-readme-dark-color: var(--wcp-readme-dark-color, var(--wcp-color-grey-96));\n  ---wcp-readme-dark-color-accent: var(--wcp-readme-dark-color-accent, #58a6ff);\n  ---wcp-readme-dark-color-muted: var(--wcp-readme-dark-color-muted, var(--wcp-color-grey-80));\n  ---wcp-readme-dark-border-color: var(--wcp-readme-dark-border-color, var(--wcp-color-grey-24));\n  ---wcp-readme-dark-highlight-background: var(--wcp-readme-dark-highlight-background, var(--wcp-color-grey-17));\n  ---wcp-readme-light-color: var(--wcp-readme-light-color, var(--wcp-color-grey-17));\n  ---wcp-readme-light-color-accent: var(--wcp-readme-light-color-accent, #122df5);\n  ---wcp-readme-light-color-muted: var(--wcp-readme-light-color-muted, var(--wcp-color-grey-24));\n  ---wcp-readme-light-border-color: var(--wcp-readme-light-border-color, var(--wcp-color-grey-65));\n  ---wcp-readme-light-highlight-background: var(--wcp-readme-light-highlight-background, var(--wcp-color-blue-91));\n}\n\n@media (prefers-color-scheme: dark) {\n  :host {\n    ---wcp-readme-border-color: var(---wcp-readme-dark-border-color);\n    ---wcp-readme-color: var(---wcp-readme-dark-color);\n    ---wcp-readme-color-accent: var(---wcp-readme-dark-color-accent);\n    ---wcp-readme-color-muted: var(---wcp-readme-dark-color-muted);\n    ---wcp-readme-highlight-background: var(---wcp-readme-dark-highlight-background);\n  }\n}\n:host([color-scheme=dark]):host {\n  ---wcp-readme-border-color: var(---wcp-readme-dark-border-color);\n  ---wcp-readme-color: var(---wcp-readme-dark-color);\n  ---wcp-readme-color-accent: var(---wcp-readme-dark-color-accent);\n  ---wcp-readme-color-muted: var(---wcp-readme-dark-color-muted);\n  ---wcp-readme-highlight-background: var(---wcp-readme-dark-highlight-background);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    ---wcp-readme-border-color: var(---wcp-readme-light-border-color);\n    ---wcp-readme-color: var(---wcp-readme-light-color);\n    ---wcp-readme-color-accent: var(---wcp-readme-light-color-accent);\n    ---wcp-readme-color-muted: var(---wcp-readme-light-color-muted);\n    ---wcp-readme-highlight-background: var(---wcp-readme-light-highlight-background);\n  }\n}\n:host([color-scheme=light]):host {\n  ---wcp-readme-border-color: var(---wcp-readme-light-border-color);\n  ---wcp-readme-color: var(---wcp-readme-light-color);\n  ---wcp-readme-color-accent: var(---wcp-readme-light-color-accent);\n  ---wcp-readme-color-muted: var(---wcp-readme-light-color-muted);\n  ---wcp-readme-highlight-background: var(---wcp-readme-light-highlight-background);\n}\n\n@media (prefers-color-scheme: dark) {\n  .markdown-body {\n    color-scheme: dark;\n    --wcp-github-markdown-color-prettylights-syntax-comment: #8b949e;\n    --wcp-github-markdown-color-prettylights-syntax-constant: #79c0ff;\n    --wcp-github-markdown-color-prettylights-syntax-entity: #d2a8ff;\n    --wcp-github-markdown-color-prettylights-syntax-storage-modifier-import: #c9d1d9;\n    --wcp-github-markdown-color-prettylights-syntax-entity-tag: #7ee787;\n    --wcp-github-markdown-color-prettylights-syntax-keyword: #ff7b72;\n    --wcp-github-markdown-color-prettylights-syntax-string: #a5d6ff;\n    --wcp-github-markdown-color-prettylights-syntax-variable: #ffa657;\n    --wcp-github-markdown-color-prettylights-syntax-brackethighlighter-unmatched: #f85149;\n    --wcp-github-markdown-color-prettylights-syntax-invalid-illegal-text: #f0f6fc;\n    --wcp-github-markdown-color-prettylights-syntax-invalid-illegal-bg: #8e1519;\n    --wcp-github-markdown-color-prettylights-syntax-carriage-return-text: #f0f6fc;\n    --wcp-github-markdown-color-prettylights-syntax-carriage-return-bg: #b62324;\n    --wcp-github-markdown-color-prettylights-syntax-string-regexp: #7ee787;\n    --wcp-github-markdown-color-prettylights-syntax-markup-list: #f2cc60;\n    --wcp-github-markdown-color-prettylights-syntax-markup-heading: #1f6feb;\n    --wcp-github-markdown-color-prettylights-syntax-markup-italic: #c9d1d9;\n    --wcp-github-markdown-color-prettylights-syntax-markup-bold: #c9d1d9;\n    --wcp-github-markdown-color-prettylights-syntax-markup-deleted-text: #ffdcd7;\n    --wcp-github-markdown-color-prettylights-syntax-markup-deleted-bg: #67060c;\n    --wcp-github-markdown-color-prettylights-syntax-markup-inserted-text: #aff5b4;\n    --wcp-github-markdown-color-prettylights-syntax-markup-inserted-bg: #033a16;\n    --wcp-github-markdown-color-prettylights-syntax-markup-changed-text: #ffdfb6;\n    --wcp-github-markdown-color-prettylights-syntax-markup-changed-bg: #5a1e02;\n    --wcp-github-markdown-color-prettylights-syntax-markup-ignored-text: #c9d1d9;\n    --wcp-github-markdown-color-prettylights-syntax-markup-ignored-bg: #1158c7;\n    --wcp-github-markdown-color-prettylights-syntax-meta-diff-range: #d2a8ff;\n    --wcp-github-markdown-color-prettylights-syntax-brackethighlighter-angle: #8b949e;\n    --wcp-github-markdown-color-prettylights-syntax-sublimelinter-gutter-mark: #484f58;\n    --wcp-github-markdown-color-prettylights-syntax-constant-other-reference-link: #a5d6ff;\n    --wcp-github-markdown-color-fg-default: #c9d1d9;\n    --wcp-github-markdown-color-fg-muted: #8b949e;\n    --wcp-github-markdown-color-fg-subtle: #6e7681;\n    --wcp-github-markdown-color-canvas-default: #0d1117;\n    --wcp-github-markdown-color-canvas-subtle: #161b22;\n    --wcp-github-markdown-color-border-default: #30363d;\n    --wcp-github-markdown-color-border-muted: #21262d;\n    --wcp-github-markdown-color-neutral-muted: rgba(110, 118, 129, 0.4);\n    --wcp-github-markdown-color-accent-fg: #58a6ff;\n    --wcp-github-markdown-color-accent-emphasis: #1f6feb;\n    --wcp-github-markdown-color-attention-subtle: rgba(187, 128, 9, 0.15);\n    --wcp-github-markdown-color-danger-fg: #f85149;\n  }\n}\n@media (prefers-color-scheme: light) {\n  .markdown-body {\n    color-scheme: light;\n    --wcp-github-markdown-color-prettylights-syntax-comment: #6e7781;\n    --wcp-github-markdown-color-prettylights-syntax-constant: #0550ae;\n    --wcp-github-markdown-color-prettylights-syntax-entity: #8250df;\n    --wcp-github-markdown-color-prettylights-syntax-storage-modifier-import: #24292f;\n    --wcp-github-markdown-color-prettylights-syntax-entity-tag: #116329;\n    --wcp-github-markdown-color-prettylights-syntax-keyword: #cf222e;\n    --wcp-github-markdown-color-prettylights-syntax-string: #0a3069;\n    --wcp-github-markdown-color-prettylights-syntax-variable: #953800;\n    --wcp-github-markdown-color-prettylights-syntax-brackethighlighter-unmatched: #82071e;\n    --wcp-github-markdown-color-prettylights-syntax-invalid-illegal-text: #f6f8fa;\n    --wcp-github-markdown-color-prettylights-syntax-invalid-illegal-bg: #82071e;\n    --wcp-github-markdown-color-prettylights-syntax-carriage-return-text: #f6f8fa;\n    --wcp-github-markdown-color-prettylights-syntax-carriage-return-bg: #cf222e;\n    --wcp-github-markdown-color-prettylights-syntax-string-regexp: #116329;\n    --wcp-github-markdown-color-prettylights-syntax-markup-list: #3b2300;\n    --wcp-github-markdown-color-prettylights-syntax-markup-heading: #0550ae;\n    --wcp-github-markdown-color-prettylights-syntax-markup-italic: #24292f;\n    --wcp-github-markdown-color-prettylights-syntax-markup-bold: #24292f;\n    --wcp-github-markdown-color-prettylights-syntax-markup-deleted-text: #82071e;\n    --wcp-github-markdown-color-prettylights-syntax-markup-deleted-bg: #ffebe9;\n    --wcp-github-markdown-color-prettylights-syntax-markup-inserted-text: #116329;\n    --wcp-github-markdown-color-prettylights-syntax-markup-inserted-bg: #dafbe1;\n    --wcp-github-markdown-color-prettylights-syntax-markup-changed-text: #953800;\n    --wcp-github-markdown-color-prettylights-syntax-markup-changed-bg: #ffd8b5;\n    --wcp-github-markdown-color-prettylights-syntax-markup-ignored-text: #eaeef2;\n    --wcp-github-markdown-color-prettylights-syntax-markup-ignored-bg: #0550ae;\n    --wcp-github-markdown-color-prettylights-syntax-meta-diff-range: #8250df;\n    --wcp-github-markdown-color-prettylights-syntax-brackethighlighter-angle: #57606a;\n    --wcp-github-markdown-color-prettylights-syntax-sublimelinter-gutter-mark: #8c959f;\n    --wcp-github-markdown-color-prettylights-syntax-constant-other-reference-link: #0a3069;\n    --wcp-github-markdown-color-fg-default: #24292f;\n    --wcp-github-markdown-color-fg-muted: #57606a;\n    --wcp-github-markdown-color-fg-subtle: #6e7781;\n    --wcp-github-markdown-color-canvas-default: #ffffff;\n    --wcp-github-markdown-color-canvas-subtle: #f6f8fa;\n    --wcp-github-markdown-color-border-default: #d0d7de;\n    --wcp-github-markdown-color-border-muted: hsla(210, 18%, 87%, 1);\n    --wcp-github-markdown-color-neutral-muted: rgba(175, 184, 193, 0.2);\n    --wcp-github-markdown-color-accent-fg: #0969da;\n    --wcp-github-markdown-color-accent-emphasis: #0969da;\n    --wcp-github-markdown-color-attention-subtle: #fff8c5;\n    --wcp-github-markdown-color-danger-fg: #cf222e;\n  }\n}\n.markdown-body .octicon:not(wcp-preview *) {\n  display: inline-block;\n  fill: currentColor;\n  vertical-align: text-bottom;\n}\n\n.markdown-body h1:not(wcp-preview *),\n.markdown-body h2:not(wcp-preview *),\n.markdown-body h3:not(wcp-preview *),\n.markdown-body h4:not(wcp-preview *),\n.markdown-body h5:not(wcp-preview *),\n.markdown-body h6:not(wcp-preview *) {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  font-weight: var(--base-text-weight-semibold, 600);\n  line-height: 1.25;\n}\n\n.markdown-body h1:not(wcp-preview *):hover .anchor .octicon-link:before,\n.markdown-body h2:not(wcp-preview *):hover .anchor .octicon-link:before,\n.markdown-body h3:not(wcp-preview *):hover .anchor .octicon-link:before,\n.markdown-body h4:not(wcp-preview *):hover .anchor .octicon-link:before,\n.markdown-body h5:not(wcp-preview *):hover .anchor .octicon-link:before,\n.markdown-body h6:not(wcp-preview *):hover .anchor .octicon-link:before {\n  width: 16px;\n  height: 16px;\n  content: \" \";\n  display: inline-block;\n  background-color: currentColor;\n  -webkit-mask-image: url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' version='1.1' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg>\");\n  mask-image: url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' version='1.1' aria-hidden='true'><path fill-rule='evenodd' d='M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'></path></svg>\");\n}\n\n.markdown-body h1:not(wcp-preview *) .octicon-link,\n.markdown-body h2:not(wcp-preview *) .octicon-link,\n.markdown-body h3:not(wcp-preview *) .octicon-link,\n.markdown-body h4:not(wcp-preview *) .octicon-link,\n.markdown-body h5:not(wcp-preview *) .octicon-link,\n.markdown-body h6:not(wcp-preview *) .octicon-link {\n  color: var(--wcp-github-markdown-color-fg-default);\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.markdown-body h1:not(wcp-preview *):hover .anchor,\n.markdown-body h2:not(wcp-preview *):hover .anchor,\n.markdown-body h3:not(wcp-preview *):hover .anchor,\n.markdown-body h4:not(wcp-preview *):hover .anchor,\n.markdown-body h5:not(wcp-preview *):hover .anchor,\n.markdown-body h6:not(wcp-preview *):hover .anchor {\n  -webkit-text-decoration: none;\n  text-decoration: none;\n}\n\n.markdown-body h1:not(wcp-preview *):hover .anchor .octicon-link,\n.markdown-body h2:not(wcp-preview *):hover .anchor .octicon-link,\n.markdown-body h3:not(wcp-preview *):hover .anchor .octicon-link,\n.markdown-body h4:not(wcp-preview *):hover .anchor .octicon-link,\n.markdown-body h5:not(wcp-preview *):hover .anchor .octicon-link,\n.markdown-body h6:not(wcp-preview *):hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.markdown-body h1:not(wcp-preview *) tt,\n.markdown-body h1:not(wcp-preview *) code,\n.markdown-body h2:not(wcp-preview *) tt,\n.markdown-body h2:not(wcp-preview *) code,\n.markdown-body h3:not(wcp-preview *) tt,\n.markdown-body h3:not(wcp-preview *) code,\n.markdown-body h4:not(wcp-preview *) tt,\n.markdown-body h4:not(wcp-preview *) code,\n.markdown-body h5:not(wcp-preview *) tt,\n.markdown-body h5:not(wcp-preview *) code,\n.markdown-body h6:not(wcp-preview *) tt,\n.markdown-body h6:not(wcp-preview *) code {\n  padding: 0 0.2em;\n  font-size: inherit;\n}\n\n.markdown-body details:not(wcp-preview *),\n.markdown-body figcaption:not(wcp-preview *),\n.markdown-body figure:not(wcp-preview *) {\n  display: block;\n}\n\n.markdown-body summary:not(wcp-preview *) {\n  display: list-item;\n}\n\n.markdown-body [hidden]:not(wcp-preview *) {\n  display: none !important;\n}\n\n.markdown-body a:not(wcp-preview *) {\n  background-color: transparent;\n  color: var(--wcp-github-markdown-color-accent-fg);\n  -webkit-text-decoration: none;\n  text-decoration: none;\n}\n\n.markdown-body abbr[title]:not(wcp-preview *) {\n  border-bottom: none;\n  text-decoration: underline;\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n.markdown-body b :not(wcp-preview *),\n.markdown-body strong :not(wcp-preview *) {\n  font-weight: 600;\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n\n.markdown-body dfn:not(wcp-preview *) {\n  font-style: italic;\n}\n\n.markdown-body h1:not(wcp-preview *) {\n  margin: 0.67em 0;\n  font-weight: 600;\n  font-weight: var(--base-text-weight-semibold, 600);\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid var(--wcp-github-markdown-color-border-muted);\n}\n\n.markdown-body mark:not(wcp-preview *) {\n  background-color: var(--wcp-github-markdown-color-attention-subtle);\n  color: var(--wcp-github-markdown-color-fg-default);\n}\n\n.markdown-body small:not(wcp-preview *) {\n  font-size: 90%;\n}\n\n.markdown-body sub:not(wcp-preview *),\n.markdown-body sup:not(wcp-preview *) {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\n.markdown-body sub:not(wcp-preview *) {\n  bottom: -0.25em;\n}\n\n.markdown-body sup:not(wcp-preview *) {\n  top: -0.5em;\n}\n\n.markdown-body img:not(wcp-preview *) {\n  border-style: none;\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: var(--wcp-github-markdown-color-canvas-default);\n}\n\n.markdown-body code:not(wcp-preview *),\n.markdown-body kbd:not(wcp-preview *),\n.markdown-body pre:not(wcp-preview *),\n.markdown-body samp:not(wcp-preview *) {\n  font-family: monospace;\n  font-size: 1em;\n}\n\n.markdown-body figure:not(wcp-preview *) {\n  margin: 1em 40px;\n}\n\n.markdown-body hr:not(wcp-preview *) {\n  box-sizing: content-box;\n  overflow: hidden;\n  background: transparent;\n  border-bottom: 1px solid var(--wcp-github-markdown-color-border-muted);\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: var(--wcp-github-markdown-color-border-default);\n  border: 0;\n}\n\n.markdown-body input:not(wcp-preview *) {\n  font: inherit;\n  margin: 0;\n  overflow: visible;\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.markdown-body [type=button]:not(wcp-preview *),\n.markdown-body [type=reset]:not(wcp-preview *),\n.markdown-body [type=submit]:not(wcp-preview *) {\n  -webkit-appearance: button;\n}\n\n.markdown-body [type=checkbox]:not(wcp-preview *),\n.markdown-body [type=radio]:not(wcp-preview *) {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body [type=number]::-webkit-inner-spin-button:not(wcp-preview *),\n.markdown-body [type=number]::-webkit-outer-spin-button:not(wcp-preview *) {\n  height: auto;\n}\n\n.markdown-body [type=search]::-webkit-search-cancel-button:not(wcp-preview *),\n.markdown-body [type=search]::-webkit-search-decoration:not(wcp-preview *) {\n  -webkit-appearance: none;\n}\n\n.markdown-body :not(wcp-preview *)::-webkit-input-placeholder {\n  color: inherit;\n  opacity: 0.54;\n}\n\n.markdown-body :not(wcp-preview *)::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n\n.markdown-body :not(wcp-preview *) ::-moz-placeholder {\n  color: var(--wcp-github-markdown-color-fg-subtle);\n  opacity: 1;\n}\n\n.markdown-body :not(wcp-preview *) ::placeholder {\n  color: var(--wcp-github-markdown-color-fg-subtle);\n  opacity: 1;\n}\n\n.markdown-body a:not(wcp-preview *):hover {\n  -webkit-text-decoration: underline;\n  text-decoration: underline;\n}\n\n.markdown-body hr:not(wcp-preview *)::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body hr:not(wcp-preview *)::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body table:not(wcp-preview *) {\n  border-spacing: 0;\n  border-collapse: collapse;\n  display: block;\n  width: -moz-max-content;\n  width: max-content;\n  max-width: 100%;\n  overflow: auto;\n}\n\n.markdown-body td:not(wcp-preview *),\n.markdown-body th:not(wcp-preview *) {\n  padding: 0;\n}\n\n.markdown-body details:not(wcp-preview *) summary {\n  cursor: pointer;\n}\n\n.markdown-body details:not(wcp-preview *):not([open]) > *:not(summary) {\n  display: none !important;\n}\n\n.markdown-body a:focus:not(wcp-preview *),\n.markdown-body [role=button]:focus:not(wcp-preview *),\n.markdown-body input[type=radio]:focus:not(wcp-preview *),\n.markdown-body input[type=checkbox]:focus:not(wcp-preview *) {\n  outline: 2px solid var(--wcp-github-markdown-color-accent-fg);\n  outline-offset: -2px;\n  box-shadow: none;\n}\n\n.markdown-body a:focus:not(:focus-visible):not(wcp-preview *),\n.markdown-body [role=button]:focus:not(:focus-visible):not(wcp-preview *),\n.markdown-body input[type=radio]:focus:not(:focus-visible):not(wcp-preview *),\n.markdown-body input[type=checkbox]:focus:not(:focus-visible):not(wcp-preview *) {\n  outline: solid 1px transparent;\n}\n\n.markdown-body a:focus-visible:not(wcp-preview *),\n.markdown-body [role=button]:focus-visible:not(wcp-preview *),\n.markdown-body input[type=radio]:focus-visible:not(wcp-preview *),\n.markdown-body input[type=checkbox]:focus-visible:not(wcp-preview *) {\n  outline: 2px solid var(--wcp-github-markdown-color-accent-fg);\n  outline-offset: -2px;\n  box-shadow: none;\n}\n\n.markdown-body a:not([class]):focus:not(wcp-preview *),\n.markdown-body a:not([class]):focus-visible:not(wcp-preview *),\n.markdown-body input[type=radio]:focus:not(wcp-preview *),\n.markdown-body input[type=radio]:focus-visible:not(wcp-preview *),\n.markdown-body input[type=checkbox]:focus:not(wcp-preview *),\n.markdown-body input[type=checkbox]:focus-visible:not(wcp-preview *) {\n  outline-offset: 0;\n}\n\n.markdown-body kbd:not(wcp-preview *) {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\n  line-height: 10px;\n  color: var(--wcp-github-markdown-color-fg-default);\n  vertical-align: middle;\n  background-color: var(--wcp-github-markdown-color-canvas-subtle);\n  border: solid 1px var(--wcp-github-markdown-color-neutral-muted);\n  border-bottom-color: var(--wcp-github-markdown-color-neutral-muted);\n  border-radius: 6px;\n  box-shadow: inset 0 -1px 0 var(--wcp-github-markdown-color-neutral-muted);\n}\n\n.markdown-body h2:not(wcp-preview *) {\n  font-weight: 600;\n  font-weight: var(--base-text-weight-semibold, 600);\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid var(--wcp-github-markdown-color-border-muted);\n}\n\n.markdown-body h3:not(wcp-preview *) {\n  font-weight: 600;\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 1.25em;\n}\n\n.markdown-body h4:not(wcp-preview *) {\n  font-weight: 600;\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 1em;\n}\n\n.markdown-body h5:not(wcp-preview *) {\n  font-weight: 600;\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 0.875em;\n}\n\n.markdown-body h6:not(wcp-preview *) {\n  font-weight: 600;\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 0.85em;\n  color: var(--wcp-github-markdown-color-fg-muted);\n}\n\n.markdown-body p:not(wcp-preview *) {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.markdown-body blockquote:not(wcp-preview *) {\n  margin: 0;\n  padding: 0 1em;\n  color: var(--wcp-github-markdown-color-fg-muted);\n  border-left: 0.25em solid var(--wcp-github-markdown-color-border-default);\n}\n\n.markdown-body ul:not(wcp-preview *),\n.markdown-body ol:not(wcp-preview *) {\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 2em;\n}\n\n.markdown-body ol ol:not(wcp-preview *),\n.markdown-body ul ol:not(wcp-preview *) {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol:not(wcp-preview *),\n.markdown-body ul ol ol:not(wcp-preview *),\n.markdown-body ol ul ol:not(wcp-preview *),\n.markdown-body ol ol ol:not(wcp-preview *) {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd:not(wcp-preview *) {\n  margin-left: 0;\n}\n\n.markdown-body tt:not(wcp-preview *),\n.markdown-body code:not(wcp-preview *),\n.markdown-body samp:not(wcp-preview *) {\n  font-family: ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre:not(wcp-preview *) {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-family: ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\n  font-size: 12px;\n  word-wrap: normal;\n}\n\n.markdown-body .octicon:not(wcp-preview *) {\n  overflow: visible !important;\n}\n\n.markdown-body .octicon:not(wcp-preview *) {\n  display: inline-block;\n  vertical-align: text-bottom;\n  fill: currentColor;\n}\n\n.markdown-body input:not(wcp-preview *)::-webkit-outer-spin-button,\n.markdown-body input:not(wcp-preview *)::-webkit-inner-spin-button {\n  margin: 0;\n  -webkit-appearance: none;\n  appearance: none;\n}\n\n.markdown-body::before {\n  display: table;\n  content: \"\";\n}\n\n.markdown-body::after {\n  display: table;\n  clear: both;\n  content: \"\";\n}\n\n.markdown-body > *:not(wcp-preview *):first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body > *:not(wcp-preview *):last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body a:not(wcp-preview *):not([href]) {\n  color: inherit;\n  -webkit-text-decoration: none;\n  text-decoration: none;\n}\n\n.markdown-body .absent:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-danger-fg);\n}\n\n.markdown-body .anchor:not(wcp-preview *) {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.markdown-body .anchor:not(wcp-preview *):focus {\n  outline: none;\n}\n\n.markdown-body p:not(wcp-preview *),\n.markdown-body blockquote:not(wcp-preview *),\n.markdown-body ul:not(wcp-preview *),\n.markdown-body ol:not(wcp-preview *),\n.markdown-body dl:not(wcp-preview *),\n.markdown-body table:not(wcp-preview *),\n.markdown-body pre:not(wcp-preview *),\n.markdown-body details:not(wcp-preview *) {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body blockquote:not(wcp-preview *) > :first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote:not(wcp-preview *) > :last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body summary:not(wcp-preview *) h1,\n.markdown-body summary:not(wcp-preview *) h2,\n.markdown-body summary:not(wcp-preview *) h3,\n.markdown-body summary:not(wcp-preview *) h4,\n.markdown-body summary:not(wcp-preview *) h5,\n.markdown-body summary:not(wcp-preview *) h6 {\n  display: inline-block;\n}\n\n.markdown-body summary:not(wcp-preview *) h1 .anchor,\n.markdown-body summary:not(wcp-preview *) h2 .anchor,\n.markdown-body summary:not(wcp-preview *) h3 .anchor,\n.markdown-body summary:not(wcp-preview *) h4 .anchor,\n.markdown-body summary:not(wcp-preview *) h5 .anchor,\n.markdown-body summary:not(wcp-preview *) h6 .anchor {\n  margin-left: -40px;\n}\n\n.markdown-body summary:not(wcp-preview *) h1,\n.markdown-body summary:not(wcp-preview *) h2 {\n  padding-bottom: 0;\n  border-bottom: 0;\n}\n\n.markdown-body ul:not(wcp-preview *).no-list,\n.markdown-body ol:not(wcp-preview *).no-list {\n  padding: 0;\n  list-style-type: none;\n}\n\n.markdown-body ol:not(wcp-preview *)[type=a] {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body ol:not(wcp-preview *)[type=A] {\n  list-style-type: upper-alpha;\n}\n\n.markdown-body ol:not(wcp-preview *)[type=i] {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ol:not(wcp-preview *)[type=I] {\n  list-style-type: upper-roman;\n}\n\n.markdown-body ol:not(wcp-preview *)[type=\"1\"] {\n  list-style-type: decimal;\n}\n\n.markdown-body div > ol:not(wcp-preview *):not([type]) {\n  list-style-type: decimal;\n}\n\n.markdown-body ul ul:not(wcp-preview *),\n.markdown-body ul ol:not(wcp-preview *),\n.markdown-body ol ol:not(wcp-preview *),\n.markdown-body ol ul:not(wcp-preview *) {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li:not(wcp-preview *) > p {\n  margin-top: 16px;\n}\n\n.markdown-body li:not(wcp-preview *) + li {\n  margin-top: 0.25em;\n}\n\n.markdown-body dl:not(wcp-preview *) {\n  padding: 0;\n}\n\n.markdown-body dl:not(wcp-preview *) dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n\n.markdown-body dl:not(wcp-preview *) dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body table:not(wcp-preview *) th {\n  font-weight: 600;\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n\n.markdown-body table:not(wcp-preview *) th,\n.markdown-body table:not(wcp-preview *) td {\n  padding: 6px 13px;\n  border: 1px solid var(--wcp-github-markdown-color-border-default);\n}\n\n.markdown-body table:not(wcp-preview *) tr {\n  background-color: var(--wcp-github-markdown-color-canvas-default);\n  border-top: 1px solid var(--wcp-github-markdown-color-border-muted);\n}\n\n.markdown-body table:not(wcp-preview *) tr:nth-child(2n) {\n  background-color: var(--wcp-github-markdown-color-canvas-subtle);\n}\n\n.markdown-body table:not(wcp-preview *) img {\n  background-color: transparent;\n}\n\n.markdown-body img:not(wcp-preview *)[align=right] {\n  padding-left: 20px;\n}\n\n.markdown-body img:not(wcp-preview *)[align=left] {\n  padding-right: 20px;\n}\n\n.markdown-body .emoji:not(wcp-preview *) {\n  max-width: none;\n  vertical-align: text-top;\n  background-color: transparent;\n}\n\n.markdown-body span:not(wcp-preview *).frame {\n  display: block;\n  overflow: hidden;\n}\n\n.markdown-body span:not(wcp-preview *).frame > span {\n  display: block;\n  float: left;\n  width: auto;\n  padding: 7px;\n  margin: 13px 0 0;\n  overflow: hidden;\n  border: 1px solid var(--wcp-github-markdown-color-border-default);\n}\n\n.markdown-body span:not(wcp-preview *).frame > span img {\n  display: block;\n  float: left;\n}\n\n.markdown-body span:not(wcp-preview *).frame span span {\n  display: block;\n  padding: 5px 0 0;\n  clear: both;\n  color: var(--wcp-github-markdown-color-fg-default);\n}\n\n.markdown-body span:not(wcp-preview *).align-center {\n  display: block;\n  overflow: hidden;\n  clear: both;\n}\n\n.markdown-body span:not(wcp-preview *).align-center > span {\n  display: block;\n  margin: 13px auto 0;\n  overflow: hidden;\n  text-align: center;\n}\n\n.markdown-body span:not(wcp-preview *).align-center span img {\n  margin: 0 auto;\n  text-align: center;\n}\n\n.markdown-body span:not(wcp-preview *).align-right {\n  display: block;\n  overflow: hidden;\n  clear: both;\n}\n\n.markdown-body span:not(wcp-preview *).align-right > span {\n  display: block;\n  margin: 13px 0 0;\n  overflow: hidden;\n  text-align: right;\n}\n\n.markdown-body span:not(wcp-preview *).align-right span img {\n  margin: 0;\n  text-align: right;\n}\n\n.markdown-body span:not(wcp-preview *).float-left {\n  display: block;\n  float: left;\n  margin-right: 13px;\n  overflow: hidden;\n}\n\n.markdown-body span:not(wcp-preview *).float-left span {\n  margin: 13px 0 0;\n}\n\n.markdown-body span:not(wcp-preview *).float-right {\n  display: block;\n  float: right;\n  margin-left: 13px;\n  overflow: hidden;\n}\n\n.markdown-body span:not(wcp-preview *).float-right > span {\n  display: block;\n  margin: 13px auto 0;\n  overflow: hidden;\n  text-align: right;\n}\n\n.markdown-body code:not(wcp-preview *),\n.markdown-body tt:not(wcp-preview *) {\n  padding: 0.2em 0.4em;\n  margin: 0;\n  font-size: 85%;\n  white-space: break-spaces;\n  background-color: var(--wcp-github-markdown-color-neutral-muted);\n  border-radius: 6px;\n}\n\n.markdown-body code br:not(wcp-preview *),\n.markdown-body tt br:not(wcp-preview *) {\n  display: none;\n}\n\n.markdown-body del:not(wcp-preview *) code {\n  text-decoration: inherit;\n}\n\n.markdown-body samp:not(wcp-preview *) {\n  font-size: 85%;\n}\n\n.markdown-body pre:not(wcp-preview *) code {\n  font-size: 100%;\n}\n\n.markdown-body pre:not(wcp-preview *) > code {\n  padding: 0;\n  margin: 0;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .highlight:not(wcp-preview *) {\n  margin-bottom: 16px;\n}\n\n.markdown-body .highlight:not(wcp-preview *) pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body .highlight pre:not(wcp-preview *),\n.markdown-body pre:not(wcp-preview *) {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: var(--wcp-github-markdown-color-canvas-subtle);\n  border-radius: 6px;\n}\n\n.markdown-body pre code:not(wcp-preview *),\n.markdown-body pre tt:not(wcp-preview *) {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body .csv-data:not(wcp-preview *) td,\n.markdown-body .csv-data:not(wcp-preview *) th {\n  padding: 5px;\n  overflow: hidden;\n  font-size: 12px;\n  line-height: 1;\n  text-align: left;\n  white-space: nowrap;\n}\n\n.markdown-body .csv-data:not(wcp-preview *) .blob-num {\n  padding: 10px 8px 9px;\n  text-align: right;\n  background: var(--wcp-github-markdown-color-canvas-default);\n  border: 0;\n}\n\n.markdown-body .csv-data:not(wcp-preview *) tr {\n  border-top: 0;\n}\n\n.markdown-body .csv-data:not(wcp-preview *) th {\n  font-weight: 600;\n  font-weight: var(--base-text-weight-semibold, 600);\n  background: var(--wcp-github-markdown-color-canvas-subtle);\n  border-top: 0;\n}\n\n.markdown-body [data-footnote-ref]:not(wcp-preview *)::before {\n  content: \"[\";\n}\n\n.markdown-body [data-footnote-ref]:not(wcp-preview *)::after {\n  content: \"]\";\n}\n\n.markdown-body .footnotes:not(wcp-preview *) {\n  font-size: 12px;\n  color: var(--wcp-github-markdown-color-fg-muted);\n  border-top: 1px solid var(--wcp-github-markdown-color-border-default);\n}\n\n.markdown-body .footnotes:not(wcp-preview *) ol {\n  padding-left: 16px;\n}\n\n.markdown-body .footnotes:not(wcp-preview *) ol ul {\n  display: inline-block;\n  padding-left: 16px;\n  margin-top: 16px;\n}\n\n.markdown-body .footnotes:not(wcp-preview *) li {\n  position: relative;\n}\n\n.markdown-body .footnotes:not(wcp-preview *) li:target {\n  color: var(--wcp-github-markdown-color-fg-default);\n}\n\n.markdown-body .footnotes:not(wcp-preview *) li:target::before {\n  position: absolute;\n  top: -8px;\n  right: -8px;\n  bottom: -8px;\n  left: -24px;\n  pointer-events: none;\n  content: \"\";\n  border: 2px solid var(--wcp-github-markdown-color-accent-emphasis);\n  border-radius: 6px;\n}\n\n.markdown-body .footnotes:not(wcp-preview *) .data-footnote-backref g-emoji {\n  font-family: monospace;\n}\n\n.markdown-body .pl-c:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-comment);\n}\n\n.markdown-body .pl-c1:not(wcp-preview *),\n.markdown-body .pl-s .pl-v:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-constant);\n}\n\n.markdown-body .pl-e:not(wcp-preview *),\n.markdown-body .pl-en:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-entity);\n}\n\n.markdown-body .pl-smi:not(wcp-preview *),\n.markdown-body .pl-s .pl-s1:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-storage-modifier-import);\n}\n\n.markdown-body .pl-ent:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-entity-tag);\n}\n\n.markdown-body .pl-k:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-keyword);\n}\n\n.markdown-body .pl-s:not(wcp-preview *),\n.markdown-body .pl-pds:not(wcp-preview *),\n.markdown-body .pl-s .pl-pse .pl-s1:not(wcp-preview *),\n.markdown-body .pl-sr:not(wcp-preview *),\n.markdown-body .pl-sr .pl-cce:not(wcp-preview *),\n.markdown-body .pl-sr .pl-sre:not(wcp-preview *),\n.markdown-body .pl-sr .pl-sra:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-string);\n}\n\n.markdown-body .pl-v:not(wcp-preview *),\n.markdown-body .pl-smw:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-variable);\n}\n\n.markdown-body .pl-bu:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-brackethighlighter-unmatched);\n}\n\n.markdown-body .pl-ii:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-invalid-illegal-text);\n  background-color: var(--wcp-github-markdown-color-prettylights-syntax-invalid-illegal-bg);\n}\n\n.markdown-body .pl-c2:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-carriage-return-text);\n  background-color: var(--wcp-github-markdown-color-prettylights-syntax-carriage-return-bg);\n}\n\n.markdown-body .pl-sr:not(wcp-preview *) .pl-cce {\n  font-weight: bold;\n  color: var(--wcp-github-markdown-color-prettylights-syntax-string-regexp);\n}\n\n.markdown-body .pl-ml:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-markup-list);\n}\n\n.markdown-body .pl-mh:not(wcp-preview *),\n.markdown-body .pl-mh .pl-en:not(wcp-preview *),\n.markdown-body .pl-ms:not(wcp-preview *) {\n  font-weight: bold;\n  color: var(--wcp-github-markdown-color-prettylights-syntax-markup-heading);\n}\n\n.markdown-body .pl-mi:not(wcp-preview *) {\n  font-style: italic;\n  color: var(--wcp-github-markdown-color-prettylights-syntax-markup-italic);\n}\n\n.markdown-body .pl-mb:not(wcp-preview *) {\n  font-weight: bold;\n  color: var(--wcp-github-markdown-color-prettylights-syntax-markup-bold);\n}\n\n.markdown-body .pl-md:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-markup-deleted-text);\n  background-color: var(--wcp-github-markdown-color-prettylights-syntax-markup-deleted-bg);\n}\n\n.markdown-body .pl-mi1:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-markup-inserted-text);\n  background-color: var(--wcp-github-markdown-color-prettylights-syntax-markup-inserted-bg);\n}\n\n.markdown-body .pl-mc:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-markup-changed-text);\n  background-color: var(--wcp-github-markdown-color-prettylights-syntax-markup-changed-bg);\n}\n\n.markdown-body .pl-mi2:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-markup-ignored-text);\n  background-color: var(--wcp-github-markdown-color-prettylights-syntax-markup-ignored-bg);\n}\n\n.markdown-body .pl-mdr:not(wcp-preview *) {\n  font-weight: bold;\n  color: var(--wcp-github-markdown-color-prettylights-syntax-meta-diff-range);\n}\n\n.markdown-body .pl-ba:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-brackethighlighter-angle);\n}\n\n.markdown-body .pl-sg:not(wcp-preview *) {\n  color: var(--wcp-github-markdown-color-prettylights-syntax-sublimelinter-gutter-mark);\n}\n\n.markdown-body .pl-corl:not(wcp-preview *) {\n  -webkit-text-decoration: underline;\n  text-decoration: underline;\n  color: var(--wcp-github-markdown-color-prettylights-syntax-constant-other-reference-link);\n}\n\n.markdown-body g-emoji:not(wcp-preview *) {\n  font-style: normal !important;\n}\n\n.markdown-body g-emoji:not(wcp-preview *) {\n  display: inline-block;\n  min-width: 1ch;\n  font-family: \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 1em;\n  font-weight: 400;\n  font-weight: var(--base-text-weight-normal, 400);\n  line-height: 1;\n  vertical-align: -0.075em;\n}\n\n.markdown-body g-emoji:not(wcp-preview *) img {\n  width: 1em;\n  height: 1em;\n}\n\n.markdown-body .task-list-item:not(wcp-preview *) {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item:not(wcp-preview *) label {\n  font-weight: 400;\n  font-weight: var(--base-text-weight-normal, 400);\n}\n\n.markdown-body .task-list-item:not(wcp-preview *).enabled label {\n  cursor: pointer;\n}\n\n.markdown-body .task-list-item:not(wcp-preview *) + .task-list-item {\n  margin-top: 4px;\n}\n\n.markdown-body .task-list-item:not(wcp-preview *) .handle {\n  display: none;\n}\n\n.markdown-body .task-list-item-checkbox:not(wcp-preview *) {\n  margin: 0 0.2em 0.25em -1.4em;\n  vertical-align: middle;\n}\n\n.markdown-body .contains-task-list:not(wcp-preview *) {\n  position: relative;\n}\n\n[dir=\"rtl\"] .markdown-body .contains-task-list:not(wcp-preview *) .task-list-item-checkbox {\n  margin: 0 -1.6em 0.25em 0.2em;\n}\n\n.markdown-body .contains-task-list:not(wcp-preview *):hover .task-list-item-convert-container, .markdown-body .contains-task-list:not(wcp-preview *):focus-within .task-list-item-convert-container {\n  display: block;\n  width: auto;\n  height: 24px;\n  overflow: visible;\n  clip: auto;\n}\n\n.markdown-body :not(wcp-preview *)::-webkit-calendar-picker-indicator {\n  filter: invert(50%);\n}\n\n.markdown-body {\n  color: var(---wcp-readme-color);\n}\n.markdown-body wcp-readme-example:not(wcp-preview *) pre {\n  background: 0;\n  margin: 0;\n  padding: 0;\n}\n.markdown-body table:not(wcp-preview *) tr {\n  background-color: transparent;\n}\n.markdown-body img:not(wcp-preview *) {\n  background: none;\n}\n.markdown-body h1:not(wcp-preview *), .markdown-body h2:not(wcp-preview *), .markdown-body h3:not(wcp-preview *), .markdown-body h4:not(wcp-preview *), .markdown-body h5:not(wcp-preview *), .markdown-body h6:not(wcp-preview *), .markdown-body p:not(wcp-preview *), .markdown-body ul:not(wcp-preview *), .markdown-body ol:not(wcp-preview *), .markdown-body dl:not(wcp-preview *) {\n  max-width: var(--wcp-layout-flowing-width);\n}\n.markdown-body table:not(wcp-preview *), .markdown-body pre:not(wcp-preview *), .markdown-body blockquote:not(wcp-preview *) {\n  max-width: min(100%, var(--wcp-layout-fixed-width));\n}\n.markdown-body .target:not(wcp-preview *) {\n  -webkit-text-decoration: underline;\n  text-decoration: underline;\n}\n.markdown-body a:not(wcp-preview *) {\n  color: var(---wcp-readme-color-accent);\n}\n.markdown-body blockquote:not(wcp-preview *) {\n  border-left-color: var(---wcp-readme-border-color);\n  color: var(---wcp-readme-color-muted);\n}\n.markdown-body table td:not(wcp-preview *), .markdown-body table th:not(wcp-preview *), .markdown-body table tr:not(wcp-preview *),\n.markdown-body h1:not(wcp-preview *), .markdown-body h2:not(wcp-preview *), .markdown-body h3:not(wcp-preview *), .markdown-body h4:not(wcp-preview *), .markdown-body h5:not(wcp-preview *), .markdown-body h6:not(wcp-preview *) {\n  border-color: var(---wcp-readme-border-color);\n}\n.markdown-body > pre,\n.markdown-body table:not(wcp-preview *) tr:nth-child(2n) {\n  background-color: var(---wcp-readme-highlight-background);\n}\n.markdown-body wcp-code:not(wcp-preview *) pre {\n  background-color: var(---wcp-readme-highlight-background);\n  border-radius: var(--wcp-border-radius);\n  width: -moz-fit-content;\n  width: fit-content;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { LitElement, type TemplateResult, unsafeCSS } from 'lit';\nimport { html } from 'lit/static-html.js';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\nimport { renderMarkdown } from '@/utils/markdown.utils.js';\nimport { until } from 'lit/directives/until.js';\n\nimport styles from './readme.component.scss';\n\n/**\n * Displays a Readme file by its URL.\n *\n * @element wcp-readme\n *\n * @cssprop --wcp-readme-dark-color - Text color of the readme in dark mode.\n * @cssprop --wcp-readme-dark-color-accent - Accent text color (e.g. links) of the readme in dark mode.\n * @cssprop --wcp-readme-dark-color-muted - Muted text color of the readme in dark mode.\n * @cssprop --wcp-readme-dark-border-color - Border color of the readme in dark mode.\n * @cssprop --wcp-readme-dark-highlight-background - Background color of highlighted table rows in dark mode.\n *\n * @cssprop --wcp-readme-light-color - Text color of the readme in light mode.\n * @cssprop --wcp-readme-light-color-accent - Accent text color (e.g. links) of the readme in light mode.\n * @cssprop --wcp-readme-light-color-muted - Muted text color of the readme in light mode.\n * @cssprop --wcp-readme-light-border-color - Border color of the readme in light mode.\n * @cssprop --wcp-readme-light-highlight-background - Background color of highlighted table rows in light mode.\n *\n * @example\n * ```html\n * <wcp-readme markdown=\"# Hello _World_!\"></wcp-readme>\n * ```\n */\n@customElement('wcp-readme')\nexport class Readme extends ColorSchemable(LitElement) {\n  static override readonly styles = unsafeCSS(styles);\n\n  @property({ type: Boolean, reflect: true, attribute: 'add-code-preview' })\n  readonly showCodePreview = false;\n\n  @property({ type: String, reflect: true, attribute: 'preview-tag-name' })\n  readonly previewTagName?: string;\n\n  @property({ type: String })\n  readonly markdown = '';\n\n  @property({ type: String, reflect: true })\n  readonly hash?: string;\n\n  protected override updated() {\n    if (this.hash) {\n      this.scrollToId(this.hash);\n    }\n  }\n\n  scrollToId(section: string) {\n    const element = this.querySelector(`#${section}`);\n    if (element !== null) {\n      // as hash routing may be used, we can't rely on the `:target` pseudo selector, thus we set a class\n      this.querySelectorAll('.target').forEach((el) => el.classList.remove('target'));\n      element.classList.add('target');\n\n      // finally, scroll to the element\n      element.scrollIntoView({ behavior: 'auto' });\n    }\n  }\n\n  protected override render(): TemplateResult {\n    return html`\n      <div class=\"markdown-body\" .innerHTML=\"${until(renderMarkdown(this.markdown, this.showCodePreview, this.previewTagName))}\"></div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-readme': Readme;\n  }\n}\n", "export default `\n:host {\n  ---wcp-readme-frame-spacing: var(--wcp-readme-frame-spacing, calc(var(--wcp-base-size, 10px) * 1) calc(var(--wcp-base-size, 10px) * 2));\n}\n\n:host {\n  display: block;\n  padding: var(---wcp-readme-frame-spacing);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2NsaWVudC9jbGllbnQvc3JjL2NvbXBvbmVudHMvZmVhdHVyZXMvcmVhZG1lLWZyYW1lL3JlYWRtZS1mcmFtZS5jb21wb25lbnQuc2NzcyIsIjpob3N0JTIwJTdCJTBBJTIwJTIwLS0td2NwLXJlYWRtZS1mcmFtZS1zcGFjaW5nOiUyMHZhcigtLXdjcC1yZWFkbWUtZnJhbWUtc3BhY2luZywlMjBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsJTIwMTBweCklMjAqJTIwMSklMjBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsJTIwMTBweCklMjAqJTIwMikpOyUwQSU3RCUwQSUwQTpob3N0JTIwJTdCJTBBJTIwJTIwZGlzcGxheTolMjBibG9jazslMEElMjAlMjBwYWRkaW5nOiUyMHZhcigtLS13Y3AtcmVhZG1lLWZyYW1lLXNwYWNpbmcpOyUwQSU3RCUwQS8qJTIzJTIwc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWU2IyOTBJam9pTDJodmJXVXZjblZ1Ym1WeUwzZHZjbXN2WTJ4cFpXNTBMMk5zYVdWdWRDOXpjbU12WTI5dGNHOXVaVzUwY3k5bVpXRjBkWEpsY3k5eVpXRmtiV1V0Wm5KaGJXVWlMQ0p6YjNWeVkyVnpJanBiSW5KbFlXUnRaUzFtY21GdFpTNWpiMjF3YjI1bGJuUXVjMk56Y3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGSFFUdEZRVU5GT3pzN1FVRkhSanRGUVVORk8wVkJRMEVpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKQWRYTmxJQ2RBTDNOMGVXeGxjeTkxZEdsc2N5Y2dZWE1nZFhScGJITTdYRzVjYmk4dklIQnlaWFIwYVdWeUxXbG5ibTl5WlZ4dU9taHZjM1FnZTF4dUlDQXRMUzEzWTNBdGNtVmhaRzFsTFdaeVlXMWxMWE53WVdOcGJtYzZJSFpoY2lndExYZGpjQzF5WldGa2JXVXRabkpoYldVdGMzQmhZMmx1Wnl3Z0kzdDFkR2xzY3k1emFYcGxLREVwSUhWMGFXeHpMbk5wZW1Vb01pbDlLVHRjYm4xY2JseHVPbWh2YzNRZ2UxeHVJQ0JrYVhOd2JHRjVPaUJpYkc5amF6dGNiaUFnY0dGa1pHbHVaem9nZG1GeUtDMHRMWGRqY0MxeVpXRmtiV1V0Wm5KaGJXVXRjM0JoWTJsdVp5azdYRzU5WEc0aVhYMD0lMjAqIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBO0VBQ0UsdUlBQUE7QUNGRjs7QURLQTtFQUNFLGNBQUE7RUFDQSx5Q0FBQTtBQ0ZGIiwiZmlsZSI6Ijpob3N0IHtcbiAgLS0td2NwLXJlYWRtZS1mcmFtZS1zcGFjaW5nOiB2YXIoLS13Y3AtcmVhZG1lLWZyYW1lLXNwYWNpbmcsIGNhbGModmFyKC0td2NwLWJhc2Utc2l6ZSwgMTBweCkgKiAxKSBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsIDEwcHgpICogMikpO1xufVxuXG46aG9zdCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwYWRkaW5nOiB2YXIoLS0td2NwLXJlYWRtZS1mcmFtZS1zcGFjaW5nKTtcbn1cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTltWldGMGRYSmxjeTl5WldGa2JXVXRabkpoYldVaUxDSnpiM1Z5WTJWeklqcGJJbkpsWVdSdFpTMW1jbUZ0WlM1amIyMXdiMjVsYm5RdWMyTnpjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZIUVR0RlFVTkZPenM3UVVGSFJqdEZRVU5GTzBWQlEwRWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpBZFhObElDZEFMM04wZVd4bGN5OTFkR2xzY3ljZ1lYTWdkWFJwYkhNN1hHNWNiaTh2SUhCeVpYUjBhV1Z5TFdsbmJtOXlaVnh1T21odmMzUWdlMXh1SUNBdExTMTNZM0F0Y21WaFpHMWxMV1p5WVcxbExYTndZV05wYm1jNklIWmhjaWd0TFhkamNDMXlaV0ZrYldVdFpuSmhiV1V0YzNCaFkybHVaeXdnSTN0MWRHbHNjeTV6YVhwbEtERXBJSFYwYVd4ekxuTnBlbVVvTWlsOUtUdGNibjFjYmx4dU9taHZjM1FnZTF4dUlDQmthWE53YkdGNU9pQmliRzlqYXp0Y2JpQWdjR0ZrWkdsdVp6b2dkbUZ5S0MwdExYZGpjQzF5WldGa2JXVXRabkpoYldVdGMzQmhZMmx1WnlrN1hHNTlYRzRpWFgwPSAqIiwic291cmNlc0NvbnRlbnQiOlsiQHVzZSAnQC9zdHlsZXMvdXRpbHMnIGFzIHV0aWxzO1xuXG4vLyBwcmV0dGllci1pZ25vcmVcbjpob3N0IHtcbiAgLS0td2NwLXJlYWRtZS1mcmFtZS1zcGFjaW5nOiB2YXIoLS13Y3AtcmVhZG1lLWZyYW1lLXNwYWNpbmcsICN7dXRpbHMuc2l6ZSgxKSB1dGlscy5zaXplKDIpfSk7XG59XG5cbjpob3N0IHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBhZGRpbmc6IHZhcigtLS13Y3AtcmVhZG1lLWZyYW1lLXNwYWNpbmcpO1xufVxuIiwiOmhvc3Qge1xuICAtLS13Y3AtcmVhZG1lLWZyYW1lLXNwYWNpbmc6IHZhcigtLXdjcC1yZWFkbWUtZnJhbWUtc3BhY2luZywgY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCAxMHB4KSAqIDEpIGNhbGModmFyKC0td2NwLWJhc2Utc2l6ZSwgMTBweCkgKiAyKSk7XG59XG5cbjpob3N0IHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBhZGRpbmc6IHZhcigtLS13Y3AtcmVhZG1lLWZyYW1lLXNwYWNpbmcpO1xufVxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVlNiMjkwSWpvaUwyaHZiV1V2Y25WdWJtVnlMM2R2Y21zdlkyeHBaVzUwTDJOc2FXVnVkQzl6Y21NdlkyOXRjRzl1Wlc1MGN5OW1aV0YwZFhKbGN5OXlaV0ZrYldVdFpuSmhiV1VpTENKemIzVnlZMlZ6SWpwYkluSmxZV1J0WlMxbWNtRnRaUzVqYjIxd2IyNWxiblF1YzJOemN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkhRVHRGUVVORk96czdRVUZIUmp0RlFVTkZPMFZCUTBFaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SkFkWE5sSUNkQUwzTjBlV3hsY3k5MWRHbHNjeWNnWVhNZ2RYUnBiSE03WEc1Y2JpOHZJSEJ5WlhSMGFXVnlMV2xuYm05eVpWeHVPbWh2YzNRZ2UxeHVJQ0F0TFMxM1kzQXRjbVZoWkcxbExXWnlZVzFsTFhOd1lXTnBibWM2SUhaaGNpZ3RMWGRqY0MxeVpXRmtiV1V0Wm5KaGJXVXRjM0JoWTJsdVp5d2dJM3QxZEdsc2N5NXphWHBsS0RFcElIVjBhV3h6TG5OcGVtVW9NaWw5S1R0Y2JuMWNibHh1T21odmMzUWdlMXh1SUNCa2FYTndiR0Y1T2lCaWJHOWphenRjYmlBZ2NHRmtaR2x1WnpvZ2RtRnlLQzB0TFhkamNDMXlaV0ZrYldVdFpuSmhiV1V0YzNCaFkybHVaeWs3WEc1OVhHNGlYWDA9ICovIl19 */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\nimport styles from './readme-frame.component.scss';\n\n/**\n * @example\n * ```html\n * <wcp-readme-frame></wcp-readme-frame>\n * ```\n *\n * @slot - The readme frame is usually filled with a readme element.\n *\n * @cssprop --wcp-readme-frame-spacing - Inner padding of the preview frame\n */\n@customElement('wcp-readme-frame')\nexport class ReadmeFrame extends LitElement {\n  static override readonly styles = unsafeCSS(styles);\n\n  protected override render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-readme-frame': ReadmeFrame;\n  }\n}\n", "// Preview Frame Plugins may emit a plugin data change event.\ndeclare global {\n  interface HTMLElementEventMap {\n    'wcp-stage-plugin:data-change': CustomEvent<string>;\n    'wcp-preview-plugin:data-change': CustomEvent<string>;\n  }\n}\n\n/**\n * Each plugin must implement this interface.\n * Additionally, the plugin may emits an event, notifying about\n * availability changes. This custom event should be named\n * `wcp-plugin:availability-change` and should carry a\n * boolean flag about its availability in the `detail` property.\n */\nexport type Plugin = Element & {\n  readonly name: string;\n  readonly label: string;\n  readonly available: boolean;\n  readonly previewTagName: string;\n};\n\n/**\n * Type to be used with stage plugins.\n */\nexport type StagePlugin = Plugin & {\n  readonly data?: string;\n};\n\n/**\n * Type to be used with preview plugins.\n */\nexport type PreviewPlugin = Plugin & {\n  readonly container: HTMLElement;\n};\n\nexport function isPlugin(element: Element): element is Plugin {\n  return 'name' in element && 'label' in element && 'available' in element;\n}\n\nexport function findAllPlugins(slot: HTMLSlotElement): Plugin[] {\n  return slot.assignedElements().filter(isPlugin);\n}\n", "export default `\n:host {\n  ---wcp-stage-dark-background: var(--wcp-stage-dark-background, var(--wcp-color-blue-13));\n  ---wcp-stage-dark-border-color: var(--wcp-stage-border-color, var(--wcp-color-grey-24));\n  ---wcp-stage-dark-color: var(--wcp-stage-dark-color, var(--wcp-color-grey-96));\n  ---wcp-stage-light-background: var(--wcp-stage-light-background, var(--wcp-color-grey-96));\n  ---wcp-stage-light-border-color: var(--wcp-stage-border-color, var(--wcp-color-grey-80));\n  ---wcp-stage-light-color: var(--wcp-stage-light-color, var(--wcp-color-grey-17));\n  ---wcp-stage-border-radius: var(--wcp-stage-border-radius, var(--wcp-border-radius));\n  ---wcp-stage-border-width: var(--wcp-stage-border-width, 1px);\n  ---wcp-stage-distance: var(--wcp-stage-distance, 0 calc(var(--wcp-base-size, 10px) * 1));\n  ---wcp-stage-spacing: var(--wcp-stage-spacing, 0 calc(var(--wcp-base-size, 10px) * 1) calc(var(--wcp-base-size, 10px) * 1));\n}\n@media (prefers-color-scheme: dark) {\n  :host {\n    ---wcp-stage-background: var(---wcp-stage-dark-background);\n    ---wcp-stage-border-color: var(---wcp-stage-dark-border-color);\n    ---wcp-stage-color: var(---wcp-stage-dark-color);\n  }\n}\n:host([color-scheme=dark]):host {\n  ---wcp-stage-background: var(---wcp-stage-dark-background);\n  ---wcp-stage-border-color: var(---wcp-stage-dark-border-color);\n  ---wcp-stage-color: var(---wcp-stage-dark-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    ---wcp-stage-background: var(---wcp-stage-light-background);\n    ---wcp-stage-border-color: var(---wcp-stage-light-border-color);\n    ---wcp-stage-color: var(---wcp-stage-light-color);\n  }\n}\n:host([color-scheme=light]):host {\n  ---wcp-stage-background: var(---wcp-stage-light-background);\n  ---wcp-stage-border-color: var(---wcp-stage-light-border-color);\n  ---wcp-stage-color: var(---wcp-stage-light-color);\n}\n\n:host {\n  flex: 1 1 auto;\n  flex-direction: column;\n  display: flex;\n  overflow: auto;\n  padding: var(---wcp-stage-spacing);\n  background-color: var(---wcp-stage-background);\n  color: var(---wcp-stage-color);\n}\n@media (min-width: 768px) {\n  :host {\n    margin: var(---wcp-stage-distance);\n    border-top-right-radius: var(---wcp-stage-border-radius);\n    border-top-left-radius: var(---wcp-stage-border-radius);\n  }\n}\n\nwcp-tabs {\n  flex: 1 0 auto;\n}\nwcp-tabs::part(tablist) {\n  position: sticky;\n  top: 0;\n  z-index: 1;\n  background-color: var(---wcp-stage-background);\n  min-height: calc(10px * 4);\n  min-height: calc(var(--wcp-base-size, 10px) * 4);\n}\nwcp-tabs::part(element-panel:not([hidden])) {\n  display: flex;\n  flex: 1 0 auto;\n  flex-direction: column;\n}\n\nslot:not([name]) {\n  display: none;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { map } from 'lit/directives/map.js';\nimport { when } from 'lit/directives/when.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\nimport { type StagePlugin, findAllPlugins } from '@/utils/plugin.utils.js';\n\nimport styles from './stage.component.scss';\n\n/**\n * @example\n * ```html\n * <wcp-stage></wcp-stage>\n * ```\n *\n * @slot - The preview frame can be filled with any number of plugins. The plugins will be rendered as tabs.\n *\n * @cssprop --wcp-stage-dark-background - Background color of the preview frame in dark mode\n * @cssprop --wcp-stage-dark-border-color - Border color of the example section in dark mode\n * @cssprop --wcp-stage-dark-color - Text color of the preview frame in dark mode\n *\n * @cssprop --wcp-stage-light-background - Background color of the preview frame in light mode\n * @cssprop --wcp-stage-light-border-color - Border color of the example section in light mode\n * @cssprop --wcp-stage-light-color - Text color of the preview frame in light mode\n *\n * @cssprop --wcp-stage-border-radius - Border radius of the preview frame\n * @cssprop --wcp-stage-border-width - Border width of the preview frame\n * @cssprop --wcp-stage-distance - Outer margin of the preview frame\n * @cssprop --wcp-stage-spacing - Inner padding of the preview frame\n */\n@customElement('wcp-stage')\nexport class Stage extends ColorSchemable(LitElement) {\n  static override readonly styles = unsafeCSS(styles);\n\n  @state()\n  private _plugins: StagePlugin[] = [];\n\n  @state()\n  private _tabs: HTMLElementTagNameMap['wcp-tabs']['tabs'] = {};\n\n  @property({ type: String, reflect: true, attribute: 'active-plugin' })\n  private readonly activePlugin?: string;\n\n  emitActivePluginChange(activePlugin?: string) {\n    const event = new CustomEvent('wcp-stage:active-plugin-change', {\n      detail: activePlugin,\n      bubbles: true,\n      cancelable: true,\n      composed: true,\n    });\n    this.dispatchEvent(event);\n  }\n\n  @eventOptions({ passive: true })\n  protected handleSlotChange(event: Event) {\n    const slot = event.target as HTMLSlotElement;\n    const plugins = findAllPlugins(slot);\n\n    // once the plugins are slotted into their respective targets, the slot\n    // change listener may be called again with an empty result set\n    if (plugins.length > 0) {\n      this._plugins = plugins;\n      this._plugins.forEach((tab) => tab.setAttribute('slot', tab.name));\n\n      this.preparePluginTabs();\n      this.alignActivePlugin();\n    }\n  }\n\n  @eventOptions({ passive: true })\n  protected handleAvailabilityChange() {\n    // this event has been triggered by a plugin changing its availability\n    // state, therefore we need to re-evaluate the tabs\n    this.preparePluginTabs();\n    this.alignActivePlugin();\n  }\n\n  @eventOptions({ passive: true })\n  protected handleActiveTabChange(event: CustomEvent<string>) {\n    const { currentTarget, target, detail: activePlugin } = event;\n\n    // re-emit as our own event\n    if (currentTarget === target) {\n      this.emitActivePluginChange(activePlugin);\n    }\n  }\n\n  protected preparePluginTabs() {\n    this._tabs = this._plugins.reduce(\n      (tabs, { available, label, name }) => ({ ...tabs, [name]: { label, disabled: !available } }),\n      {}\n    );\n  }\n\n  protected alignActivePlugin() {\n    let alignedActivePlugin = this.activePlugin;\n\n    // either the active tab is not set...\n    if (this.activePlugin === undefined && this._plugins.length > 0) {\n      // ... then we try to set the first available...\n      alignedActivePlugin = this._plugins.filter(({ available }) => available)?.[0]?.name;\n    }\n    // ... or the active tab is not available anymore...\n    else if (!this._plugins.find(({ name }) => name === this.activePlugin)?.available) {\n      // ... then we need to set the first available tab\n      alignedActivePlugin = this._plugins.find(({ available }) => available)?.name;\n    }\n\n    // if there are changes, let them know! \uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08\n    if (alignedActivePlugin !== this.activePlugin) {\n      this.emitActivePluginChange(alignedActivePlugin);\n    }\n  }\n\n  protected override render(): TemplateResult {\n    return html`\n      ${when(\n        this._plugins.length > 0,\n        () => html`\n          <wcp-tabs\n            .tabs=\"${this._tabs}\"\n            active-tab=\"${ifDefined(this.activePlugin)}\"\n            @wcp-tabs:active-tab-change=\"${this.handleActiveTabChange}\"\n            @wcp-stage-plugin:availability-change=\"${this.handleAvailabilityChange}\"\n          >\n            ${map(this._plugins, ({ name }) => html`<slot name=\"${name}\" slot=\"${name}\"></slot>`)}\n          </wcp-tabs>\n        `\n      )}\n      <slot @slotchange=\"${this.handleSlotChange}\"></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    'wcp-stage:active-plugin-change': CustomEvent<string>;\n  }\n  interface HTMLElementTagNameMap {\n    'wcp-stage': Stage;\n  }\n}\n", "export default `\n`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, eventOptions } from 'lit/decorators.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\n\nimport styles from './toggle-color-scheme.component.scss';\n\n/**\n * Shows a button to toggle the desired color-scheme.\n *\n * @example\n * ```html\n * <wcp-toggle-color-scheme></wcp-toggle-color-scheme>\n * ```\n */\n@customElement('wcp-toggle-color-scheme')\nexport class ToggleColorScheme extends ColorSchemable(LitElement) {\n  static override readonly styles = unsafeCSS(styles);\n\n  @eventOptions({ passive: true })\n  handleButtonClick() {\n    const detail = this.colorScheme === 'dark' ? 'light' : 'dark';\n    const event = new CustomEvent('wcp-color-scheme:toggle', { detail });\n    window.dispatchEvent(event);\n  }\n\n  protected override render(): TemplateResult {\n    return html`\n      <wcp-button kind=\"icon\" @click=\"${this.handleButtonClick}\">\n        <wcp-icon name=\"${this.colorScheme === 'dark' ? 'moon' : 'sun'}\"></wcp-icon>\n      </wcp-button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-toggle-color-scheme': ToggleColorScheme;\n  }\n}\n", "export default `\n`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, eventOptions } from 'lit/decorators.js';\n\nimport styles from './toggle-sidebar.component.scss';\n\n/**\n * Shows a button to toggle sidebar.\n *\n * @example\n * ```html\n * <wcp-toggle-sidebar></wcp-toggle-sidebar>\n * ```\n */\n@customElement('wcp-toggle-sidebar')\nexport class ToggleSidebar extends LitElement {\n  static override readonly styles = unsafeCSS(styles);\n\n  @eventOptions({ passive: true })\n  handleButtonClick() {\n    window.dispatchEvent(new CustomEvent('wcp-aside:toggle'));\n  }\n\n  protected override render(): TemplateResult {\n    return html`\n      <wcp-button kind=\"icon\" @click=\"${this.handleButtonClick}\"><wcp-icon name=\"menu\"></wcp-icon></wcp-button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-toggle-sidebar': ToggleSidebar;\n  }\n}\n", "export default `\n:host {\n  ---wcp-topbar-dark-color: var(--wcp-topbar-dark-color, var(--wcp-color-grey-96));\n  ---wcp-topbar-light-color: var(--wcp-topbar-light-color, var(--wcp-color-grey-17));\n  ---wcp-topbar-height: var(--wcp-topbar-height, calc(var(--wcp-base-size, 10px) * 5));\n  ---wcp-topbar-spacing: var(--wcp-topbar-spacing, calc(var(--wcp-base-size, 10px) * 0.5) calc(var(--wcp-base-size, 10px) * 1));\n}\n\n:host {\n  display: flex;\n  flex-direction: row;\n  flex: 0 0 auto;\n  box-sizing: border-box;\n  height: var(---wcp-topbar-height);\n  padding: var(---wcp-topbar-spacing);\n}\n@media (prefers-color-scheme: dark) {\n  :host {\n    color: var(---wcp-topbar-dark-color);\n  }\n}\n:host([color-scheme=dark]):host {\n  color: var(---wcp-topbar-dark-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    color: var(---wcp-topbar-light-color);\n  }\n}\n:host([color-scheme=light]):host {\n  color: var(---wcp-topbar-light-color);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2NsaWVudC9jbGllbnQvc3JjL2NvbXBvbmVudHMvZmVhdHVyZXMvdG9wYmFyL3RvcGJhci5jb21wb25lbnQuc2NzcyIsIjpob3N0JTIwJTdCJTBBJTIwJTIwLS0td2NwLXRvcGJhci1kYXJrLWNvbG9yOiUyMHZhcigtLXdjcC10b3BiYXItZGFyay1jb2xvciwlMjB2YXIoLS13Y3AtY29sb3ItZ3JleS05NikpOyUwQSUyMCUyMC0tLXdjcC10b3BiYXItbGlnaHQtY29sb3I6JTIwdmFyKC0td2NwLXRvcGJhci1saWdodC1jb2xvciwlMjB2YXIoLS13Y3AtY29sb3ItZ3JleS0xNykpOyUwQSUyMCUyMC0tLXdjcC10b3BiYXItaGVpZ2h0OiUyMHZhcigtLXdjcC10b3BiYXItaGVpZ2h0LCUyMGNhbGModmFyKC0td2NwLWJhc2Utc2l6ZSwlMjAxMHB4KSUyMColMjA1KSk7JTBBJTIwJTIwLS0td2NwLXRvcGJhci1zcGFjaW5nOiUyMHZhcigtLXdjcC10b3BiYXItc3BhY2luZywlMjBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsJTIwMTBweCklMjAqJTIwMC41KSUyMGNhbGModmFyKC0td2NwLWJhc2Utc2l6ZSwlMjAxMHB4KSUyMColMjAxKSk7JTBBJTdEJTBBJTBBOmhvc3QlMjAlN0IlMEElMjAlMjBkaXNwbGF5OiUyMGZsZXg7JTBBJTIwJTIwZmxleC1kaXJlY3Rpb246JTIwcm93OyUwQSUyMCUyMGZsZXg6JTIwMCUyMDAlMjBhdXRvOyUwQSUyMCUyMGJveC1zaXppbmc6JTIwYm9yZGVyLWJveDslMEElMjAlMjBoZWlnaHQ6JTIwdmFyKC0tLXdjcC10b3BiYXItaGVpZ2h0KTslMEElMjAlMjBwYWRkaW5nOiUyMHZhcigtLS13Y3AtdG9wYmFyLXNwYWNpbmcpOyUwQSU3RCUwQUBtZWRpYSUyMChwcmVmZXJzLWNvbG9yLXNjaGVtZTolMjBkYXJrKSUyMCU3QiUwQSUyMCUyMDpob3N0JTIwJTdCJTBBJTIwJTIwJTIwJTIwY29sb3I6JTIwdmFyKC0tLXdjcC10b3BiYXItZGFyay1jb2xvcik7JTBBJTIwJTIwJTdEJTBBJTdEJTBBOmhvc3QoJTVCY29sb3Itc2NoZW1lPWRhcmslNUQpOmhvc3QlMjAlN0IlMEElMjAlMjBjb2xvcjolMjB2YXIoLS0td2NwLXRvcGJhci1kYXJrLWNvbG9yKTslMEElN0QlMEElMEFAbWVkaWElMjAocHJlZmVycy1jb2xvci1zY2hlbWU6JTIwbGlnaHQpJTIwJTdCJTBBJTIwJTIwOmhvc3QlMjAlN0IlMEElMjAlMjAlMjAlMjBjb2xvcjolMjB2YXIoLS0td2NwLXRvcGJhci1saWdodC1jb2xvcik7JTBBJTIwJTIwJTdEJTBBJTdEJTBBOmhvc3QoJTVCY29sb3Itc2NoZW1lPWxpZ2h0JTVEKTpob3N0JTIwJTdCJTBBJTIwJTIwY29sb3I6JTIwdmFyKC0tLXdjcC10b3BiYXItbGlnaHQtY29sb3IpOyUwQSU3RCUwQS8qJTIzJTIwc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWU2IyOTBJam9pTDJodmJXVXZjblZ1Ym1WeUwzZHZjbXN2WTJ4cFpXNTBMMk5zYVdWdWRDOXpjbU12WTI5dGNHOXVaVzUwY3k5bVpXRjBkWEpsY3k5MGIzQmlZWElpTENKemIzVnlZMlZ6SWpwYkluUnZjR0poY2k1amIyMXdiMjVsYm5RdWMyTnpjeUlzSWk0dUx5NHVMeTR1TDNOMGVXeGxjeTl0YVhocGJuTXZZMjlzYjNJdGMyTm9aVzFsTG0xcGVHbHVMbk5qYzNNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlIwRTdSVUZEUlR0RlFVTkJPMFZCUlVFN1JVRkRRVHM3TzBGQlIwWTdSVUZEUlR0RlFVTkJPMFZCUTBFN1JVRkZRVHRGUVVOQk8wVkJRMEU3TzBGRFRVRTdSVVJpUmp0SlFWVkpPenM3UVVObVJUdEZSR1ZHT3pzN1FVTkhSanRGUkdKR08wbEJWVWs3T3p0QlEyWkZPMFZFWlVZaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SkFkWE5sSUNkQUwzTjBlV3hsY3k5MWRHbHNjeWNnWVhNZ2RYUnBiSE03WEc1Y2JpOHZJSEJ5WlhSMGFXVnlMV2xuYm05eVpWeHVPbWh2YzNRZ2UxeHVJQ0F0TFMxM1kzQXRkRzl3WW1GeUxXUmhjbXN0WTI5c2IzSTZJSFpoY2lndExYZGpjQzEwYjNCaVlYSXRaR0Z5YXkxamIyeHZjaXdnZG1GeUtDMHRkMk53TFdOdmJHOXlMV2R5WlhrdE9UWXBLVHRjYmlBZ0xTMHRkMk53TFhSdmNHSmhjaTFzYVdkb2RDMWpiMnh2Y2pvZ2RtRnlLQzB0ZDJOd0xYUnZjR0poY2kxc2FXZG9kQzFqYjJ4dmNpd2dkbUZ5S0MwdGQyTndMV052Ykc5eUxXZHlaWGt0TVRjcEtUdGNibHh1SUNBdExTMTNZM0F0ZEc5d1ltRnlMV2hsYVdkb2REb2dkbUZ5S0MwdGQyTndMWFJ2Y0dKaGNpMW9aV2xuYUhRc0lDTjdkWFJwYkhNdWMybDZaU2cxS1gwcE8xeHVJQ0F0TFMxM1kzQXRkRzl3WW1GeUxYTndZV05wYm1jNklIWmhjaWd0TFhkamNDMTBiM0JpWVhJdGMzQmhZMmx1Wnl3Z0kzdDFkR2xzY3k1emFYcGxLQzQxS1NCMWRHbHNjeTV6YVhwbEtERXBmU2s3WEc1OVhHNWNianBvYjNOMElIdGNiaUFnWkdsemNHeGhlVG9nWm14bGVEdGNiaUFnWm14bGVDMWthWEpsWTNScGIyNDZJSEp2ZHp0Y2JpQWdabXhsZURvZ01DQXdJR0YxZEc4N1hHNWNiaUFnWW05NExYTnBlbWx1WnpvZ1ltOXlaR1Z5TFdKdmVEdGNiaUFnYUdWcFoyaDBPaUIyWVhJb0xTMHRkMk53TFhSdmNHSmhjaTFvWldsbmFIUXBPMXh1SUNCd1lXUmthVzVuT2lCMllYSW9MUzB0ZDJOd0xYUnZjR0poY2kxemNHRmphVzVuS1R0Y2JseHVJQ0JBYVc1amJIVmtaU0IxZEdsc2N5NWpiMnh2Y2kxelkyaGxiV1VvS1NCMWMybHVaeUFvSkdOdmJHOXlMWE5qYUdWdFpTa2dlMXh1SUNBZ0lHTnZiRzl5T2lCMllYSW9MUzB0ZDJOd0xYUnZjR0poY2kwamV5UmpiMnh2Y2kxelkyaGxiV1Y5TFdOdmJHOXlLVHRjYmlBZ2ZWeHVmVnh1SWl3aVFHMXBlR2x1SUhkcGRHZ3RZMjlzYjNJdGMyTm9aVzFsTFdGMGRISnBZblYwWlNna1kyOXNiM0l0YzJOb1pXMWxMQ0FrYzJoaFpHOTNPaUIwY25WbExDQWtZWEJ3Wlc1a09pQm1ZV3h6WlNrZ2UxeHVJQ0FrYlc5a2FXWnBaWEk2SUNkYlkyOXNiM0l0YzJOb1pXMWxQVndpSTNza1kyOXNiM0l0YzJOb1pXMWxmVndpWFNjN1hHNGdJQ1J0YjJScFptbGxaRG9nYVdZb0pITm9ZV1J2ZHl3Z0p6cG9iM04wS0NON0pHMXZaR2xtYVdWeWZTa25MQ0FrYlc5a2FXWnBaWElwTzF4dVhHNGdJRUJwWmlBa1lYQndaVzVrSUQwOUlISnZiM1FnZTF4dUlDQWdJRUJoZEMxeWIyOTBJQ2gzYVhSb2IzVjBPaUJoYkd3cElIdGNiaUFnSUNBZ0lDTjdKRzF2WkdsbWFXVmtmU043Sm4wZ2UxeHVJQ0FnSUNBZ0lDQkFZMjl1ZEdWdWREdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDBnUUdWc2MyVWdhV1lnSkdGd2NHVnVaQ0E5UFNCd1lYSmxiblFnZTF4dUlDQWdJRUJoZEMxeWIyOTBJQ2gzYVhSb2IzVjBPaUJoYkd3cElIdGNiaUFnSUNBZ0lDTjdKbjBqZXlSdGIyUnBabWxsWkgwZ2UxeHVJQ0FnSUNBZ0lDQkFZMjl1ZEdWdWREdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDBnUUdWc2MyVWdlMXh1SUNBZ0lDTjdKRzF2WkdsbWFXVmtmU0I3WEc0Z0lDQWdJQ0JBWTI5dWRHVnVkRHRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1UUcxcGVHbHVJSGRwZEdndFkyOXNiM0l0YzJOb1pXMWxMVzFsWkdsaEtDUmpiMnh2Y2kxelkyaGxiV1VwSUh0Y2JpQWdRRzFsWkdsaElDaHdjbVZtWlhKekxXTnZiRzl5TFhOamFHVnRaVG9nSTNza1kyOXNiM0l0YzJOb1pXMWxmU2tnZTF4dUlDQWdJRUJqYjI1MFpXNTBPMXh1SUNCOVhHNTlYRzVjYmk4dkx5QkRiMnh2Y2lCVFkyaGxiV1VnYldsNGFXNWNiaTh2THlCQmJHeHZkM01nZEc4Z1lYQndiSGtnYzNSNWJHVnpJR0poYzJWa0lHOXVJSFJvWlNCUFV5QmtaV1poZFd4MElHTnZiRzl5SUhOamFHVnRaU0JoYm1RZ1lXNGdiM1psY25KcFpHVWdZbmtnWVc0Z1lYUjBjbWxpZFhSbElITmxiR1ZqZEc5eVhHNUFiV2w0YVc0Z1kyOXNiM0l0YzJOb1pXMWxLRnh1SUNBa2MyaGhaRzkzT2lCMGNuVmxMRnh1SUNBa1lYQndaVzVrT2lCeWIyOTBMRnh1SUNBa1kyOXNiM0l0YzJOb1pXMWxjem9nS0Z4dUlDQWdJR1JoY21zc1hHNGdJQ0FnYkdsbmFIUXNYRzRnSUNsY2Jpa2dlMXh1SUNCQVpXRmphQ0FrWTI5c2IzSXRjMk5vWlcxbElHbHVJQ1JqYjJ4dmNpMXpZMmhsYldWeklIdGNiaUFnSUNBdkx5QnRZWFJqYUNCMGJ5QnRaV1JwWVNCeGRXVnllU0JpZVNCUFV5QmtaV1poZFd4MFhHNGdJQ0FnUUdsdVkyeDFaR1VnZDJsMGFDMWpiMnh2Y2kxelkyaGxiV1V0YldWa2FXRW9KR052Ykc5eUxYTmphR1Z0WlNrZ2UxeHVJQ0FnSUNBZ1FHTnZiblJsYm5RZ0tDUmpiMnh2Y2kxelkyaGxiV1VwTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJ0WVhSamFDQjBieUJsYkdWdFpXNTBJR0YwZEhKcFluVjBaU0J6Wld4bFkzUnZjaUJ2ZG1WeWNtbGtaVnh1SUNBZ0lFQnBibU5zZFdSbElIZHBkR2d0WTI5c2IzSXRjMk5vWlcxbExXRjBkSEpwWW5WMFpTZ2tZMjlzYjNJdGMyTm9aVzFsTENBa2MyaGhaRzkzTENBa1lYQndaVzVrS1NCN1hHNGdJQ0FnSUNCQVkyOXVkR1Z1ZENBb0pHTnZiRzl5TFhOamFHVnRaU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzRpWFgwPSUyMCoiLCIvaG9tZS9ydW5uZXIvd29yay9jbGllbnQvY2xpZW50L3NyYy9zdHlsZXMvbWl4aW5zL2NvbG9yLXNjaGVtZS5taXhpbi5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBO0VBQ0UsZ0ZBQUE7RUFDQSxrRkFBQTtFQUVBLG9GQUFBO0VBQ0EsNkhBQUE7QUNIRjs7QURNQTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUNBLGNBQUE7RUFFQSxzQkFBQTtFQUNBLGlDQUFBO0VBQ0EsbUNBQUE7QUNKRjtBQ1VFO0VGYkY7SUFVSSxvQ0FBQTtFQ0hGO0FBQ0Y7QUNiTTtFRmVGLG9DQUFBO0FDQ0o7O0FDRUU7RUZiRjtJQVVJLHFDQUFBO0VDTUY7QUFDRjtBQ3RCTTtFRmVGLHFDQUFBO0FDVUoiLCJmaWxlIjoiOmhvc3Qge1xuICAtLS13Y3AtdG9wYmFyLWRhcmstY29sb3I6IHZhcigtLXdjcC10b3BiYXItZGFyay1jb2xvciwgdmFyKC0td2NwLWNvbG9yLWdyZXktOTYpKTtcbiAgLS0td2NwLXRvcGJhci1saWdodC1jb2xvcjogdmFyKC0td2NwLXRvcGJhci1saWdodC1jb2xvciwgdmFyKC0td2NwLWNvbG9yLWdyZXktMTcpKTtcbiAgLS0td2NwLXRvcGJhci1oZWlnaHQ6IHZhcigtLXdjcC10b3BiYXItaGVpZ2h0LCBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsIDEwcHgpICogNSkpO1xuICAtLS13Y3AtdG9wYmFyLXNwYWNpbmc6IHZhcigtLXdjcC10b3BiYXItc3BhY2luZywgY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCAxMHB4KSAqIDAuNSkgY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCAxMHB4KSAqIDEpKTtcbn1cblxuOmhvc3Qge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBmbGV4OiAwIDAgYXV0bztcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgaGVpZ2h0OiB2YXIoLS0td2NwLXRvcGJhci1oZWlnaHQpO1xuICBwYWRkaW5nOiB2YXIoLS0td2NwLXRvcGJhci1zcGFjaW5nKTtcbn1cbkBtZWRpYSAocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspIHtcbiAgOmhvc3Qge1xuICAgIGNvbG9yOiB2YXIoLS0td2NwLXRvcGJhci1kYXJrLWNvbG9yKTtcbiAgfVxufVxuOmhvc3QoW2NvbG9yLXNjaGVtZT1kYXJrXSk6aG9zdCB7XG4gIGNvbG9yOiB2YXIoLS0td2NwLXRvcGJhci1kYXJrLWNvbG9yKTtcbn1cblxuQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogbGlnaHQpIHtcbiAgOmhvc3Qge1xuICAgIGNvbG9yOiB2YXIoLS0td2NwLXRvcGJhci1saWdodC1jb2xvcik7XG4gIH1cbn1cbjpob3N0KFtjb2xvci1zY2hlbWU9bGlnaHRdKTpob3N0IHtcbiAgY29sb3I6IHZhcigtLS13Y3AtdG9wYmFyLWxpZ2h0LWNvbG9yKTtcbn1cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTltWldGMGRYSmxjeTkwYjNCaVlYSWlMQ0p6YjNWeVkyVnpJanBiSW5SdmNHSmhjaTVqYjIxd2IyNWxiblF1YzJOemN5SXNJaTR1THk0dUx5NHVMM04wZVd4bGN5OXRhWGhwYm5NdlkyOXNiM0l0YzJOb1pXMWxMbTFwZUdsdUxuTmpjM01pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUjBFN1JVRkRSVHRGUVVOQk8wVkJSVUU3UlVGRFFUczdPMEZCUjBZN1JVRkRSVHRGUVVOQk8wVkJRMEU3UlVGRlFUdEZRVU5CTzBWQlEwRTdPMEZEVFVFN1JVUmlSanRKUVZWSk96czdRVU5tUlR0RlJHVkdPenM3UVVOSFJqdEZSR0pHTzBsQlZVazdPenRCUTJaRk8wVkVaVVlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKQWRYTmxJQ2RBTDNOMGVXeGxjeTkxZEdsc2N5Y2dZWE1nZFhScGJITTdYRzVjYmk4dklIQnlaWFIwYVdWeUxXbG5ibTl5WlZ4dU9taHZjM1FnZTF4dUlDQXRMUzEzWTNBdGRHOXdZbUZ5TFdSaGNtc3RZMjlzYjNJNklIWmhjaWd0TFhkamNDMTBiM0JpWVhJdFpHRnlheTFqYjJ4dmNpd2dkbUZ5S0MwdGQyTndMV052Ykc5eUxXZHlaWGt0T1RZcEtUdGNiaUFnTFMwdGQyTndMWFJ2Y0dKaGNpMXNhV2RvZEMxamIyeHZjam9nZG1GeUtDMHRkMk53TFhSdmNHSmhjaTFzYVdkb2RDMWpiMnh2Y2l3Z2RtRnlLQzB0ZDJOd0xXTnZiRzl5TFdkeVpYa3RNVGNwS1R0Y2JseHVJQ0F0TFMxM1kzQXRkRzl3WW1GeUxXaGxhV2RvZERvZ2RtRnlLQzB0ZDJOd0xYUnZjR0poY2kxb1pXbG5hSFFzSUNON2RYUnBiSE11YzJsNlpTZzFLWDBwTzF4dUlDQXRMUzEzWTNBdGRHOXdZbUZ5TFhOd1lXTnBibWM2SUhaaGNpZ3RMWGRqY0MxMGIzQmlZWEl0YzNCaFkybHVaeXdnSTN0MWRHbHNjeTV6YVhwbEtDNDFLU0IxZEdsc2N5NXphWHBsS0RFcGZTazdYRzU5WEc1Y2JqcG9iM04wSUh0Y2JpQWdaR2x6Y0d4aGVUb2dabXhsZUR0Y2JpQWdabXhsZUMxa2FYSmxZM1JwYjI0NklISnZkenRjYmlBZ1pteGxlRG9nTUNBd0lHRjFkRzg3WEc1Y2JpQWdZbTk0TFhOcGVtbHVaem9nWW05eVpHVnlMV0p2ZUR0Y2JpQWdhR1ZwWjJoME9pQjJZWElvTFMwdGQyTndMWFJ2Y0dKaGNpMW9aV2xuYUhRcE8xeHVJQ0J3WVdSa2FXNW5PaUIyWVhJb0xTMHRkMk53TFhSdmNHSmhjaTF6Y0dGamFXNW5LVHRjYmx4dUlDQkFhVzVqYkhWa1pTQjFkR2xzY3k1amIyeHZjaTF6WTJobGJXVW9LU0IxYzJsdVp5QW9KR052Ykc5eUxYTmphR1Z0WlNrZ2UxeHVJQ0FnSUdOdmJHOXlPaUIyWVhJb0xTMHRkMk53TFhSdmNHSmhjaTBqZXlSamIyeHZjaTF6WTJobGJXVjlMV052Ykc5eUtUdGNiaUFnZlZ4dWZWeHVJaXdpUUcxcGVHbHVJSGRwZEdndFkyOXNiM0l0YzJOb1pXMWxMV0YwZEhKcFluVjBaU2drWTI5c2IzSXRjMk5vWlcxbExDQWtjMmhoWkc5M09pQjBjblZsTENBa1lYQndaVzVrT2lCbVlXeHpaU2tnZTF4dUlDQWtiVzlrYVdacFpYSTZJQ2RiWTI5c2IzSXRjMk5vWlcxbFBWd2lJM3NrWTI5c2IzSXRjMk5vWlcxbGZWd2lYU2M3WEc0Z0lDUnRiMlJwWm1sbFpEb2dhV1lvSkhOb1lXUnZkeXdnSnpwb2IzTjBLQ043SkcxdlpHbG1hV1Z5ZlNrbkxDQWtiVzlrYVdacFpYSXBPMXh1WEc0Z0lFQnBaaUFrWVhCd1pXNWtJRDA5SUhKdmIzUWdlMXh1SUNBZ0lFQmhkQzF5YjI5MElDaDNhWFJvYjNWME9pQmhiR3dwSUh0Y2JpQWdJQ0FnSUNON0pHMXZaR2xtYVdWa2ZTTjdKbjBnZTF4dUlDQWdJQ0FnSUNCQVkyOXVkR1Z1ZER0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMGdRR1ZzYzJVZ2FXWWdKR0Z3Y0dWdVpDQTlQU0J3WVhKbGJuUWdlMXh1SUNBZ0lFQmhkQzF5YjI5MElDaDNhWFJvYjNWME9pQmhiR3dwSUh0Y2JpQWdJQ0FnSUNON0puMGpleVJ0YjJScFptbGxaSDBnZTF4dUlDQWdJQ0FnSUNCQVkyOXVkR1Z1ZER0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMGdRR1ZzYzJVZ2UxeHVJQ0FnSUNON0pHMXZaR2xtYVdWa2ZTQjdYRzRnSUNBZ0lDQkFZMjl1ZEdWdWREdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVRRzFwZUdsdUlIZHBkR2d0WTI5c2IzSXRjMk5vWlcxbExXMWxaR2xoS0NSamIyeHZjaTF6WTJobGJXVXBJSHRjYmlBZ1FHMWxaR2xoSUNod2NtVm1aWEp6TFdOdmJHOXlMWE5qYUdWdFpUb2dJM3NrWTI5c2IzSXRjMk5vWlcxbGZTa2dlMXh1SUNBZ0lFQmpiMjUwWlc1ME8xeHVJQ0I5WEc1OVhHNWNiaTh2THlCRGIyeHZjaUJUWTJobGJXVWdiV2w0YVc1Y2JpOHZMeUJCYkd4dmQzTWdkRzhnWVhCd2JIa2djM1I1YkdWeklHSmhjMlZrSUc5dUlIUm9aU0JQVXlCa1pXWmhkV3gwSUdOdmJHOXlJSE5qYUdWdFpTQmhibVFnWVc0Z2IzWmxjbkpwWkdVZ1lua2dZVzRnWVhSMGNtbGlkWFJsSUhObGJHVmpkRzl5WEc1QWJXbDRhVzRnWTI5c2IzSXRjMk5vWlcxbEtGeHVJQ0FrYzJoaFpHOTNPaUIwY25WbExGeHVJQ0FrWVhCd1pXNWtPaUJ5YjI5MExGeHVJQ0FrWTI5c2IzSXRjMk5vWlcxbGN6b2dLRnh1SUNBZ0lHUmhjbXNzWEc0Z0lDQWdiR2xuYUhRc1hHNGdJQ2xjYmlrZ2UxeHVJQ0JBWldGamFDQWtZMjlzYjNJdGMyTm9aVzFsSUdsdUlDUmpiMnh2Y2kxelkyaGxiV1Z6SUh0Y2JpQWdJQ0F2THlCdFlYUmphQ0IwYnlCdFpXUnBZU0J4ZFdWeWVTQmllU0JQVXlCa1pXWmhkV3gwWEc0Z0lDQWdRR2x1WTJ4MVpHVWdkMmwwYUMxamIyeHZjaTF6WTJobGJXVXRiV1ZrYVdFb0pHTnZiRzl5TFhOamFHVnRaU2tnZTF4dUlDQWdJQ0FnUUdOdmJuUmxiblFnS0NSamIyeHZjaTF6WTJobGJXVXBPMXh1SUNBZ0lIMWNiaUFnSUNBdkx5QnRZWFJqYUNCMGJ5QmxiR1Z0Wlc1MElHRjBkSEpwWW5WMFpTQnpaV3hsWTNSdmNpQnZkbVZ5Y21sa1pWeHVJQ0FnSUVCcGJtTnNkV1JsSUhkcGRHZ3RZMjlzYjNJdGMyTm9aVzFsTFdGMGRISnBZblYwWlNna1kyOXNiM0l0YzJOb1pXMWxMQ0FrYzJoaFpHOTNMQ0FrWVhCd1pXNWtLU0I3WEc0Z0lDQWdJQ0JBWTI5dWRHVnVkQ0FvSkdOdmJHOXlMWE5qYUdWdFpTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNGlYWDA9ICoiLCJzb3VyY2VzQ29udGVudCI6WyJAdXNlICdAL3N0eWxlcy91dGlscycgYXMgdXRpbHM7XG5cbi8vIHByZXR0aWVyLWlnbm9yZVxuOmhvc3Qge1xuICAtLS13Y3AtdG9wYmFyLWRhcmstY29sb3I6IHZhcigtLXdjcC10b3BiYXItZGFyay1jb2xvciwgdmFyKC0td2NwLWNvbG9yLWdyZXktOTYpKTtcbiAgLS0td2NwLXRvcGJhci1saWdodC1jb2xvcjogdmFyKC0td2NwLXRvcGJhci1saWdodC1jb2xvciwgdmFyKC0td2NwLWNvbG9yLWdyZXktMTcpKTtcblxuICAtLS13Y3AtdG9wYmFyLWhlaWdodDogdmFyKC0td2NwLXRvcGJhci1oZWlnaHQsICN7dXRpbHMuc2l6ZSg1KX0pO1xuICAtLS13Y3AtdG9wYmFyLXNwYWNpbmc6IHZhcigtLXdjcC10b3BiYXItc3BhY2luZywgI3t1dGlscy5zaXplKC41KSB1dGlscy5zaXplKDEpfSk7XG59XG5cbjpob3N0IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgZmxleDogMCAwIGF1dG87XG5cbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgaGVpZ2h0OiB2YXIoLS0td2NwLXRvcGJhci1oZWlnaHQpO1xuICBwYWRkaW5nOiB2YXIoLS0td2NwLXRvcGJhci1zcGFjaW5nKTtcblxuICBAaW5jbHVkZSB1dGlscy5jb2xvci1zY2hlbWUoKSB1c2luZyAoJGNvbG9yLXNjaGVtZSkge1xuICAgIGNvbG9yOiB2YXIoLS0td2NwLXRvcGJhci0jeyRjb2xvci1zY2hlbWV9LWNvbG9yKTtcbiAgfVxufVxuIiwiOmhvc3Qge1xuICAtLS13Y3AtdG9wYmFyLWRhcmstY29sb3I6IHZhcigtLXdjcC10b3BiYXItZGFyay1jb2xvciwgdmFyKC0td2NwLWNvbG9yLWdyZXktOTYpKTtcbiAgLS0td2NwLXRvcGJhci1saWdodC1jb2xvcjogdmFyKC0td2NwLXRvcGJhci1saWdodC1jb2xvciwgdmFyKC0td2NwLWNvbG9yLWdyZXktMTcpKTtcbiAgLS0td2NwLXRvcGJhci1oZWlnaHQ6IHZhcigtLXdjcC10b3BiYXItaGVpZ2h0LCBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsIDEwcHgpICogNSkpO1xuICAtLS13Y3AtdG9wYmFyLXNwYWNpbmc6IHZhcigtLXdjcC10b3BiYXItc3BhY2luZywgY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCAxMHB4KSAqIDAuNSkgY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCAxMHB4KSAqIDEpKTtcbn1cblxuOmhvc3Qge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBmbGV4OiAwIDAgYXV0bztcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgaGVpZ2h0OiB2YXIoLS0td2NwLXRvcGJhci1oZWlnaHQpO1xuICBwYWRkaW5nOiB2YXIoLS0td2NwLXRvcGJhci1zcGFjaW5nKTtcbn1cbkBtZWRpYSAocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspIHtcbiAgOmhvc3Qge1xuICAgIGNvbG9yOiB2YXIoLS0td2NwLXRvcGJhci1kYXJrLWNvbG9yKTtcbiAgfVxufVxuOmhvc3QoW2NvbG9yLXNjaGVtZT1kYXJrXSk6aG9zdCB7XG4gIGNvbG9yOiB2YXIoLS0td2NwLXRvcGJhci1kYXJrLWNvbG9yKTtcbn1cblxuQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogbGlnaHQpIHtcbiAgOmhvc3Qge1xuICAgIGNvbG9yOiB2YXIoLS0td2NwLXRvcGJhci1saWdodC1jb2xvcik7XG4gIH1cbn1cbjpob3N0KFtjb2xvci1zY2hlbWU9bGlnaHRdKTpob3N0IHtcbiAgY29sb3I6IHZhcigtLS13Y3AtdG9wYmFyLWxpZ2h0LWNvbG9yKTtcbn1cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTltWldGMGRYSmxjeTkwYjNCaVlYSWlMQ0p6YjNWeVkyVnpJanBiSW5SdmNHSmhjaTVqYjIxd2IyNWxiblF1YzJOemN5SXNJaTR1THk0dUx5NHVMM04wZVd4bGN5OXRhWGhwYm5NdlkyOXNiM0l0YzJOb1pXMWxMbTFwZUdsdUxuTmpjM01pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUjBFN1JVRkRSVHRGUVVOQk8wVkJSVUU3UlVGRFFUczdPMEZCUjBZN1JVRkRSVHRGUVVOQk8wVkJRMEU3UlVGRlFUdEZRVU5CTzBWQlEwRTdPMEZEVFVFN1JVUmlSanRKUVZWSk96czdRVU5tUlR0RlJHVkdPenM3UVVOSFJqdEZSR0pHTzBsQlZVazdPenRCUTJaRk8wVkVaVVlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKQWRYTmxJQ2RBTDNOMGVXeGxjeTkxZEdsc2N5Y2dZWE1nZFhScGJITTdYRzVjYmk4dklIQnlaWFIwYVdWeUxXbG5ibTl5WlZ4dU9taHZjM1FnZTF4dUlDQXRMUzEzWTNBdGRHOXdZbUZ5TFdSaGNtc3RZMjlzYjNJNklIWmhjaWd0TFhkamNDMTBiM0JpWVhJdFpHRnlheTFqYjJ4dmNpd2dkbUZ5S0MwdGQyTndMV052Ykc5eUxXZHlaWGt0T1RZcEtUdGNiaUFnTFMwdGQyTndMWFJ2Y0dKaGNpMXNhV2RvZEMxamIyeHZjam9nZG1GeUtDMHRkMk53TFhSdmNHSmhjaTFzYVdkb2RDMWpiMnh2Y2l3Z2RtRnlLQzB0ZDJOd0xXTnZiRzl5TFdkeVpYa3RNVGNwS1R0Y2JseHVJQ0F0TFMxM1kzQXRkRzl3WW1GeUxXaGxhV2RvZERvZ2RtRnlLQzB0ZDJOd0xYUnZjR0poY2kxb1pXbG5hSFFzSUNON2RYUnBiSE11YzJsNlpTZzFLWDBwTzF4dUlDQXRMUzEzWTNBdGRHOXdZbUZ5TFhOd1lXTnBibWM2SUhaaGNpZ3RMWGRqY0MxMGIzQmlZWEl0YzNCaFkybHVaeXdnSTN0MWRHbHNjeTV6YVhwbEtDNDFLU0IxZEdsc2N5NXphWHBsS0RFcGZTazdYRzU5WEc1Y2JqcG9iM04wSUh0Y2JpQWdaR2x6Y0d4aGVUb2dabXhsZUR0Y2JpQWdabXhsZUMxa2FYSmxZM1JwYjI0NklISnZkenRjYmlBZ1pteGxlRG9nTUNBd0lHRjFkRzg3WEc1Y2JpQWdZbTk0TFhOcGVtbHVaem9nWW05eVpHVnlMV0p2ZUR0Y2JpQWdhR1ZwWjJoME9pQjJZWElvTFMwdGQyTndMWFJ2Y0dKaGNpMW9aV2xuYUhRcE8xeHVJQ0J3WVdSa2FXNW5PaUIyWVhJb0xTMHRkMk53TFhSdmNHSmhjaTF6Y0dGamFXNW5LVHRjYmx4dUlDQkFhVzVqYkhWa1pTQjFkR2xzY3k1amIyeHZjaTF6WTJobGJXVW9LU0IxYzJsdVp5QW9KR052Ykc5eUxYTmphR1Z0WlNrZ2UxeHVJQ0FnSUdOdmJHOXlPaUIyWVhJb0xTMHRkMk53TFhSdmNHSmhjaTBqZXlSamIyeHZjaTF6WTJobGJXVjlMV052Ykc5eUtUdGNiaUFnZlZ4dWZWeHVJaXdpUUcxcGVHbHVJSGRwZEdndFkyOXNiM0l0YzJOb1pXMWxMV0YwZEhKcFluVjBaU2drWTI5c2IzSXRjMk5vWlcxbExDQWtjMmhoWkc5M09pQjBjblZsTENBa1lYQndaVzVrT2lCbVlXeHpaU2tnZTF4dUlDQWtiVzlrYVdacFpYSTZJQ2RiWTI5c2IzSXRjMk5vWlcxbFBWd2lJM3NrWTI5c2IzSXRjMk5vWlcxbGZWd2lYU2M3WEc0Z0lDUnRiMlJwWm1sbFpEb2dhV1lvSkhOb1lXUnZkeXdnSnpwb2IzTjBLQ043SkcxdlpHbG1hV1Z5ZlNrbkxDQWtiVzlrYVdacFpYSXBPMXh1WEc0Z0lFQnBaaUFrWVhCd1pXNWtJRDA5SUhKdmIzUWdlMXh1SUNBZ0lFQmhkQzF5YjI5MElDaDNhWFJvYjNWME9pQmhiR3dwSUh0Y2JpQWdJQ0FnSUNON0pHMXZaR2xtYVdWa2ZTTjdKbjBnZTF4dUlDQWdJQ0FnSUNCQVkyOXVkR1Z1ZER0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMGdRR1ZzYzJVZ2FXWWdKR0Z3Y0dWdVpDQTlQU0J3WVhKbGJuUWdlMXh1SUNBZ0lFQmhkQzF5YjI5MElDaDNhWFJvYjNWME9pQmhiR3dwSUh0Y2JpQWdJQ0FnSUNON0puMGpleVJ0YjJScFptbGxaSDBnZTF4dUlDQWdJQ0FnSUNCQVkyOXVkR1Z1ZER0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMGdRR1ZzYzJVZ2UxeHVJQ0FnSUNON0pHMXZaR2xtYVdWa2ZTQjdYRzRnSUNBZ0lDQkFZMjl1ZEdWdWREdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVRRzFwZUdsdUlIZHBkR2d0WTI5c2IzSXRjMk5vWlcxbExXMWxaR2xoS0NSamIyeHZjaTF6WTJobGJXVXBJSHRjYmlBZ1FHMWxaR2xoSUNod2NtVm1aWEp6TFdOdmJHOXlMWE5qYUdWdFpUb2dJM3NrWTI5c2IzSXRjMk5vWlcxbGZTa2dlMXh1SUNBZ0lFQmpiMjUwWlc1ME8xeHVJQ0I5WEc1OVhHNWNiaTh2THlCRGIyeHZjaUJUWTJobGJXVWdiV2w0YVc1Y2JpOHZMeUJCYkd4dmQzTWdkRzhnWVhCd2JIa2djM1I1YkdWeklHSmhjMlZrSUc5dUlIUm9aU0JQVXlCa1pXWmhkV3gwSUdOdmJHOXlJSE5qYUdWdFpTQmhibVFnWVc0Z2IzWmxjbkpwWkdVZ1lua2dZVzRnWVhSMGNtbGlkWFJsSUhObGJHVmpkRzl5WEc1QWJXbDRhVzRnWTI5c2IzSXRjMk5vWlcxbEtGeHVJQ0FrYzJoaFpHOTNPaUIwY25WbExGeHVJQ0FrWVhCd1pXNWtPaUJ5YjI5MExGeHVJQ0FrWTI5c2IzSXRjMk5vWlcxbGN6b2dLRnh1SUNBZ0lHUmhjbXNzWEc0Z0lDQWdiR2xuYUhRc1hHNGdJQ2xjYmlrZ2UxeHVJQ0JBWldGamFDQWtZMjlzYjNJdGMyTm9aVzFsSUdsdUlDUmpiMnh2Y2kxelkyaGxiV1Z6SUh0Y2JpQWdJQ0F2THlCdFlYUmphQ0IwYnlCdFpXUnBZU0J4ZFdWeWVTQmllU0JQVXlCa1pXWmhkV3gwWEc0Z0lDQWdRR2x1WTJ4MVpHVWdkMmwwYUMxamIyeHZjaTF6WTJobGJXVXRiV1ZrYVdFb0pHTnZiRzl5TFhOamFHVnRaU2tnZTF4dUlDQWdJQ0FnUUdOdmJuUmxiblFnS0NSamIyeHZjaTF6WTJobGJXVXBPMXh1SUNBZ0lIMWNiaUFnSUNBdkx5QnRZWFJqYUNCMGJ5QmxiR1Z0Wlc1MElHRjBkSEpwWW5WMFpTQnpaV3hsWTNSdmNpQnZkbVZ5Y21sa1pWeHVJQ0FnSUVCcGJtTnNkV1JsSUhkcGRHZ3RZMjlzYjNJdGMyTm9aVzFsTFdGMGRISnBZblYwWlNna1kyOXNiM0l0YzJOb1pXMWxMQ0FrYzJoaFpHOTNMQ0FrWVhCd1pXNWtLU0I3WEc0Z0lDQWdJQ0JBWTI5dWRHVnVkQ0FvSkdOdmJHOXlMWE5qYUdWdFpTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNGlYWDA9ICovIiwiQG1peGluIHdpdGgtY29sb3Itc2NoZW1lLWF0dHJpYnV0ZSgkY29sb3Itc2NoZW1lLCAkc2hhZG93OiB0cnVlLCAkYXBwZW5kOiBmYWxzZSkge1xuICAkbW9kaWZpZXI6ICdbY29sb3Itc2NoZW1lPVwiI3skY29sb3Itc2NoZW1lfVwiXSc7XG4gICRtb2RpZmllZDogaWYoJHNoYWRvdywgJzpob3N0KCN7JG1vZGlmaWVyfSknLCAkbW9kaWZpZXIpO1xuXG4gIEBpZiAkYXBwZW5kID09IHJvb3Qge1xuICAgIEBhdC1yb290ICh3aXRob3V0OiBhbGwpIHtcbiAgICAgICN7JG1vZGlmaWVkfSN7Jn0ge1xuICAgICAgICBAY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gIH0gQGVsc2UgaWYgJGFwcGVuZCA9PSBwYXJlbnQge1xuICAgIEBhdC1yb290ICh3aXRob3V0OiBhbGwpIHtcbiAgICAgICN7Jn0jeyRtb2RpZmllZH0ge1xuICAgICAgICBAY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgICN7JG1vZGlmaWVkfSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHdpdGgtY29sb3Itc2NoZW1lLW1lZGlhKCRjb2xvci1zY2hlbWUpIHtcbiAgQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogI3skY29sb3Itc2NoZW1lfSkge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbi8vLyBDb2xvciBTY2hlbWUgbWl4aW5cbi8vLyBBbGxvd3MgdG8gYXBwbHkgc3R5bGVzIGJhc2VkIG9uIHRoZSBPUyBkZWZhdWx0IGNvbG9yIHNjaGVtZSBhbmQgYW4gb3ZlcnJpZGUgYnkgYW4gYXR0cmlidXRlIHNlbGVjdG9yXG5AbWl4aW4gY29sb3Itc2NoZW1lKFxuICAkc2hhZG93OiB0cnVlLFxuICAkYXBwZW5kOiByb290LFxuICAkY29sb3Itc2NoZW1lczogKFxuICAgIGRhcmssXG4gICAgbGlnaHQsXG4gIClcbikge1xuICBAZWFjaCAkY29sb3Itc2NoZW1lIGluICRjb2xvci1zY2hlbWVzIHtcbiAgICAvLyBtYXRjaCB0byBtZWRpYSBxdWVyeSBieSBPUyBkZWZhdWx0XG4gICAgQGluY2x1ZGUgd2l0aC1jb2xvci1zY2hlbWUtbWVkaWEoJGNvbG9yLXNjaGVtZSkge1xuICAgICAgQGNvbnRlbnQgKCRjb2xvci1zY2hlbWUpO1xuICAgIH1cbiAgICAvLyBtYXRjaCB0byBlbGVtZW50IGF0dHJpYnV0ZSBzZWxlY3RvciBvdmVycmlkZVxuICAgIEBpbmNsdWRlIHdpdGgtY29sb3Itc2NoZW1lLWF0dHJpYnV0ZSgkY29sb3Itc2NoZW1lLCAkc2hhZG93LCAkYXBwZW5kKSB7XG4gICAgICBAY29udGVudCAoJGNvbG9yLXNjaGVtZSk7XG4gICAgfVxuICB9XG59XG4iXX0= */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\n\nimport styles from './topbar.component.scss';\n\n/**\n * A wrapper above the preview frame content to contain various controls.\n * \n * @element wcp-topbar\n * \n * @slot - Default slot for navigation items\n * \n * @cssprop --wcp-topbar-dark-color - Text color of the controls in dark mode\n * @cssprop --wcp-topbar-light-color - Text color of the controls in light mode\n * \n * @cssprop --wcp-topbar-height - Overall height of the preview controls nav bar\n * @cssprop --wcp-topbar-spacing - Inner spacing, used as padding of the controls\n * \n * @example\n * ### Usage with controls\n * \n * ```html\n * <wcp-topbar>\n *   <wcp-toggle-sidebar></wcp-toggle-sidebar>\n *   <wcp-toggle-color-scheme></wcp-toggle-color-scheme>\n * </wcp-topbar>\n * ```\n */\n@customElement('wcp-topbar')\nexport class Topbar extends ColorSchemable(LitElement) {\n  static override readonly styles = unsafeCSS(styles);\n\n  protected override render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-topbar': Topbar;\n  }\n}\n", "export default `\n:host {\n  ---wcp-editable-hint-size: var(--wcp-editable-hint-size, 0.8em);\n  ---wcp-editable-label-size: var(--wcp-editable-label-size, 0.8em);\n  ---wcp-editable-spacing: var(--wcp-editable-spacing, calc(var(--wcp-base-size, 10px) * 0.5) calc(var(--wcp-base-size, 10px) * 1));\n  ---wcp-editable-passive-border-radius: var(--wcp-editable-passive-border-radius, 2px);\n  ---wcp-editable-passive-border-size: var(--wcp-editable-passive-border-size, 1px);\n  ---wcp-editable-active-border-radius: var(--wcp-editable-active-border-radius, 2px);\n  ---wcp-editable-active-border-size: var(--wcp-editable-active-border-size, 2px);\n  ---wcp-editable-dark-background: var(--wcp-editable-dark-background, transparent);\n  ---wcp-editable-dark-border: var(--wcp-editable-dark-border, var(--wcp-color-blue-96));\n  ---wcp-editable-dark-color: var(--wcp-editable-dark-color, var(--wcp-color-grey-96));\n  ---wcp-editable-light-background: var(--wcp-editable-light-background, transparent);\n  ---wcp-editable-light-border: var(--wcp-editable-light-border, var(--wcp-color-blue-24));\n  ---wcp-editable-light-color: var(--wcp-editable-light-color, var(--wcp-color-grey-24));\n}\n\n:host {\n  display: grid;\n  grid-template-columns: min-content 1fr min-content;\n  grid-template-areas: \"above above above\" \"before center after\" \"below below below\";\n  width: 100%;\n  ---wcp-editable-border-radius: var(---wcp-editable-passive-border-radius);\n  ---wcp-editable-border-size: var(---wcp-editable-passive-border-size);\n}\n@media (prefers-color-scheme: dark) {\n  :host {\n    ---wcp-editable-background: var(---wcp-editable-dark-background);\n    ---wcp-editable-border: var(---wcp-editable-dark-border);\n    ---wcp-editable-color: var(---wcp-editable-dark-color);\n  }\n}\n:host([color-scheme=dark]):host {\n  ---wcp-editable-background: var(---wcp-editable-dark-background);\n  ---wcp-editable-border: var(---wcp-editable-dark-border);\n  ---wcp-editable-color: var(---wcp-editable-dark-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    ---wcp-editable-background: var(---wcp-editable-light-background);\n    ---wcp-editable-border: var(---wcp-editable-light-border);\n    ---wcp-editable-color: var(---wcp-editable-light-color);\n  }\n}\n:host([color-scheme=light]):host {\n  ---wcp-editable-background: var(---wcp-editable-light-background);\n  ---wcp-editable-border: var(---wcp-editable-light-border);\n  ---wcp-editable-color: var(---wcp-editable-light-color);\n}\n\n:host(:focus-within) {\n  ---wcp-editable-border-radius: var(---wcp-editable-active-border-radius);\n  ---wcp-editable-border-size: var(---wcp-editable-active-border-size);\n}\n\nlabel {\n  grid-area: above;\n  padding: var(---wcp-editable-spacing);\n  padding-left: 0;\n  padding-right: 0;\n  font-size: var(---wcp-editable-label-size);\n}\n:required ~ label::after {\n  content: \"*\";\n}\n\n#input,\n.input,\nslot[name=before],\nslot[name=after] {\n  align-self: center;\n  transition: opacity var(--wcp-fx-default-duration) ease-out;\n  will-change: opacity;\n}\n#input:disabled,\n.input:disabled,\nslot[name=before]:disabled,\nslot[name=after]:disabled {\n  opacity: 0.5;\n}\n\n#input,\n.input {\n  grid-area: center;\n  padding: var(---wcp-editable-spacing);\n}\n\nslot[name] {\n  display: block;\n}\n\nslot[name=hint] {\n  grid-area: below;\n  font-size: var(---wcp-editable-hint-size);\n}\nslot[name=hint]::slotted([slot=hint]) {\n  padding: var(---wcp-editable-spacing);\n  padding-left: 0;\n  padding-right: 0;\n  padding-bottom: 0;\n}\n\nslot[name=before] {\n  grid-area: before;\n}\n\nslot[name=after] {\n  grid-area: after;\n}\n\n#border,\n.border {\n  grid-area: before/before/after/after;\n  display: block;\n  border: var(---wcp-editable-border-size) solid var(---wcp-editable-border);\n  border-radius: var(---wcp-editable-border-radius);\n  pointer-events: none;\n  transition: var(--wcp-fx-default-duration) ease-out;\n  transition-property: border-radius, border-width, opacity;\n  will-change: border-radius, border-width, opacity;\n}\n:disabled ~ #border,\n:disabled ~ .border {\n  opacity: 0.5;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "(function () {\n    'use strict';\n\n    const refMap = new WeakMap();\n    const validityMap = new WeakMap();\n    const hiddenInputMap = new WeakMap();\n    const internalsMap = new WeakMap();\n    const validationMessageMap = new WeakMap();\n    const formsMap = new WeakMap();\n    const shadowHostsMap = new WeakMap();\n    const formElementsMap = new WeakMap();\n    const refValueMap = new WeakMap();\n    const upgradeMap = new WeakMap();\n    const shadowRootMap = new WeakMap();\n    const validationAnchorMap = new WeakMap();\n    const documentFragmentMap = new WeakMap();\n    const connectedCallbackMap = new WeakMap();\n    const validityUpgradeMap = new WeakMap();\n\n    const aom = {\n        ariaAtomic: 'aria-atomic',\n        ariaAutoComplete: 'aria-autocomplete',\n        ariaBusy: 'aria-busy',\n        ariaChecked: 'aria-checked',\n        ariaColCount: 'aria-colcount',\n        ariaColIndex: 'aria-colindex',\n        ariaColIndexText: 'aria-colindextext',\n        ariaColSpan: 'aria-colspan',\n        ariaCurrent: 'aria-current',\n        ariaDisabled: 'aria-disabled',\n        ariaExpanded: 'aria-expanded',\n        ariaHasPopup: 'aria-haspopup',\n        ariaHidden: 'aria-hidden',\n        ariaInvalid: 'aria-invalid',\n        ariaKeyShortcuts: 'aria-keyshortcuts',\n        ariaLabel: 'aria-label',\n        ariaLevel: 'aria-level',\n        ariaLive: 'aria-live',\n        ariaModal: 'aria-modal',\n        ariaMultiLine: 'aria-multiline',\n        ariaMultiSelectable: 'aria-multiselectable',\n        ariaOrientation: 'aria-orientation',\n        ariaPlaceholder: 'aria-placeholder',\n        ariaPosInSet: 'aria-posinset',\n        ariaPressed: 'aria-pressed',\n        ariaReadOnly: 'aria-readonly',\n        ariaRelevant: 'aria-relevant',\n        ariaRequired: 'aria-required',\n        ariaRoleDescription: 'aria-roledescription',\n        ariaRowCount: 'aria-rowcount',\n        ariaRowIndex: 'aria-rowindex',\n        ariaRowIndexText: 'aria-rowindextext',\n        ariaRowSpan: 'aria-rowspan',\n        ariaSelected: 'aria-selected',\n        ariaSetSize: 'aria-setsize',\n        ariaSort: 'aria-sort',\n        ariaValueMax: 'aria-valuemax',\n        ariaValueMin: 'aria-valuemin',\n        ariaValueNow: 'aria-valuenow',\n        ariaValueText: 'aria-valuetext',\n        role: 'role'\n    };\n    const initAom = (ref, internals) => {\n        for (let key in aom) {\n            internals[key] = null;\n            let closureValue = null;\n            const attributeName = aom[key];\n            Object.defineProperty(internals, key, {\n                get() {\n                    return closureValue;\n                },\n                set(value) {\n                    closureValue = value;\n                    if (ref.isConnected) {\n                        ref.setAttribute(attributeName, value);\n                    }\n                    else {\n                        upgradeMap.set(ref, internals);\n                    }\n                }\n            });\n        }\n    };\n\n    function initNode(node) {\n        const internals = internalsMap.get(node);\n        const { form } = internals;\n        initForm(node, form, internals);\n        initLabels(node, internals.labels);\n    }\n    const walkFieldset = (node, firstRender = false) => {\n        const walker = document.createTreeWalker(node, NodeFilter.SHOW_ELEMENT, {\n            acceptNode(node) {\n                return internalsMap.has(node) ?\n                    NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n            }\n        });\n        let current = walker.nextNode();\n        const isCallNecessary = (!firstRender || node.disabled);\n        while (current) {\n            if (current.formDisabledCallback && isCallNecessary) {\n                setDisabled(current, node.disabled);\n            }\n            current = walker.nextNode();\n        }\n    };\n    const disabledOrNameObserverConfig = { attributes: true, attributeFilter: ['disabled', 'name'] };\n    const disabledOrNameObserver = mutationObserverExists() ? new MutationObserver((mutationsList) => {\n        for (const mutation of mutationsList) {\n            const target = mutation.target;\n            if (mutation.attributeName === 'disabled') {\n                if (target.constructor['formAssociated']) {\n                    setDisabled(target, target.hasAttribute('disabled'));\n                }\n                else if (target.localName === 'fieldset') {\n                    walkFieldset(target);\n                }\n            }\n            if (mutation.attributeName === 'name') {\n                if (target.constructor['formAssociated']) {\n                    const internals = internalsMap.get(target);\n                    const value = refValueMap.get(target);\n                    internals.setFormValue(value);\n                }\n            }\n        }\n    }) : {};\n    function observerCallback(mutationList) {\n        mutationList.forEach(mutationRecord => {\n            const { addedNodes, removedNodes } = mutationRecord;\n            const added = Array.from(addedNodes);\n            const removed = Array.from(removedNodes);\n            added.forEach(node => {\n                if (internalsMap.has(node) && node.constructor['formAssociated']) {\n                    initNode(node);\n                }\n                if (upgradeMap.has(node)) {\n                    const internals = upgradeMap.get(node);\n                    const aomKeys = Object.keys(aom);\n                    aomKeys\n                        .filter(key => internals[key] !== null)\n                        .forEach(key => {\n                        node.setAttribute(aom[key], internals[key]);\n                    });\n                    upgradeMap.delete(node);\n                }\n                if (validityUpgradeMap.has(node)) {\n                    const internals = validityUpgradeMap.get(node);\n                    node.setAttribute('internals-valid', internals.validity.valid.toString());\n                    node.setAttribute('internals-invalid', (!internals.validity.valid).toString());\n                    node.setAttribute('aria-invalid', (!internals.validity.valid).toString());\n                    validityUpgradeMap.delete(node);\n                }\n                if (node.localName === 'form') {\n                    const formElements = formElementsMap.get(node);\n                    const walker = document.createTreeWalker(node, NodeFilter.SHOW_ELEMENT, {\n                        acceptNode(node) {\n                            return internalsMap.has(node) && !(formElements && formElements.has(node)) ?\n                                NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n                        }\n                    });\n                    let current = walker.nextNode();\n                    while (current) {\n                        initNode(current);\n                        current = walker.nextNode();\n                    }\n                }\n                if (node.localName === 'fieldset') {\n                    disabledOrNameObserver.observe?.(node, disabledOrNameObserverConfig);\n                    walkFieldset(node, true);\n                }\n            });\n            removed.forEach(node => {\n                const internals = internalsMap.get(node);\n                if (internals && hiddenInputMap.get(internals)) {\n                    removeHiddenInputs(internals);\n                }\n                if (shadowHostsMap.has(node)) {\n                    const observer = shadowHostsMap.get(node);\n                    observer.disconnect();\n                }\n            });\n        });\n    }\n    function fragmentObserverCallback(mutationList) {\n        mutationList.forEach(mutation => {\n            const { removedNodes } = mutation;\n            removedNodes.forEach(node => {\n                const observer = documentFragmentMap.get(mutation.target);\n                if (internalsMap.has(node)) {\n                    upgradeInternals(node);\n                }\n                observer.disconnect();\n            });\n        });\n    }\n    const deferUpgrade = (fragment) => {\n        const observer = new MutationObserver(fragmentObserverCallback);\n        observer.observe?.(fragment, { childList: true });\n        documentFragmentMap.set(fragment, observer);\n    };\n    mutationObserverExists() ? new MutationObserver(observerCallback) : {};\n    const observerConfig = {\n        childList: true,\n        subtree: true\n    };\n\n    const setDisabled = (ref, disabled) => {\n        ref.toggleAttribute('internals-disabled', disabled);\n        if (disabled) {\n            ref.setAttribute('aria-disabled', 'true');\n        }\n        else {\n            ref.removeAttribute('aria-disabled');\n        }\n        if (ref.formDisabledCallback) {\n            ref.formDisabledCallback.apply(ref, [disabled]);\n        }\n    };\n    const removeHiddenInputs = (internals) => {\n        const hiddenInputs = hiddenInputMap.get(internals);\n        hiddenInputs.forEach(hiddenInput => {\n            hiddenInput.remove();\n        });\n        hiddenInputMap.set(internals, []);\n    };\n    const createHiddenInput = (ref, internals) => {\n        const input = document.createElement('input');\n        input.type = 'hidden';\n        input.name = ref.getAttribute('name');\n        ref.after(input);\n        hiddenInputMap.get(internals).push(input);\n        return input;\n    };\n    const initRef = (ref, internals) => {\n        hiddenInputMap.set(internals, []);\n        disabledOrNameObserver.observe?.(ref, disabledOrNameObserverConfig);\n    };\n    const initLabels = (ref, labels) => {\n        if (labels.length) {\n            Array.from(labels).forEach(label => label.addEventListener('click', ref.click.bind(ref)));\n            let firstLabelId = labels[0].id;\n            if (!labels[0].id) {\n                firstLabelId = `${labels[0].htmlFor}_Label`;\n                labels[0].id = firstLabelId;\n            }\n            ref.setAttribute('aria-labelledby', firstLabelId);\n        }\n    };\n    const setFormValidity = (form) => {\n        const nativeControlValidity = Array.from(form.elements)\n            .filter((element) => !element.tagName.includes('-') && element.validity)\n            .map((element) => element.validity.valid);\n        const polyfilledElements = formElementsMap.get(form) || [];\n        const polyfilledValidity = Array.from(polyfilledElements)\n            .filter(control => control.isConnected)\n            .map((control) => internalsMap.get(control).validity.valid);\n        const hasInvalid = [...nativeControlValidity, ...polyfilledValidity].includes(false);\n        form.toggleAttribute('internals-invalid', hasInvalid);\n        form.toggleAttribute('internals-valid', !hasInvalid);\n    };\n    const formInputCallback = (event) => {\n        setFormValidity(findParentForm(event.target));\n    };\n    const formChangeCallback = (event) => {\n        setFormValidity(findParentForm(event.target));\n    };\n    const wireSubmitLogic = (form) => {\n        const SUBMIT_BUTTON_SELECTOR = ':is(button[type=submit], input[type=submit], button:not([type])):not([disabled])';\n        let submitButtonSelector = `${SUBMIT_BUTTON_SELECTOR}:not([form])`;\n        if (form.id) {\n            submitButtonSelector += `,${SUBMIT_BUTTON_SELECTOR}[form='${form.id}']`;\n        }\n        form.addEventListener('click', event => {\n            const target = event.target;\n            if (target.closest(submitButtonSelector)) {\n                const elements = formElementsMap.get(form);\n                if (form.noValidate) {\n                    return;\n                }\n                if (elements.size) {\n                    const nodes = Array.from(elements);\n                    const validityList = nodes\n                        .reverse()\n                        .map(node => {\n                        const internals = internalsMap.get(node);\n                        return internals.reportValidity();\n                    });\n                    if (validityList.includes(false)) {\n                        event.preventDefault();\n                    }\n                }\n            }\n        });\n    };\n    const formResetCallback = (event) => {\n        const elements = formElementsMap.get(event.target);\n        if (elements && elements.size) {\n            elements.forEach(element => {\n                if (element.constructor.formAssociated && element.formResetCallback) {\n                    element.formResetCallback.apply(element);\n                }\n            });\n        }\n    };\n    const initForm = (ref, form, internals) => {\n        if (form) {\n            const formElements = formElementsMap.get(form);\n            if (formElements) {\n                formElements.add(ref);\n            }\n            else {\n                const initSet = new Set();\n                initSet.add(ref);\n                formElementsMap.set(form, initSet);\n                wireSubmitLogic(form);\n                form.addEventListener('reset', formResetCallback);\n                form.addEventListener('input', formInputCallback);\n                form.addEventListener('change', formChangeCallback);\n            }\n            formsMap.set(form, { ref, internals });\n            if (ref.constructor['formAssociated'] && ref.formAssociatedCallback) {\n                setTimeout(() => {\n                    ref.formAssociatedCallback.apply(ref, [form]);\n                }, 0);\n            }\n            setFormValidity(form);\n        }\n    };\n    const findParentForm = (elem) => {\n        let parent = elem.parentNode;\n        if (parent && parent.tagName !== 'FORM') {\n            parent = findParentForm(parent);\n        }\n        return parent;\n    };\n    const throwIfNotFormAssociated = (ref, message, ErrorType = DOMException) => {\n        if (!ref.constructor['formAssociated']) {\n            throw new ErrorType(message);\n        }\n    };\n    const overrideFormMethod = (form, returnValue, method) => {\n        const elements = formElementsMap.get(form);\n        if (elements && elements.size) {\n            elements.forEach(element => {\n                const internals = internalsMap.get(element);\n                const valid = internals[method]();\n                if (!valid) {\n                    returnValue = false;\n                }\n            });\n        }\n        return returnValue;\n    };\n    const upgradeInternals = (ref) => {\n        if (ref.constructor['formAssociated']) {\n            const internals = internalsMap.get(ref);\n            const { labels, form } = internals;\n            initLabels(ref, labels);\n            initForm(ref, form, internals);\n        }\n    };\n    function mutationObserverExists() {\n        return typeof MutationObserver !== 'undefined';\n    }\n\n    class ValidityState {\n        constructor() {\n            this.badInput = false;\n            this.customError = false;\n            this.patternMismatch = false;\n            this.rangeOverflow = false;\n            this.rangeUnderflow = false;\n            this.stepMismatch = false;\n            this.tooLong = false;\n            this.tooShort = false;\n            this.typeMismatch = false;\n            this.valid = true;\n            this.valueMissing = false;\n            Object.seal(this);\n        }\n    }\n    const setValid = (validityObject) => {\n        validityObject.badInput = false;\n        validityObject.customError = false;\n        validityObject.patternMismatch = false;\n        validityObject.rangeOverflow = false;\n        validityObject.rangeUnderflow = false;\n        validityObject.stepMismatch = false;\n        validityObject.tooLong = false;\n        validityObject.tooShort = false;\n        validityObject.typeMismatch = false;\n        validityObject.valid = true;\n        validityObject.valueMissing = false;\n        return validityObject;\n    };\n    const reconcileValidity = (validityObject, newState, form) => {\n        validityObject.valid = isValid(newState);\n        Object.keys(newState).forEach(key => validityObject[key] = newState[key]);\n        if (form) {\n            setFormValidity(form);\n        }\n        return validityObject;\n    };\n    const isValid = (validityState) => {\n        let valid = true;\n        for (let key in validityState) {\n            if (key !== 'valid' && validityState[key] !== false) {\n                valid = false;\n            }\n        }\n        return valid;\n    };\n\n    const customStateMap = new WeakMap();\n    function addState(ref, stateName) {\n        ref.toggleAttribute(stateName, true);\n        if (ref.part) {\n            ref.part.add(stateName);\n        }\n    }\n    class CustomStateSet extends Set {\n        static get isPolyfilled() {\n            return true;\n        }\n        constructor(ref) {\n            super();\n            if (!ref || !ref.tagName || ref.tagName.indexOf('-') === -1) {\n                throw new TypeError('Illegal constructor');\n            }\n            customStateMap.set(this, ref);\n        }\n        add(state) {\n            if (!/^--/.test(state) || typeof state !== 'string') {\n                throw new DOMException(`Failed to execute 'add' on 'CustomStateSet': The specified value ${state} must start with '--'.`);\n            }\n            const result = super.add(state);\n            const ref = customStateMap.get(this);\n            const stateName = `state${state}`;\n            if (ref.isConnected) {\n                addState(ref, stateName);\n            }\n            else {\n                setTimeout(() => {\n                    addState(ref, stateName);\n                });\n            }\n            return result;\n        }\n        clear() {\n            for (let [entry] of this.entries()) {\n                this.delete(entry);\n            }\n            super.clear();\n        }\n        delete(state) {\n            const result = super.delete(state);\n            const ref = customStateMap.get(this);\n            if (ref.isConnected) {\n                ref.toggleAttribute(`state${state}`, false);\n                if (ref.part) {\n                    ref.part.remove(`state${state}`);\n                }\n            }\n            else {\n                setTimeout(() => {\n                    ref.toggleAttribute(`state${state}`, false);\n                    if (ref.part) {\n                        ref.part.remove(`state${state}`);\n                    }\n                });\n            }\n            return result;\n        }\n    }\n\n    function __classPrivateFieldGet(receiver, state, kind, f) {\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n        return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n    }\n    function __classPrivateFieldSet(receiver, state, value, kind, f) {\n        if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n        return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n    }\n\n    var _HTMLFormControlsCollection_elements;\n    class HTMLFormControlsCollection {\n        constructor(elements) {\n            _HTMLFormControlsCollection_elements.set(this, void 0);\n            __classPrivateFieldSet(this, _HTMLFormControlsCollection_elements, elements, \"f\");\n            for (let i = 0; i < elements.length; i++) {\n                let element = elements[i];\n                this[i] = element;\n                if (element.hasAttribute('name')) {\n                    this[element.getAttribute('name')] = element;\n                }\n            }\n            Object.freeze(this);\n        }\n        get length() {\n            return __classPrivateFieldGet(this, _HTMLFormControlsCollection_elements, \"f\").length;\n        }\n        [(_HTMLFormControlsCollection_elements = new WeakMap(), Symbol.iterator)]() {\n            return __classPrivateFieldGet(this, _HTMLFormControlsCollection_elements, \"f\")[Symbol.iterator]();\n        }\n        item(i) {\n            return this[i] == null ? null : this[i];\n        }\n        namedItem(name) {\n            return this[name] == null ? null : this[name];\n        }\n    }\n\n    function patchFormPrototype() {\n        const checkValidity = HTMLFormElement.prototype.checkValidity;\n        HTMLFormElement.prototype.checkValidity = checkValidityOverride;\n        const reportValidity = HTMLFormElement.prototype.reportValidity;\n        HTMLFormElement.prototype.reportValidity = reportValidityOverride;\n        function checkValidityOverride(...args) {\n            let returnValue = checkValidity.apply(this, args);\n            return overrideFormMethod(this, returnValue, 'checkValidity');\n        }\n        function reportValidityOverride(...args) {\n            let returnValue = reportValidity.apply(this, args);\n            return overrideFormMethod(this, returnValue, 'reportValidity');\n        }\n        const { get } = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'elements');\n        Object.defineProperty(HTMLFormElement.prototype, 'elements', {\n            get(...args) {\n                const elements = get.call(this, ...args);\n                const polyfilledElements = Array.from(formElementsMap.get(this) || []);\n                if (polyfilledElements.length === 0) {\n                    return elements;\n                }\n                const orderedElements = Array.from(elements).concat(polyfilledElements).sort((a, b) => {\n                    if (a.compareDocumentPosition) {\n                        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n                    }\n                    return 0;\n                });\n                return new HTMLFormControlsCollection(orderedElements);\n            },\n        });\n    }\n\n    class ElementInternals {\n        static get isPolyfilled() {\n            return true;\n        }\n        constructor(ref) {\n            if (!ref || !ref.tagName || ref.tagName.indexOf('-') === -1) {\n                throw new TypeError('Illegal constructor');\n            }\n            const rootNode = ref.getRootNode();\n            const validity = new ValidityState();\n            this.states = new CustomStateSet(ref);\n            refMap.set(this, ref);\n            validityMap.set(this, validity);\n            internalsMap.set(ref, this);\n            initAom(ref, this);\n            initRef(ref, this);\n            Object.seal(this);\n            if (rootNode instanceof DocumentFragment) {\n                deferUpgrade(rootNode);\n            }\n        }\n        checkValidity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'checkValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            if (!this.willValidate) {\n                return true;\n            }\n            const validity = validityMap.get(this);\n            if (!validity.valid) {\n                const validityEvent = new Event('invalid', {\n                    bubbles: false,\n                    cancelable: true,\n                    composed: false\n                });\n                ref.dispatchEvent(validityEvent);\n            }\n            return validity.valid;\n        }\n        get form() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'form' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            let form;\n            if (ref.constructor['formAssociated'] === true) {\n                form = findParentForm(ref);\n            }\n            return form;\n        }\n        get labels() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'labels' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            const id = ref.getAttribute('id');\n            const hostRoot = ref.getRootNode();\n            if (hostRoot && id) {\n                return hostRoot.querySelectorAll(`[for=\"${id}\"]`);\n            }\n            return [];\n        }\n        reportValidity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'reportValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            if (!this.willValidate) {\n                return true;\n            }\n            const valid = this.checkValidity();\n            const anchor = validationAnchorMap.get(this);\n            if (anchor && !ref.constructor['formAssociated']) {\n                throw new DOMException(`Failed to execute 'reportValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            }\n            if (!valid && anchor) {\n                ref.focus();\n                anchor.focus();\n            }\n            return valid;\n        }\n        setFormValue(value) {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'setFormValue' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            removeHiddenInputs(this);\n            if (value != null && !(value instanceof FormData)) {\n                if (ref.getAttribute('name')) {\n                    const hiddenInput = createHiddenInput(ref, this);\n                    hiddenInput.value = value;\n                }\n            }\n            else if (value != null && value instanceof FormData) {\n                Array.from(value).reverse().forEach(([formDataKey, formDataValue]) => {\n                    if (typeof formDataValue === 'string') {\n                        const hiddenInput = createHiddenInput(ref, this);\n                        hiddenInput.name = formDataKey;\n                        hiddenInput.value = formDataValue;\n                    }\n                });\n            }\n            refValueMap.set(ref, value);\n        }\n        setValidity(validityChanges, validationMessage, anchor) {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'setValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            if (!validityChanges) {\n                throw new TypeError('Failed to execute \\'setValidity\\' on \\'ElementInternals\\': 1 argument required, but only 0 present.');\n            }\n            validationAnchorMap.set(this, anchor);\n            const validity = validityMap.get(this);\n            const validityChangesObj = {};\n            for (const key in validityChanges) {\n                validityChangesObj[key] = validityChanges[key];\n            }\n            if (Object.keys(validityChangesObj).length === 0) {\n                setValid(validity);\n            }\n            const check = { ...validity, ...validityChangesObj };\n            delete check.valid;\n            const { valid } = reconcileValidity(validity, check, this.form);\n            if (!valid && !validationMessage) {\n                throw new DOMException(`Failed to execute 'setValidity' on 'ElementInternals': The second argument should not be empty if one or more flags in the first argument are true.`);\n            }\n            validationMessageMap.set(this, valid ? '' : validationMessage);\n            if (ref.isConnected) {\n                ref.toggleAttribute('internals-invalid', !valid);\n                ref.toggleAttribute('internals-valid', valid);\n                ref.setAttribute('aria-invalid', `${!valid}`);\n            }\n            else {\n                validityUpgradeMap.set(ref, this);\n            }\n        }\n        get shadowRoot() {\n            const ref = refMap.get(this);\n            const shadowRoot = shadowRootMap.get(ref);\n            if (shadowRoot) {\n                return shadowRoot;\n            }\n            return null;\n        }\n        get validationMessage() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'validationMessage' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            return validationMessageMap.get(this);\n        }\n        get validity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'validity' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            const validity = validityMap.get(this);\n            return validity;\n        }\n        get willValidate() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'willValidate' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            if ((ref.disabled || ref.hasAttribute('disabled')) ||\n                ref.hasAttribute('readonly')) {\n                return false;\n            }\n            return true;\n        }\n    }\n    function isElementInternalsSupported() {\n        if (typeof window === 'undefined' || !window.ElementInternals || !HTMLElement.prototype.attachInternals) {\n            return false;\n        }\n        class ElementInternalsFeatureDetection extends HTMLElement {\n            constructor() {\n                super();\n                this.internals = this.attachInternals();\n            }\n        }\n        const randomName = `element-internals-feature-detection-${Math.random().toString(36).replace(/[^a-z]+/g, '')}`;\n        customElements.define(randomName, ElementInternalsFeatureDetection);\n        const featureDetectionElement = new ElementInternalsFeatureDetection();\n        return [\n            'shadowRoot',\n            'form',\n            'willValidate',\n            'validity',\n            'validationMessage',\n            'labels',\n            'setFormValue',\n            'setValidity',\n            'checkValidity',\n            'reportValidity'\n        ].every(prop => prop in featureDetectionElement.internals);\n    }\n    if (!isElementInternalsSupported()) {\n        if (typeof window !== 'undefined') {\n            window.ElementInternals = ElementInternals;\n        }\n        if (typeof CustomElementRegistry !== 'undefined') {\n            const define = CustomElementRegistry.prototype.define;\n            CustomElementRegistry.prototype.define = function (name, constructor, options) {\n                if (constructor.formAssociated) {\n                    const connectedCallback = constructor.prototype.connectedCallback;\n                    constructor.prototype.connectedCallback = function () {\n                        if (!connectedCallbackMap.has(this)) {\n                            connectedCallbackMap.set(this, true);\n                            if (this.hasAttribute('disabled')) {\n                                setDisabled(this, true);\n                            }\n                        }\n                        if (connectedCallback != null) {\n                            connectedCallback.apply(this);\n                        }\n                        upgradeInternals(this);\n                    };\n                }\n                define.call(this, name, constructor, options);\n            };\n        }\n        if (typeof HTMLElement !== 'undefined') {\n            HTMLElement.prototype.attachInternals = function () {\n                if (!this.tagName) {\n                    return {};\n                }\n                else if (this.tagName.indexOf('-') === -1) {\n                    throw new Error(`Failed to execute 'attachInternals' on 'HTMLElement': Unable to attach ElementInternals to non-custom elements.`);\n                }\n                if (internalsMap.has(this)) {\n                    throw new DOMException(`DOMException: Failed to execute 'attachInternals' on 'HTMLElement': ElementInternals for the specified element was already attached.`);\n                }\n                return new ElementInternals(this);\n            };\n        }\n        if (typeof Element !== 'undefined') {\n            function attachShadowObserver(...args) {\n                const shadowRoot = attachShadow.apply(this, args);\n                shadowRootMap.set(this, shadowRoot);\n                if (mutationObserverExists()) {\n                    const observer = new MutationObserver(observerCallback);\n                    if (window.ShadyDOM) {\n                        observer.observe(this, observerConfig);\n                    }\n                    else {\n                        observer.observe(shadowRoot, observerConfig);\n                    }\n                    shadowHostsMap.set(this, observer);\n                }\n                return shadowRoot;\n            }\n            const attachShadow = Element.prototype.attachShadow;\n            Element.prototype.attachShadow = attachShadowObserver;\n        }\n        if (mutationObserverExists()) {\n            const documentObserver = new MutationObserver(observerCallback);\n            documentObserver.observe(document.documentElement, observerConfig);\n        }\n        if (typeof HTMLFormElement !== 'undefined') {\n            patchFormPrototype();\n        }\n        if (typeof window !== 'undefined' && !window.CustomStateSet) {\n            window.CustomStateSet = CustomStateSet;\n        }\n    }\n    else if (typeof window !== 'undefined' && !window.CustomStateSet) {\n        window.CustomStateSet = CustomStateSet;\n        const attachInternals = HTMLElement.prototype.attachInternals;\n        HTMLElement.prototype.attachInternals = function (...args) {\n            const internals = attachInternals.call(this, args);\n            internals.states = new CustomStateSet(this);\n            return internals;\n        };\n    }\n\n})();\n", "import { html, nothing, type LitElement, type TemplateResult, unsafeCSS, type CSSResultGroup } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { when } from 'lit/directives/when.js';\n\nimport type { Constructor } from '@/utils/mixin.types.js';\nimport { ColorSchemable, type ColorSchemableInterface } from '@/mixins/color-schemable.mixin.js';\n\nimport styles from './editable.mixin.scss';\n\n// Safari still hasn't ElementInternals shipped\nimport 'element-internals-polyfill';\n\nexport declare class EditableInterface {\n  readonly internals: ElementInternals;\n  label?: string;\n  renderInput(id: string): TemplateResult;\n  renderSlot(name: string): TemplateResult;\n}\n\nexport interface EditablePrototype {\n  formStyles: CSSResultGroup;\n  formAssociated: true;\n}\n\nexport type EditableOptions = {\n  hasHintSlot?: boolean;\n  hasBeforeSlot?: boolean;\n  hasAfterSlot?: boolean;\n  hasBorder?: boolean;\n};\n\nexport const Editable =\n  ({\n    hasHintSlot = true,\n    hasBeforeSlot = true,\n    hasAfterSlot = true,\n    hasBorder = true,\n  }: Partial<EditableOptions> = {}) =>\n  <T extends Constructor<LitElement>>(superClass: T) => {\n    class EditableElement extends ColorSchemable(superClass) {\n      static readonly formAssociated = true;\n      static readonly formStyles = unsafeCSS(styles);\n\n      readonly internals = this.attachInternals();\n\n      @property({ type: String, reflect: true })\n      label?: string;\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      renderInput(_: string): TemplateResult {\n        return html`${nothing}`;\n      }\n\n      renderSlot(name: string): TemplateResult {\n        return html`<slot name=\"${name}\"></slot>`;\n      }\n\n      protected override render(): TemplateResult {\n        return html`\n          ${this.renderInput('input')} ${when(this.label, () => html`<label for=\"input\">${this.label}</label>`)}\n          ${when(hasHintSlot, () => this.renderSlot('hint'))} ${when(hasBeforeSlot, () => this.renderSlot('before'))}\n          ${when(hasAfterSlot, () => this.renderSlot('after'))}\n          ${when(hasBorder, () => html`<span id=\"border\"></span>`)}\n        `;\n      }\n    }\n    return EditableElement as Constructor<EditableInterface & ColorSchemableInterface> & EditablePrototype & T;\n  };\n", "export default `\n:host {\n  ---wcp-input-checkbox-size: var(--wcp-input-checkbox-size, calc(var(--wcp-base-size, 10px) * 2));\n  --wcp-editable-hint-size: var(--wcp-input-checkbox-hint-size);\n  --wcp-editable-label-size: var(--wcp-input-checkbox-label-size, 1em);\n  --wcp-editable-spacing: var(--wcp-input-checkbox-spacing, calc(var(--wcp-base-size, 10px) * 1));\n  --wcp-editable-passive-border-radius: var(--wcp-input-checkbox-border-radius);\n  --wcp-editable-passive-border-size: var(--wcp-input-checkbox-border-size);\n  --wcp-editable-active-border-radius: var(--wcp-input-checkbox-border-radius);\n  --wcp-editable-active-border-size: var(--wcp-input-checkbox-border-size);\n  --wcp-editable-dark-background: var(--wcp-input-checkbox-dark-background);\n  --wcp-editable-dark-border: var(--wcp-input-checkbox-dark-border);\n  --wcp-editable-dark-color: var(--wcp-input-checkbox-dark-color);\n  --wcp-editable-light-background: var(--wcp-input-checkbox-light-background);\n  --wcp-editable-light-border: var(--wcp-input-checkbox-light-border);\n  --wcp-editable-light-color: var(--wcp-input-checkbox-light-color);\n}\n\n#input {\n  grid-area: before;\n}\n\nlabel {\n  grid-area: center;\n  padding: 0;\n}\n\n:host([checked]) {\n  position: relative;\n}\n:host([checked])::after {\n  content: \"\";\n  pointer-events: none;\n  display: block;\n  height: calc(var(---wcp-input-checkbox-size) * 0.25);\n  width: calc(var(---wcp-input-checkbox-size) * 0.5);\n  position: absolute;\n  top: calc(var(---wcp-input-checkbox-size) * 0.4);\n  right: auto;\n  bottom: auto;\n  left: calc(var(---wcp-input-checkbox-size) * 0.5);\n  transform: translate(-50%, -50%) rotate(-45deg);\n  border: solid var(---wcp-editable-color);\n  border-width: 0 0 var(---wcp-editable-border-size) var(---wcp-editable-border-size);\n  z-index: 1;\n  transition: var(--wcp-fx-default-duration) ease-out;\n  transition-property: border-width, height, inset, opacity, width;\n  will-change: border-width, height, inset, opacity, width;\n}\n\n:host([checked][disabled])::after {\n  opacity: 0.5;\n}\n\ninput {\n  all: unset;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  cursor: pointer;\n  box-sizing: border-box;\n  display: block;\n  height: 0;\n  width: 0;\n  margin-right: var(---wcp-editable-spacing);\n  background-color: var(---wcp-editable-background);\n  outline: var(---wcp-editable-border-size) solid var(---wcp-editable-border);\n  outline-offset: calc(var(---wcp-editable-border-size) * -1);\n  border-radius: var(---wcp-editable-border-radius);\n  transition: var(--wcp-fx-default-duration) ease-out;\n  transition-property: border-radius, opacity, outline-offset, outline-width;\n  will-change: border-radius, opacity, outline-offset, outline-width;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { html, LitElement, PropertyValues, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property } from 'lit/decorators.js';\n\nimport type { FormAssociated } from '@/utils/form.utils.js';\nimport { Editable } from '@/mixins/editable.mixin.js';\n\n// instruct esbuild to load the CSS file as a string\nimport styles from './input-checkbox.component.scss';\n\n/**\n * A checkbox input element using the wcp style. Fully form aware.\n *\n * @element wcp-input-checkbox\n *\n * @property {string} label - The label of the input element.\n *\n * @slot hint - Receives optional descriptions below the input.\n *\n * @cssprop --wcp-input-checkbox-size - The size of the checkbox input.\n * @cssprop --wcp-input-checkbox-hint-size - The font size of the hint.\n * @cssprop --wcp-input-checkbox-label-size - The font size of the label.\n * @cssprop --wcp-input-checkbox-spacing - The leading distance of the label to the input.\n * @cssprop --wcp-input-checkbox-border-radius - The border radius of the checkbox input.\n * @cssprop --wcp-input-checkbox-border-size - The border size of the checkbox input.\n *\n * @cssprop --wcp-input-checkbox-dark-background - The background color of the checkbox input in dark mode.\n * @cssprop --wcp-input-checkbox-dark-border - The border color of the checkbox input in dark mode.\n * @cssprop --wcp-input-checkbox-dark-color - The fill color of the checkbox input when checked in dark mode.\n *\n * @cssprop --wcp-input-checkbox-light-background - The background color of the checkbox input in light mode.\n * @cssprop --wcp-input-checkbox-light-border - The border color of the checkbox input in light mode.\n * @cssprop --wcp-input-checkbox-light-color - The fill color of the checkbox input when checked in light mode.\n *\n * @example\n * ## With optional label\n * ```html\n * <wcp-input-checkbox label=\"With optional label\"></wcp-input-checkbox>\n * ```\n *\n * @example\n * ## With initial value\n * ```html\n * <wcp-input-checkbox checked label=\"With optional initial value\"></wcp-input-checkbox>\n * ```\n *\n * @example\n * ## Used within a form\n * ```html\n * <form onsubmit=\"console.log(Array.from(new FormData(this).entries()));return false\" onreset=\"console.log('Reset!')\">\n *   <wcp-input-checkbox label=\"Fully form enabled component\"></wcp-input-checkbox>\n *   <button type=\"submit\">Submit</button>\n *   <button type=\"reset\">Reset</button>\n * </form>\n * ```\n */\n@customElement('wcp-input-checkbox')\nexport class InputCheckbox\n  extends Editable({ hasBeforeSlot: false, hasBorder: false })(LitElement)\n  implements FormAssociated<string>\n{\n  static override readonly styles = [super.formStyles, unsafeCSS(styles)];\n\n  private initialChecked!: boolean;\n\n  @property({ type: String, reflect: true })\n  name = 'checkbox';\n\n  @property({ type: Boolean, reflect: true })\n  autocomplete = false;\n\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  @property({ type: Boolean, reflect: true })\n  checked = false;\n\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  @property({ type: String, reflect: true })\n  value = 'on';\n\n  protected override firstUpdated(props: PropertyValues<this>): void {\n    super.firstUpdated(props);\n    this.internals.role = 'checkbox';\n    this.initialChecked = this.checked;\n  }\n\n  override attributeChangedCallback(name: string, old: string | null, value: string | null): void {\n    super.attributeChangedCallback(name, old, value);\n    if (name === 'checked') {\n      this.checked = value !== null;\n      this.checkValidity();\n\n      this.internals.ariaChecked = String(this.checked);\n      this.internals.setFormValue(this.checked ? this.value ?? null : null, null);\n    }\n  }\n\n  formResetCallback() {\n    this.checked = this.initialChecked;\n  }\n\n  checkValidity(): boolean {\n    if (this.required && !this.checked) {\n      this.internals.setValidity({ valueMissing: true }, 'Invalid input');\n    } else {\n      this.internals.setValidity({});\n    }\n\n    return this.internals.validity.valid;\n  }\n\n  @eventOptions({ passive: true })\n  handleInput(event: Event) {\n    const input = event.target as HTMLInputElement;\n    this.checked = input.checked;\n  }\n\n  override renderInput(id: string) {\n    return html`\n      <input\n        type=\"checkbox\"\n        id=\"${id}\"\n        name=\"${this.name}\"\n        autocomplete=\"${this.autocomplete ? 'on' : 'off'}\"\n        ?disabled=\"${this.disabled}\"\n        ?required=\"${this.required}\"\n        ?checked=\"${this.checked}\"\n        .value=\"${this.value}\"\n        @input=\"${this.handleInput}\"\n      />\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-input-checkbox': InputCheckbox;\n  }\n}\n", "import 'prismjs';\nimport 'lit-code';\nimport type { LitCode } from 'lit-code';\n\nimport { html, LitElement, type PropertyValues, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property, query } from 'lit/decorators.js';\n\nimport type { FormAssociated } from '@/utils/form.utils.js';\nimport { Editable } from '@/mixins/editable.mixin.js';\n\n// instruct esbuild to load the CSS file as a string\nimport styles from './input-code.component.scss';\n\n/**\n * A text input element using the wcp style. Fully form aware.\n * Can display multiline text (textarea) if configured to do so.\n *\n * @element wcp-input-code\n *\n * @property {string} label - The label of the input element.\n *\n * @slot hint - Receives optional descriptions below the input.\n *\n * @cssprop --wcp-input-code-hint-size - The font size of the hint.\n * @cssprop --wcp-input-code-label-size - The font size of the label.\n * @cssprop --wcp-input-code-spacing - The inner spacing of the input element.\n * @cssprop --wcp-input-code-border-radius - The border radius of the input element.\n * @cssprop --wcp-input-code-border-size - The border size of the input element.\n *\n * @cssprop --wcp-input-code-dark-background - The background color of the element in dark mode.\n * @cssprop --wcp-input-code-dark-border - The border color of the element in dark mode.\n * @cssprop --wcp-input-code-dark-color - The font color of the input element in dark mode.\n * @cssprop --wcp-input-code-dark-background-lines - The background color of the line numbers in dark mode.\n *\n * @cssprop --wcp-input-code-light-background - The background color of the element in light mode.\n * @cssprop --wcp-input-code-light-border - The border color of the element in light mode.\n * @cssprop --wcp-input-code-light-color - The font color of the input element in light mode.\n * @cssprop --wcp-input-code-light-background-lines - The background color of the line numbers in light mode.\n *\n * @example\n * ## With optional label\n * ```html\n * <wcp-input-code label=\"With optional label\"></wcp-input-code>\n * ```\n *\n * @example\n * ## With optional initial value\n * ```html\n * <wcp-input-code\n *   label=\"With optional initial value\"\n *   value=\"<strong>Test</strong>\"\n *   language=\"html\"\n * ></wcp-input-code>\n * ```\n *\n * @example\n * ## With autosize\n * ```html\n * <wcp-input-code\n *   autosize\n *   label=\"With optional initial value\"\n *   value=\"<strong>Test</strong>\"\n *   language=\"html\"\n * ></wcp-input-code>\n * ```\n *\n * @example\n * ## Used within a form\n * ```html\n * <form onsubmit=\"console.log(Array.from(new FormData(this).entries()));return false\" onreset=\"console.log('Reset!')\">\n *   <wcp-input-code\n *     label=\"Fully form enabled component\"\n *     value=\"<strong>Test</strong>\"\n *     language=\"html\"\n *   ></wcp-input-code>\n *   <button type=\"submit\">Submit</button>\n *   <button type=\"reset\">Reset</button>\n * </form>\n * ```\n */\n@customElement('wcp-input-code')\nexport class InputCode extends Editable()(LitElement) implements FormAssociated<string> {\n  static override readonly shadowRootOptions = { ...super.shadowRootOptions, delegatesFocus: true };\n  static override readonly styles = [super.formStyles, unsafeCSS(styles)];\n\n  #initialValue?: string;\n\n  @query('lit-code')\n  private readonly editor?: LitCode;\n\n  @property({ type: Boolean, reflect: true })\n  autosize = false;\n\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  @property({ type: String, reflect: true })\n  name = 'text';\n\n  @property({ type: String, reflect: true })\n  language = 'html' as const;\n\n  @property({ type: String, reflect: true, noAccessor: true })\n  set value(value: string | undefined) {\n    value = value ?? '';\n    // pass to inner editor but prevent event dispatching\n    this.editor?.setCode(value);\n\n    // update the form state\n    this.internals.setFormValue(value);\n    this.checkValidity();\n  }\n  get value(): string | undefined {\n    return this.editor?.getCode();\n  }\n\n  protected override firstUpdated(props: PropertyValues<this>): void {\n    super.firstUpdated(props);\n    this.#initialValue = this.value;\n  }\n\n  formResetCallback() {\n    this.value = this.#initialValue;\n  }\n\n  checkValidity(): boolean {\n    if (this.required && !this.value) {\n      this.internals.setValidity({ valueMissing: true }, 'Invalid input');\n    } else {\n      this.internals.setValidity({});\n    }\n\n    return this.internals.validity.valid;\n  }\n\n  @eventOptions({ passive: true })\n  handleInput(event: InputEvent) {\n    // update the form state\n    const { code } = event.target as LitCode;\n    this.internals.setFormValue(code);\n    this.checkValidity();\n\n    // re-dispatch input event, but now the target has a value (namely mine!)\n    this.dispatchEvent(new InputEvent(event.type, event));\n  }\n\n  override renderInput(id: string) {\n    return html`\n      <lit-code id=\"${id}\" linenumbers language=\"${this.language}\" @input=\"${this.handleInput}\"></lit-code>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-input-code': InputCode;\n  }\n}\n", "import{css as e,LitElement as t,html as o}from\"lit\";var i=e`:host{display:block}:host{--font-family:monospace;--font-size:12pt;--line-height:14pt;--lines-width:40px;--editor-bg-color:#fff;--editor-text-color:#000;--editor-caret-color:var(--editor-text-color);--editor-sel-color:#b9ecff;--lines-bg-color:#eee;--lines-text-color:#000;--scroll-track-color:#aaa;--scroll-thumb-color:#eee;--hl-color-string:#00ae22;--hl-color-function:#004eff;--hl-color-number:#dd9031;--hl-color-operator:#5a5a5a;--hl-color-class-name:#3cabb6;--hl-color-punctuation:#4a4a4a;--hl-color-keyword:#8500ff;--hl-color-comment:#aaa;--hl-color-tag:#3a9bca;--hl-color-selector:#3a9bca;--hl-color-property:#713aca;height:100%;max-height:inherit;max-width:inherit;width:100%}.litcode{border-radius:inherit;display:grid;font-family:var(--font-family);font-size:var(--font-size);grid-template-columns:var(--lines-width) auto;height:100%;line-height:var(--line-height);max-height:inherit;max-width:inherit;overflow:auto;position:relative}.litcode :is(.litcode_textarea,.litcode_highlight){box-sizing:border-box;grid-column:1/3;grid-row:1;height:100%;height:calc(var(--height) + 100% - var(--line-height)*4);width:100%}.litcode .litcode_linenumbers~:is(.litcode_textarea,.litcode_highlight){grid-column:2;grid-row:1}.litcode :is(.litcode_textarea,.litcode_linenumbers,.litcode_highlight){padding:4px}.litcode .litcode_linenumbers{background-color:var(--lines-bg-color);box-sizing:border-box;color:var(--lines-text-color);height:100%;left:0;padding-right:1px;position:-webkit-sticky;position:sticky;text-align:right;-webkit-user-select:none;-moz-user-select:none;user-select:none}.litcode .litcode_textarea{background-color:var(--editor-bg-color);border:none;caret-color:var(--editor-caret-color);color:transparent;font:inherit;height:100%;margin:0;outline:none;resize:none;white-space:pre}.litcode .litcode_textarea::-moz-selection{background-color:var(--editor-sel-color)}.litcode .litcode_textarea::selection{background-color:var(--editor-sel-color)}.litcode .litcode_highlight{color:var(--editor-text-color);height:100%;pointer-events:none;width:100%}.litcode .litcode_highlight>pre{margin:0}.litcode::-webkit-scrollbar{height:10px;width:10px}.litcode::-webkit-scrollbar-track{background-color:var(--scroll-track-color);border-radius:8px}.litcode::-webkit-scrollbar-thumb{background-color:var(--scroll-thumb-color);border-radius:8px}.litcode::-webkit-scrollbar-corner{background-color:var(--scroll-track-color)}.litcode[default] .token.string{color:var(--hl-color-string)}.litcode[default] .token.function{color:var(--hl-color-function)}.litcode[default] .token.number{color:var(--hl-color-number)}.litcode[default] .token.operator{color:var(--hl-color-operator)}.litcode[default] .token.class-name{color:var(--hl-color-class-name)}.litcode[default] .token.punctuation{color:var(--hl-color-punctuation)}.litcode[default] .token.keyword{color:var(--hl-color-keyword)}.litcode[default] .token.comment{color:var(--hl-color-comment)}.litcode[default] .token.tag{color:var(--hl-color-tag)}.litcode[default] .token.selector{color:var(--hl-color-selector)}.litcode[default] .token.property{color:var(--hl-color-property)}`;const r=\"undefined\"!=typeof Prism;function l(e){return\"string\"==typeof e?o`${e}`:o`<span class=\"token ${e.type} ${e.alias}\">${Array.isArray(e.content)?e.content.map(l):o`${e.content}`}</span>`}customElements.define(\"lit-code\",class extends t{static get styles(){return i}static get properties(){return{code:{type:String},grammar:{type:Object},language:{type:String},noshadow:{attribute:!0},linenumbers:{attribute:!0}}}get shadowDom(){return!this.hasAttribute(\"noshadow\")}constructor(){super(),this.opening=[\"(\",\"{\",\"[\",\"'\",'\"'],this.closing=[\")\",\"}\",\"]\",\"'\",'\"'],this.code=\"\",this.indent=\"  \",this.language=\"clike\",r&&(this.grammar=Prism.languages[this.language])}update(e){if(super.update(e),r&&e.has(\"language\")){const e=Prism.languages[this.language.toLowerCase()];if(void 0===e)throw new Error(\"Unsupported Prism language\");this.grammar=e}}_getElement(e){return this.shadowDom?this.shadowRoot.querySelector(`.litcode_${e}`):this.querySelector(`.litcode_${e}`)}firstUpdated(){this.elTextarea=this._getElement(\"textarea\"),this.elContainer=this._getElement(\"litcode\"),this.updateTextarea()}render(){return o` ${this.shadowDom?o``:o`<style>${i.cssText}</style>`} <div class=\"litcode litcode_litcode\" ?default=\"${!this.hasAttribute(\"mycolors\")}\"> ${this.hasAttribute(\"linenumbers\")?o` <div class=\"litcode_linenumbers\"> <div class=\"litcode_line\">1</div> ${(this.code.match(/\\r?\\n/g)||[]).map(((e,t)=>o` <div class=\"litcode_line\">${t+2}</div> `))} </div> `:o``} <textarea class=\"litcode_textarea\" spellcheck=\"false\" @keydown=\"${this.handleKeys}\" @input=\"${this.handleInput}\"></textarea> <code class=\"litcode_highlight\"><pre>${r?Prism.tokenize(this.code,this.grammar).map(l):o`${this.code}`}</pre></code> </div> `}setCode(e){this.code=e,this.updateTextarea()}getCode(){return this.code}createRenderRoot(){return this.shadowDom?super.createRenderRoot():this}setCursor(e){this.elTextarea.setSelectionRange(e,e)}setSelect(e,t){this.elTextarea.setSelectionRange(e,t)}getCurrentLineIndent(){const e=this.elTextarea.selectionStart,t=this.elTextarea.selectionEnd,o=this.code.lastIndexOf(\"\\n\",e-1)+1,i=(()=>{let e=o;for(;\" \"===this.code[e]&&e<t;)e++;return e-o})();return\" \".repeat(i)}updateTextarea(){this.elTextarea&&(this.elTextarea.value=this.code,this.dispatchEvent(new CustomEvent(\"update\",{detail:this.code})))}insertCode(e,t,o=!0){this.code=this.code.substring(0,e)+t+this.code.substring(e),this.updateTextarea(),o&&this.setCursor(e+t.length)}replaceCode(e,t,o=\"\",i=!0){this.code=this.code.substring(0,e)+o+this.code.substring(t),this.updateTextarea(),i&&this.setCursor(e+o.length)}handleKeys(e){switch(e.code){case\"Tab\":this.handleTabs(e);break;case\"Enter\":this.handleNewLine(e);break;case\"Backspace\":this.handleBackspace(e);break;default:this.opening.includes(e.key)?this.handleAutoClose(e):this.closing.includes(e.key)&&this.handleAutoSkip(e)}}handleInput({target:e}){this.code=e.value,this.dispatchEvent(new CustomEvent(\"update\",{detail:this.code}))}handleTabs(e){e.preventDefault();const t=this.elTextarea.selectionStart,o=this.elTextarea.selectionEnd;if(t!==o){const i=Math.max(0,this.code.lastIndexOf(\"\\n\",t-1)),r=Math.max(this.code.indexOf(\"\\n\",o),o);let l=0,s=this.code.substring(i,r),n=this.indent.length;0===i&&(s=\"\\n\"+s),e.shiftKey?(n=-n,l=(s.match(new RegExp(\"\\n\"+this.indent,\"g\"))||[]).length,s=s.replaceAll(\"\\n\"+this.indent,\"\\n\")):(l=(s.match(/\\n/g)||[]).length,s=s.replaceAll(\"\\n\",\"\\n\"+this.indent)),0===i&&(s=s.replace(/^\\n/,\"\")),this.replaceCode(i,r,s,!1);const a=Math.max(i+1,t+n),c=o+l*n;this.setSelect(a,c)}else this.insertCode(t,this.indent,!0)}handleBackspace(e){const t=this.elTextarea.selectionStart,o=this.elTextarea.selectionEnd;if(e.ctrlKey||t!==o)return;e.preventDefault();const i=this.code[t-1],r=this.code[t],l=this.opening.includes(i)&&this.closing.includes(r),s=this.closing[this.opening.indexOf(i)]===r;if(l&&s)this.replaceCode(t-1,t+1);else{const e=t-this.indent.length,o=t;this.code.substring(e,o)===this.indent?this.replaceCode(e,o):this.replaceCode(t-1,t)}}handleAutoClose(e){const t=this.elTextarea.selectionStart,o=this.elTextarea.selectionEnd;if(\"'\"===this.code[t]||'\"'===this.code[t])return this.handleAutoSkip(e);if(e.preventDefault(),t===o){const o=e.key,i=this.closing[this.opening.indexOf(o)];if(\"{\"!==o||\"\\n\"!==this.code[t]&&this.code.length!==t)this.insertCode(t,o+i),this.setCursor(t+1);else{const e=\"\\n\"+this.getCurrentLineIndent();this.insertCode(t,o+e+this.indent+e+i),this.setCursor(t+e.length+this.indent.length+1)}}}handleAutoSkip(e){const t=this.elTextarea.selectionStart;this.code[t]===e.key&&(e.preventDefault(),this.setCursor(t+1))}handleNewLine(e){e.preventDefault(),this.insertCode(this.elTextarea.selectionStart,\"\\n\"+this.getCurrentLineIndent()),this.elTextarea.selectionStart===this.code.length&&(this.elContainer.scrollTop=this.elContainer.scrollHeight)}});\n", "export default `\n:host {\n  --wcp-editable-hint-size: var(--wcp-input-code-hint-size);\n  --wcp-editable-label-size: var(--wcp-input-code-label-size);\n  --wcp-editable-spacing: var(--wcp-input-code-spacing);\n  --wcp-editable-passive-border-radius: var(--wcp-input-code-border-radius);\n  --wcp-editable-passive-border-size: var(--wcp-input-code-border-size);\n  --wcp-editable-active-border-radius: var(--wcp-input-code-border-radius);\n  --wcp-editable-active-border-size: var(--wcp-input-code-border-size);\n  --wcp-editable-dark-background: var(--wcp-input-code-dark-background);\n  --wcp-editable-dark-border: var(--wcp-input-code-dark-border);\n  --wcp-editable-dark-color: var(--wcp-input-code-dark-color);\n  --wcp-editable-light-background: var(--wcp-input-code-light-background);\n  --wcp-editable-light-border: var(--wcp-input-code-light-border);\n  --wcp-editable-light-color: var(--wcp-input-code-light-color);\n  ---wcp-input-code-dark-background-lines: var(--wcp-input-code-dark-background-lines, hsl(var(--wcp-color-blue-96-raw) / .1));\n  ---wcp-input-code-light-background-lines: var(--wcp-input-code-dark-background-lines, hsl(var(--wcp-color-blue-24-raw) / .15));\n}\n\n@media (prefers-color-scheme: dark) {\n  :host {\n    ---wcp-input-code-background-lines: var(---wcp-input-code-dark-background-lines);\n  }\n}\n:host([color-scheme=dark]):host {\n  ---wcp-input-code-background-lines: var(---wcp-input-code-dark-background-lines);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    ---wcp-input-code-background-lines: var(---wcp-input-code-light-background-lines);\n  }\n}\n:host([color-scheme=light]):host {\n  ---wcp-input-code-background-lines: var(---wcp-input-code-light-background-lines);\n}\n\nlit-code {\n  padding: 0 !important;\n}\n\nlit-code {\n  --editor-bg-color: var(---wcp-editable-background);\n  --editor-text-color: var(---wcp-editable-color);\n  --lines-bg-color: var(---wcp-input-code-background-lines);\n  --lines-text-color: var(---wcp-editable-color);\n  --scroll-track-color: inherit;\n  --scroll-thumb-color: var(---wcp-editable-color);\n  grid-area: center;\n  aspect-ratio: 16/9;\n  box-sizing: border-box;\n  border-radius: var(---wcp-editable-border-radius);\n  max-height: 200px;\n  width: 100%;\n  transition: opacity var(--wcp-fx-default-duration) ease-out;\n  will-change: opacity;\n}\n:host([autosize]) lit-code {\n  aspect-ratio: unset;\n  height: auto;\n  height: var(---wcp-input-code-height, auto);\n  min-height: 28px;\n}\n:host([disabled]) lit-code {\n  opacity: 0.5;\n  pointer-events: none;\n}\n\n#internal {\n  display: none;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "export default `\n:host {\n  ---wcp-input-key-value-gutter: var(--wcp-input-key-value-gutter, calc(var(--wcp-base-size, 10px) * 1));\n}\n\n:host {\n  grid-template-columns: 1fr 1fr min-content;\n  gap: 0 var(---wcp-input-key-value-gutter);\n}\n\ninput {\n  all: unset;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  box-sizing: border-box;\n  width: 100%;\n  color: var(---wcp-input-text-color);\n  text-align: left;\n}\n\n#input,\n#border {\n  grid-area: before;\n}\n\n.input,\n.border {\n  grid-area: center;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2NsaWVudC9jbGllbnQvc3JjL2NvbXBvbmVudHMvZm9ybXMvaW5wdXQta2V5LXZhbHVlL2lucHV0LWtleS12YWx1ZS5jb21wb25lbnQuc2NzcyIsIjpob3N0JTIwJTdCJTBBJTIwJTIwLS0td2NwLWlucHV0LWtleS12YWx1ZS1ndXR0ZXI6JTIwdmFyKC0td2NwLWlucHV0LWtleS12YWx1ZS1ndXR0ZXIsJTIwY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCUyMDEwcHgpJTIwKiUyMDEpKTslMEElN0QlMEElMEE6aG9zdCUyMCU3QiUwQSUyMCUyMGdyaWQtdGVtcGxhdGUtY29sdW1uczolMjAxZnIlMjAxZnIlMjBtaW4tY29udGVudDslMEElMjAlMjBnYXA6JTIwMCUyMHZhcigtLS13Y3AtaW5wdXQta2V5LXZhbHVlLWd1dHRlcik7JTBBJTdEJTBBJTBBaW5wdXQlMjAlN0IlMEElMjAlMjBhbGw6JTIwdW5zZXQ7JTBBJTIwJTIwYXBwZWFyYW5jZTolMjBub25lOyUwQSUyMCUyMGJveC1zaXppbmc6JTIwYm9yZGVyLWJveDslMEElMjAlMjB3aWR0aDolMjAxMDAlMjU7JTBBJTIwJTIwY29sb3I6JTIwdmFyKC0tLXdjcC1pbnB1dC10ZXh0LWNvbG9yKTslMEElMjAlMjB0ZXh0LWFsaWduOiUyMGxlZnQ7JTBBJTdEJTBBJTBBJTIzaW5wdXQsJTBBJTIzYm9yZGVyJTIwJTdCJTBBJTIwJTIwZ3JpZC1hcmVhOiUyMGJlZm9yZTslMEElN0QlMEElMEEuaW5wdXQsJTBBLmJvcmRlciUyMCU3QiUwQSUyMCUyMGdyaWQtYXJlYTolMjBjZW50ZXI7JTBBJTdEJTBBLyolMjMlMjBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTltYjNKdGN5OXBibkIxZEMxclpYa3RkbUZzZFdVaUxDSnpiM1Z5WTJWeklqcGJJbWx1Y0hWMExXdGxlUzEyWVd4MVpTNWpiMjF3YjI1bGJuUXVjMk56Y3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGRlFUdEZRVU5GT3pzN1FVRkhSanRGUVVORk8wVkJRMEU3T3p0QlFVZEdPMFZCUTBVN1JVRkRRVHRGUVVOQk8wVkJSVUU3UlVGRFFUdEZRVU5CT3pzN1FVRkhSanRCUVVGQk8wVkJSVVU3T3p0QlFVZEdPMEZCUVVFN1JVRkZSU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWtCMWMyVWdKMEF2YzNSNWJHVnpMM1YwYVd4ekp5QmhjeUIxZEdsc2N6dGNibHh1T21odmMzUWdlMXh1SUNBdExTMTNZM0F0YVc1d2RYUXRhMlY1TFhaaGJIVmxMV2QxZEhSbGNqb2dkbUZ5S0MwdGQyTndMV2x1Y0hWMExXdGxlUzEyWVd4MVpTMW5kWFIwWlhJc0lDTjdkWFJwYkhNdWMybDZaU2d4S1gwcE8xeHVmVnh1WEc0NmFHOXpkQ0I3WEc0Z0lHZHlhV1F0ZEdWdGNHeGhkR1V0WTI5c2RXMXVjem9nTVdaeUlERm1jaUJ0YVc0dFkyOXVkR1Z1ZER0Y2JpQWdaMkZ3T2lBd0lIWmhjaWd0TFMxM1kzQXRhVzV3ZFhRdGEyVjVMWFpoYkhWbExXZDFkSFJsY2lrN1hHNTlYRzVjYm1sdWNIVjBJSHRjYmlBZ1lXeHNPaUIxYm5ObGREdGNiaUFnWVhCd1pXRnlZVzVqWlRvZ2JtOXVaVHRjYmlBZ1ltOTRMWE5wZW1sdVp6b2dZbTl5WkdWeUxXSnZlRHRjYmx4dUlDQjNhV1IwYURvZ01UQXdKVHRjYmlBZ1kyOXNiM0k2SUhaaGNpZ3RMUzEzWTNBdGFXNXdkWFF0ZEdWNGRDMWpiMnh2Y2lrN1hHNGdJSFJsZUhRdFlXeHBaMjQ2SUd4bFpuUTdYRzU5WEc1Y2JpTnBibkIxZEN4Y2JpTmliM0prWlhJZ2UxeHVJQ0JuY21sa0xXRnlaV0U2SUdKbFptOXlaVHRjYm4xY2JseHVMbWx1Y0hWMExGeHVMbUp2Y21SbGNpQjdYRzRnSUdkeWFXUXRZWEpsWVRvZ1kyVnVkR1Z5TzF4dWZWeHVJbDE5JTIwKiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtFQUNFLHNHQUFBO0FDREY7O0FESUE7RUFDRSwwQ0FBQTtFQUNBLHlDQUFBO0FDREY7O0FESUE7RUFDRSxVQUFBO0VBQ0Esd0JBQUE7S0FBQSxxQkFBQTtVQUFBLGdCQUFBO0VBQ0Esc0JBQUE7RUFFQSxXQUFBO0VBQ0EsbUNBQUE7RUFDQSxnQkFBQTtBQ0ZGOztBREtBOztFQUVFLGlCQUFBO0FDRkY7O0FES0E7O0VBRUUsaUJBQUE7QUNGRiIsImZpbGUiOiI6aG9zdCB7XG4gIC0tLXdjcC1pbnB1dC1rZXktdmFsdWUtZ3V0dGVyOiB2YXIoLS13Y3AtaW5wdXQta2V5LXZhbHVlLWd1dHRlciwgY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCAxMHB4KSAqIDEpKTtcbn1cblxuOmhvc3Qge1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnIgbWluLWNvbnRlbnQ7XG4gIGdhcDogMCB2YXIoLS0td2NwLWlucHV0LWtleS12YWx1ZS1ndXR0ZXIpO1xufVxuXG5pbnB1dCB7XG4gIGFsbDogdW5zZXQ7XG4gIGFwcGVhcmFuY2U6IG5vbmU7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdpZHRoOiAxMDAlO1xuICBjb2xvcjogdmFyKC0tLXdjcC1pbnB1dC10ZXh0LWNvbG9yKTtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbn1cblxuI2lucHV0LFxuI2JvcmRlciB7XG4gIGdyaWQtYXJlYTogYmVmb3JlO1xufVxuXG4uaW5wdXQsXG4uYm9yZGVyIHtcbiAgZ3JpZC1hcmVhOiBjZW50ZXI7XG59XG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWU2IyOTBJam9pTDJodmJXVXZjblZ1Ym1WeUwzZHZjbXN2WTJ4cFpXNTBMMk5zYVdWdWRDOXpjbU12WTI5dGNHOXVaVzUwY3k5bWIzSnRjeTlwYm5CMWRDMXJaWGt0ZG1Gc2RXVWlMQ0p6YjNWeVkyVnpJanBiSW1sdWNIVjBMV3RsZVMxMllXeDFaUzVqYjIxd2IyNWxiblF1YzJOemN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkZRVHRGUVVORk96czdRVUZIUmp0RlFVTkZPMFZCUTBFN096dEJRVWRHTzBWQlEwVTdSVUZEUVR0RlFVTkJPMFZCUlVFN1JVRkRRVHRGUVVOQk96czdRVUZIUmp0QlFVRkJPMFZCUlVVN096dEJRVWRHTzBGQlFVRTdSVUZGUlNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklrQjFjMlVnSjBBdmMzUjViR1Z6TDNWMGFXeHpKeUJoY3lCMWRHbHNjenRjYmx4dU9taHZjM1FnZTF4dUlDQXRMUzEzWTNBdGFXNXdkWFF0YTJWNUxYWmhiSFZsTFdkMWRIUmxjam9nZG1GeUtDMHRkMk53TFdsdWNIVjBMV3RsZVMxMllXeDFaUzFuZFhSMFpYSXNJQ043ZFhScGJITXVjMmw2WlNneEtYMHBPMXh1ZlZ4dVhHNDZhRzl6ZENCN1hHNGdJR2R5YVdRdGRHVnRjR3hoZEdVdFkyOXNkVzF1Y3pvZ01XWnlJREZtY2lCdGFXNHRZMjl1ZEdWdWREdGNiaUFnWjJGd09pQXdJSFpoY2lndExTMTNZM0F0YVc1d2RYUXRhMlY1TFhaaGJIVmxMV2QxZEhSbGNpazdYRzU5WEc1Y2JtbHVjSFYwSUh0Y2JpQWdZV3hzT2lCMWJuTmxkRHRjYmlBZ1lYQndaV0Z5WVc1alpUb2dibTl1WlR0Y2JpQWdZbTk0TFhOcGVtbHVaem9nWW05eVpHVnlMV0p2ZUR0Y2JseHVJQ0IzYVdSMGFEb2dNVEF3SlR0Y2JpQWdZMjlzYjNJNklIWmhjaWd0TFMxM1kzQXRhVzV3ZFhRdGRHVjRkQzFqYjJ4dmNpazdYRzRnSUhSbGVIUXRZV3hwWjI0NklHeGxablE3WEc1OVhHNWNiaU5wYm5CMWRDeGNiaU5pYjNKa1pYSWdlMXh1SUNCbmNtbGtMV0Z5WldFNklHSmxabTl5WlR0Y2JuMWNibHh1TG1sdWNIVjBMRnh1TG1KdmNtUmxjaUI3WEc0Z0lHZHlhV1F0WVhKbFlUb2dZMlZ1ZEdWeU8xeHVmVnh1SWwxOSAqIiwic291cmNlc0NvbnRlbnQiOlsiQHVzZSAnQC9zdHlsZXMvdXRpbHMnIGFzIHV0aWxzO1xuXG46aG9zdCB7XG4gIC0tLXdjcC1pbnB1dC1rZXktdmFsdWUtZ3V0dGVyOiB2YXIoLS13Y3AtaW5wdXQta2V5LXZhbHVlLWd1dHRlciwgI3t1dGlscy5zaXplKDEpfSk7XG59XG5cbjpob3N0IHtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyIG1pbi1jb250ZW50O1xuICBnYXA6IDAgdmFyKC0tLXdjcC1pbnB1dC1rZXktdmFsdWUtZ3V0dGVyKTtcbn1cblxuaW5wdXQge1xuICBhbGw6IHVuc2V0O1xuICBhcHBlYXJhbmNlOiBub25lO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXG4gIHdpZHRoOiAxMDAlO1xuICBjb2xvcjogdmFyKC0tLXdjcC1pbnB1dC10ZXh0LWNvbG9yKTtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbn1cblxuI2lucHV0LFxuI2JvcmRlciB7XG4gIGdyaWQtYXJlYTogYmVmb3JlO1xufVxuXG4uaW5wdXQsXG4uYm9yZGVyIHtcbiAgZ3JpZC1hcmVhOiBjZW50ZXI7XG59XG4iLCI6aG9zdCB7XG4gIC0tLXdjcC1pbnB1dC1rZXktdmFsdWUtZ3V0dGVyOiB2YXIoLS13Y3AtaW5wdXQta2V5LXZhbHVlLWd1dHRlciwgY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCAxMHB4KSAqIDEpKTtcbn1cblxuOmhvc3Qge1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnIgbWluLWNvbnRlbnQ7XG4gIGdhcDogMCB2YXIoLS0td2NwLWlucHV0LWtleS12YWx1ZS1ndXR0ZXIpO1xufVxuXG5pbnB1dCB7XG4gIGFsbDogdW5zZXQ7XG4gIGFwcGVhcmFuY2U6IG5vbmU7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdpZHRoOiAxMDAlO1xuICBjb2xvcjogdmFyKC0tLXdjcC1pbnB1dC10ZXh0LWNvbG9yKTtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbn1cblxuI2lucHV0LFxuI2JvcmRlciB7XG4gIGdyaWQtYXJlYTogYmVmb3JlO1xufVxuXG4uaW5wdXQsXG4uYm9yZGVyIHtcbiAgZ3JpZC1hcmVhOiBjZW50ZXI7XG59XG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWU2IyOTBJam9pTDJodmJXVXZjblZ1Ym1WeUwzZHZjbXN2WTJ4cFpXNTBMMk5zYVdWdWRDOXpjbU12WTI5dGNHOXVaVzUwY3k5bWIzSnRjeTlwYm5CMWRDMXJaWGt0ZG1Gc2RXVWlMQ0p6YjNWeVkyVnpJanBiSW1sdWNIVjBMV3RsZVMxMllXeDFaUzVqYjIxd2IyNWxiblF1YzJOemN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkZRVHRGUVVORk96czdRVUZIUmp0RlFVTkZPMFZCUTBFN096dEJRVWRHTzBWQlEwVTdSVUZEUVR0RlFVTkJPMFZCUlVFN1JVRkRRVHRGUVVOQk96czdRVUZIUmp0QlFVRkJPMFZCUlVVN096dEJRVWRHTzBGQlFVRTdSVUZGUlNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklrQjFjMlVnSjBBdmMzUjViR1Z6TDNWMGFXeHpKeUJoY3lCMWRHbHNjenRjYmx4dU9taHZjM1FnZTF4dUlDQXRMUzEzWTNBdGFXNXdkWFF0YTJWNUxYWmhiSFZsTFdkMWRIUmxjam9nZG1GeUtDMHRkMk53TFdsdWNIVjBMV3RsZVMxMllXeDFaUzFuZFhSMFpYSXNJQ043ZFhScGJITXVjMmw2WlNneEtYMHBPMXh1ZlZ4dVhHNDZhRzl6ZENCN1hHNGdJR2R5YVdRdGRHVnRjR3hoZEdVdFkyOXNkVzF1Y3pvZ01XWnlJREZtY2lCdGFXNHRZMjl1ZEdWdWREdGNiaUFnWjJGd09pQXdJSFpoY2lndExTMTNZM0F0YVc1d2RYUXRhMlY1TFhaaGJIVmxMV2QxZEhSbGNpazdYRzU5WEc1Y2JtbHVjSFYwSUh0Y2JpQWdZV3hzT2lCMWJuTmxkRHRjYmlBZ1lYQndaV0Z5WVc1alpUb2dibTl1WlR0Y2JpQWdZbTk0TFhOcGVtbHVaem9nWW05eVpHVnlMV0p2ZUR0Y2JseHVJQ0IzYVdSMGFEb2dNVEF3SlR0Y2JpQWdZMjlzYjNJNklIWmhjaWd0TFMxM1kzQXRhVzV3ZFhRdGRHVjRkQzFqYjJ4dmNpazdYRzRnSUhSbGVIUXRZV3hwWjI0NklHeGxablE3WEc1OVhHNWNiaU5wYm5CMWRDeGNiaU5pYjNKa1pYSWdlMXh1SUNCbmNtbGtMV0Z5WldFNklHSmxabTl5WlR0Y2JuMWNibHh1TG1sdWNIVjBMRnh1TG1KdmNtUmxjaUI3WEc0Z0lHZHlhV1F0WVhKbFlUb2dZMlZ1ZEdWeU8xeHVmVnh1SWwxOSAqLyJdfQ== */`;\n", "import { html, LitElement, PropertyValues, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property } from 'lit/decorators.js';\n\nimport type { FormAssociated } from '@/utils/form.utils.js';\nimport { Editable } from '@/mixins/editable.mixin.js';\n\n// instruct esbuild to load the CSS file as a string\nimport styles from './input-key-value.component.scss';\n\n/**\n * A key-value input element using the wcp style. Fully form aware.\n *\n * @element wcp-input-key-value\n *\n * @property {string} label - The label of the input element.\n * @cssprop --wcp-input-key-value-gutter - The gutter between the key-value pair inputs.\n * @slot hint - Receives optional descriptions below the input.\n *\n * @example\n * ## With optional label\n * ```html\n * <wcp-input-key-value label=\"With optional label\"></wcp-input-key-value>\n * ```\n *\n * @example\n * ## Used within a form\n * ```html\n * <form onsubmit=\"console.log(Array.from(new FormData(this).entries()));return false\" onreset=\"console.log('Reset!')\">\n *   <input type=\"hidden\" name=\"hidden\" value=\"hidden\" />\n *   <wcp-input-key-value name=\"embedded\" label=\"Fully form enabled component\"></wcp-input-key-value>\n *   <button type=\"submit\">Submit</button>\n *   <button type=\"reset\">Reset</button>\n * </form>\n * ```\n */\n@customElement('wcp-input-key-value')\nexport class InputKeyValue\n  extends Editable({ hasBeforeSlot: false, hasBorder: false })(LitElement)\n  implements FormAssociated<string>\n{\n  static override readonly styles = [super.formStyles, unsafeCSS(styles)];\n\n  #value?: string;\n\n  #initialName?: string;\n  #initialValue?: string;\n\n  @property({ type: Boolean, reflect: true })\n  autocomplete = false;\n\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  @property({ type: String, reflect: true })\n  name?: string;\n\n  @property({ type: String, reflect: true, noAccessor: true })\n  set value(value: string | undefined) {\n    const oldValue = this.#value;\n    this.#value = value;\n    this.internals.setFormValue(value ?? null);\n    this.checkValidity();\n    this.requestUpdate('value', oldValue);\n  }\n  get value(): string | undefined {\n    return this.#value;\n  }\n\n  protected override firstUpdated(props: PropertyValues<this>): void {\n    super.firstUpdated(props);\n    this.#initialName = this.name;\n    this.#initialValue = this.#value;\n  }\n\n  formResetCallback() {\n    this.name = this.#initialName;\n    this.value = this.#initialValue;\n  }\n\n  checkValidity(): boolean {\n    if (this.required && (!this.name || !this.#value)) {\n      this.internals.setValidity({ valueMissing: true }, 'Invalid input');\n    } else {\n      this.internals.setValidity({});\n    }\n\n    return this.internals.validity.valid;\n  }\n\n  @eventOptions({ passive: true })\n  handleKeyInput(event: InputEvent) {\n    // update internal value\n    const { value } = event.target as HTMLInputElement;\n    this.name = value ?? undefined;\n  }\n\n  @eventOptions({ passive: true })\n  handleValueInput(event: InputEvent) {\n    // update internal value\n    const { value } = event.target as HTMLInputElement;\n    this.value = value ?? undefined;\n  }\n\n  override renderInput(id: string) {\n    return html`\n      <input\n        type=\"text\"\n        id=\"${id}\"\n        name=\"${this.name}-key\"\n        autocomplete=\"${this.autocomplete ? 'on' : 'off'}\"\n        ?disabled=\"${this.disabled}\"\n        ?required=\"${this.required}\"\n        .value=\"${this.name ?? ''}\"\n        @input=\"${this.handleKeyInput}\"\n      />\n      <span id=\"border\"></span>\n      \n      <input\n        type=\"text\"\n        class=\"${id}\"\n        name=\"${this.name}-value\"\n        autocomplete=\"${this.autocomplete ? 'on' : 'off'}\"\n        ?disabled=\"${this.disabled || ['', undefined].includes(this.name)}\"\n        ?required=\"${this.required}\"\n        .value=\"${this.value ?? ''}\"\n        @input=\"${this.handleValueInput}\"\n      />\n      <span class=\"border\"></span>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-input-key-value': InputKeyValue;\n  }\n}\n", "export default `\n:host {\n  ---wcp-input-key-value-pairs-gutter: var(--wcp-input-key-value-pairs-gutter, calc(var(--wcp-base-size, 10px) * 1));\n}\n\nform {\n  grid-area: center;\n  display: grid;\n  grid-gap: var(---wcp-input-key-value-pairs-gutter);\n  gap: var(---wcp-input-key-value-pairs-gutter);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2NsaWVudC9jbGllbnQvc3JjL2NvbXBvbmVudHMvZm9ybXMvaW5wdXQta2V5LXZhbHVlLXBhaXJzL2lucHV0LWtleS12YWx1ZS1wYWlycy5jb21wb25lbnQuc2NzcyIsIjpob3N0JTIwJTdCJTBBJTIwJTIwLS0td2NwLWlucHV0LWtleS12YWx1ZS1wYWlycy1ndXR0ZXI6JTIwdmFyKC0td2NwLWlucHV0LWtleS12YWx1ZS1wYWlycy1ndXR0ZXIsJTIwY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCUyMDEwcHgpJTIwKiUyMDEpKTslMEElN0QlMEElMEFmb3JtJTIwJTdCJTBBJTIwJTIwZ3JpZC1hcmVhOiUyMGNlbnRlcjslMEElMjAlMjBkaXNwbGF5OiUyMGdyaWQ7JTBBJTIwJTIwZ2FwOiUyMHZhcigtLS13Y3AtaW5wdXQta2V5LXZhbHVlLXBhaXJzLWd1dHRlcik7JTBBJTdEJTBBLyolMjMlMjBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTltYjNKdGN5OXBibkIxZEMxclpYa3RkbUZzZFdVdGNHRnBjbk1pTENKemIzVnlZMlZ6SWpwYkltbHVjSFYwTFd0bGVTMTJZV3gxWlMxd1lXbHljeTVqYjIxd2IyNWxiblF1YzJOemN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkZRVHRGUVVORk96czdRVUZIUmp0RlFVTkZPMFZCUlVFN1JVRkRRU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWtCMWMyVWdKMEF2YzNSNWJHVnpMM1YwYVd4ekp5QmhjeUIxZEdsc2N6dGNibHh1T21odmMzUWdlMXh1SUNBdExTMTNZM0F0YVc1d2RYUXRhMlY1TFhaaGJIVmxMWEJoYVhKekxXZDFkSFJsY2pvZ2RtRnlLQzB0ZDJOd0xXbHVjSFYwTFd0bGVTMTJZV3gxWlMxd1lXbHljeTFuZFhSMFpYSXNJQ043ZFhScGJITXVjMmw2WlNneEtYMHBPMXh1ZlZ4dVhHNW1iM0p0SUh0Y2JpQWdaM0pwWkMxaGNtVmhPaUJqWlc1MFpYSTdYRzVjYmlBZ1pHbHpjR3hoZVRvZ1ozSnBaRHRjYmlBZ1oyRndPaUIyWVhJb0xTMHRkMk53TFdsdWNIVjBMV3RsZVMxMllXeDFaUzF3WVdseWN5MW5kWFIwWlhJcE8xeHVmVnh1SWwxOSUyMCoiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7RUFDRSxrSEFBQTtBQ0RGOztBRElBO0VBQ0UsaUJBQUE7RUFFQSxhQUFBO0VBQ0Esa0RBQUE7RUFBQSw2Q0FBQTtBQ0ZGIiwiZmlsZSI6Ijpob3N0IHtcbiAgLS0td2NwLWlucHV0LWtleS12YWx1ZS1wYWlycy1ndXR0ZXI6IHZhcigtLXdjcC1pbnB1dC1rZXktdmFsdWUtcGFpcnMtZ3V0dGVyLCBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsIDEwcHgpICogMSkpO1xufVxuXG5mb3JtIHtcbiAgZ3JpZC1hcmVhOiBjZW50ZXI7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdhcDogdmFyKC0tLXdjcC1pbnB1dC1rZXktdmFsdWUtcGFpcnMtZ3V0dGVyKTtcbn1cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTltYjNKdGN5OXBibkIxZEMxclpYa3RkbUZzZFdVdGNHRnBjbk1pTENKemIzVnlZMlZ6SWpwYkltbHVjSFYwTFd0bGVTMTJZV3gxWlMxd1lXbHljeTVqYjIxd2IyNWxiblF1YzJOemN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkZRVHRGUVVORk96czdRVUZIUmp0RlFVTkZPMFZCUlVFN1JVRkRRU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWtCMWMyVWdKMEF2YzNSNWJHVnpMM1YwYVd4ekp5QmhjeUIxZEdsc2N6dGNibHh1T21odmMzUWdlMXh1SUNBdExTMTNZM0F0YVc1d2RYUXRhMlY1TFhaaGJIVmxMWEJoYVhKekxXZDFkSFJsY2pvZ2RtRnlLQzB0ZDJOd0xXbHVjSFYwTFd0bGVTMTJZV3gxWlMxd1lXbHljeTFuZFhSMFpYSXNJQ043ZFhScGJITXVjMmw2WlNneEtYMHBPMXh1ZlZ4dVhHNW1iM0p0SUh0Y2JpQWdaM0pwWkMxaGNtVmhPaUJqWlc1MFpYSTdYRzVjYmlBZ1pHbHpjR3hoZVRvZ1ozSnBaRHRjYmlBZ1oyRndPaUIyWVhJb0xTMHRkMk53TFdsdWNIVjBMV3RsZVMxMllXeDFaUzF3WVdseWN5MW5kWFIwWlhJcE8xeHVmVnh1SWwxOSAqIiwic291cmNlc0NvbnRlbnQiOlsiQHVzZSAnQC9zdHlsZXMvdXRpbHMnIGFzIHV0aWxzO1xuXG46aG9zdCB7XG4gIC0tLXdjcC1pbnB1dC1rZXktdmFsdWUtcGFpcnMtZ3V0dGVyOiB2YXIoLS13Y3AtaW5wdXQta2V5LXZhbHVlLXBhaXJzLWd1dHRlciwgI3t1dGlscy5zaXplKDEpfSk7XG59XG5cbmZvcm0ge1xuICBncmlkLWFyZWE6IGNlbnRlcjtcblxuICBkaXNwbGF5OiBncmlkO1xuICBnYXA6IHZhcigtLS13Y3AtaW5wdXQta2V5LXZhbHVlLXBhaXJzLWd1dHRlcik7XG59XG4iLCI6aG9zdCB7XG4gIC0tLXdjcC1pbnB1dC1rZXktdmFsdWUtcGFpcnMtZ3V0dGVyOiB2YXIoLS13Y3AtaW5wdXQta2V5LXZhbHVlLXBhaXJzLWd1dHRlciwgY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCAxMHB4KSAqIDEpKTtcbn1cblxuZm9ybSB7XG4gIGdyaWQtYXJlYTogY2VudGVyO1xuICBkaXNwbGF5OiBncmlkO1xuICBnYXA6IHZhcigtLS13Y3AtaW5wdXQta2V5LXZhbHVlLXBhaXJzLWd1dHRlcik7XG59XG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWU2IyOTBJam9pTDJodmJXVXZjblZ1Ym1WeUwzZHZjbXN2WTJ4cFpXNTBMMk5zYVdWdWRDOXpjbU12WTI5dGNHOXVaVzUwY3k5bWIzSnRjeTlwYm5CMWRDMXJaWGt0ZG1Gc2RXVXRjR0ZwY25NaUxDSnpiM1Z5WTJWeklqcGJJbWx1Y0hWMExXdGxlUzEyWVd4MVpTMXdZV2x5Y3k1amIyMXdiMjVsYm5RdWMyTnpjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZGUVR0RlFVTkZPenM3UVVGSFJqdEZRVU5GTzBWQlJVRTdSVUZEUVNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklrQjFjMlVnSjBBdmMzUjViR1Z6TDNWMGFXeHpKeUJoY3lCMWRHbHNjenRjYmx4dU9taHZjM1FnZTF4dUlDQXRMUzEzWTNBdGFXNXdkWFF0YTJWNUxYWmhiSFZsTFhCaGFYSnpMV2QxZEhSbGNqb2dkbUZ5S0MwdGQyTndMV2x1Y0hWMExXdGxlUzEyWVd4MVpTMXdZV2x5Y3kxbmRYUjBaWElzSUNON2RYUnBiSE11YzJsNlpTZ3hLWDBwTzF4dWZWeHVYRzVtYjNKdElIdGNiaUFnWjNKcFpDMWhjbVZoT2lCalpXNTBaWEk3WEc1Y2JpQWdaR2x6Y0d4aGVUb2daM0pwWkR0Y2JpQWdaMkZ3T2lCMllYSW9MUzB0ZDJOd0xXbHVjSFYwTFd0bGVTMTJZV3gxWlMxd1lXbHljeTFuZFhSMFpYSXBPMXh1ZlZ4dUlsMTkgKi8iXX0= */`;\n", "import { html, LitElement, PropertyValues, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property, query } from 'lit/decorators.js';\nimport { map } from 'lit/directives/map.js';\nimport { when } from 'lit/directives/when.js';\n\nimport type { FormAssociated } from '@/utils/form.utils.js';\nimport { Editable } from '@/mixins/editable.mixin.js';\n\n// instruct esbuild to load the CSS file as a string\nimport styles from './input-key-value-pairs.component.scss';\n\n/**\n * A key-value pairs editor. Integrates into forms and allows editing string based form data.\n *\n * @element wcp-input-key-value-pairs\n *\n * @property {string} label - The label of the input element.\n * @cssprop --wcp-input-key-value-pairs-gutter - The gutter between the key-value pair inputs.\n * @slot hint - Receives optional descriptions below the input.\n *\n * @example\n * ## With optional label\n * ```html\n * <wcp-input-key-value-pairs label=\"With optional label\"></wcp-input-key-value-pairs>\n * ```\n *\n * @example\n * ## Used within a form\n * ```html\n * <form oninput=\"console.log(Array.from(new FormData(this).entries()))\" onsubmit=\"console.log(Array.from(new FormData(this).entries()));return false\" onreset=\"console.log('Reset!')\">\n *   <wcp-input-key-value-pairs name=\"embedded.\" label=\"Fully form enabled component\"></wcp-input-key-value-pairs>\n *   <button type=\"submit\">Submit</button>\n *   <button type=\"reset\">Reset</button>\n * </form>\n * ```\n */\n@customElement('wcp-input-key-value-pairs')\nexport class InputKeyValuePairs\n  extends Editable({ hasBeforeSlot: false, hasAfterSlot: false, hasBorder: false })(LitElement)\n  implements FormAssociated<FormData>\n{\n  static override readonly styles = [super.formStyles, unsafeCSS(styles)];\n\n  #rawValue = new FormData();\n  #prefixedValue = new FormData();\n  #valuePairs: [string, string | undefined][] = [['', '']];\n  #initialValue = new FormData();\n\n  get #hasEmptyPair(): boolean {\n    return this.#valuePairs.some(([key]) => key === '');\n  }\n\n  @query('form')\n  readonly form!: HTMLFormElement;\n\n  /**\n   * The name acts as a prefix to the form data keys.\n   */\n  @property({ type: String, reflect: true })\n  name = 'key-value.';\n\n  @property({ type: Boolean, reflect: true })\n  autocomplete = false;\n\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  @property({ attribute: false, noAccessor: true })\n  set value(value: FormData | undefined) {\n    // update internal value with prefixed name\n    const oldValue = this.#prefixedValue;\n    const formData = value ?? new FormData();\n\n    // first, reset internal values\n    this.#rawValue = new FormData();\n    this.#prefixedValue = new FormData();\n    this.#valuePairs = [];\n\n    // then, map the new values\n    formData.forEach((value, key) => {\n      const rawKey = key.startsWith(this.name) ? key.substring(this.name.length) : key;\n      const preKey = key.startsWith(this.name) ? key : `${this.name}${key}`;\n\n      this.#rawValue.set(rawKey, value);\n      this.#prefixedValue.set(preKey, value);\n      this.#valuePairs.push([rawKey, typeof value === 'string' ? value : '']);\n    });\n\n    // add at least on single empty pair\n    if (!this.#hasEmptyPair) this.#valuePairs.push(['', '']);\n\n    // set internal form value\n    this.internals.setFormValue(this.#prefixedValue);\n    this.checkValidity();\n    this.requestUpdate('value', oldValue);\n  }\n  get value(): FormData | undefined {\n    return this.#prefixedValue;\n  }\n\n  @property({ attribute: false, noAccessor: true })\n  set pairs(pairs: [string, string | undefined][]) {\n    this.value = pairs.reduce((formData, [key, value]) => {\n      formData.set(key, value ?? '');\n      return formData;\n    }, new FormData());\n  }\n  get pairs(): [string, string | undefined][] {\n    return this.#valuePairs.map(([key, value]) => [key, value !== '' ? value : undefined]);\n  }\n\n  protected override firstUpdated(props: PropertyValues<this>): void {\n    super.firstUpdated(props);\n    this.#initialValue = this.#rawValue;\n  }\n\n  formResetCallback() {\n    this.value = this.#initialValue;\n  }\n\n  checkValidity(): boolean {\n    if (this.required && Array.from(this.#prefixedValue.values()).length < 1) {\n      this.internals.setValidity({ valueMissing: true }, 'Invalid input');\n    } else {\n      this.internals.setValidity({});\n    }\n\n    return this.internals.validity.valid;\n  }\n\n  @eventOptions({ passive: true })\n  handleInput() {\n    // prepare new form data and make sure to keep the empty entry\n    const formData = new FormData(this.form);\n    if (this.#hasEmptyPair) formData.append('', this.#rawValue.get('') ?? '');\n    this.value = formData;\n  }\n\n  @eventOptions({ passive: true })\n  handleRemoveClick(event: MouseEvent) {\n    const button = event.currentTarget as HTMLButtonElement;\n\n    // remove the pair from the internal value\n    const before = this.#valuePairs.slice(0, Number(button.dataset.index));\n    const after = this.#valuePairs.slice(Number(button.dataset.index) + 1);\n    this.#valuePairs = [...before, ...after];\n\n    // remove the pair from the form data\n    this.#rawValue.delete(button.dataset.key!);\n    this.#prefixedValue.delete(`${this.name}${button.dataset.key!}`);\n\n    // update the internal form value\n    this.internals.setFormValue(this.#prefixedValue);\n    this.checkValidity();\n    this.requestUpdate();\n\n    // dispatch input event\n    this.dispatchEvent(new InputEvent('input', { bubbles: true, composed: true }));\n  }\n\n  override renderInput() {\n    return html`\n      <form @input=\"${this.handleInput}\">\n        ${map(\n          this.#valuePairs,\n          ([key, value], index) =>\n            html`\n              <wcp-input-key-value ?disabled=\"${this.disabled}\" name=\"${key}\" value=\"${value ?? ''}\">\n                ${when(\n                  key !== '',\n                  () => html`\n                    <wcp-button\n                      data-key=\"${key}\"\n                      data-index=\"${index}\"\n                      slot=\"after\"\n                      kind=\"icon\"\n                      @click=\"${this.handleRemoveClick}\"\n                    >\n                      <wcp-icon name=\"remove\" style=\"--wcp-icon-size: 20\"></wcp-icon>\n                    </wcp-button>\n                  `,\n                  () => html`\n                    <wcp-button disabled slot=\"after\" kind=\"icon\">\n                      <wcp-icon name=\"add\" style=\"--wcp-icon-size: 20\"></wcp-icon>\n                    </wcp-button>\n                  `\n                )}\n              </wcp-input-key-value>\n            `\n        )}\n      </form>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-input-key-value-pairs': InputKeyValuePairs;\n  }\n}\n", "export default `\n:host {\n  --wcp-editable-hint-size: var(--wcp-input-number-hint-size);\n  --wcp-editable-label-size: var(--wcp-input-number-label-size);\n  --wcp-editable-spacing: var(--wcp-input-number-spacing);\n  --wcp-editable-passive-border-radius: var(--wcp-input-number-border-radius);\n  --wcp-editable-passive-border-size: var(--wcp-input-number-border-size);\n  --wcp-editable-active-border-radius: var(--wcp-input-number-border-radius);\n  --wcp-editable-active-border-size: var(--wcp-input-number-border-size);\n  --wcp-editable-dark-background: var(--wcp-input-number-dark-background);\n  --wcp-editable-dark-border: var(--wcp-input-number-dark-border);\n  --wcp-editable-dark-color: var(--wcp-input-number-dark-color);\n  --wcp-editable-light-background: var(--wcp-input-number-light-background);\n  --wcp-editable-light-border: var(--wcp-input-number-light-border);\n  --wcp-editable-light-color: var(--wcp-input-number-light-color);\n}\n\ninput {\n  all: unset;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  box-sizing: border-box;\n  width: 100%;\n  color: var(---wcp-input-number-color);\n  text-align: left;\n}\ninput::-webkit-outer-spin-button, input::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\ninput[type=number] {\n  -moz-appearance: textfield;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { html, LitElement, PropertyValues, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property, query } from 'lit/decorators.js';\n\nimport type { FormAssociated } from '@/utils/form.utils.js';\nimport { Editable } from '@/mixins/editable.mixin.js';\n\n// instruct esbuild to load the CSS file as a string\nimport styles from './input-number.component.scss';\n\n/**\n * A numeric input element using the wcp style. Fully form aware.\n *\n * @element wcp-input-number\n *\n * @property {string} label - The label of the input element.\n *\n * @slot hint - Receives optional descriptions below the input.\n *\n * @cssprop --wcp-input-number-hint-size - The font size of the hint.\n * @cssprop --wcp-input-number-label-size - The font size of the label.\n * @cssprop --wcp-input-number-spacing - The inner spacing of the input element.\n *\n * @cssprop --wcp-input-number-dark-background - The background color of the element in dark mode.\n * @cssprop --wcp-input-number-dark-border - The border color of the element in dark mode.\n * @cssprop --wcp-input-number-dark-color - The font color of the input element in dark mode.\n *\n * @cssprop --wcp-input-number-light-background - The background color of the element in light mode.\n * @cssprop --wcp-input-number-light-border - The border color of the element in light mode.\n * @cssprop --wcp-input-number-light-color - The font color of the input element in light mode.\n *\n * @example\n * ## With optional label\n * ```html\n * <wcp-input-number label=\"With optional label\"></wcp-input-number>\n * ```\n *\n * @example\n * ## With optional initial value\n * ```html\n * <wcp-input-number label=\"With optional initial value\" value=\"23\"></wcp-input-number>\n * ```\n *\n * @example\n * ## Used within a form\n * ```html\n * <form onsubmit=\"console.log(Array.from(new FormData(this).entries()));return false\" onreset=\"console.log('Reset!')\">\n *   <wcp-input-number label=\"Fully form enabled component\"></wcp-input-number>\n *   <button type=\"submit\">Submit</button>\n *   <button type=\"reset\">Reset</button>\n * </form>\n * ```\n */\n@customElement('wcp-input-number')\nexport class InputNumber extends Editable()(LitElement) implements FormAssociated<number> {\n  static override readonly styles = [super.formStyles, unsafeCSS(styles)];\n\n  #initialValue?: number;\n\n  @query('input')\n  private readonly input?: HTMLInputElement;\n\n  @property({ type: Boolean, reflect: true })\n  autocomplete = false;\n\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  @property({ type: Boolean, reflect: true })\n  readonly = false;\n\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  @property({ type: String, reflect: true })\n  name = 'text';\n\n  @property({ type: Number, reflect: true })\n  value?: number;\n\n  protected override firstUpdated(props: PropertyValues<this>): void {\n    super.firstUpdated(props);\n    this.#initialValue = this.value;\n  }\n\n  formResetCallback() {\n    this.value = this.#initialValue;\n  }\n\n  checkValidity(): boolean {\n    if (!this.input?.checkValidity()) {\n      this.internals.setValidity({ customError: true }, 'Invalid input');\n    } else {\n      this.internals.setValidity({});\n    }\n\n    return this.internals.validity.valid;\n  }\n\n  override attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\n    super.attributeChangedCallback(name, oldValue, newValue);\n\n    if (name !== 'value') return;\n    this.checkValidity();\n    this.internals.setFormValue(this.value ? `${this.value}` : null);\n  }\n\n  @eventOptions({ passive: true })\n  handleInput(event: Event) {\n    const input = event.target as HTMLInputElement | HTMLTextAreaElement;\n    this.value = input.value ? parseFloat(input.value) : undefined;\n  }\n\n  override renderInput(id: string) {\n    return html`\n      <input\n        type=\"number\"\n        id=\"${id}\"\n        name=\"${this.name}\"\n        autocomplete=\"${this.autocomplete ? 'on' : 'off'}\"\n        ?disabled=\"${this.disabled}\"\n        ?required=\"${this.required}\"\n        .value=\"${this.value ? `${this.value}` : ''}\"\n        @input=\"${this.handleInput}\"\n      />\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-input-number': InputNumber;\n  }\n}\n", "export default `\n:host {\n  ---wcp-input-radio-size: var(--wcp-input-radio-size, calc(var(--wcp-base-size, 10px) * 2));\n  --wcp-editable-hint-size: var(--wcp-input-radio-hint-size);\n  --wcp-editable-label-size: var(--wcp-input-radio-label-size, 1em);\n  --wcp-editable-spacing: var(--wcp-input-radio-spacing, calc(var(--wcp-base-size, 10px) * 1));\n  --wcp-editable-passive-border-radius: var(--wcp-input-radio-border-radius);\n  --wcp-editable-passive-border-size: var(--wcp-input-radio-border-size);\n  --wcp-editable-active-border-radius: var(--wcp-input-radio-border-radius);\n  --wcp-editable-active-border-size: var(--wcp-input-radio-border-size);\n  --wcp-editable-dark-background: var(--wcp-input-radio-dark-background);\n  --wcp-editable-dark-border: var(--wcp-input-radio-dark-border);\n  --wcp-editable-dark-color: var(--wcp-input-radio-dark-color);\n  --wcp-editable-light-background: var(--wcp-input-radio-light-background);\n  --wcp-editable-light-border: var(--wcp-input-radio-light-border);\n  --wcp-editable-light-color: var(--wcp-input-radio-light-color);\n}\n\n#input {\n  grid-area: before;\n}\n\nlabel {\n  grid-area: center;\n  padding: 0;\n}\n\n:host([checked]) {\n  position: relative;\n}\n:host([checked])::after {\n  content: \"\";\n  pointer-events: none;\n  display: block;\n  height: calc(var(---wcp-input-radio-size) * 0.5);\n  width: calc(var(---wcp-input-radio-size) * 0.5);\n  position: absolute;\n  top: calc(var(---wcp-input-radio-size) * 0.5);\n  right: auto;\n  bottom: auto;\n  left: calc(var(---wcp-input-radio-size) * 0.5);\n  transform: translate(-50%, -50%);\n  background: var(---wcp-editable-color);\n  border-radius: 50%;\n  z-index: 1;\n  transition: var(--wcp-fx-default-duration) ease-out;\n  transition-property: height, inset, opacity, width;\n  will-change: height, inset, opacity, width;\n}\n\n:host([checked][disabled])::after {\n  opacity: 0.5;\n}\n\ninput {\n  all: unset;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  cursor: pointer;\n  box-sizing: border-box;\n  display: block;\n  height: 0;\n  width: 0;\n  margin-right: var(---wcp-editable-spacing);\n  background-color: var(---wcp-editable-background);\n  outline: var(---wcp-editable-border-size) solid var(---wcp-editable-border);\n  outline-offset: calc(var(---wcp-editable-border-size) * -1);\n  border-radius: 50%;\n  transition: var(--wcp-fx-default-duration) ease-out;\n  transition-property: opacity, outline-offset, outline-width;\n  will-change: opacity, outline-offset, outline-width;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { html, LitElement, PropertyValues, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property } from 'lit/decorators.js';\n\nimport type { FormAssociated } from '@/utils/form.utils.js';\nimport { Editable } from '@/mixins/editable.mixin.js';\n\n// instruct esbuild to load the CSS file as a string\nimport styles from './input-radio.component.scss';\n\n/**\n * A radio input element using the wcp style. Fully form aware.\n *\n * @element wcp-input-radio\n *\n * @property {string} label - The label of the input element.\n *\n * @slot hint - Receives optional descriptions below the input.\n *\n * @cssprop --wcp-input-radio-size - The size of the radio input.\n * @cssprop --wcp-input-radio-label-size - The font size of the label.\n * @cssprop --wcp-input-radio-hint-size - The font size of the hint.\n * @cssprop --wcp-input-radio-spacing - The leading distance of the label to the input.\n * @cssprop --wcp-input-radio-border-radius - The border radius of the radio input.\n * @cssprop --wcp-input-radio-border-size - The border size of the radio input.\n *\n * @cssprop --wcp-input-radio-dark-background - The background color of the radio input in dark mode.\n * @cssprop --wcp-input-radio-dark-border - The border color of the radio input in dark mode.\n * @cssprop --wcp-input-radio-dark-color - The fill color of the radio input when checked in dark mode.\n *\n * @cssprop --wcp-input-radio-light-background - The background color of the radio input in light mode.\n * @cssprop --wcp-input-radio-light-border - The border color of the radio input in light mode.\n * @cssprop --wcp-input-radio-light-color - The fill color of the radio input when checked in light mode.\n *\n * @example\n * ## With optional label\n * ```html\n * <wcp-input-radio label=\"With optional label\"></wcp-input-radio>\n * ```\n *\n * @example\n * ## With initial value\n * ```html\n * <wcp-input-radio checked label=\"With optional initial value\"></wcp-input-radio>\n * ```\n *\n * @example\n * ## Used within a form\n * ```html\n * <form onsubmit=\"console.log(Array.from(new FormData(this).entries()));return false\" onreset=\"console.log('Reset!')\">\n *   <wcp-input-radio label=\"Fully form enabled component\"></wcp-input-radio>\n *   <button type=\"submit\">Submit</button>\n *   <button type=\"reset\">Reset</button>\n * </form>\n * ```\n */\n@customElement('wcp-input-radio')\nexport class InputRadio\n  extends Editable({ hasBeforeSlot: false, hasBorder: false })(LitElement)\n  implements FormAssociated<string>\n{\n  static override readonly styles = [super.formStyles, unsafeCSS(styles)];\n  \n  #checked = false;\n  #initialChecked!: boolean;\n\n  @property({ type: String, reflect: true })\n  name = 'radio';\n\n  @property({ type: Boolean, reflect: true })\n  autocomplete = false;\n\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  @property({ type: Boolean, reflect: true, noAccessor: true })\n  set checked(checked: boolean) {\n    this.#checked = checked;\n    this.checkValidity();\n\n    this.internals.ariaChecked = String(this.checked);\n    this.internals.setFormValue(this.#checked ? this.value ?? null : null);\n  }\n  get checked(): boolean {\n    return this.#checked;\n  }\n\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  @property({ type: String, reflect: true })\n  value = 'on';\n\n  protected override firstUpdated(props: PropertyValues<this>): void {\n    super.firstUpdated(props);\n    this.internals.role = 'radio';\n    this.#initialChecked = this.#checked;\n  }\n\n  formResetCallback() {\n    this.checked = this.#initialChecked;\n  }\n\n  checkValidity(): boolean {\n    if (this.required && !this.#checked) {\n      this.internals.setValidity({ valueMissing: true }, 'Invalid input');\n    } else {\n      this.internals.setValidity({});\n    }\n\n    return this.internals.validity.valid;\n  }\n\n  @eventOptions({ passive: true })\n  handleInput(event: Event) {\n    const input = event.target as HTMLInputElement;\n    this.checked = input.checked;\n  }\n\n  override renderInput(id: string) {\n    return html`\n      <input\n        type=\"radio\"\n        id=\"${id}\"\n        name=\"${this.name}\"\n        autocomplete=\"${this.autocomplete ? 'on' : 'off'}\"\n        ?disabled=\"${this.disabled}\"\n        ?required=\"${this.required}\"\n        ?checked=\"${this.#checked}\"\n        .value=\"${this.value}\"\n        @input=\"${this.handleInput}\"\n      />\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-input-radio': InputRadio;\n  }\n}\n", "import { LitElement } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\n/**\n * A helper element to declare options for a `wcp-input-select` element.\n *\n * @element wcp-input-select-option\n */\n@customElement('wcp-input-select-option')\nexport class InputSelectOption extends LitElement {\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  @property({ type: String, reflect: true })\n  value?: string;\n\n  @property({ type: String, reflect: true })\n  label?: string;\n\n  // as this is just a declarative structural helper, we do not need any shadow DOM here\n  protected override createRenderRoot(): Element | ShadowRoot {\n    return this;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-input-select-option': InputSelectOption;\n  }\n}\n", "export default `\n:host {\n  ---wcp-input-select-arrow-size: var(--wcp-input-select-arrow-size, calc(var(--wcp-base-size, 10px) * 0.5));\n  --wcp-editable-hint-size: var(--wcp-input-select-hint-size);\n  --wcp-editable-label-size: var(--wcp-input-select-label-size);\n  --wcp-editable-spacing: var(--wcp-input-select-spacing);\n  --wcp-editable-passive-border-radius: var(--wcp-input-select-border-radius);\n  --wcp-editable-passive-border-size: var(--wcp-input-select-border-size);\n  --wcp-editable-active-border-radius: var(--wcp-input-select-border-radius);\n  --wcp-editable-active-border-size: var(--wcp-input-select-border-size);\n  --wcp-editable-dark-background: var(--wcp-input-select-dark-background);\n  --wcp-editable-dark-border: var(--wcp-input-select-dark-border);\n  --wcp-editable-dark-color: var(--wcp-input-select-dark-color);\n  --wcp-editable-light-background: var(--wcp-input-select-light-background);\n  --wcp-editable-light-border: var(--wcp-input-select-light-border);\n  --wcp-editable-light-color: var(--wcp-input-select-light-color);\n}\n\nselect {\n  all: unset;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  box-sizing: border-box;\n  width: 100%;\n  color: var(---wcp-input-select-color);\n  text-align: left;\n}\n\nslot:not([name]) {\n  display: none;\n}\n\n#input {\n  grid-area: center/center/center/after;\n}\n\n:host::after {\n  content: \"\";\n  grid-area: after;\n  align-self: center;\n  pointer-events: none;\n  margin: var(---wcp-editable-spacing);\n  margin-top: auto;\n  margin-bottom: auto;\n  display: block;\n  height: 0;\n  width: 0;\n  border: var(---wcp-input-select-arrow-size) solid;\n  border-color: transparent currentColor currentColor transparent;\n  transform-origin: 50% -25%;\n  transform: rotate(45deg);\n  transition: opacity var(--wcp-fx-default-duration) ease-out;\n  will-change: opacity;\n}\n\n:host([disabled])::after {\n  opacity: 0.5;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { html, LitElement, PropertyValues, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property, query } from 'lit/decorators.js';\n\nimport type { FormAssociated } from '@/utils/form.utils.js';\nimport { Editable } from '@/mixins/editable.mixin.js';\nimport { InputSelectOption } from './input-select-option.component.js';\n\n// instruct esbuild to load the CSS file as a string\nimport styles from './input-select.component.scss';\n\n/**\n * A numeric input element using the wcp style. Fully form aware.\n *\n * @element wcp-input-select\n * \n * @property {string} label - The label of the input element.\n * \n * @slot {<wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>} - Projects options into the select elements dropdown menu.\n * @slot hint - Receives optional descriptions below the input.\n * \n * @cssprop --wcp-input-select-arrow-size - The size of the arrow icon.\n * @cssprop --wcp-input-select-hint-size - The font size of the hint.\n * @cssprop --wcp-input-select-label-size - The font size of the label.\n * @cssprop --wcp-input-select-spacing - The inner spacing of the input element.\n\n * @cssprop --wcp-input-select-dark-background - The background color of the element in dark mode.\n * @cssprop --wcp-input-select-dark-border - The border color of the element in dark mode.\n * @cssprop --wcp-input-select-dark-color - The font color of the input element in dark mode.\n * \n * @cssprop --wcp-input-select-light-background - The background color of the element in light mode.\n * @cssprop --wcp-input-select-light-border - The border color of the element in light mode.\n * @cssprop --wcp-input-select-light-color - The font color of the input element in light mode.\n * \n * @example\n * ## With optional label\n * ```html\n * <wcp-input-select label=\"With optional label\">\n *   <wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>\n *   <wcp-input-select-option value=\"bar\" label=\"Bar\"></wcp-input-select-option>\n *   <wcp-input-select-option value=\"baz\" label=\"Baz\"></wcp-input-select-option>\n * </wcp-input-select>\n * ```\n * \n * @example\n * ## With disabled options\n * ```html\n * <wcp-input-select label=\"With disabled options\">\n *   <wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>\n *   <wcp-input-select-option value=\"bar\" label=\"Bar\" disabled></wcp-input-select-option>\n *   <wcp-input-select-option value=\"baz\" label=\"Baz\"></wcp-input-select-option>\n * </wcp-input-select>\n * ```\n * \n * @example\n * ## With optional initial value\n * ```html\n * <wcp-input-select label=\"With optional initial value\" value=\"bar\">\n *   <wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>\n *   <wcp-input-select-option value=\"bar\" label=\"Bar\"></wcp-input-select-option>\n *   <wcp-input-select-option value=\"baz\" label=\"Baz\"></wcp-input-select-option>\n * </wcp-input-select>\n * ```\n * \n * @example\n * ## Used within a form\n * ```html\n * <form onsubmit=\"console.log(Array.from(new FormData(this).entries()));return false\" onreset=\"console.log('Reset!')\">\n *   <wcp-input-select label=\"Fully form enabled component\">\n *     <wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>\n *     <wcp-input-select-option value=\"bar\" label=\"Bar\"></wcp-input-select-option>\n *     <wcp-input-select-option value=\"baz\" label=\"Baz\"></wcp-input-select-option>\n *   </wcp-input-select>\n *   <button type=\"submit\">Submit</button>\n *   <button type=\"reset\">Reset</button>\n * </form>\n * ```\n */\n@customElement('wcp-input-select')\nexport class InputSelect extends Editable({ hasAfterSlot: false })(LitElement) implements FormAssociated<string> {\n  static override readonly styles = [super.formStyles, unsafeCSS(styles)];\n\n  #initialValue?: string;\n\n  @query('select')\n  private readonly input!: HTMLSelectElement;\n\n  @property({ type: Boolean, reflect: true })\n  autocomplete = false;\n\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  @property({ type: Boolean, reflect: true })\n  readonly = false;\n\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  @property({ type: String, reflect: true })\n  name = 'text';\n\n  @property({ type: String, reflect: true })\n  value?: string;\n\n  protected override firstUpdated(props: PropertyValues<this>): void {\n    super.firstUpdated(props);\n    this.#initialValue = this.value;\n  }\n\n  formResetCallback() {\n    this.value = this.#initialValue;\n  }\n\n  checkValidity(): boolean {\n    if (!this.input.checkValidity()) {\n      this.internals.setValidity({ customError: true }, 'Invalid input');\n    } else {\n      this.internals.setValidity({});\n    }\n\n    return this.internals.validity.valid;\n  }\n\n  override attributeChangedCallback(name: string, oldValue: string |\u00A0null, newValue: string |\u00A0null): void {\n    super.attributeChangedCallback(name, oldValue, newValue);\n\n    if (name !== 'value') return;\n    this.checkValidity();\n    this.internals.setFormValue(this.value ?? null);\n  }\n\n  @eventOptions({ passive: true })\n  handleSlotChange(event: Event) {\n    // collect all slotted options\n    const slot = event.target as HTMLSlotElement;\n    const options = slot\n      .assignedElements({ flatten: true })\n      .filter((element) => element instanceof InputSelectOption) as InputSelectOption[];\n\n    // clear the input and append the options as copies\n    this.input.innerHTML = '';\n    this.input.append(\n      ...options.map((option) => {\n        const copy = document.createElement('option');\n        copy.value = option.value ?? '';\n        copy.textContent = option.label ?? '';\n        copy.disabled = option.disabled;\n        copy.selected = copy.value === this.value;\n        return copy;\n      })\n    );\n  }\n\n  @eventOptions({ passive: true })\n  handleInput(event: Event) {\n    const input = event.target as HTMLInputElement | HTMLTextAreaElement;\n    this.value = input.value ?? undefined;\n  }\n\n  override renderInput(id: string) {\n    return html`\n      <select\n        id=\"${id}\"\n        name=\"${this.name}\"\n        autocomplete=\"${this.autocomplete ? 'on' : 'off'}\"\n        ?disabled=\"${this.disabled}\"\n        ?required=\"${this.required}\"\n        .value=\"${this.value ?? ''}\"\n        @input=\"${this.handleInput}\"\n      ></select>\n      <slot @slotchange=\"${this.handleSlotChange}\"></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-input-select': InputSelect;\n  }\n}\n", "export default `\n:host {\n  --wcp-editable-hint-size: var(--wcp-input-text-hint-size);\n  --wcp-editable-label-size: var(--wcp-input-text-label-size);\n  --wcp-editable-spacing: var(--wcp-input-text-spacing);\n  --wcp-editable-passive-border-radius: var(--wcp-input-text-border-radius);\n  --wcp-editable-passive-border-size: var(--wcp-input-text-border-size);\n  --wcp-editable-active-border-radius: var(--wcp-input-text-border-radius);\n  --wcp-editable-active-border-size: var(--wcp-input-text-border-size);\n  --wcp-editable-dark-background: var(--wcp-input-text-dark-background);\n  --wcp-editable-dark-border: var(--wcp-input-text-dark-border);\n  --wcp-editable-dark-color: var(--wcp-input-text-dark-color);\n  --wcp-editable-light-background: var(--wcp-input-text-light-background);\n  --wcp-editable-light-border: var(--wcp-input-text-light-border);\n  --wcp-editable-light-color: var(--wcp-input-text-light-color);\n}\n\ninput,\ntextarea {\n  all: unset;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  box-sizing: border-box;\n  width: 100%;\n  color: var(---wcp-input-text-color);\n  text-align: left;\n}\n\ninput[type=search]::-webkit-search-decoration, input[type=search]::-webkit-search-cancel-button, input[type=search]::-webkit-search-results-button, input[type=search]::-webkit-search-results-decoration {\n  display: none;\n}\n\ntextarea {\n  aspect-ratio: 16/9;\n  max-height: 200px;\n  resize: vertical;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { html, LitElement, PropertyValues, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property, query } from 'lit/decorators.js';\n\nimport type { FormAssociated } from '@/utils/form.utils.js';\nimport { Editable } from '@/mixins/editable.mixin.js';\n\n// instruct esbuild to load the CSS file as a string\nimport styles from './input-text.component.scss';\n\n/**\n * A text input element using the wcp style. Fully form aware.\n * Can display multiline text (textarea) if configured to do so.\n *\n * @element wcp-input-text\n *\n * @property {string} label - The label of the input element.\n *\n * @slot hint - Receives optional descriptions below the input.\n *\n * @cssprop --wcp-input-text-hint-size - The font size of the hint.\n * @cssprop --wcp-input-text-label-size - The font size of the label.\n * @cssprop --wcp-input-text-spacing - The inner spacing of the input element.\n *\n * @cssprop --wcp-input-text-dark-background - The background color of the element in dark mode.\n * @cssprop --wcp-input-text-dark-border - The border color of the element in dark mode.\n * @cssprop --wcp-input-text-dark-color - The font color of the input element in dark mode.\n *\n * @cssprop --wcp-input-text-light-background - The background color of the element in light mode.\n * @cssprop --wcp-input-text-light-border - The border color of the element in light mode.\n * @cssprop --wcp-input-text-light-color - The font color of the input element in light mode.\n *\n * @example\n * ## With optional label\n * ```html\n * <wcp-input-text label=\"With optional label\"></wcp-input-text>\n * ```\n *\n * @example\n * ## With optional initial value\n * ```html\n * <wcp-input-text label=\"With optional initial value\" value=\"Foo\"></wcp-input-text>\n * ```\n *\n * @example\n * ## Multiline\n * ```html\n * <wcp-input-text multiline label=\"With multiline value\"></wcp-input-text>\n * ```\n *\n * @example\n * ## Used within a form\n * ```html\n * <form onsubmit=\"console.log(Array.from(new FormData(this).entries()));return false\" onreset=\"console.log('Reset!')\">\n *   <wcp-input-text label=\"Fully form enabled component\"></wcp-input-text>\n *   <button type=\"submit\">Submit</button>\n *   <button type=\"reset\">Reset</button>\n * </form>\n * ```\n */\n@customElement('wcp-input-text')\nexport class InputText extends Editable()(LitElement) implements FormAssociated<string> {\n  static override readonly styles = [super.formStyles, unsafeCSS(styles)];\n\n  #initialValue?: string;\n\n  @query('input, textarea')\n  private readonly input?: HTMLInputElement | HTMLTextAreaElement;\n\n  @property({ type: Boolean, reflect: true })\n  multiline = false;\n\n  @property({ type: Boolean, reflect: true })\n  autocomplete = false;\n\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  @property({ type: Boolean, reflect: true })\n  readonly = false;\n\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  @property({ type: String, reflect: true })\n  name = 'text';\n\n  /**\n   * Can be set to to `text`, `email`, `password`, `search`, `tel`, or `url`. \\\n   * Beware that this will be ignored if combined with the `multiline` attribute.\n   */\n  @property({ type: String, reflect: true })\n  type: 'text' | 'email' | 'password' | 'search' | 'tel' | 'url' = 'text';\n\n  @property({ type: String, reflect: true })\n  value?: string;\n\n  protected override firstUpdated(props: PropertyValues<this>): void {\n    super.firstUpdated(props);\n    this.#initialValue = this.value;\n  }\n\n  formResetCallback() {\n    this.value = this.#initialValue;\n  }\n\n  checkValidity(): boolean {\n    if (!this.input?.checkValidity()) {\n      this.internals.setValidity({ customError: true }, 'Invalid input');\n    } else {\n      this.internals.setValidity({});\n    }\n\n    return this.internals.validity.valid;\n  }\n\n  override attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\n    super.attributeChangedCallback(name, oldValue, newValue);\n\n    if (name !== 'value') return;\n    this.checkValidity();\n    this.internals.setFormValue(this.value ?? null);\n  }\n\n  @eventOptions({ passive: true })\n  handleInput(event: Event) {\n    const input = event.target as HTMLInputElement | HTMLTextAreaElement;\n    this.value = input.value ?? undefined;\n  }\n\n  override renderInput(id: string) {\n    if (this.multiline) {\n      return html`\n        <textarea\n          id=\"${id}\"\n          name=\"${this.name}\"\n          autocomplete=\"${this.autocomplete ? 'on' : 'off'}\"\n          ?disabled=\"${this.disabled}\"\n          ?required=\"${this.required}\"\n          .value=\"${this.value ?? ''}\"\n          @input=\"${this.handleInput}\"\n        ></textarea>\n      `;\n    }\n\n    return html`\n      <input\n        type=\"${this.type}\"\n        id=\"${id}\"\n        name=\"${this.name}\"\n        autocomplete=\"${this.autocomplete ? 'on' : 'off'}\"\n        ?disabled=\"${this.disabled}\"\n        ?required=\"${this.required}\"\n        .value=\"${this.value ?? ''}\"\n        @input=\"${this.handleInput}\"\n      />\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-input-text': InputText;\n  }\n}\n", "export default `\n:host {\n  ---wcp-aside-max-width: var(--wcp-aside-max-width, calc(var(--wcp-base-size, 10px) * 24));\n  ---wcp-aside-spacing: var(--wcp-aside-spacing, 0);\n  ---wcp-aside-dark-background: var(--wcp-aside-dark-background, var(--wcp-color-blue-13));\n  ---wcp-aside-dark-color: var(--wcp-aside-dark-color, var(--wcp-color-blue-96));\n  ---wcp-aside-light-background: var(--wcp-aside-dark-background, var(--wcp-color-blue-17));\n  ---wcp-aside-light-color: var(--wcp-aside-dark-color, var(--wcp-color-blue-96));\n  ---wcp-aside-toggle-size: var(--wcp-aside-toggle-size, calc(var(--wcp-base-size, 10px) * 2));\n}\n@media (prefers-color-scheme: dark) {\n  :host {\n    ---wcp-aside-background: var(---wcp-aside-dark-background);\n    ---wcp-aside-color: var(---wcp-aside-dark-color);\n  }\n}\n:host([color-scheme=dark]):host {\n  ---wcp-aside-background: var(---wcp-aside-dark-background);\n  ---wcp-aside-color: var(---wcp-aside-dark-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    ---wcp-aside-background: var(---wcp-aside-light-background);\n    ---wcp-aside-color: var(---wcp-aside-light-color);\n  }\n}\n:host([color-scheme=light]):host {\n  ---wcp-aside-background: var(---wcp-aside-light-background);\n  ---wcp-aside-color: var(---wcp-aside-light-color);\n}\n\n:host {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 3;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  padding: var(---wcp-aside-spacing);\n  height: 100%;\n  max-width: 100%;\n  min-width: 100%;\n  background-color: var(---wcp-aside-background);\n  color: var(---wcp-aside-color);\n  transition: transform ease-in-out var(--wcp-fx-layout-duration);\n  will-change: transform;\n}\n@media (min-width: 768px) {\n  :host {\n    position: relative;\n    max-width: var(---wcp-aside-max-width);\n    min-width: var(---wcp-aside-max-width);\n    transition: margin-left ease-in-out var(--wcp-fx-layout-duration);\n    will-change: margin-left;\n  }\n}\n\n:host([hidden]) {\n  transform: translateX(-100%);\n}\n@media (min-width: 768px) {\n  :host([hidden]) {\n    transform: none;\n    margin-left: calc(var(---wcp-aside-max-width) * -1);\n  }\n}\n\nheader {\n  position: sticky;\n  top: 0;\n  right: 0;\n  bottom: auto;\n  left: 0;\n  z-index: 4;\n}\n\nsection {\n  overflow: auto;\n  overflow-x: hidden;\n}\n\nwcp-button {\n  position: absolute;\n  top: calc(10px * 0.4);\n  top: calc(var(--wcp-base-size, 10px) * 0.4);\n  right: calc(10px * 1.5);\n  right: calc(var(--wcp-base-size, 10px) * 1.5);\n}\n@media (min-width: 768px) {\n  wcp-button {\n    display: none;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property } from 'lit/decorators.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\n\nimport styles from './aside.component.scss';\n\n/**\n * To toggle the side bar remotely, you can dispatch a custom event on the global window object:\n * ```js\n * window.dispatchEvent(new CustomEvent('wcp-aside:toggle'));\n * ```\n * You may pass an optional boolean value to the event to toggle the side bar to a specific state:\n * ```js\n * window.dispatchEvent(new CustomEvent('wcp-aside:toggle', { detail: true }));\n * ```\n *\n * @slot - Projects elements aside the main content\n * @slot header - Elements in the fixed header of the side bar\n *\n * @emits wcp-aside:toggled - Dispatches this event when the side bar has been toggled. Do not get confused with the `wcp-aside:toggle` event.\n *\n * @cssprop --wcp-aside-max-width - The maximum width of the aside bar when visible\n * @cssprop --wcp-aside-spacing - Inner padding of the aside bar\n * @cssprop --wcp-aside-toggle-size - The size of the toggle button\n *\n * @cssprop --wcp-aside-dark-background - The background color of the side bar in dark mode\n * @cssprop --wcp-aside-dark-color - The color of the side bar in dark mode\n *\n * @cssprop --wcp-aside-light-background - The background color of the side bar in light mode\n * @cssprop --wcp-aside-light-color - The color of the side bar in light mode\n */\n@customElement('wcp-aside')\nexport class Aside extends ColorSchemable(LitElement) {\n  static override readonly styles = unsafeCSS(styles);\n\n  /**\n   * Used to toggle the width of the aside bar\n   */\n  @property({ type: Boolean, reflect: true })\n  override hidden = false;\n\n  /**\n   * Presets the aria role to `complementary` as we do not use te aside element directly\n   * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/complementary_role\n   */\n  @property({ type: String, reflect: true })\n  override role = 'complementary';\n\n  emitToggled() {\n    const event = new CustomEvent('wcp-aside:toggled', {\n      bubbles: true,\n      cancelable: true,\n      composed: true,\n      detail: this.hidden,\n    });\n    this.dispatchEvent(event);\n  }\n\n  @eventOptions({ passive: true })\n  handleButtonClick() {\n    this.hidden = true;\n    this.emitToggled();\n  }\n\n  listenAsideToggle = (({ detail }: CustomEvent<boolean | null>) => {\n    this.hidden = detail ?? !this.hidden;\n    this.emitToggled();\n  }).bind(this);\n\n  override connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('wcp-aside:toggle', this.listenAsideToggle, false);\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener('wcp-aside:toggle', this.listenAsideToggle, false);\n  }\n\n  protected override render(): TemplateResult {\n    return html`\n      <header>\n        <slot name=\"header\"></slot>\n        <wcp-button kind=\"icon\" @click=\"${this.handleButtonClick}\">\n          <wcp-icon name=\"close\"></wcp-icon>\n        </wcp-button>\n      </header>\n      <section>\n        <slot></slot>\n      </section>\n    `;\n  }\n}\n\ndeclare global {\n  interface WindowEventMap {\n    'wcp-aside:toggle': CustomEvent<boolean | null>;\n  }\n  interface HTMLElementEventMap {\n    'wcp-aside:toggled': CustomEvent<boolean>;\n  }\n  interface HTMLElementTagNameMap {\n    'wcp-aside': Aside;\n  }\n}\n", "export default `\n:host {\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  overflow: hidden;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2NsaWVudC9jbGllbnQvc3JjL2NvbXBvbmVudHMvbGF5b3V0L2xheW91dC9sYXlvdXQuY29tcG9uZW50LnNjc3MiLCI6aG9zdCUyMCU3QiUwQSUyMCUyMGRpc3BsYXk6JTIwZmxleDslMEElMjAlMjBmbGV4LWRpcmVjdGlvbjolMjByb3c7JTBBJTIwJTIwaGVpZ2h0OiUyMDEwMCUyNTslMEElMjAlMjBvdmVyZmxvdzolMjBoaWRkZW47JTBBJTdEJTBBLyolMjMlMjBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTlzWVhsdmRYUXZiR0Y1YjNWMElpd2ljMjkxY21ObGN5STZXeUpzWVhsdmRYUXVZMjl0Y0c5dVpXNTBMbk5qYzNNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlJVRTdSVUZEUlR0RlFVTkJPMFZCUlVFN1JVRkRRU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWtCMWMyVWdKMEF2YzNSNWJHVnpMM1YwYVd4ekp5QmhjeUIxZEdsc2N6dGNibHh1T21odmMzUWdlMXh1SUNCa2FYTndiR0Y1T2lCbWJHVjRPMXh1SUNCbWJHVjRMV1JwY21WamRHbHZiam9nY205M08xeHVYRzRnSUdobGFXZG9kRG9nTVRBd0pUdGNiaUFnYjNabGNtWnNiM2M2SUdocFpHUmxianRjYm4xY2JpSmRmUT09JTIwKiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUVBLFlBQUE7RUFDQSxnQkFBQTtBQ0ZGIiwiZmlsZSI6Ijpob3N0IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVlNiMjkwSWpvaUwyaHZiV1V2Y25WdWJtVnlMM2R2Y21zdlkyeHBaVzUwTDJOc2FXVnVkQzl6Y21NdlkyOXRjRzl1Wlc1MGN5OXNZWGx2ZFhRdmJHRjViM1YwSWl3aWMyOTFjbU5sY3lJNld5SnNZWGx2ZFhRdVkyOXRjRzl1Wlc1MExuTmpjM01pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUlVFN1JVRkRSVHRGUVVOQk8wVkJSVUU3UlVGRFFTSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJa0IxYzJVZ0owQXZjM1I1YkdWekwzVjBhV3h6SnlCaGN5QjFkR2xzY3p0Y2JseHVPbWh2YzNRZ2UxeHVJQ0JrYVhOd2JHRjVPaUJtYkdWNE8xeHVJQ0JtYkdWNExXUnBjbVZqZEdsdmJqb2djbTkzTzF4dVhHNGdJR2hsYVdkb2REb2dNVEF3SlR0Y2JpQWdiM1psY21ac2IzYzZJR2hwWkdSbGJqdGNibjFjYmlKZGZRPT0gKiIsInNvdXJjZXNDb250ZW50IjpbIkB1c2UgJ0Avc3R5bGVzL3V0aWxzJyBhcyB1dGlscztcblxuOmhvc3Qge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuXG4gIGhlaWdodDogMTAwJTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbiIsIjpob3N0IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVlNiMjkwSWpvaUwyaHZiV1V2Y25WdWJtVnlMM2R2Y21zdlkyeHBaVzUwTDJOc2FXVnVkQzl6Y21NdlkyOXRjRzl1Wlc1MGN5OXNZWGx2ZFhRdmJHRjViM1YwSWl3aWMyOTFjbU5sY3lJNld5SnNZWGx2ZFhRdVkyOXRjRzl1Wlc1MExuTmpjM01pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUlVFN1JVRkRSVHRGUVVOQk8wVkJSVUU3UlVGRFFTSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJa0IxYzJVZ0owQXZjM1I1YkdWekwzVjBhV3h6SnlCaGN5QjFkR2xzY3p0Y2JseHVPbWh2YzNRZ2UxeHVJQ0JrYVhOd2JHRjVPaUJtYkdWNE8xeHVJQ0JtYkdWNExXUnBjbVZqZEdsdmJqb2djbTkzTzF4dVhHNGdJR2hsYVdkb2REb2dNVEF3SlR0Y2JpQWdiM1psY21ac2IzYzZJR2hwWkdSbGJqdGNibjFjYmlKZGZRPT0gKi8iXX0= */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\nimport styles from './layout.component.scss';\n\n/**\n * @example\n * ```html\n * <wcp-layout>\n *   <nav slot=\"aside\">To the left!</nav>\n *   <article>Me the important content!</article>\n * </wcp-layout>\n * ```\n *\n * @slot header - Shows contents fixed above the aside\n * @slot aside - Projects elements aside the main content\n * @slot - Receives the content of the main section\n */\n@customElement('wcp-layout')\nexport class Layout extends LitElement {\n  static override readonly styles = unsafeCSS(styles);\n\n  protected override render(): TemplateResult {\n    return html`\n      <wcp-aside>\n        <slot name=\"header\" slot=\"header\"></slot>\n        <slot name=\"aside\"></slot>\n      </wcp-aside>\n\n      <wcp-main>\n        <slot></slot>\n      </wcp-main>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-layout': Layout;\n  }\n}\n", "export default `\n:host {\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  height: 100%;\n  overflow: auto;\n  overflow-x: hidden;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2NsaWVudC9jbGllbnQvc3JjL2NvbXBvbmVudHMvbGF5b3V0L21haW4vbWFpbi5jb21wb25lbnQuc2NzcyIsIjpob3N0JTIwJTdCJTBBJTIwJTIwZGlzcGxheTolMjBmbGV4OyUwQSUyMCUyMGZsZXgtZGlyZWN0aW9uOiUyMGNvbHVtbjslMEElMjAlMjBmbGV4OiUyMDElMjAxJTIwYXV0bzslMEElMjAlMjBoZWlnaHQ6JTIwMTAwJTI1OyUwQSUyMCUyMG92ZXJmbG93OiUyMGF1dG87JTBBJTIwJTIwb3ZlcmZsb3cteDolMjBoaWRkZW47JTBBJTdEJTBBLyolMjMlMjBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTlzWVhsdmRYUXZiV0ZwYmlJc0luTnZkWEpqWlhNaU9sc2liV0ZwYmk1amIyMXdiMjVsYm5RdWMyTnpjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZGUVR0RlFVTkZPMFZCUTBFN1JVRkRRVHRGUVVWQk8wVkJRMEU3UlVGRFFTSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJa0IxYzJVZ0owQXZjM1I1YkdWekwzVjBhV3h6SnlCaGN5QjFkR2xzY3p0Y2JseHVPbWh2YzNRZ2UxeHVJQ0JrYVhOd2JHRjVPaUJtYkdWNE8xeHVJQ0JtYkdWNExXUnBjbVZqZEdsdmJqb2dZMjlzZFcxdU8xeHVJQ0JtYkdWNE9pQXhJREVnWVhWMGJ6dGNibHh1SUNCb1pXbG5hSFE2SURFd01DVTdYRzRnSUc5MlpYSm1iRzkzT2lCaGRYUnZPMXh1SUNCdmRtVnlabXh2ZHkxNE9pQm9hV1JrWlc0N1hHNTlYRzRpWFgwPSUyMCoiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxjQUFBO0VBRUEsWUFBQTtFQUNBLGNBQUE7RUFDQSxrQkFBQTtBQ0ZGIiwiZmlsZSI6Ijpob3N0IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZmxleDogMSAxIGF1dG87XG4gIGhlaWdodDogMTAwJTtcbiAgb3ZlcmZsb3c6IGF1dG87XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcbn1cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTlzWVhsdmRYUXZiV0ZwYmlJc0luTnZkWEpqWlhNaU9sc2liV0ZwYmk1amIyMXdiMjVsYm5RdWMyTnpjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZGUVR0RlFVTkZPMFZCUTBFN1JVRkRRVHRGUVVWQk8wVkJRMEU3UlVGRFFTSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJa0IxYzJVZ0owQXZjM1I1YkdWekwzVjBhV3h6SnlCaGN5QjFkR2xzY3p0Y2JseHVPbWh2YzNRZ2UxeHVJQ0JrYVhOd2JHRjVPaUJtYkdWNE8xeHVJQ0JtYkdWNExXUnBjbVZqZEdsdmJqb2dZMjlzZFcxdU8xeHVJQ0JtYkdWNE9pQXhJREVnWVhWMGJ6dGNibHh1SUNCb1pXbG5hSFE2SURFd01DVTdYRzRnSUc5MlpYSm1iRzkzT2lCaGRYUnZPMXh1SUNCdmRtVnlabXh2ZHkxNE9pQm9hV1JrWlc0N1hHNTlYRzRpWFgwPSAqIiwic291cmNlc0NvbnRlbnQiOlsiQHVzZSAnQC9zdHlsZXMvdXRpbHMnIGFzIHV0aWxzO1xuXG46aG9zdCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGZsZXg6IDEgMSBhdXRvO1xuXG4gIGhlaWdodDogMTAwJTtcbiAgb3ZlcmZsb3c6IGF1dG87XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcbn1cbiIsIjpob3N0IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZmxleDogMSAxIGF1dG87XG4gIGhlaWdodDogMTAwJTtcbiAgb3ZlcmZsb3c6IGF1dG87XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcbn1cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTlzWVhsdmRYUXZiV0ZwYmlJc0luTnZkWEpqWlhNaU9sc2liV0ZwYmk1amIyMXdiMjVsYm5RdWMyTnpjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZGUVR0RlFVTkZPMFZCUTBFN1JVRkRRVHRGUVVWQk8wVkJRMEU3UlVGRFFTSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJa0IxYzJVZ0owQXZjM1I1YkdWekwzVjBhV3h6SnlCaGN5QjFkR2xzY3p0Y2JseHVPbWh2YzNRZ2UxeHVJQ0JrYVhOd2JHRjVPaUJtYkdWNE8xeHVJQ0JtYkdWNExXUnBjbVZqZEdsdmJqb2dZMjlzZFcxdU8xeHVJQ0JtYkdWNE9pQXhJREVnWVhWMGJ6dGNibHh1SUNCb1pXbG5hSFE2SURFd01DVTdYRzRnSUc5MlpYSm1iRzkzT2lCaGRYUnZPMXh1SUNCdmRtVnlabXh2ZHkxNE9pQm9hV1JrWlc0N1hHNTlYRzRpWFgwPSAqLyJdfQ== */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport styles from './main.component.scss';\n\n/**\n * @slot - Projects elements to the main content\n */\n@customElement('wcp-main')\nexport class Main extends LitElement {\n  static override readonly styles = unsafeCSS(styles);\n\n  /**\n   * Presets the aria role to `main` as we do not use te main element directly\n   * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/main_role\n   */\n  @property({ type: String, reflect: true })\n  override role = 'main';\n\n  protected override render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-main': Main;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of class names to truthy values.\n */\nexport interface ClassInfo {\n  readonly [name: string]: string | boolean | number;\n}\n\nclass ClassMapDirective extends Directive {\n  /**\n   * Stores the ClassInfo object applied to a given AttributePart.\n   * Used to unset existing values when a new ClassInfo object is applied.\n   */\n  private _previousClasses?: Set<string>;\n  private _staticClasses?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        '`classMap()` can only be used in the `class` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(classInfo: ClassInfo) {\n    // Add spaces to ensure separation from static classes\n    return (\n      ' ' +\n      Object.keys(classInfo)\n        .filter((key) => classInfo[key])\n        .join(' ') +\n      ' '\n    );\n  }\n\n  override update(part: AttributePart, [classInfo]: DirectiveParameters<this>) {\n    // Remember dynamic classes on the first render\n    if (this._previousClasses === undefined) {\n      this._previousClasses = new Set();\n      if (part.strings !== undefined) {\n        this._staticClasses = new Set(\n          part.strings\n            .join(' ')\n            .split(/\\s/)\n            .filter((s) => s !== '')\n        );\n      }\n      for (const name in classInfo) {\n        if (classInfo[name] && !this._staticClasses?.has(name)) {\n          this._previousClasses.add(name);\n        }\n      }\n      return this.render(classInfo);\n    }\n\n    const classList = part.element.classList;\n\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that we don't require down-level\n    // iteration.\n    this._previousClasses.forEach((name) => {\n      if (!(name in classInfo)) {\n        classList.remove(name);\n        this._previousClasses!.delete(name);\n      }\n    });\n\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      const value = !!classInfo[name];\n      if (\n        value !== this._previousClasses.has(name) &&\n        !this._staticClasses?.has(name)\n      ) {\n        if (value) {\n          classList.add(name);\n          this._previousClasses.add(name);\n        } else {\n          classList.remove(name);\n          this._previousClasses.delete(name);\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies dynamic CSS classes.\n *\n * This must be used in the `class` attribute and must be the only part used in\n * the attribute. It takes each property in the `classInfo` argument and adds\n * the property name to the element's `classList` if the property value is\n * truthy; if the property value is falsey, the property name is removed from\n * the element's `class`.\n *\n * For example `{foo: bar}` applies the class `foo` if the value of `bar` is\n * truthy.\n *\n * @param classInfo\n */\nexport const classMap = directive(ClassMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {ClassMapDirective};\n", "/**\n *\tCompress a string with browser native APIs into a string representation\n *\n * @param data - Input string that should be compressed\n * @param encoding - Compression algorithm to use\n * @returns The compressed string\n */\nexport async function compress(data: string, encoding: CompressionFormat): Promise<string> {\n  // stream the string through the compressor\n  const stream = new Blob([new TextEncoder().encode(data)]).stream().pipeThrough(new CompressionStream(encoding));\n  // convert the stream to an array buffer\n  const buffer = await new Response(stream).arrayBuffer();\n  // convert the array buffer to a binary string\n  const binary = Array.from(new Uint8Array(buffer), (x) => String.fromCodePoint(x)).join('');\n  // convert and deliver the binary as ascii string\n  return btoa(binary);\n}\n\n/**\n * Decompress a string representation with browser native APIs in to a normal js string\n *\n * @param data - String that should be decompressed\n * @param encoding - Decompression algorithm to use\n * @returns The decompressed string\n */\nexport async function decompress(data: string, encoding: CompressionFormat): Promise<string> {\n  // convert the input to a binary string\n  const binary = atob(data);\n  // stream the string through the decompressor\n  const stream = new Blob([Uint8Array.from(binary, (m) => m.codePointAt(0) ?? 0)])\n    .stream()\n    .pipeThrough(new DecompressionStream(encoding));\n  // convert the stream to a string\n  return new Response(stream).text();\n}\n", "// taken over from https://terodox.tech/how-to-tell-if-an-element-is-in-the-dom-including-the-shadow-dom/\n// not the best implementation, but it works for now\nexport function isElementWithin(element: Element, container: Element = document.documentElement): boolean {\n  let currentElement: Node = element;\n  while (currentElement && currentElement.parentNode) {\n    // derive next parent node\n    if (currentElement.parentNode instanceof ShadowRoot) {\n      currentElement = currentElement.parentNode.host;\n    } else {\n      currentElement = currentElement.parentNode;\n    }\n    // check for a match\n    if (container.isSameNode(currentElement)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Delivers the relative boundary of an element to an optional parent.\n * If the parent element is omitted, the offset parent of the element is used.\n */\nexport function getRelativeBoundary(\n  element: HTMLElement,\n  parent: Element | null = element.offsetParent\n): Pick<DOMRect, 'x' | 'y' | 'height' | 'width'> {\n  const { height, width, x, y } = element.getBoundingClientRect();\n  const { x: relX = 0, y: relY = 0 } = parent?.getBoundingClientRect() ?? {};\n  return { height, width, x: x - relX, y: y - relY };\n}\n\n/**\n * Returns the list of ancestor elements by reference to a given element.\n */\nexport function getAncestorPath(\n  element: Element,\n  check: (element: Element) => boolean = () => true\n): (Element | Document)[] {\n  const ancestors: Element[] = [];\n  let currentElement: Element | null = element;\n  while (currentElement !== null) {\n    if (!check(currentElement)) break;\n    ancestors.unshift(currentElement);\n    currentElement = currentElement.parentElement ?? (currentElement.getRootNode() as ShadowRoot).host ?? null;\n  }\n  return ancestors;\n}\n\n/**\n * Determine if an element is a descendant of another element by tag name.\n */\nexport function isDescendantOf(element: Element, ancestor: string): boolean {\n  let isMatch = false;\n  getAncestorPath(element, ({ tagName }) => !(isMatch = tagName.toLowerCase() === ancestor));\n  return isMatch;\n}\n", "import type * as CEM from 'custom-elements-manifest';\n\nexport type CustomElementDeclarationWithExamples = CEM.CustomElementDeclaration & { examples: string[] };\nexport type CustomElementDeclarationWithGroups = CEM.CustomElementDeclaration & { groups: string[] };\nexport type CustomElementDeclarationWithReadme = CEM.CustomElementDeclaration & { readme: string };\nexport type CustomElementDeclarationWithTagName = CEM.CustomElementDeclaration & { tagName: string[] };\n\nexport function isCustomElementDeclarationWithTagName(\n  declaration?: CEM.Declaration\n): declaration is CustomElementDeclarationWithTagName {\n  return declaration !== undefined && 'customElement' in declaration && 'tagName' in declaration;\n}\n\nexport function isCustomElementField(field?: CEM.ClassMember): field is CEM.CustomElementField {\n  return field?.kind === 'field';\n}\n\nexport const WRAPPED_STRING_REGEX = /^['\"`](.*)['\"`]$/;\nexport function unwrapString(value: string): string {\n  return value.replace(WRAPPED_STRING_REGEX, '$1');\n}\n\nexport function getEnumValues(field: CEM.CustomElementField): string[] {\n  const parsed = field.type?.text?.split('|') ?? [];\n  const trimmed = parsed.map((value) => value.trim());\n  const unique = new Set(trimmed);\n  return [...unique].filter((value) => value !== '');\n}\n", "import type * as CEM from 'custom-elements-manifest';\nimport type { Field } from '@/utils/parser.types.js';\n\nimport { WRAPPED_STRING_REGEX, getEnumValues, unwrapString } from '../utils.js';\n\nexport const CemField = class {\n  #types: string[];\n  #enumValues: string[];\n\n  get isBoolean(): boolean {\n    return this.#types[0] === 'boolean';\n  }\n  get isNumber(): boolean {\n    return this.#types[0] === 'number';\n  }\n  get isString(): boolean {\n    return this.#types[0] === 'string' || WRAPPED_STRING_REGEX.test(this.#types[0] ?? '');\n  }\n  get isEnum(): boolean {\n    return this.#types.length > 1 && this.#types[1] !== 'undefined';\n  }\n  get isArray(): boolean {\n    return this.#types[0]?.endsWith('[]');\n  }\n  get isObject(): boolean {\n    return !!this._field.type && !this.isBoolean && !this.isNumber && !this.isString && !this.isArray;\n  }\n\n  get isControllable(): boolean {\n    return this.isPublic && !this.isStatic;\n  }\n\n  get isOptional(): boolean {\n    return !!this._field.type?.text.endsWith(' | undefined');\n  }\n\n  get hasAttribute(): boolean {\n    return 'attribute' in this._field && !!this._field.reflects;\n  }\n\n  get hasDefault(): boolean {\n    return this._field.default !== undefined;\n  }\n\n  get hasDescription(): boolean {\n    return this._field.default !== undefined;\n  }\n\n  get isStatic(): boolean {\n    return !!this._field.static;\n  }\n  get isPublic(): boolean {\n    return !this._field.privacy || this._field.privacy === 'public';\n  }\n  get isPrivate(): boolean {\n    return this._field.privacy === 'private';\n  }\n  get isProtected(): boolean {\n    return this._field.privacy === 'protected';\n  }\n\n  get enumValues(): string[] {\n    return this.#enumValues;\n  }\n\n  get default(): string | number | boolean | undefined {\n    if (this.isBoolean) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return this.hasDefault && this._field.default!.startsWith('true');\n    }\n    if (this.isNumber) {\n      return this.hasDefault && Number(this._field.default);\n    }\n    if (this.isString) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return this.hasDefault ? unwrapString(this._field.default!) : '';\n    }\n\n    return this._field.default;\n  }\n\n  constructor(private _field: CEM.CustomElementField) {\n    this.#types = getEnumValues(this._field);\n    this.#enumValues = this.#types.map(unwrapString);\n\n    // allow access to the original data by proxying\n    return new Proxy(this, {\n      get: (t: this, p: keyof Element) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return p in t ? (t as any)[p] : (this._field as any)[p];\n      },\n    });\n  }\n} as unknown as Field;\n", "import type * as CEM from 'custom-elements-manifest';\nimport type { Slot } from '@/utils/parser.types.js';\n\nexport const CemSlot = class {\n  get default(): string {\n    // we use a bug in the analyzer for the time being to provide default contents\n    // for slots by their inofficial (and maybe unintentionally shipped) type data\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (this._slot as any).type?.text ?? '';\n  }\n\n  get hasDescription(): boolean {\n    return this._slot.description !== undefined;\n  }\n\n  constructor(private _slot: CEM.Slot) {\n    // allow access to the original data by proxying\n    return new Proxy(this, {\n      get: (t: this, p: keyof Element) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return p in t ? (t as any)[p] : (this._slot as any)[p];\n      },\n    });\n  }\n} as unknown as Slot;\n", "import type * as CEM from 'custom-elements-manifest';\nimport type { Element, Field, Slot } from '@/utils/parser.types.js';\n\nimport {\n  type CustomElementDeclarationWithExamples,\n  type CustomElementDeclarationWithGroups,\n  type CustomElementDeclarationWithReadme,\n  isCustomElementField,\n} from '../utils.js';\nimport { CemField } from './cem-field.js';\nimport { CemSlot } from './cem-slot.js';\n\nexport const CemElement = class {\n  #fields: Map<string, Field>;\n  #slots: Map<string, Slot>;\n\n  get fields() {\n    return this.#fields;\n  }\n  get hasFields(): boolean {\n    return this.#fields.size > 0;\n  }\n\n  get slots() {\n    return this.#slots;\n  }\n  get hasSlots(): boolean {\n    return this.#slots.size > 0;\n  }\n\n  get hasGroups(): boolean {\n    return 'groups' in this._element;\n  }\n  get groups(): string[] {\n    return (this._element as CustomElementDeclarationWithGroups).groups ?? [];\n  }\n\n  get hasReadme(): boolean {\n    return 'readme' in this._element;\n  }\n  get readme(): string | undefined {\n    return (this._element as CustomElementDeclarationWithReadme).readme;\n  }\n\n  get hasExamples(): boolean {\n    return 'examples' in this._element && (this._element as CustomElementDeclarationWithExamples).examples.length > 0;\n  }\n  get examples(): string[] {\n    return (this._element as CustomElementDeclarationWithExamples).examples ?? [];\n  }\n\n  getNiceName(): string {\n    return this._element.name.replace(/([a-z])([A-Z])/g, '$1 $2');\n  }\n\n  getNiceUrl(): string {\n    return this._element.tagName ?? this._element.name.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n  }\n\n  constructor(private _element: CEM.CustomElementDeclaration) {\n    this.#fields =\n      this._element.members\n        ?.filter(isCustomElementField)\n        .reduce((map, field) => map.set(field.name, new CemField(field)), new Map()) ?? new Map();\n    this.#slots =\n      this._element.slots?.reduce((map, slot) => map.set(slot.name, new CemSlot(slot)), new Map()) ?? new Map();\n\n    // allow access to the original data by proxying\n    return new Proxy(this, {\n      get: (t: this, p: keyof Element) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return p in t ? (t as any)[p] : (this._element as any)[p];\n      },\n    });\n  }\n} as unknown as Element;\n", "import type * as CEM from 'custom-elements-manifest';\nimport type { Parser, Element } from '@/utils/parser.types.js';\n\nimport { isCustomElementDeclarationWithTagName } from '../utils.js';\nimport { CemElement } from './cem-element.js';\n\nexport const CemParser = class {\n  #elements: Map<string, Element>;\n\n  get elements() {\n    return this.#elements;\n  }\n\n  getGroupedElements(fallbackGroupName: string): Map<string, Element[]> {\n    return Array.from(this.elements.values()).reduce((map, element) => {\n      const { groups } = element.hasGroups ? element : { groups: [fallbackGroupName] };\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return groups!.reduce((all, group) => all.set(group, (all.get(group) ?? []).concat(element)), map);\n    }, new Map<string, Element[]>());\n  }\n\n  constructor(private _data: CEM.Package, exclude: string[] = []) {\n    // parse the elements\n    this.#elements = this._data.modules\n      .flatMap((module) => module.declarations)\n      .filter(isCustomElementDeclarationWithTagName)\n      .filter((element) => !exclude.includes(element.tagName))\n      .reduce((map, element) => map.set(element.tagName, new CemElement(element)), new Map());\n\n    // allow access to the original data by proxying\n    return new Proxy(this, {\n      get(t, p: keyof Parser) {\n        return p in t ? t[p] : _data[p];\n      },\n    });\n  }\n} as unknown as Parser;\n", "import type { Manifest, Parser } from '@/utils/parser.types.js';\nimport { CemParser as CEM_1_0_0_Parser } from './1.0.0/cem-parser.js';\n\n// stores all available CEM parsers, keyed by their supporting schema version\nconst CEM_PARSERS = new Map<string, Parser>();\nCEM_PARSERS.set('1.0.0', CEM_1_0_0_Parser);\n\n/**\n * Parses given manifest data with the appropriate CEM parser.\n * Will throw an error if no parser for the given schema version is found, or if the given data is invalid.\n */\nexport const parseCEM = (data: object, exclude?: string[]): Manifest => {\n  if (!('schemaVersion' in data) || typeof data.schemaVersion !== 'string') {\n    throw new Error('No schema version found in manifest data. Was it generated by a CEM compliant tool?');\n  }\n  const { schemaVersion } = data;\n  const parser = CEM_PARSERS.get(schemaVersion);\n  if (parser === undefined) {\n    throw new Error(`No parser for CEM version ${schemaVersion} found.`);\n  }\n\n  return new parser(data, exclude);\n};\n", "import type { Manifest } from '@/utils/parser.types.js';\nimport { parseCEM } from '@/parsers/cem/parse.js';\n\ndeclare global {\n  interface WCP {\n    manifest: Manifest;\n  }\n\n  interface Window {\n    wcp: WCP;\n  }\n}\n\nexport async function loadManifest(manifestUrl: string, excludeElements: string[]): Promise<Manifest> {\n  const response = await fetch(manifestUrl);\n  const manifest = await response.json();\n\n  if (window.wcp === undefined) {\n    window.wcp = {} as Window['wcp'];\n  }\n  if (window.wcp.manifest === undefined) {\n    window.wcp.manifest = parseCEM(manifest, excludeElements);\n  }\n\n  return getManifest();\n}\n\nexport function getManifest(): Manifest {\n  return window.wcp.manifest;\n}", "import type { LitElement, TemplateResult } from 'lit';\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: Property 'UrlPattern' does not exist\nif (!globalThis.URLPattern) {\n  await import('urlpattern-polyfill');\n}\n\nexport type Params = Record<string, string | undefined>;\n\nexport type Route = {\n  path: string;\n  enter?: (params: Params, router: Router, outgoingParams?: Params) => boolean | Promise<boolean>;\n  render?: (params: Params, router: Router) => TemplateResult;\n};\n\nexport type RegisterRoutes = (router: Router) => Route[];\n\nexport type ParsedUrl = {\n  /**\n   * Cleaned up path, derived from hash\n   */\n  path: string;\n\n  /**\n   * Prefixed url with base\n   */\n  url: string;\n};\n\n/**\n * Helps comparing param objects for equality\n */\nexport function areParamsEqual(a: Params, b: Params, exclude: string[] = []): boolean {\n  return Object.entries(a)\n    .filter(([key]) => !exclude.includes(key))\n    .every(([key, value]) => b[key] === value);\n}\n\n/**\n * Merges two given sets of params.\n */\nexport function mergeParams(oldParams: Params, newParams: Params, exclude: string[] = []): Params {\n  return Object.entries(newParams).reduce(\n    (params, [key, value]) => {\n      if (exclude.includes(key)) delete params[key];\n      if (value !== undefined) params[key] = value;\n      return params;\n    },\n    { ...oldParams }\n  );\n}\n\n// a primitive hash router implementation\nexport class Router {\n  readonly #host!: LitElement;\n  #currentPath?: string;\n  #currentParams: Params = {};\n  #currentRoute?: Route;\n  #routes: Route[] = [];\n\n  static isActive(path: string, currentPath?: string, exact = false): boolean {\n    const isSamePath = currentPath === path;\n    const isNestedPath = currentPath?.startsWith(`${path}/`) ?? false;\n    return isSamePath || (!exact && isNestedPath);\n  }\n\n  /**\n   * Redirect to a given path. This will trigger a hash change event.\n   */\n  static navigate(...slugs: (string | undefined)[]) {\n    const path = slugs.filter(Boolean).join('/');\n    // TODO: add some kind of logging\n    // console.log(`Navigate to ${path}`);\n    location.hash = path;\n  }\n\n  get currentPath(): string | undefined {\n    return this.#currentPath;\n  }\n\n  /**\n   * Defines the routes for this router.\n   */\n  registerRoutes(routes: Route[]) {\n    this.#routes = routes;\n  }\n\n  /**\n   * Checks if the given path is the currently active.\n   */\n  isActive(path: string, exact = false): boolean {\n    return Router.isActive(path, this.#currentPath, exact);\n  }\n\n  /**\n   * Redirect to a given path. This will trigger a hash change event.\n   * @alias Router.navigate\n   * @todo check whether this should be removed in favor of the static method\n   */\n  redirect(...slugs: (string | undefined)[]) {\n    Router.navigate(...slugs);\n  }\n\n  /**\n   * Update the current path without triggering a redirect.\n   */\n  updateCurrent(path: string) {\n    const url = new URL(location.href);\n    url.hash = path;\n    history.replaceState({}, '', url);\n  }\n\n  constructor(host: LitElement) {\n    this.#host = host;\n  }\n\n  #withBaseUrl(path = location.pathname): string {\n    return `${location.origin}${path}`;\n  }\n\n  #createPattern(path: string): URLPattern {\n    return new URLPattern(this.#withBaseUrl(path));\n  }\n\n  #parseUrl(url: string): ParsedUrl {\n    const { hash } = new URL(url);\n    const path = hash.replace(/^#/, '');\n    return { path, url: this.#withBaseUrl(path) };\n  }\n\n  #findRouteForUrl(url: string): Route | undefined {\n    return this.#routes.find(({ path }) => this.#createPattern(path).test(url));\n  }\n\n  #findCurrentRoute = (async (event: HashChangeEvent) => {\n    // find next path and route\n    const { path: nextPath, url: nextUrl } = this.#parseUrl(event.newURL);\n    const nextRoute = this.#findRouteForUrl(nextUrl);\n\n    // no route found\n    if (nextRoute === undefined) {\n      throw new Error(`No route found for ${nextPath}`);\n    }\n\n    // derive params\n    let outgoingParams: Params | undefined;\n    const nextPattern = this.#createPattern(nextRoute.path);\n    const nextParams = nextPattern.exec(nextUrl)?.pathname.groups ?? {};\n\n    // derive params from current url - as we do not want to have a generic\n    // param handling strategy, we just pass the current params to the onEnter\n    // route method as well and let the implementor decide what to do with them\n    if (event.oldURL !== '') {\n      // we do basically the same as above, but for the old url\n      const { url: pastUrl } = this.#parseUrl(event.oldURL);\n      // we can cast this to \"defined\", as we know that the current route must exist\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const pastRoute = this.#findRouteForUrl(pastUrl)!;\n      const pastPattern = this.#createPattern(pastRoute.path);\n      outgoingParams = pastPattern.exec(pastUrl)?.pathname.groups ?? {};\n    }\n\n    // match on enter\n    if (typeof nextRoute.enter === 'function') {\n      const success = await nextRoute.enter(nextParams, this, outgoingParams);\n      if (success === false) return;\n    }\n\n    // update state\n    this.#currentPath = nextPath;\n    this.#currentParams = nextParams;\n    this.#currentRoute = nextRoute;\n    this.#host.requestUpdate();\n  }).bind(this);\n\n  connect() {\n    // register hash change listener\n    window.addEventListener('hashchange', this.#findCurrentRoute, false);\n    // call the detection initially\n    const event = new HashChangeEvent('hashchange', { newURL: location.href });\n    this.#findCurrentRoute(event);\n  }\n\n  disconnect() {\n    // unregister hash change listener\n    window.removeEventListener('hashchange', this.#findCurrentRoute, false);\n  }\n\n  outlet(): TemplateResult {\n    return this.#currentRoute?.render?.(this.#currentParams, this) as TemplateResult;\n  }\n}\n", "import type * as Parsed from '@/utils/parser.types.js';\n\n/**\n * Prepares a lit compatible template key for a given field\n */\nexport function litKey(field: Parsed.Field): string {\n  // set as property, if not reflected as attribute\n  if (!field.hasAttribute) {\n    return `.${field.name}`;\n  }\n  // set boolean attributes properly\n  else if (field.isBoolean) {\n    return `?${field.attribute}`;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return field.attribute!;\n}\n", "import { getManifest } from '@/utils/manifest.utils.js';\nimport { litKey } from '@/utils/parser.utils.js';\nimport type { ElementData } from '../stage-editor/stage-editor.utils.js';\n\n/**\n * Prepares an initial state object for the given element definition by:\n * 1. Read all controllable fields from the element definition (from properties)\n * 2. Read all (remaining) attributes from the element reference (not reflected from already collected properties)\n * 3. Read all slots from the element definition with their stringified contents\n * \n * @todo: separate steps into functions\n * @todo: test this sh!t\n */\nexport function readCurrentElementData(ref: HTMLElement): ElementData {\n  const elementData = getManifest().elements.get(ref.tagName.toLowerCase());\n\n  // store all attributes already collected by the element definition\n  const skipAttributes: string[] = [];\n\n  // 1. get all controllable fields with their current values\n  const fields =\n    Array.from(elementData?.fields.values() ?? []).reduce((acc, field) => {\n      if (field.isControllable) {\n        const value = ref[field.name as keyof HTMLElement];\n        if (value !== undefined) {\n          if (field.hasAttribute) skipAttributes.push(field.attribute!);\n          return { ...acc, [litKey(field)]: value };\n        }\n      }\n      return acc;\n    }, {}) ?? {};\n\n  // 2. get all remaining attributes\n  const attributeNames = ref.getAttributeNames().filter((attribute) => !skipAttributes.includes(attribute));\n  const attributes = attributeNames.reduce(\n    (acc, attr) => ({ ...acc, [attr]: ref.getAttribute(attr) ?? undefined }),\n    {}\n  );\n\n  // 3. read all slotted data with their current contents\n  const slots =\n    Array.from(elementData?.slots.values() ?? []).reduce((acc, slot) => {\n      // find the slot and gather all assigned nodes\n      const selector = slot.name === '' ? ':not([name])' : `[name=\"${slot.name}\"]`;\n      const root = ref.shadowRoot ?? ref;\n      const nodes = root.querySelector<HTMLSlotElement>(`slot${selector}`)?.assignedNodes() ?? [];\n\n      // read node contents into string\n      const value =\n        nodes.reduce((content, node) => {\n          if (node instanceof HTMLElement) return `${content}${node.outerHTML}`;\n          else if (node instanceof Text) return `${content}${node.textContent}`;\n          else return content;\n        }, '') ?? slot.default;\n\n      // deliver combined result\n      return { ...acc, [slot.name]: value };\n    }, {}) ?? {};\n\n  return { attributes, fields, slots };\n}\n", "export default `\n:host {\n  display: flex;\n  align-items: center;\n  min-height: calc(10px * 4.2);\n  min-height: calc(var(--wcp-base-size, 10px) * 4.2);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2NsaWVudC9jbGllbnQvc3JjL2NvbXBvbmVudHMvcGx1Z2lucy9wcmV2aWV3LWVkaXRvci1saW5rL3ByZXZpZXctZWRpdG9yLWxpbmsucGx1Z2luLnNjc3MiLCI6aG9zdCUyMCU3QiUwQSUyMCUyMGRpc3BsYXk6JTIwZmxleDslMEElMjAlMjBhbGlnbi1pdGVtczolMjBjZW50ZXI7JTBBJTIwJTIwbWluLWhlaWdodDolMjBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsJTIwMTBweCklMjAqJTIwNC4yKTslMEElN0QlMEEvKiUyMyUyMHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVlNiMjkwSWpvaUwyaHZiV1V2Y25WdWJtVnlMM2R2Y21zdlkyeHBaVzUwTDJOc2FXVnVkQzl6Y21NdlkyOXRjRzl1Wlc1MGN5OXdiSFZuYVc1ekwzQnlaWFpwWlhjdFpXUnBkRzl5TFd4cGJtc2lMQ0p6YjNWeVkyVnpJanBiSW5CeVpYWnBaWGN0WldScGRHOXlMV3hwYm1zdWNHeDFaMmx1TG5OamMzTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJSVUU3UlVGRFJUdEZRVU5CTzBWQlJVRWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpBZFhObElDZEFMM04wZVd4bGN5OTFkR2xzY3ljZ1lYTWdkWFJwYkhNN1hHNWNianBvYjNOMElIdGNiaUFnWkdsemNHeGhlVG9nWm14bGVEdGNiaUFnWVd4cFoyNHRhWFJsYlhNNklHTmxiblJsY2p0Y2JseHVJQ0J0YVc0dGFHVnBaMmgwT2lCMWRHbHNjeTV6YVhwbEtEUXVNaWs3WEc1OVhHNGlYWDA9JTIwKiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUVBLDRCQUFBO0VBQUEsa0RBQUE7QUNGRiIsImZpbGUiOiI6aG9zdCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1pbi1oZWlnaHQ6IGNhbGModmFyKC0td2NwLWJhc2Utc2l6ZSwgMTBweCkgKiA0LjIpO1xufVxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVlNiMjkwSWpvaUwyaHZiV1V2Y25WdWJtVnlMM2R2Y21zdlkyeHBaVzUwTDJOc2FXVnVkQzl6Y21NdlkyOXRjRzl1Wlc1MGN5OXdiSFZuYVc1ekwzQnlaWFpwWlhjdFpXUnBkRzl5TFd4cGJtc2lMQ0p6YjNWeVkyVnpJanBiSW5CeVpYWnBaWGN0WldScGRHOXlMV3hwYm1zdWNHeDFaMmx1TG5OamMzTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJSVUU3UlVGRFJUdEZRVU5CTzBWQlJVRWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpBZFhObElDZEFMM04wZVd4bGN5OTFkR2xzY3ljZ1lYTWdkWFJwYkhNN1hHNWNianBvYjNOMElIdGNiaUFnWkdsemNHeGhlVG9nWm14bGVEdGNiaUFnWVd4cFoyNHRhWFJsYlhNNklHTmxiblJsY2p0Y2JseHVJQ0J0YVc0dGFHVnBaMmgwT2lCMWRHbHNjeTV6YVhwbEtEUXVNaWs3WEc1OVhHNGlYWDA9ICoiLCJzb3VyY2VzQ29udGVudCI6WyJAdXNlICdAL3N0eWxlcy91dGlscycgYXMgdXRpbHM7XG5cbjpob3N0IHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICBtaW4taGVpZ2h0OiB1dGlscy5zaXplKDQuMik7XG59XG4iLCI6aG9zdCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1pbi1oZWlnaHQ6IGNhbGModmFyKC0td2NwLWJhc2Utc2l6ZSwgMTBweCkgKiA0LjIpO1xufVxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVlNiMjkwSWpvaUwyaHZiV1V2Y25WdWJtVnlMM2R2Y21zdlkyeHBaVzUwTDJOc2FXVnVkQzl6Y21NdlkyOXRjRzl1Wlc1MGN5OXdiSFZuYVc1ekwzQnlaWFpwWlhjdFpXUnBkRzl5TFd4cGJtc2lMQ0p6YjNWeVkyVnpJanBiSW5CeVpYWnBaWGN0WldScGRHOXlMV3hwYm1zdWNHeDFaMmx1TG5OamMzTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJSVUU3UlVGRFJUdEZRVU5CTzBWQlJVRWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpBZFhObElDZEFMM04wZVd4bGN5OTFkR2xzY3ljZ1lYTWdkWFJwYkhNN1hHNWNianBvYjNOMElIdGNiaUFnWkdsemNHeGhlVG9nWm14bGVEdGNiaUFnWVd4cFoyNHRhWFJsYlhNNklHTmxiblJsY2p0Y2JseHVJQ0J0YVc0dGFHVnBaMmgwT2lCMWRHbHNjeTV6YVhwbEtEUXVNaWs3WEc1OVhHNGlYWDA9ICovIl19 */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { compress } from '@/utils/compression.utils.js';\nimport { isDescendantOf } from '@/utils/dom.utils.js';\nimport { getManifest } from '@/utils/manifest.utils.js';\nimport type { PreviewPlugin } from '@/utils/plugin.utils.js';\nimport { Router } from '@/utils/router.utils.js';\n\nimport { readCurrentElementData } from './preview-editor-link.utils.js';\n\nimport styles from './preview-editor-link.plugin.scss';\n\n/**\n * Links all found custom elements in a preview with their current state to the editor to be further played around with.\n *\n * @element wcp-preview-editor-link\n */\n@customElement('wcp-preview-editor-link')\nexport class PreviewEditorLink extends LitElement implements PreviewPlugin {\n  static override readonly styles = unsafeCSS(styles);\n\n  readonly #manifest = getManifest();\n\n  readonly #overlay = document.createElement('div');\n\n  readonly container!: HTMLElement;\n\n  @property({ type: String, reflect: true, attribute: 'preview-tag-name' })\n  readonly previewTagName!: string;\n\n  @property({ type: Boolean, reflect: true })\n  available = true;\n\n  @property({ type: String, reflect: true })\n  readonly name = 'viewer-link';\n\n  @property({ type: String, reflect: true })\n  readonly label = 'Show in viewer';\n\n  @property({ type: Boolean, reflect: true })\n  enabled = false;\n\n  #checkAvailability() {\n    // check if the previewed element is in a viewer\n    this.available = !isDescendantOf(this, 'wcp-stage-editor');\n\n    // notify about availability change\n    const event = new CustomEvent('wcp-preview-plugin:availability-change', {\n      detail: this.available,\n      bubbles: true,\n      composed: true,\n    });\n    this.dispatchEvent(event);\n  }\n\n  #attachOverlay() {\n    this.#overlay.id = 'overlay';\n    this.#overlay.style.position = 'absolute';\n    this.#overlay.style.inset = '0';\n    this.#overlay.style.isolation = 'isolate';\n    this.container.parentElement?.append(this.#overlay);\n  }\n\n  #detachOverlay() {\n    this.#overlay.remove();\n  }\n\n  #findContainerSlot(): HTMLSlotElement | undefined {\n    const host = this.container.getRootNode() as HTMLElement;\n    return host.querySelector('slot') ?? undefined;\n  }\n\n  #observeContainerSlot() {\n    this.#findContainerSlot()?.addEventListener('slotchange', this.#handleContainerSlotChange, false);\n  }\n\n  #unobserveContainerSlot() {\n    this.#findContainerSlot()?.removeEventListener('slotchange', this.#handleContainerSlotChange, false);\n  }\n\n  #observeContainerScroll() {\n    this.container.addEventListener('scroll', this.#handleContainerScroll, false);\n  }\n\n  #unobserveContainerScroll() {\n    this.container.removeEventListener('scroll', this.#handleContainerScroll, false);\n  }\n\n  #handleContainerScroll() {\n    this.#overlay.style.transform = `translateY(-${this.container.scrollTop ?? 0}px)`;\n  }\n\n  #handleContainerSlotChange() {\n    this.#attachHints();\n  }\n\n  #attachHints() {\n    // gather all slotted elements\n    const host = this.container.getRootNode() as HTMLElement;\n    const slot = host.querySelector('slot');\n    const assigned = slot?.assignedElements({ flatten: true }) as HTMLElement[];\n\n    // attach hints to all previewed elements\n    assigned\n      .filter((element) => element.tagName.toLowerCase() === this.previewTagName)\n      .concat(assigned.flatMap((element) => [...element.querySelectorAll<HTMLElement>(this.previewTagName)]))\n      .forEach((element) => this.#attachHint(element));\n  }\n\n  #attachHint(element: HTMLElement) {\n    const hint = document.createElement('wcp-preview-editor-link-hint');\n    hint.debug = true;\n    hint.element = element;\n    hint.scrollParent = this.container;\n    hint.addEventListener('click', () => this.#openViewer(element), false);\n    this.#overlay.append(hint);\n  }\n\n  #detachHints() {\n    this.#overlay.innerHTML = '';\n  }\n\n  #setupHints() {\n    if (this.enabled) {\n      this.#attachOverlay();\n      this.#attachHints();\n\n      this.#observeContainerSlot();\n      this.#observeContainerScroll();\n    } else {\n      this.#teardownHints();\n    }\n  }\n\n  #teardownHints() {\n    this.#unobserveContainerSlot();\n    this.#unobserveContainerScroll();\n\n    this.#detachHints();\n    this.#detachOverlay();\n  }\n\n  async #openViewer(element: HTMLElement) {\n    // 1. gather element state (properties, attributes, slot contents, inline styles)\n    const data = readCurrentElementData(element);\n    const param = encodeURIComponent(await compress(JSON.stringify(data), 'deflate-raw'));\n    // 2. prepare a stateful preview link\n    const tagName = this.#manifest.elements.get(this.previewTagName)?.getNiceUrl();\n    const link = `/element/${tagName}/editor/${param}`;\n    // 3. open the preview link in the editor tab\n    Router.navigate(link);\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    this.#setupHints();\n    this.#checkAvailability();\n  }\n\n  adoptedCallback() {\n    this.#checkAvailability();\n  }\n\n  override disconnectedCallback() {\n    this.#teardownHints();\n\n    super.disconnectedCallback();\n  }\n\n  @eventOptions({ passive: true })\n  private handleToggleClick() {\n    this.enabled = !this.enabled;\n    this.#setupHints();\n  }\n\n  // without ShadowDOM, we need to manually inject the styles\n  protected override render(): TemplateResult {\n    return html`\n      <wcp-button\n        kind=\"icon\"\n        class=\"${classMap({ active: this.enabled })}\"\n        ?disabled=\"${!this.available}\"\n        @click=\"${this.handleToggleClick}\"\n      >\n        <wcp-icon name=\"terminal\" style=\"--wcp-icon-size: 19\"></wcp-icon>\n      </wcp-button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-preview-editor-link': PreviewEditorLink;\n  }\n}\n", "export default `\n:host {\n  ---wcp-preview-editor-link-hint-button-passive-background: var(--wcp-preview-editor-link-hint-button-passive-background, #d22f2f);\n  ---wcp-preview-editor-link-hint-button-active-background: var(--wcp-preview-editor-link-hint-button-active-background, #dd4f4f);\n  ---wcp-preview-editor-link-hint-button-passive-size: var(--wcp-preview-editor-link-hint-button-passive-size, 10px);\n  ---wcp-preview-editor-link-hint-button-active-size: var(--wcp-preview-editor-link-hint-button-active-size, 20px);\n  ---wcp-preview-editor-link-hint-debug-border-width: var(--wcp-preview-editor-link-hint-debug-border-width, 1px);\n  ---wcp-preview-editor-link-hint-debug-background-opacity: var(--wcp-preview-editor-link-hint-debug-background-opacity, 0.7);\n  ---wcp-preview-editor-link-hint-debug-stripe-distance: var(--wcp-preview-editor-link-hint-debug-stripe-distance, 10px);\n  ---wcp-preview-editor-link-hint-debug-stripe-tilt: var(--wcp-preview-editor-link-hint-debug-stripe-tilt, 45deg);\n  ---wcp-preview-editor-link-hint-debug-stripe-width: var(--wcp-preview-editor-link-hint-debug-stripe-width, 1px);\n  ---wcp-preview-editor-link-hint-debug-stripe-dash-size: var(--wcp-preview-editor-link-hint-debug-stripe-dash-size, 5px);\n  ---wcp-preview-editor-link-hint-debug-stripe-dash-gap: var(--wcp-preview-editor-link-hint-debug-stripe-dash-gap, 3px);\n  ---wcp-preview-editor-link-hint-debug-dark-background: var(--wcp-preview-editor-link-hint-debug-dark-background, #8575ee);\n  ---wcp-preview-editor-link-hint-debug-dark-stroke: var(--wcp-preview-editor-link-hint-debug-dark-stroke, #5e23aa);\n  ---wcp-preview-editor-link-hint-debug-light-background: var(--wcp-preview-editor-link-hint-debug-light-background, #8575ee);\n  ---wcp-preview-editor-link-hint-debug-light-stroke: var(--wcp-preview-editor-link-hint-debug-light-stroke, #5e23aa);\n}\n\n:host {\n  ---wcp-preview-editor-link-hint-button-background: var(---wcp-preview-editor-link-hint-button-passive-background);\n  ---wcp-preview-editor-link-hint-button-size: var(---wcp-preview-editor-link-hint-button-passive-size);\n  position: absolute;\n  display: block;\n  box-sizing: border-box;\n  cursor: pointer;\n}\n@media (prefers-color-scheme: dark) {\n  :host {\n    ---wcp-preview-editor-link-hint-debug-background: var(---wcp-preview-editor-link-hint-debug-dark-background);\n    ---wcp-preview-editor-link-hint-debug-stroke: var(---wcp-preview-editor-link-hint-debug-dark-stroke);\n  }\n}\n:host([color-scheme=dark]):host {\n  ---wcp-preview-editor-link-hint-debug-background: var(---wcp-preview-editor-link-hint-debug-dark-background);\n  ---wcp-preview-editor-link-hint-debug-stroke: var(---wcp-preview-editor-link-hint-debug-dark-stroke);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    ---wcp-preview-editor-link-hint-debug-background: var(---wcp-preview-editor-link-hint-debug-light-background);\n    ---wcp-preview-editor-link-hint-debug-stroke: var(---wcp-preview-editor-link-hint-debug-light-stroke);\n  }\n}\n:host([color-scheme=light]):host {\n  ---wcp-preview-editor-link-hint-debug-background: var(---wcp-preview-editor-link-hint-debug-light-background);\n  ---wcp-preview-editor-link-hint-debug-stroke: var(---wcp-preview-editor-link-hint-debug-light-stroke);\n}\n\n:host(:hover) {\n  ---wcp-preview-editor-link-hint-button-background: var(---wcp-preview-editor-link-hint-button-active-background);\n  ---wcp-preview-editor-link-hint-button-size: var(---wcp-preview-editor-link-hint-button-active-size);\n}\n\nbutton {\n  all: unset;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: auto;\n  left: auto;\n  transform: translate(50%, -50%);\n  z-index: 3;\n  display: block;\n  height: var(---wcp-preview-editor-link-hint-button-size);\n  width: var(---wcp-preview-editor-link-hint-button-size);\n  background-clip: content-box;\n  background-color: var(---wcp-preview-editor-link-hint-button-background);\n  border: calc(var(---wcp-preview-editor-link-hint-button-active-size) - var(---wcp-preview-editor-link-hint-button-passive-size)) solid transparent;\n  border-radius: 50%;\n  transition: var(--wcp-fx-default-duration) ease-out;\n  transition-property: background-color, border-width, height, width;\n  will-change: background-color, border-width, height, width;\n}\n:host([debug]) button {\n  top: calc(var(---wcp-preview-editor-link-hint-debug-border-width) * -1);\n  right: calc(var(---wcp-preview-editor-link-hint-debug-border-width) * -1);\n}\n\n:host([debug]) {\n  border: var(---wcp-preview-editor-link-hint-debug-border-width) dashed var(---wcp-preview-editor-link-hint-debug-stroke);\n}\n:host([debug])::before, :host([debug])::after {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n:host([debug])::before {\n  z-index: 0;\n  background-color: var(---wcp-preview-editor-link-hint-debug-background);\n  opacity: var(---wcp-preview-editor-link-hint-debug-background-opacity);\n  mix-blend-mode: multiply;\n}\n:host([debug])::after {\n  z-index: 1;\n  background: repeating-linear-gradient(var(---wcp-preview-editor-link-hint-debug-stripe-tilt), transparent, transparent var(---wcp-preview-editor-link-hint-debug-stripe-distance), var(---wcp-preview-editor-link-hint-debug-stroke) var(---wcp-preview-editor-link-hint-debug-stripe-distance), var(---wcp-preview-editor-link-hint-debug-stroke) calc(var(---wcp-preview-editor-link-hint-debug-stripe-distance) + var(---wcp-preview-editor-link-hint-debug-stripe-width)));\n  -webkit-mask-image: repeating-linear-gradient(calc(var(---wcp-preview-editor-link-hint-debug-stripe-tilt) + 90deg), transparent, transparent var(---wcp-preview-editor-link-hint-debug-stripe-dash-gap), black var(---wcp-preview-editor-link-hint-debug-stripe-dash-gap), black calc(var(---wcp-preview-editor-link-hint-debug-stripe-dash-gap) + var(---wcp-preview-editor-link-hint-debug-stripe-dash-size)));\n          mask-image: repeating-linear-gradient(calc(var(---wcp-preview-editor-link-hint-debug-stripe-tilt) + 90deg), transparent, transparent var(---wcp-preview-editor-link-hint-debug-stripe-dash-gap), black var(---wcp-preview-editor-link-hint-debug-stripe-dash-gap), black calc(var(---wcp-preview-editor-link-hint-debug-stripe-dash-gap) + var(---wcp-preview-editor-link-hint-debug-stripe-dash-size)));\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\nimport { getRelativeBoundary } from '@/utils/dom.utils.js';\n\nimport styles from './preview-editor-link-hint.component.scss';\n\n/**\n * Shows a hint to a given preview element.\n *\n * @element wcp-preview-editor-link-hint\n *\n * @cssprop --wcp-preview-editor-link-hint-button-passive-background - The background color of the hint button in passive state.\n * @cssprop --wcp-preview-editor-link-hint-button-active-background - The background color of the hint button in active state.\n * @cssprop --wcp-preview-editor-link-hint-button-passive-size - Size of the hint button in passive state.\n * @cssprop --wcp-preview-editor-link-hint-button-active-size - Size of the hint button in active state.\n *\n * @cssprop --wcp-preview-editor-link-hint-debug-border-width - Border width of the debugging fields.\n * @cssprop --wcp-preview-editor-link-hint-debug-background-opacity - Opacity of the debugging fields background.\n *\n * @cssprop --wcp-preview-editor-link-hint-debug-stripe-distance - Distance of the stripes of the debugging field background.\n * @cssprop --wcp-preview-editor-link-hint-debug-stripe-tilt - Tilt of the stripes of the debugging field background in degrees.\n * @cssprop --wcp-preview-editor-link-hint-debug-stripe-width - Width of the stripes of the debugging field background.\n * @cssprop --wcp-preview-editor-link-hint-debug-stripe-dash-size - Length of the dashes of the debugging field background.\n * @cssprop --wcp-preview-editor-link-hint-debug-stripe-dash-gap - Gap between the dashes of the debugging field background.\n *\n * @cssprop --wcp-preview-editor-link-hint-debug-dark-background - Debugging field background color in dark mode.\n * @cssprop --wcp-preview-editor-link-hint-debug-dark-stroke - Debugging field dash and border color in dark mode.\n *\n * @cssprop --wcp-preview-editor-link-hint-debug-light-background - Debugging field background color in light mode.\n * @cssprop --wcp-preview-editor-link-hint-debug-light-stroke - Debugging field dash and border color in light mode.\n */\n@customElement('wcp-preview-editor-link-hint')\nexport class PreviewEditorLinkHint extends ColorSchemable(LitElement) {\n  static override readonly styles = unsafeCSS(styles);\n\n  #observer = new ResizeObserver(() => this.updatePosition());\n  #element?: HTMLElement;\n  #scrollParent?: HTMLElement;\n\n  @property({ type: Boolean, reflect: true })\n  debug = false;\n\n  @property({ attribute: false, noAccessor: true })\n  set element(element: HTMLElement | undefined) {\n    this.#element = element;\n    this.#observeElement();\n    this.updatePosition();\n  }\n\n  @property({ attribute: false, noAccessor: true })\n  set scrollParent(element: HTMLElement | undefined) {\n    this.#scrollParent = element;\n    this.updatePosition();\n  }\n\n  /**\n   * Allows to update the position of the hint.\n   */\n  updatePosition() {\n    if (this.#element === undefined) {\n      this.removeAttribute('style');\n    } else {\n      const { height, width, x, y } = getRelativeBoundary(this.#element, this.#scrollParent);\n      const { scrollTop = 0, scrollLeft = 0 } = this.#scrollParent ?? (this.#element.offsetParent as HTMLElement) ?? {};\n\n      this.style.setProperty('top', `${y + scrollTop}px`);\n      this.style.setProperty('left', `${x + scrollLeft}px`);\n      this.style.setProperty('height', `${height}px`);\n      this.style.setProperty('width', `${width}px`);\n    }\n  }\n\n  #observeElement() {\n    if (this.#element === undefined) return;\n    this.#observer.disconnect();\n    this.#observer.observe(this.#element);\n  }\n\n  #observeStage() {\n    window.addEventListener('wcp-preview-simulate-viewports:changed', this.#handleStageChange, false);\n  }\n\n  #unobserveStage() {\n    window.removeEventListener('wcp-preview-simulate-viewports:changed', this.#handleStageChange, false);\n  }\n\n  #handleStageChange = () => {\n    this.updatePosition();\n  };\n\n  override connectedCallback() {\n    super.connectedCallback();\n    this.#observeStage();\n  }\n\n  override disconnectedCallback() {\n    this.#unobserveStage();\n    this.#observer.disconnect();\n    super.disconnectedCallback();\n  }\n\n  protected override render(): TemplateResult {\n    return html`<button></button>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-preview-editor-link-hint': PreviewEditorLinkHint;\n  }\n}\n", "export default `\n:host {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: calc(10px * 0.5);\n  gap: calc(var(--wcp-base-size, 10px) * 0.5);\n}\n\nwcp-button:not([data-viewport]) {\n  margin-left: calc(10px * 0.5);\n  margin-left: calc(var(--wcp-base-size, 10px) * 0.5);\n  transition: transform var(--wcp-fx-default-duration) ease-in-out;\n}\nwcp-button:not([data-viewport]):enabled:hover {\n  transform: rotate(45deg);\n}\nwcp-button:not([data-viewport]).active:hover {\n  transform: rotate(-45deg);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2NsaWVudC9jbGllbnQvc3JjL2NvbXBvbmVudHMvcGx1Z2lucy9wcmV2aWV3LXNpbXVsYXRlLXZpZXdwb3J0cy9wcmV2aWV3LXNpbXVsYXRlLXZpZXdwb3J0cy5wbHVnaW4uc2NzcyIsIjpob3N0JTIwJTdCJTBBJTIwJTIwZGlzcGxheTolMjBmbGV4OyUwQSUyMCUyMGZsZXgtZGlyZWN0aW9uOiUyMHJvdzslMEElMjAlMjBhbGlnbi1pdGVtczolMjBjZW50ZXI7JTBBJTIwJTIwZ2FwOiUyMGNhbGModmFyKC0td2NwLWJhc2Utc2l6ZSwlMjAxMHB4KSUyMColMjAwLjUpOyUwQSU3RCUwQSUwQXdjcC1idXR0b246bm90KCU1QmRhdGEtdmlld3BvcnQlNUQpJTIwJTdCJTBBJTIwJTIwbWFyZ2luLWxlZnQ6JTIwY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCUyMDEwcHgpJTIwKiUyMDAuNSk7JTBBJTIwJTIwdHJhbnNpdGlvbjolMjB0cmFuc2Zvcm0lMjB2YXIoLS13Y3AtZngtZGVmYXVsdC1kdXJhdGlvbiklMjBlYXNlLWluLW91dDslMEElN0QlMEF3Y3AtYnV0dG9uOm5vdCglNUJkYXRhLXZpZXdwb3J0JTVEKTplbmFibGVkOmhvdmVyJTIwJTdCJTBBJTIwJTIwdHJhbnNmb3JtOiUyMHJvdGF0ZSg0NWRlZyk7JTBBJTdEJTBBd2NwLWJ1dHRvbjpub3QoJTVCZGF0YS12aWV3cG9ydCU1RCkuYWN0aXZlOmhvdmVyJTIwJTdCJTBBJTIwJTIwdHJhbnNmb3JtOiUyMHJvdGF0ZSgtNDVkZWcpOyUwQSU3RCUwQS8qJTIzJTIwc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWU2IyOTBJam9pTDJodmJXVXZjblZ1Ym1WeUwzZHZjbXN2WTJ4cFpXNTBMMk5zYVdWdWRDOXpjbU12WTI5dGNHOXVaVzUwY3k5d2JIVm5hVzV6TDNCeVpYWnBaWGN0YzJsdGRXeGhkR1V0ZG1sbGQzQnZjblJ6SWl3aWMyOTFjbU5sY3lJNld5SndjbVYyYVdWM0xYTnBiWFZzWVhSbExYWnBaWGR3YjNKMGN5NXdiSFZuYVc0dWMyTnpjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZGUVR0RlFVTkZPMFZCUTBFN1JVRkRRVHRGUVVOQk96czdRVUZIUmp0RlFVTkZPMFZCUTBFN08wRkJSVUU3UlVGRFJUczdRVUZIUmp0RlFVTkZJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpUUhWelpTQW5RQzl6ZEhsc1pYTXZkWFJwYkhNbklHRnpJSFYwYVd4ek8xeHVYRzQ2YUc5emRDQjdYRzRnSUdScGMzQnNZWGs2SUdac1pYZzdYRzRnSUdac1pYZ3RaR2x5WldOMGFXOXVPaUJ5YjNjN1hHNGdJR0ZzYVdkdUxXbDBaVzF6T2lCalpXNTBaWEk3WEc0Z0lHZGhjRG9nZFhScGJITXVjMmw2WlNnd0xqVXBPMXh1ZlZ4dVhHNTNZM0F0WW5WMGRHOXVPbTV2ZENoYlpHRjBZUzEyYVdWM2NHOXlkRjBwSUh0Y2JpQWdiV0Z5WjJsdUxXeGxablE2SUhWMGFXeHpMbk5wZW1Vb01DNDFLVHRjYmlBZ2RISmhibk5wZEdsdmJqb2dkSEpoYm5ObWIzSnRJSFpoY2lndExYZGpjQzFtZUMxa1pXWmhkV3gwTFdSMWNtRjBhVzl1S1NCbFlYTmxMV2x1TFc5MWREdGNibHh1SUNBbU9tVnVZV0pzWldRNmFHOTJaWElnZTF4dUlDQWdJSFJ5WVc1elptOXliVG9nY205MFlYUmxLRFExWkdWbktUdGNiaUFnZlZ4dVhHNGdJQ1l1WVdOMGFYWmxPbWh2ZG1WeUlIdGNiaUFnSUNCMGNtRnVjMlp2Y20wNklISnZkR0YwWlNndE5EVmtaV2NwTzF4dUlDQjlYRzU5WEc0aVhYMD0lMjAqIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsbUJBQUE7RUFDQSxxQkFBQTtFQUFBLDJDQUFBO0FDREY7O0FESUE7RUFDRSw2QkFBQTtFQUFBLG1EQUFBO0VBQ0EsZ0VBQUE7QUNERjtBREdFO0VBQ0Usd0JBQUE7QUNESjtBRElFO0VBQ0UseUJBQUE7QUNGSiIsImZpbGUiOiI6aG9zdCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCAxMHB4KSAqIDAuNSk7XG59XG5cbndjcC1idXR0b246bm90KFtkYXRhLXZpZXdwb3J0XSkge1xuICBtYXJnaW4tbGVmdDogY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCAxMHB4KSAqIDAuNSk7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSB2YXIoLS13Y3AtZngtZGVmYXVsdC1kdXJhdGlvbikgZWFzZS1pbi1vdXQ7XG59XG53Y3AtYnV0dG9uOm5vdChbZGF0YS12aWV3cG9ydF0pOmVuYWJsZWQ6aG92ZXIge1xuICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XG59XG53Y3AtYnV0dG9uOm5vdChbZGF0YS12aWV3cG9ydF0pLmFjdGl2ZTpob3ZlciB7XG4gIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XG59XG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWU2IyOTBJam9pTDJodmJXVXZjblZ1Ym1WeUwzZHZjbXN2WTJ4cFpXNTBMMk5zYVdWdWRDOXpjbU12WTI5dGNHOXVaVzUwY3k5d2JIVm5hVzV6TDNCeVpYWnBaWGN0YzJsdGRXeGhkR1V0ZG1sbGQzQnZjblJ6SWl3aWMyOTFjbU5sY3lJNld5SndjbVYyYVdWM0xYTnBiWFZzWVhSbExYWnBaWGR3YjNKMGN5NXdiSFZuYVc0dWMyTnpjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZGUVR0RlFVTkZPMFZCUTBFN1JVRkRRVHRGUVVOQk96czdRVUZIUmp0RlFVTkZPMFZCUTBFN08wRkJSVUU3UlVGRFJUczdRVUZIUmp0RlFVTkZJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpUUhWelpTQW5RQzl6ZEhsc1pYTXZkWFJwYkhNbklHRnpJSFYwYVd4ek8xeHVYRzQ2YUc5emRDQjdYRzRnSUdScGMzQnNZWGs2SUdac1pYZzdYRzRnSUdac1pYZ3RaR2x5WldOMGFXOXVPaUJ5YjNjN1hHNGdJR0ZzYVdkdUxXbDBaVzF6T2lCalpXNTBaWEk3WEc0Z0lHZGhjRG9nZFhScGJITXVjMmw2WlNnd0xqVXBPMXh1ZlZ4dVhHNTNZM0F0WW5WMGRHOXVPbTV2ZENoYlpHRjBZUzEyYVdWM2NHOXlkRjBwSUh0Y2JpQWdiV0Z5WjJsdUxXeGxablE2SUhWMGFXeHpMbk5wZW1Vb01DNDFLVHRjYmlBZ2RISmhibk5wZEdsdmJqb2dkSEpoYm5ObWIzSnRJSFpoY2lndExYZGpjQzFtZUMxa1pXWmhkV3gwTFdSMWNtRjBhVzl1S1NCbFlYTmxMV2x1TFc5MWREdGNibHh1SUNBbU9tVnVZV0pzWldRNmFHOTJaWElnZTF4dUlDQWdJSFJ5WVc1elptOXliVG9nY205MFlYUmxLRFExWkdWbktUdGNiaUFnZlZ4dVhHNGdJQ1l1WVdOMGFYWmxPbWh2ZG1WeUlIdGNiaUFnSUNCMGNtRnVjMlp2Y20wNklISnZkR0YwWlNndE5EVmtaV2NwTzF4dUlDQjlYRzU5WEc0aVhYMD0gKiIsInNvdXJjZXNDb250ZW50IjpbIkB1c2UgJ0Avc3R5bGVzL3V0aWxzJyBhcyB1dGlscztcblxuOmhvc3Qge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IHV0aWxzLnNpemUoMC41KTtcbn1cblxud2NwLWJ1dHRvbjpub3QoW2RhdGEtdmlld3BvcnRdKSB7XG4gIG1hcmdpbi1sZWZ0OiB1dGlscy5zaXplKDAuNSk7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSB2YXIoLS13Y3AtZngtZGVmYXVsdC1kdXJhdGlvbikgZWFzZS1pbi1vdXQ7XG5cbiAgJjplbmFibGVkOmhvdmVyIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XG4gIH1cblxuICAmLmFjdGl2ZTpob3ZlciB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcbiAgfVxufVxuIiwiOmhvc3Qge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IGNhbGModmFyKC0td2NwLWJhc2Utc2l6ZSwgMTBweCkgKiAwLjUpO1xufVxuXG53Y3AtYnV0dG9uOm5vdChbZGF0YS12aWV3cG9ydF0pIHtcbiAgbWFyZ2luLWxlZnQ6IGNhbGModmFyKC0td2NwLWJhc2Utc2l6ZSwgMTBweCkgKiAwLjUpO1xuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gdmFyKC0td2NwLWZ4LWRlZmF1bHQtZHVyYXRpb24pIGVhc2UtaW4tb3V0O1xufVxud2NwLWJ1dHRvbjpub3QoW2RhdGEtdmlld3BvcnRdKTplbmFibGVkOmhvdmVyIHtcbiAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xufVxud2NwLWJ1dHRvbjpub3QoW2RhdGEtdmlld3BvcnRdKS5hY3RpdmU6aG92ZXIge1xuICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xufVxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVlNiMjkwSWpvaUwyaHZiV1V2Y25WdWJtVnlMM2R2Y21zdlkyeHBaVzUwTDJOc2FXVnVkQzl6Y21NdlkyOXRjRzl1Wlc1MGN5OXdiSFZuYVc1ekwzQnlaWFpwWlhjdGMybHRkV3hoZEdVdGRtbGxkM0J2Y25Seklpd2ljMjkxY21ObGN5STZXeUp3Y21WMmFXVjNMWE5wYlhWc1lYUmxMWFpwWlhkd2IzSjBjeTV3YkhWbmFXNHVjMk56Y3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGRlFUdEZRVU5GTzBWQlEwRTdSVUZEUVR0RlFVTkJPenM3UVVGSFJqdEZRVU5GTzBWQlEwRTdPMEZCUlVFN1JVRkRSVHM3UVVGSFJqdEZRVU5GSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVFIVnpaU0FuUUM5emRIbHNaWE12ZFhScGJITW5JR0Z6SUhWMGFXeHpPMXh1WEc0NmFHOXpkQ0I3WEc0Z0lHUnBjM0JzWVhrNklHWnNaWGc3WEc0Z0lHWnNaWGd0WkdseVpXTjBhVzl1T2lCeWIzYzdYRzRnSUdGc2FXZHVMV2wwWlcxek9pQmpaVzUwWlhJN1hHNGdJR2RoY0RvZ2RYUnBiSE11YzJsNlpTZ3dMalVwTzF4dWZWeHVYRzUzWTNBdFluVjBkRzl1T201dmRDaGJaR0YwWVMxMmFXVjNjRzl5ZEYwcElIdGNiaUFnYldGeVoybHVMV3hsWm5RNklIVjBhV3h6TG5OcGVtVW9NQzQxS1R0Y2JpQWdkSEpoYm5OcGRHbHZiam9nZEhKaGJuTm1iM0p0SUhaaGNpZ3RMWGRqY0MxbWVDMWtaV1poZFd4MExXUjFjbUYwYVc5dUtTQmxZWE5sTFdsdUxXOTFkRHRjYmx4dUlDQW1PbVZ1WVdKc1pXUTZhRzkyWlhJZ2UxeHVJQ0FnSUhSeVlXNXpabTl5YlRvZ2NtOTBZWFJsS0RRMVpHVm5LVHRjYmlBZ2ZWeHVYRzRnSUNZdVlXTjBhWFpsT21odmRtVnlJSHRjYmlBZ0lDQjBjbUZ1YzJadmNtMDZJSEp2ZEdGMFpTZ3RORFZrWldjcE8xeHVJQ0I5WEc1OVhHNGlYWDA9ICovIl19 */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { map } from 'lit/directives/map.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\nimport type { PreviewPlugin } from '@/utils/plugin.utils.js';\n\nimport styles from './preview-simulate-viewports.plugin.scss';\n\n// utility union to carry the available viewport for simulation\ntype Viewport = 'mobile' | 'tablet' | 'desktop' | 'wide';\n\n// maps the available viewport simulations to their dimensions\nconst VIEWPORTS = new Map<Viewport, [number, number]>([\n  ['mobile', [390, 844]],\n  ['tablet', [1024, 768]],\n  ['desktop', [1280, 800]],\n  ['wide', [1920, 1080]],\n]);\n\n// maps the available viewport simulations to icons\nconst ICONS = new Map<Viewport, string>([\n  ['mobile', 'smartphone'],\n  ['tablet', 'laptop'],\n  ['desktop', 'screen'],\n  ['wide', 'screen-wide'],\n]);\n\n// internal identifiers for styling\nconst STYLE_ID = 'preview-plugin-viewport';\nconst DECORATION_CLASS = 'simulate-viewport-decoration';\nconst PROPORTION_CLASS = 'simulate-viewport-proportion';\nconst SIZE_CLASS = 'simulate-viewport-size';\nconst SCALE_CLASS = 'simulate-viewport-scale';\n\n// to add some spacing we scale a bit further than actually needed\nconst SCALE_FACTOR = 1;\n\n/**\n * Simulates various viewports for a custom element preview.\n *\n * @element wcp-preview-simulate-viewports\n */\n@customElement('wcp-preview-simulate-viewports')\nexport class PreviewSimulateViewports extends ColorSchemable(LitElement) implements PreviewPlugin {\n  static override readonly styles = unsafeCSS(styles);\n\n  readonly container!: HTMLElement;\n\n  @property({ type: String, reflect: true, attribute: 'preview-tag-name' })\n  readonly previewTagName!: string;\n\n  @property({ type: Boolean, reflect: true })\n  readonly available = true;\n\n  @property({ type: String, reflect: true })\n  readonly name = 'viewport';\n\n  @property({ type: String, reflect: true })\n  readonly label = 'Viewport';\n\n  @property({ type: String, reflect: true, attribute: 'simulate-viewport' })\n  private simulateViewport?: Viewport;\n\n  @property({ type: Boolean, reflect: true, attribute: 'invert-simulated-viewport' })\n  private invertSimulatedViewport = false;\n\n  protected get defaultStyle(): string {\n    return `\n      .${DECORATION_CLASS} {\n        border-radius: 10px;\n        outline: 1px solid currentColor;\n        overflow: hidden;\n      }\n    `;\n  }\n\n  protected removeStyle() {\n    this.container.querySelector<HTMLStyleElement>(`style#${STYLE_ID}`)?.remove();\n  }\n\n  protected resetStyle() {\n    this.prepareStyle().textContent = this.defaultStyle;\n  }\n\n  protected prepareStyle(): HTMLStyleElement {\n    // check if a style element already exists\n    let style = this.container.querySelector<HTMLStyleElement>(`style#${STYLE_ID}`);\n    if (style !== null) return style;\n\n    // create a new style element\n    style = document.createElement('style');\n    style.id = STYLE_ID;\n    style.textContent = this.defaultStyle;\n    this.container.append(style);\n    return style;\n  }\n\n  /**\n   * Sets the size of the viewport to simulate its dimensions.\n   */\n  protected applyPreviewSize() {\n    if (this.simulateViewport === undefined) return;\n\n    // read the viewport dimensions to apply\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const [w, h] = VIEWPORTS.get(this.simulateViewport)!;\n    // add the size styling to the style element\n    this.prepareStyle().textContent += `\n      .${SIZE_CLASS} {\n        position: absolute;\n        inset: 0 auto auto 0;\n        height: ${this.invertSimulatedViewport ? w : h}px;\n        width: ${this.invertSimulatedViewport ? h : w}px;\n      }\n\n      .${PROPORTION_CLASS} {\n        aspect-ratio: ${this.invertSimulatedViewport ? `${h} / ${w}` : `${w} / ${h}`};\n        width: min(${this.invertSimulatedViewport ? h : w}px, 100%);\n      }\n    `;\n  }\n\n  /**\n   * Scales the sized viewport to fit into the preview container.\n   */\n  protected applyPreviewScale() {\n    if (this.simulateViewport === undefined) return;\n\n    // read the viewport dimensions to apply\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const [w, h] = VIEWPORTS.get(this.simulateViewport)!;\n    // derive the scale to fit the viewport into the preview\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const preview = this.container.parentElement!.parentElement!;\n    const scale = Math.min(\n      (preview.clientWidth - 20) / (this.invertSimulatedViewport ? h : w),\n      (preview.clientHeight - 20) / (this.invertSimulatedViewport ? w : h)\n    );\n    // add the scale styling to the style element\n    this.prepareStyle().textContent += `\n      .${SCALE_CLASS} {\n        transform-origin: 0 0;\n        transform: scale(clamp(0.15, ${scale * SCALE_FACTOR}, 1));\n      }\n    `;\n  }\n\n  protected applyPreviewDimensions() {\n    // remove our stuff if we are not simulating a viewport\n    if (this.simulateViewport === undefined) {\n      this.removeStyle();\n      this.container.parentElement?.classList.remove(DECORATION_CLASS, PROPORTION_CLASS);\n      this.container.classList.remove(SIZE_CLASS, SCALE_CLASS);\n    }\n    // apply visual changes\n    else {\n      this.resetStyle();\n      this.container.parentElement?.classList.add(DECORATION_CLASS, PROPORTION_CLASS);\n      this.container.classList.add(SIZE_CLASS, SCALE_CLASS);\n      this.applyPreviewSize();\n      this.applyPreviewScale();\n    }\n\n    // notify\n    this.emitChange();\n  }\n\n  private emitChange() {\n    const detail = { viewport: this.simulateViewport, inverted: this.invertSimulatedViewport };\n    const event = new CustomEvent('wcp-preview-simulate-viewports:changed', { detail, bubbles: true, composed: true });\n    this.dispatchEvent(event);\n  }\n\n  @eventOptions({ passive: true })\n  private handleSimulateViewport(event: Event) {\n    // update state\n    const { dataset } = event.currentTarget as HTMLButtonElement;\n    const viewport = dataset.viewport as Viewport;\n    this.simulateViewport = this.simulateViewport === viewport ? undefined : viewport;\n\n    // apply visual changes\n    this.applyPreviewDimensions();\n  }\n\n  @eventOptions({ passive: true })\n  handleInvertSimulatedViewport() {\n    // update state\n    this.invertSimulatedViewport = !this.invertSimulatedViewport;\n\n    // apply visual changes\n    this.applyPreviewDimensions();\n  }\n\n  override disconnectedCallback() {\n    this.removeStyle();\n    super.disconnectedCallback();\n  }\n\n  // without ShadowDOM, we need to manually inject the styles\n  protected override render(): TemplateResult {\n    return html`\n      ${map(\n        VIEWPORTS.keys(),\n        (viewport) => html`\n          <wcp-button\n            kind=\"icon\"\n            data-viewport=\"${viewport}\"\n            class=\"${classMap({ active: viewport === this.simulateViewport })}\"\n            @click=\"${this.handleSimulateViewport}\"\n          >\n            <wcp-icon name=\"${ifDefined(ICONS.get(viewport))}\"></wcp-icon>\n          </wcp-button>\n        `\n      )}\n\n      <wcp-button\n        kind=\"icon\"\n        ?disabled=\"${this.simulateViewport === undefined}\"\n        class=\"${classMap({ active: this.simulateViewport !== undefined && this.invertSimulatedViewport })}\"\n        @click=\"${this.handleInvertSimulatedViewport}\"\n      >\n        <wcp-icon name=\"ratio\" style=\"--wcp-icon-size: 19\"></wcp-icon>\n      </wcp-button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    'wcp-preview-simulate-viewports:changed': CustomEvent<{ viewport: Viewport; inverted: boolean }>;\n  }\n\n  interface HTMLElementTagNameMap {\n    'wcp-preview-simulate-viewports': PreviewSimulateViewports;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  ChildPart,\n  DirectiveParameters,\n} from '../directive.js';\nimport {setCommittedValue} from '../directive-helpers.js';\n\nclass Keyed extends Directive {\n  key: unknown = nothing;\n\n  render(k: unknown, v: unknown) {\n    this.key = k;\n    return v;\n  }\n\n  override update(part: ChildPart, [k, v]: DirectiveParameters<this>) {\n    if (k !== this.key) {\n      // Clear the part before returning a value. The one-arg form of\n      // setCommittedValue sets the value to a sentinel which forces a\n      // commit the next render.\n      setCommittedValue(part);\n      this.key = k;\n    }\n    return v;\n  }\n}\n\n/**\n * Associates a renderable value with a unique key. When the key changes, the\n * previous DOM is removed and disposed before rendering the next value, even\n * if the value - such as a template - is the same.\n *\n * This is useful for forcing re-renders of stateful components, or working\n * with code that expects new data to generate new HTML elements, such as some\n * animation techniques.\n */\nexport const keyed = directive(Keyed);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {Keyed};\n", "export function debounce<T extends (...args: Parameters<T>) => void>(this: ThisParameterType<T>, fn: T, wait = 300) {\n  let timeoutId: number;\n  return (...args: Parameters<T>) => {\n    window.clearTimeout(timeoutId);\n    timeoutId = window.setTimeout(() => fn.call(null, ...args), wait);\n  };\n}\n", "import { compress, decompress } from '@/utils/compression.utils.js';\nimport type * as Parsed from '@/utils/parser.types.js';\nimport { litKey } from '@/utils/parser.utils.js';\n\nconst URI_DATA_PARAM_COMPRESSION: CompressionFormat = 'deflate-raw';\n\n/**\n * State of the custom element.\n */\nexport type ElementData = {\n  /**\n   * Additional attributes mapped by attribute name to attribute value.\n   * Should not overlap with reflected attributes from fields.\n   */\n  attributes: Record<string, string | undefined>;\n\n  /**\n   * Field state mapped by property name to property value.\n   */\n  fields: Record<string, string | number | boolean | undefined>;\n\n  /**\n   * Slot state mapped by slot name to slot (html) content.\n   */\n  slots: Record<string, string>;\n};\n\n/**\n * Empty state object of the element data.\n */\nexport const EMPTY_ELEMENT_DATA: ElementData = {\n  attributes: {},\n  fields: {},\n  slots: {},\n};\n\n/**\n * Prepares an initial state object for the given element definition.\n */\nexport function prepareInitialData(element: Parsed.Element): ElementData {\n  return {\n    attributes: {},\n    fields:\n      Array.from(element.fields.values()).reduce((acc, field) => {\n        if (field.isControllable) {\n          const value = field.default;\n          if (value !== undefined) {\n            return { ...acc, [litKey(field)]: value };\n          }\n        }\n        return acc;\n      }, {}) ?? {},\n    slots:\n      Array.from(element.slots.values()).reduce((acc, slot) => {\n        return { ...acc, [slot.name]: slot.default };\n      }, {}) ?? {},\n  };\n}\n\n/**\n * Retrieve the current value of a given field parsed to the correct type\n */\nexport function parseFieldValue(\n  field: Parsed.Field,\n  value: unknown\n): ElementData['fields'][keyof ElementData['fields']] {\n  if (field.isBoolean) {\n    return value === 'on';\n  }\n  if (field.isNumber) {\n    return Number(value);\n  }\n  if (field.isString) {\n    return (value as string).trim() ? (value as string) : undefined;\n  }\n  return undefined;\n}\n\n/**\n * There seems to be a bug in Safari with the native FormAssociated implementation regarding\n * checkboxes: https://bugs.webkit.org/show_bug.cgi?id=259781\n */\nexport function alignFormDataWebkit(\n  formData: FormData,\n  elements: HTMLFormControlsCollection,\n  element: Parsed.Element\n): FormData {\n  // filter out unchecked checkboxes for Safari\n  Array.from(element.fields.entries())\n    .filter(([, field]) => field.isControllable && field.isBoolean)\n    .forEach(([, field]) => {\n      const name = `field.${field.name}`;\n      const checkbox = elements.namedItem(name) as HTMLInputElement;\n      if (!checkbox.checked) formData.delete(name);\n    });\n\n  // give away aligned form data\n  return formData;\n}\n\n/**\n * Maps the given form data by the given element definition to a stateful data object\n */\nexport function mapFormData(data: FormData, element: Parsed.Element): ElementData {\n  return Array.from(data.entries()).reduce((acc, [key, value]) => {\n    // the name consists of the group and the actual name, separated by a dot\n    const [group, name] = key.split('.');\n\n    // map slots\n    if (group === 'slot') {\n      return { ...acc, slots: { ...acc.slots, [name]: `${value}` } };\n    }\n\n    // map the field data\n    if (group === 'field') {\n      const field = element.fields.get(name);\n      if (field === undefined) return acc;\n\n      // pass the key-value pair into the data set\n      return { ...acc, fields: { ...acc.fields, [litKey(field)]: parseFieldValue(field, value) } };\n    }\n\n    // map the attribute data\n    if (group === 'attribute') {\n      // pass the key-value pair into the data set\n      return { ...acc, attributes: { ...acc.attributes, [name]: `${value}` } };\n    }\n\n    return acc;\n  }, EMPTY_ELEMENT_DATA);\n}\n\n/**\n * Prepares the data to be set as compressed url param\n */\nexport async function compressFormData(formData: FormData, element: Parsed.Element): Promise<string> {\n  const data = mapFormData(formData, element);\n  return encodeURIComponent(await compress(JSON.stringify(data), URI_DATA_PARAM_COMPRESSION));\n}\n\n/**\n * Decompresses and parses the given element data\n */\nexport async function decompressElementData(compressed: string): Promise<ElementData> {\n  const raw = await decompress(decodeURIComponent(compressed), URI_DATA_PARAM_COMPRESSION);\n  return JSON.parse(raw);\n}\n", "export default `\n:host {\n  display: flex;\n  flex-direction: column;\n  gap: calc(10px * 2);\n  gap: calc(var(--wcp-base-size, 10px) * 2);\n  padding-top: calc(10px * 2);\n  padding-top: calc(var(--wcp-base-size, 10px) * 2);\n}\n\nwcp-stage-editor-stage {\n  flex: 1 1 auto;\n}\nwcp-stage-editor-controls {\n  flex: 0 0 auto;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2NsaWVudC9jbGllbnQvc3JjL2NvbXBvbmVudHMvcGx1Z2lucy9zdGFnZS1lZGl0b3Ivc3RhZ2UtZWRpdG9yLnBsdWdpbi5zY3NzIiwiOmhvc3QlMjAlN0IlMEElMjAlMjBkaXNwbGF5OiUyMGZsZXg7JTBBJTIwJTIwZmxleC1kaXJlY3Rpb246JTIwY29sdW1uOyUwQSUyMCUyMGdhcDolMjBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsJTIwMTBweCklMjAqJTIwMik7JTBBJTIwJTIwcGFkZGluZy10b3A6JTIwY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCUyMDEwcHgpJTIwKiUyMDIpOyUwQSU3RCUwQSUwQXdjcC1zdGFnZS1lZGl0b3Itc3RhZ2UlMjAlN0IlMEElMjAlMjBmbGV4OiUyMDElMjAxJTIwYXV0bzslMEElN0QlMEF3Y3Atc3RhZ2UtZWRpdG9yLWNvbnRyb2xzJTIwJTdCJTBBJTIwJTIwZmxleDolMjAwJTIwMCUyMGF1dG87JTBBJTdEJTBBLyolMjMlMjBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTl3YkhWbmFXNXpMM04wWVdkbExXVmthWFJ2Y2lJc0luTnZkWEpqWlhNaU9sc2ljM1JoWjJVdFpXUnBkRzl5TG5Cc2RXZHBiaTV6WTNOeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVVkJPMFZCUTBVN1JVRkRRVHRGUVVOQk8wVkJRMEU3T3p0QlFVbEJPMFZCUTBVN08wRkJSMFk3UlVGRFJTSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJa0IxYzJVZ0owQXZjM1I1YkdWekwzVjBhV3h6SnlCaGN5QjFkR2xzY3p0Y2JseHVPbWh2YzNRZ2UxeHVJQ0JrYVhOd2JHRjVPaUJtYkdWNE8xeHVJQ0JtYkdWNExXUnBjbVZqZEdsdmJqb2dZMjlzZFcxdU8xeHVJQ0JuWVhBNklIVjBhV3h6TG5OcGVtVW9NaWs3WEc0Z0lIQmhaR1JwYm1jdGRHOXdPaUIxZEdsc2N5NXphWHBsS0RJcE8xeHVmVnh1WEc1M1kzQXRjM1JoWjJVdFpXUnBkRzl5SUh0Y2JpQWdKaTF6ZEdGblpTQjdYRzRnSUNBZ1pteGxlRG9nTVNBeElHRjFkRzg3WEc0Z0lIMWNibHh1SUNBbUxXTnZiblJ5YjJ4eklIdGNiaUFnSUNCbWJHVjRPaUF3SURBZ1lYVjBienRjYmlBZ2ZWeHVmVnh1SWwxOSUyMCoiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxtQkFBQTtFQUFBLHlDQUFBO0VBQ0EsMkJBQUE7RUFBQSxpREFBQTtBQ0RGOztBREtFO0VBQ0UsY0FBQTtBQ0ZKO0FES0U7RUFDRSxjQUFBO0FDSEoiLCJmaWxlIjoiOmhvc3Qge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBnYXA6IGNhbGModmFyKC0td2NwLWJhc2Utc2l6ZSwgMTBweCkgKiAyKTtcbiAgcGFkZGluZy10b3A6IGNhbGModmFyKC0td2NwLWJhc2Utc2l6ZSwgMTBweCkgKiAyKTtcbn1cblxud2NwLXN0YWdlLWVkaXRvci1zdGFnZSB7XG4gIGZsZXg6IDEgMSBhdXRvO1xufVxud2NwLXN0YWdlLWVkaXRvci1jb250cm9scyB7XG4gIGZsZXg6IDAgMCBhdXRvO1xufVxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVlNiMjkwSWpvaUwyaHZiV1V2Y25WdWJtVnlMM2R2Y21zdlkyeHBaVzUwTDJOc2FXVnVkQzl6Y21NdlkyOXRjRzl1Wlc1MGN5OXdiSFZuYVc1ekwzTjBZV2RsTFdWa2FYUnZjaUlzSW5OdmRYSmpaWE1pT2xzaWMzUmhaMlV0WldScGRHOXlMbkJzZFdkcGJpNXpZM056SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVWQk8wVkJRMFU3UlVGRFFUdEZRVU5CTzBWQlEwRTdPenRCUVVsQk8wVkJRMFU3TzBGQlIwWTdSVUZEUlNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklrQjFjMlVnSjBBdmMzUjViR1Z6TDNWMGFXeHpKeUJoY3lCMWRHbHNjenRjYmx4dU9taHZjM1FnZTF4dUlDQmthWE53YkdGNU9pQm1iR1Y0TzF4dUlDQm1iR1Y0TFdScGNtVmpkR2x2YmpvZ1kyOXNkVzF1TzF4dUlDQm5ZWEE2SUhWMGFXeHpMbk5wZW1Vb01pazdYRzRnSUhCaFpHUnBibWN0ZEc5d09pQjFkR2xzY3k1emFYcGxLRElwTzF4dWZWeHVYRzUzWTNBdGMzUmhaMlV0WldScGRHOXlJSHRjYmlBZ0ppMXpkR0ZuWlNCN1hHNGdJQ0FnWm14bGVEb2dNU0F4SUdGMWRHODdYRzRnSUgxY2JseHVJQ0FtTFdOdmJuUnliMnh6SUh0Y2JpQWdJQ0JtYkdWNE9pQXdJREFnWVhWMGJ6dGNiaUFnZlZ4dWZWeHVJbDE5ICoiLCJzb3VyY2VzQ29udGVudCI6WyJAdXNlICdAL3N0eWxlcy91dGlscycgYXMgdXRpbHM7XG5cbjpob3N0IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZ2FwOiB1dGlscy5zaXplKDIpO1xuICBwYWRkaW5nLXRvcDogdXRpbHMuc2l6ZSgyKTtcbn1cblxud2NwLXN0YWdlLWVkaXRvciB7XG4gICYtc3RhZ2Uge1xuICAgIGZsZXg6IDEgMSBhdXRvO1xuICB9XG5cbiAgJi1jb250cm9scyB7XG4gICAgZmxleDogMCAwIGF1dG87XG4gIH1cbn1cbiIsIjpob3N0IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZ2FwOiBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsIDEwcHgpICogMik7XG4gIHBhZGRpbmctdG9wOiBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsIDEwcHgpICogMik7XG59XG5cbndjcC1zdGFnZS1lZGl0b3Itc3RhZ2Uge1xuICBmbGV4OiAxIDEgYXV0bztcbn1cbndjcC1zdGFnZS1lZGl0b3ItY29udHJvbHMge1xuICBmbGV4OiAwIDAgYXV0bztcbn1cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTl3YkhWbmFXNXpMM04wWVdkbExXVmthWFJ2Y2lJc0luTnZkWEpqWlhNaU9sc2ljM1JoWjJVdFpXUnBkRzl5TG5Cc2RXZHBiaTV6WTNOeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVVkJPMFZCUTBVN1JVRkRRVHRGUVVOQk8wVkJRMEU3T3p0QlFVbEJPMFZCUTBVN08wRkJSMFk3UlVGRFJTSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJa0IxYzJVZ0owQXZjM1I1YkdWekwzVjBhV3h6SnlCaGN5QjFkR2xzY3p0Y2JseHVPbWh2YzNRZ2UxeHVJQ0JrYVhOd2JHRjVPaUJtYkdWNE8xeHVJQ0JtYkdWNExXUnBjbVZqZEdsdmJqb2dZMjlzZFcxdU8xeHVJQ0JuWVhBNklIVjBhV3h6TG5OcGVtVW9NaWs3WEc0Z0lIQmhaR1JwYm1jdGRHOXdPaUIxZEdsc2N5NXphWHBsS0RJcE8xeHVmVnh1WEc1M1kzQXRjM1JoWjJVdFpXUnBkRzl5SUh0Y2JpQWdKaTF6ZEdGblpTQjdYRzRnSUNBZ1pteGxlRG9nTVNBeElHRjFkRzg3WEc0Z0lIMWNibHh1SUNBbUxXTnZiblJ5YjJ4eklIdGNiaUFnSUNCbWJHVjRPaUF3SURBZ1lYVjBienRjYmlBZ2ZWeHVmVnh1SWwxOSAqLyJdfQ== */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property, state } from 'lit/decorators.js';\n\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { keyed } from 'lit/directives/keyed.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\nimport { debounce } from '@/utils/debounce.utils.js';\nimport { getManifest } from '@/utils/manifest.utils.js';\nimport type * as Parsed from '@/utils/parser.types.js';\nimport type { StagePlugin } from '@/utils/plugin.utils.js';\n\nimport { type ElementData, prepareInitialData, compressFormData, decompressElementData } from './stage-editor.utils.js';\n\nimport styles from './stage-editor.plugin.scss';\n\nconst UPDATE_DEBOUNCE = 300;\n\n/**\n * Allows editing a custom element.\n *\n * @element wcp-stage-editor\n */\n@customElement('wcp-stage-editor')\nexport class StageEditor extends ColorSchemable(LitElement) implements StagePlugin {\n  static override readonly styles = unsafeCSS(styles);\n\n  readonly #manifest = getManifest();\n\n  readonly #updateFormData = debounce(async (formData: FormData, element: Parsed.Element) => {\n    // dispatch the event to update the url param\n    const data = await compressFormData(formData, element);\n    const event = new CustomEvent('wcp-stage-plugin:data-change', { detail: data });\n    this.dispatchEvent(event);\n  }, UPDATE_DEBOUNCE);\n\n  @state()\n  private _element?: Parsed.Element;\n\n  @state()\n  private _elementData?: ElementData;\n\n  @property({ type: String, reflect: true, attribute: 'preview-tag-name' })\n  set previewTagName(previewTagName: string) {\n    this._element = this.#manifest.elements.get(previewTagName);\n  }\n\n  @property({ type: String })\n  set data(data: string | undefined) {\n    this.#prepareElementData(data);\n  }\n\n  @property({ type: Boolean, reflect: true })\n  readonly available = true;\n\n  @property({ type: String, reflect: true })\n  readonly name = 'editor';\n\n  @property({ type: String, reflect: true })\n  readonly label = 'Editor';\n\n  async #prepareElementData(compressed?: string) {\n    if (this._element === undefined) return;\n\n    // given data is always without default values, thus we have to retrieve them first\n    const initialData = prepareInitialData(this._element);\n\n    // read element data from compressed data param\n    if (compressed !== undefined) {\n      // merge given data on top of the initial data\n      const elementData = await decompressElementData(compressed);\n      this._elementData = {\n        attributes: { ...initialData.attributes, ...elementData.attributes },\n        fields: { ...initialData.fields, ...elementData.fields },\n        slots: { ...initialData.slots, ...elementData.slots },\n      };\n    }\n    // otherwise we reset the data\n    else {\n      this._elementData = initialData;\n    }\n  }\n\n  protected getElementReference(): Element | undefined {\n    if (this._element === undefined) return undefined;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.renderRoot.querySelector(this._element.tagName!) ?? undefined;\n  }\n\n  @eventOptions({ passive: true })\n  protected async handleControlsInput({ detail }: CustomEvent<FormData>) {\n    if (this._element === undefined) return;\n    this.#updateFormData(detail, this._element);\n  }\n\n  protected override firstUpdated() {\n    this.#prepareElementData();\n  }\n\n  protected override render(): TemplateResult {\n    return html`${keyed(\n      this._element?.tagName ?? '',\n      html`\n        <wcp-stage-editor-preview\n          preview-tag-name=\"${ifDefined(this._element?.tagName)}\"\n          .data=\"${this._elementData}\"\n        ></wcp-stage-editor-preview>\n\n        <wcp-stage-editor-controls\n          preview-tag-name=\"${ifDefined(this._element?.tagName)}\"\n          .data=\"${this._elementData}\"\n          @wcp-stage-editor-controls:input=\"${this.handleControlsInput}\"\n        ></wcp-stage-editor-controls>\n      `\n    )}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-stage-editor': StageEditor;\n  }\n}\n", "export default `\n:host {\n  ---wcp-stage-editor-controls-headline-size: var(--wcp-stage-editor-controls-headline-size, .8em);\n  ---wcp-stage-editor-controls-headline-weight: var(--wcp-stage-editor-controls-headline-weight, 200);\n  ---wcp-stage-editor-controls-headline-spacing: var(--wcp-stage-editor-controls-headline-spacing, .1em);\n  ---wcp-stage-editor-controls-dark-border-color: var(--wcp-stage-editor-controls-dark-border-color, var(--wcp-color-grey-24));\n  ---wcp-stage-editor-controls-light-border-color: var(--wcp-stage-editor-controls-light-border-color, var(--wcp-color-blue-55));\n}\n@media (prefers-color-scheme: dark) {\n  :host {\n    ---wcp-stage-editor-controls-border-color: var(---wcp-stage-editor-controls-dark-border-color);\n  }\n}\n:host([color-scheme=dark]):host {\n  ---wcp-stage-editor-controls-border-color: var(---wcp-stage-editor-controls-dark-border-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    ---wcp-stage-editor-controls-border-color: var(---wcp-stage-editor-controls-light-border-color);\n  }\n}\n:host([color-scheme=light]):host {\n  ---wcp-stage-editor-controls-border-color: var(---wcp-stage-editor-controls-light-border-color);\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n  gap: calc(10px * 2);\n  gap: calc(var(--wcp-base-size, 10px) * 2);\n}\n\nfieldset {\n  all: unset;\n  display: flex;\n  flex-direction: column;\n  gap: calc(10px * 1);\n  gap: calc(var(--wcp-base-size, 10px) * 1);\n  padding: calc(10px * 1) 0;\n  padding: calc(var(--wcp-base-size, 10px) * 1) 0;\n}\n\nlegend {\n  all: unset;\n  display: block;\n  width: 100%;\n  padding: calc(10px * 1) 0;\n  padding: calc(var(--wcp-base-size, 10px) * 1) 0;\n  border-top: 1px solid var(---wcp-stage-editor-controls-border-color);\n  font-size: var(---wcp-stage-editor-controls-headline-size);\n  font-weight: var(---wcp-stage-editor-controls-headline-weight);\n  letter-spacing: var(---wcp-stage-editor-controls-headline-spacing);\n  line-height: 1;\n  text-transform: uppercase;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n[slot=hint] {\n  display: block;\n  max-width: var(--wcp-layout-flowing-width);\n}\n[slot=hint] p {\n  margin: 0;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { html, LitElement, type TemplateResult, unsafeCSS, nothing } from 'lit';\nimport { withStatic } from 'lit/static-html.js';\nimport { customElement, eventOptions, property, state } from 'lit/decorators.js';\n\nimport { map } from 'lit/directives/map.js';\nimport { until } from 'lit/directives/until.js';\nimport { when } from 'lit/directives/when.js';\n\nimport type * as Parsed from '@/utils/parser.types.js';\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\nimport { getManifest } from '@/utils/manifest.utils.js';\nimport { renderMarkdown } from '@/utils/markdown.utils.js';\nimport { litKey } from '@/utils/parser.utils.js';\n\nimport { alignFormDataWebkit, type ElementData } from '../stage-editor.utils.js';\n\nimport styles from './stage-editor-controls.component.scss';\n\n/**\n * @element wcp-stage-editor-controls\n *\n * @cssprop --wcp-stage-editor-controls-headline-size - The font size of the headline.\n * @cssprop --wcp-stage-editor-controls-headline-weight - The font weight of the headline.\n * @cssprop --wcp-stage-editor-controls-headline-spacing - The inner spacing of the headline.\n *\n * @cssprop --wcp-stage-editor-controls-dark-border-color - The border color of the element in dark mode.\n * @cssprop --wcp-stage-editor-controls-light-border-color - The border color of the element in light mode.\n *\n * @emits {CustomEvent<FormData>} wcp-stage-editor-controls:input - Fires when the user changes a control value.\n */\n@customElement('wcp-stage-editor-controls')\nexport class StageEditorControls extends ColorSchemable(LitElement) {\n  static override readonly styles = unsafeCSS(styles);\n\n  readonly #manifest = getManifest();\n\n  @state()\n  private _element?: Parsed.Element;\n\n  @property({ type: String, reflect: true, attribute: 'preview-tag-name' })\n  set previewTagName(previewTagName: string) {\n    this._element = this.#manifest.elements.get(previewTagName);\n  }\n\n  @property({ type: Object })\n  readonly data?: ElementData;\n\n  @eventOptions({ passive: true })\n  protected handleFormInput(event: InputEvent): void {\n    if (this._element === undefined) return;\n\n    // prepare form data\n    const form = event.currentTarget as HTMLFormElement;\n    const formData = alignFormDataWebkit(new FormData(form), form.elements, this._element);\n\n    // broadcast form data\n    this.dispatchEvent(\n      new CustomEvent('wcp-stage-editor-controls:input', {\n        bubbles: true,\n        composed: true,\n        detail: formData,\n      })\n    );\n  }\n\n  // content is derived from documentation which can be written in markdown\n  protected renderHint(content?: string): TemplateResult {\n    return when(\n      content,\n      () => withStatic(html)`<div slot=\"hint\" .innerHTML=\"${until(renderMarkdown(content as string, false))}\"></div>`\n    );\n  }\n\n  protected renderFieldControl(field: Parsed.Field): TemplateResult {\n    if (!field.isControllable) return html`${nothing}`;\n    const key = litKey(field);\n\n    return html`\n      ${when(\n        field.isBoolean,\n        () =>\n          html`\n            <wcp-input-checkbox\n              name=\"field.${field.name}\"\n              label=\"${field.name}\"\n              ?checked=\"${Boolean(this.data?.fields[key])}\"\n            >\n              ${this.renderHint(field.description)}\n            </wcp-input-checkbox>\n          `\n      )}\n      ${when(\n        !field.isEnum && field.isString,\n        () => html`\n          <wcp-input-text\n            name=\"field.${field.name}\"\n            label=\"${field.attribute ?? field.name}\"\n            .value=\"${this.data?.fields[key] as string | undefined}\"\n          >\n            ${this.renderHint(field.description)}\n          </wcp-input-text>\n        `\n      )}\n      ${when(\n        !field.isEnum && field.isNumber,\n        () => html`\n          <wcp-input-number\n            name=\"field.${field.name}\"\n            label=\"${field.attribute ?? field.name}\"\n            .value=\"${this.data?.fields[key] as number | undefined}\"\n          >\n            ${this.renderHint(field.description)}\n          </wcp-input-number>\n        `\n      )}\n      ${when(\n        field.isEnum && field.isString,\n        () => html`\n          <wcp-input-select\n            name=\"field.${field.name}\"\n            label=\"${field.attribute ?? field.name}\"\n            .value=\"${this.data?.fields[key] as string | undefined}\"\n          >\n            ${map(\n              field.enumValues,\n              (option) => html`\n                <wcp-input-select-option label=\"${option}\" .value=\"${option}\"></wcp-input-select-option>\n              `\n            )}\n            ${this.renderHint(field.description)}\n          </wcp-input-select>\n        `\n      )}\n    `;\n  }\n\n  protected renderSlotControl(slot: Parsed.Slot): TemplateResult {\n    return html`\n      <wcp-input-code\n        autosize\n        name=\"slot.${slot.name}\"\n        label=\"${slot.name.trim() ? slot.name : 'Default'}\"\n        .value=\"${this.data?.slots[slot.name]}\"\n      >\n        ${when(slot.hasDescription, () => html`${this.renderHint(slot.description)}`)}\n      </wcp-input-code>\n    `;\n  }\n\n  protected renderAttributeControls(): TemplateResult {\n    return html`\n      <wcp-input-key-value-pairs\n        name=\"attribute.\"\n        .pairs=\"${Object.entries(this.data?.attributes ?? {})}\"\n      ></wcp-input-key-value-pairs>\n    `;\n  }\n\n  protected override render(): TemplateResult {\n    return html`\n      <form @input=\"${this.handleFormInput}\">\n        <wcp-tabs\n          .tabs=\"${{\n            fields: { label: 'Fields', disabled: !this._element?.hasFields },\n            slots: { label: 'Slots', disabled: !this._element?.hasSlots },\n            attributes: { label: 'Attributes' },\n          }}\"\n          active-tab=\"fields\"\n        >\n          ${when(\n            this._element?.hasFields,\n            () => html`\n              <fieldset slot=\"fields\">\n                ${map(this._element?.fields.values(), (field) => this.renderFieldControl(field))}\n              </fieldset>\n            `\n          )}\n          ${when(\n            this._element?.hasSlots,\n            () => html`\n              <fieldset slot=\"slots\">\n                ${map(this._element?.slots.values(), (slot) => this.renderSlotControl(slot))}\n              </fieldset>\n            `\n          )}\n          <fieldset slot=\"attributes\">${this.renderAttributeControls()}</fieldset>\n        </wcp-tabs>\n      </form>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    'wcp-stage-editor-controls:input': CustomEvent<FormData>;\n  }\n\n  interface HTMLElementTagNameMap {\n    'wcp-stage-editor-controls': StageEditorControls;\n  }\n}\n", null, "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing, TemplateResult, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nconst HTML_RESULT = 1;\n\nexport class UnsafeHTMLDirective extends Directive {\n  static directiveName = 'unsafeHTML';\n  static resultType = HTML_RESULT;\n\n  private _value: unknown = nothing;\n  private _templateResult?: TemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() can only be used in child bindings`\n      );\n    }\n  }\n\n  render(value: string | typeof nothing | typeof noChange | undefined | null) {\n    if (value === nothing || value == null) {\n      this._templateResult = undefined;\n      return (this._value = value);\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() called with a non-string value`\n      );\n    }\n    if (value === this._value) {\n      return this._templateResult;\n    }\n    this._value = value;\n    const strings = [value] as unknown as TemplateStringsArray;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (strings as any).raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return (this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      // This property needs to remain unminified.\n      ['_$litType$']: (this.constructor as typeof UnsafeHTMLDirective)\n        .resultType as 1 | 2,\n      strings,\n      values: [],\n    });\n  }\n}\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n", "export default `\n`;\n", "import { spread } from '@open-wc/lit-helpers';\n\nimport { html, LitElement, type TemplateResult, unsafeCSS, nothing } from 'lit';\nimport { unsafeStatic, withStatic } from 'lit/static-html.js';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport { keyed } from 'lit/directives/keyed.js';\nimport { map } from 'lit/directives/map.js';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\nimport { when } from 'lit/directives/when.js';\n\nimport type { ElementData } from '../stage-editor.utils.js';\n\nimport styles from './stage-editor-preview.component.scss';\n\n/**\n * @element wcp-stage-editor-preview\n *\n * @example\n * ```html\n * <wcp-stage-editor-preview>\n *   <wcp-button>Example button</wcp-button>\n * </wcp-stage-editor-preview>\n * ```\n */\n@customElement('wcp-stage-editor-preview')\nexport class StageEditorPreview extends LitElement {\n  static override readonly styles = unsafeCSS(styles);\n\n  @property({ type: String, reflect: true, attribute: 'preview-tag-name' })\n  previewTagName?: string;\n\n  @property({ type: Object })\n  data?: ElementData;\n\n  /**\n   * Takes the given attributes record, eliminates the empty keys and aligns boolean attributes.\n   * @private\n   */\n  #alignAttributes(attributes: ElementData['attributes']): ElementData['attributes'] {\n    return Object.entries(attributes ?? {}).reduce((acc, [key, value]) => {\n      // align the ky by removing forbidden characters\n      key = key.replace(/[^a-zA-Z0-9-]/g, '');\n      // skip empty keys\n      if (key === '') return acc;\n      // missing value means boolean attribute\n      if (['', null, undefined].includes(value)) {\n        return { ...acc, [`?${key}`]: true };\n      }\n      // otherwise, just return the pair\n      return { ...acc, [key]: value };\n    }, {});\n  }\n\n  /**\n   * Prepares a record of lit aware attributes and properties.\n   * @private\n   */\n  #prepareProps(): Record<string, unknown> {\n    return {\n      // set the attributes first, as they may be overwritten by the fields...\n      ...this.#alignAttributes(this.data?.attributes ?? {}),\n      // ... if the same key is used in both\n      ...(this.data?.fields ?? {}),\n    };\n  }\n\n  protected renderSlots(): TemplateResult {\n    return html`\n      ${map(\n        Object.entries(this.data?.slots ?? {}),\n        ([name, content]) => withStatic(html)`\n          ${when(\n            name === '',\n            () => unsafeHTML(content),\n            () => withStatic(html)`<div slot=\"${name}\">${unsafeHTML(content)}</div>`\n          )}\n        `\n      )}\n    `;\n  }\n\n  protected override render(): TemplateResult {\n    // we need the tag name to be defined and the iframe ready\n    if (this.previewTagName === undefined || !this.previewTagName.length) return html`${nothing}`;\n\n    // prepare the tag name and render it along with the slots and properties\n    const tag = unsafeStatic(this.previewTagName);\n    return html`\n      <wcp-preview preview-tag-name=\"${this.previewTagName}\">\n        ${keyed(\n          this.data,\n          withStatic(html)`\n            <${tag} ${spread(this.#prepareProps())}>\n              ${this.renderSlots()}\n            </${tag}>\n          `\n        )}\n      </wcp-preview>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-stage-editor-preview': StageEditorPreview;\n  }\n}\n", "export default `\n:host {\n  ---wcp-stage-examples-spacing: var(--wcp-stage-examples-spacing, calc(var(--wcp-base-size, 10px) * 3));\n}\n\nsection ~ section {\n  margin-top: var(---wcp-stage-examples-spacing);\n}\n\nwcp-markdown-example {\n  max-width: var(--wcp-layout-fixed-width);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2NsaWVudC9jbGllbnQvc3JjL2NvbXBvbmVudHMvcGx1Z2lucy9zdGFnZS1leGFtcGxlcy9zdGFnZS1leGFtcGxlcy5wbHVnaW4uc2NzcyIsIjpob3N0JTIwJTdCJTBBJTIwJTIwLS0td2NwLXN0YWdlLWV4YW1wbGVzLXNwYWNpbmc6JTIwdmFyKC0td2NwLXN0YWdlLWV4YW1wbGVzLXNwYWNpbmcsJTIwY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCUyMDEwcHgpJTIwKiUyMDMpKTslMEElN0QlMEElMEFzZWN0aW9uJTIwfiUyMHNlY3Rpb24lMjAlN0IlMEElMjAlMjBtYXJnaW4tdG9wOiUyMHZhcigtLS13Y3Atc3RhZ2UtZXhhbXBsZXMtc3BhY2luZyk7JTBBJTdEJTBBJTBBd2NwLW1hcmtkb3duLWV4YW1wbGUlMjAlN0IlMEElMjAlMjBtYXgtd2lkdGg6JTIwdmFyKC0td2NwLWxheW91dC1maXhlZC13aWR0aCk7JTBBJTdEJTBBLyolMjMlMjBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTl3YkhWbmFXNXpMM04wWVdkbExXVjRZVzF3YkdWeklpd2ljMjkxY21ObGN5STZXeUp6ZEdGblpTMWxlR0Z0Y0d4bGN5NXdiSFZuYVc0dWMyTnpjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZIUVR0RlFVTkZPenM3UVVGSFJqdEZRVU5GT3pzN1FVRkhSanRGUVVORklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lRSFZ6WlNBblFDOXpkSGxzWlhNdmRYUnBiSE1uSUdGeklIVjBhV3h6TzF4dVhHNHZMeUJ3Y21WMGRHbGxjaTFwWjI1dmNtVmNianBvYjNOMElIdGNiaUFnTFMwdGQyTndMWE4wWVdkbExXVjRZVzF3YkdWekxYTndZV05wYm1jNklIWmhjaWd0TFhkamNDMXpkR0ZuWlMxbGVHRnRjR3hsY3kxemNHRmphVzVuTENBamUzVjBhV3h6TG5OcGVtVW9NeWw5S1R0Y2JuMWNibHh1YzJWamRHbHZiaUIrSUhObFkzUnBiMjRnZTF4dUlDQnRZWEpuYVc0dGRHOXdPaUIyWVhJb0xTMHRkMk53TFhOMFlXZGxMV1Y0WVcxd2JHVnpMWE53WVdOcGJtY3BPMXh1ZlZ4dVhHNTNZM0F0YldGeWEyUnZkMjR0WlhoaGJYQnNaU0I3WEc0Z0lHMWhlQzEzYVdSMGFEb2dkbUZ5S0MwdGQyTndMV3hoZVc5MWRDMW1hWGhsWkMxM2FXUjBhQ2s3WEc1OVhHNGlYWDA9JTIwKiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQTtFQUNFLHNHQUFBO0FDRkY7O0FES0E7RUFDRSw4Q0FBQTtBQ0ZGOztBREtBO0VBQ0Usd0NBQUE7QUNGRiIsImZpbGUiOiI6aG9zdCB7XG4gIC0tLXdjcC1zdGFnZS1leGFtcGxlcy1zcGFjaW5nOiB2YXIoLS13Y3Atc3RhZ2UtZXhhbXBsZXMtc3BhY2luZywgY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCAxMHB4KSAqIDMpKTtcbn1cblxuc2VjdGlvbiB+IHNlY3Rpb24ge1xuICBtYXJnaW4tdG9wOiB2YXIoLS0td2NwLXN0YWdlLWV4YW1wbGVzLXNwYWNpbmcpO1xufVxuXG53Y3AtbWFya2Rvd24tZXhhbXBsZSB7XG4gIG1heC13aWR0aDogdmFyKC0td2NwLWxheW91dC1maXhlZC13aWR0aCk7XG59XG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWU2IyOTBJam9pTDJodmJXVXZjblZ1Ym1WeUwzZHZjbXN2WTJ4cFpXNTBMMk5zYVdWdWRDOXpjbU12WTI5dGNHOXVaVzUwY3k5d2JIVm5hVzV6TDNOMFlXZGxMV1Y0WVcxd2JHVnpJaXdpYzI5MWNtTmxjeUk2V3lKemRHRm5aUzFsZUdGdGNHeGxjeTV3YkhWbmFXNHVjMk56Y3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGSFFUdEZRVU5GT3pzN1FVRkhSanRGUVVORk96czdRVUZIUmp0RlFVTkZJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpUUhWelpTQW5RQzl6ZEhsc1pYTXZkWFJwYkhNbklHRnpJSFYwYVd4ek8xeHVYRzR2THlCd2NtVjBkR2xsY2kxcFoyNXZjbVZjYmpwb2IzTjBJSHRjYmlBZ0xTMHRkMk53TFhOMFlXZGxMV1Y0WVcxd2JHVnpMWE53WVdOcGJtYzZJSFpoY2lndExYZGpjQzF6ZEdGblpTMWxlR0Z0Y0d4bGN5MXpjR0ZqYVc1bkxDQWplM1YwYVd4ekxuTnBlbVVvTXlsOUtUdGNibjFjYmx4dWMyVmpkR2x2YmlCK0lITmxZM1JwYjI0Z2UxeHVJQ0J0WVhKbmFXNHRkRzl3T2lCMllYSW9MUzB0ZDJOd0xYTjBZV2RsTFdWNFlXMXdiR1Z6TFhOd1lXTnBibWNwTzF4dWZWeHVYRzUzWTNBdGJXRnlhMlJ2ZDI0dFpYaGhiWEJzWlNCN1hHNGdJRzFoZUMxM2FXUjBhRG9nZG1GeUtDMHRkMk53TFd4aGVXOTFkQzFtYVhobFpDMTNhV1IwYUNrN1hHNTlYRzRpWFgwPSAqIiwic291cmNlc0NvbnRlbnQiOlsiQHVzZSAnQC9zdHlsZXMvdXRpbHMnIGFzIHV0aWxzO1xuXG4vLyBwcmV0dGllci1pZ25vcmVcbjpob3N0IHtcbiAgLS0td2NwLXN0YWdlLWV4YW1wbGVzLXNwYWNpbmc6IHZhcigtLXdjcC1zdGFnZS1leGFtcGxlcy1zcGFjaW5nLCAje3V0aWxzLnNpemUoMyl9KTtcbn1cblxuc2VjdGlvbiB+IHNlY3Rpb24ge1xuICBtYXJnaW4tdG9wOiB2YXIoLS0td2NwLXN0YWdlLWV4YW1wbGVzLXNwYWNpbmcpO1xufVxuXG53Y3AtbWFya2Rvd24tZXhhbXBsZSB7XG4gIG1heC13aWR0aDogdmFyKC0td2NwLWxheW91dC1maXhlZC13aWR0aCk7XG59XG4iLCI6aG9zdCB7XG4gIC0tLXdjcC1zdGFnZS1leGFtcGxlcy1zcGFjaW5nOiB2YXIoLS13Y3Atc3RhZ2UtZXhhbXBsZXMtc3BhY2luZywgY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCAxMHB4KSAqIDMpKTtcbn1cblxuc2VjdGlvbiB+IHNlY3Rpb24ge1xuICBtYXJnaW4tdG9wOiB2YXIoLS0td2NwLXN0YWdlLWV4YW1wbGVzLXNwYWNpbmcpO1xufVxuXG53Y3AtbWFya2Rvd24tZXhhbXBsZSB7XG4gIG1heC13aWR0aDogdmFyKC0td2NwLWxheW91dC1maXhlZC13aWR0aCk7XG59XG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWU2IyOTBJam9pTDJodmJXVXZjblZ1Ym1WeUwzZHZjbXN2WTJ4cFpXNTBMMk5zYVdWdWRDOXpjbU12WTI5dGNHOXVaVzUwY3k5d2JIVm5hVzV6TDNOMFlXZGxMV1Y0WVcxd2JHVnpJaXdpYzI5MWNtTmxjeUk2V3lKemRHRm5aUzFsZUdGdGNHeGxjeTV3YkhWbmFXNHVjMk56Y3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGSFFUdEZRVU5GT3pzN1FVRkhSanRGUVVORk96czdRVUZIUmp0RlFVTkZJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpUUhWelpTQW5RQzl6ZEhsc1pYTXZkWFJwYkhNbklHRnpJSFYwYVd4ek8xeHVYRzR2THlCd2NtVjBkR2xsY2kxcFoyNXZjbVZjYmpwb2IzTjBJSHRjYmlBZ0xTMHRkMk53TFhOMFlXZGxMV1Y0WVcxd2JHVnpMWE53WVdOcGJtYzZJSFpoY2lndExYZGpjQzF6ZEdGblpTMWxlR0Z0Y0d4bGN5MXpjR0ZqYVc1bkxDQWplM1YwYVd4ekxuTnBlbVVvTXlsOUtUdGNibjFjYmx4dWMyVmpkR2x2YmlCK0lITmxZM1JwYjI0Z2UxeHVJQ0J0WVhKbmFXNHRkRzl3T2lCMllYSW9MUzB0ZDJOd0xYTjBZV2RsTFdWNFlXMXdiR1Z6TFhOd1lXTnBibWNwTzF4dWZWeHVYRzUzWTNBdGJXRnlhMlJ2ZDI0dFpYaGhiWEJzWlNCN1hHNGdJRzFoZUMxM2FXUjBhRG9nZG1GeUtDMHRkMk53TFd4aGVXOTFkQzFtYVhobFpDMTNhV1IwYUNrN1hHNTlYRzRpWFgwPSAqLyJdfQ== */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { map } from 'lit/directives/map.js';\nimport { until } from 'lit/directives/until.js';\n\nimport type * as Parsed from '@/utils/parser.types.js';\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\nimport { getManifest } from '@/utils/manifest.utils.js';\nimport { renderMarkdown } from '@/utils/markdown.utils.js';\nimport type { StagePlugin } from '@/utils/plugin.utils.js';\n\nimport styles from './stage-examples.plugin.scss';\n\n/**\n * Shows the examples of a custom element manifest.\n *\n * @element wcp-stage-examples\n *\n * @cssprop --wcp-stage-examples-spacing - Spacing between examples.\n */\n@customElement('wcp-stage-examples')\nexport class StageExamples extends ColorSchemable(LitElement) implements StagePlugin {\n  static override readonly styles = unsafeCSS(styles);\n\n  readonly #manifest = getManifest();\n\n  @state()\n  private _element?: Parsed.Element;\n\n  @property({ type: Boolean, reflect: true })\n  available = false;\n\n  @property({ type: String, reflect: true, attribute: 'preview-tag-name' })\n  set previewTagName(previewTagName: string) {\n    this._element = this.#manifest.elements.get(previewTagName);\n    const available = this._element?.hasExamples ?? false;\n\n    // update the property if changed\n    if (this.available !== available) {\n      this.available = available;\n\n      // notify about availability change\n      const event = new CustomEvent('wcp-stage-plugin:availability-change', {\n        detail: this.available,\n        bubbles: true,\n        composed: true,\n      });\n      this.dispatchEvent(event);\n    }\n  }\n\n  @property({ type: String, reflect: true })\n  readonly name = 'examples';\n\n  @property({ type: String, reflect: true })\n  readonly label = 'Examples';\n\n  protected override render(): TemplateResult {\n    return html`\n      ${map(\n        this._element?.examples ?? [],\n        (example: string) => html`<section .innerHTML=\"${until(renderMarkdown(example, true, this._element?.tagName))}\"></section>`\n      )}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    'wcp-stage-plugin:availability-change': CustomEvent<boolean>;\n  }\n  interface HTMLElementTagNameMap {\n    'wcp-stage-examples': StageExamples;\n  }\n}\n", "export default `\n`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS, nothing } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport type * as Parsed from '@/utils/parser.types.js';\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\nimport { getManifest } from '@/utils/manifest.utils.js';\nimport type { StagePlugin } from '@/utils/plugin.utils.js';\n\nimport styles from './stage-readme.plugin.scss';\n\n/**\n * Shows the readme of a custom element.\n *\n * @element wcp-stage-readme\n */\n@customElement('wcp-stage-readme')\nexport class StageReadme extends ColorSchemable(LitElement) implements StagePlugin {\n  static override readonly styles = unsafeCSS(styles);\n\n  readonly #manifest = getManifest();\n\n  @state()\n  private _element?: Parsed.Element;\n\n  @property({ type: Boolean, reflect: true })\n  available = false;\n\n  @property({ type: String, reflect: true, attribute: 'preview-tag-name' })\n  set previewTagName(previewTagName: string) {\n    this._element = this.#manifest.elements.get(previewTagName);\n    const available = this._element?.hasReadme ?? false;\n\n    // update the property if changed\n    if (this.available !== available) {\n      this.available = available;\n\n      // notify about availability change\n      const event = new CustomEvent('wcp-stage-plugin:availability-change', {\n        detail: this.available,\n        bubbles: true,\n        composed: true,\n      });\n      this.dispatchEvent(event);\n    }\n  }\n\n  @property({ type: String, reflect: true })\n  readonly name = 'readme';\n\n  @property({ type: String, reflect: true })\n  readonly label = 'Readme';\n\n  // without ShadowDOM, we need to manually inject the styles\n  protected override render(): TemplateResult {\n    return html`\n      ${this.available\n        ? html`\n            <wcp-readme\n              add-code-preview\n              preview-tag-name=\"${ifDefined(this._element?.tagName)}\"\n              markdown=\"${this._element?.readme ?? ''}\"\n            ></wcp-readme>\n          `\n        : nothing}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    'wcp-stage-plugin:availability-change': CustomEvent<boolean>;\n  }\n  interface HTMLElementTagNameMap {\n    'wcp-stage-readme': StageReadme;\n  }\n}\n", "import type { Config } from '@/utils/config.utils.js';\nimport type { Element, Manifest } from '@/utils/parser.types.js';\n\nconst ROUTE_ELEMENTS = '/element';\nconst ROUTE_READMES = '/readme';\n\n/**\n * Defines the structure of the navigation items.\n */\nexport type GroupedNavigationItems = Map<string, Set<GroupedNavigationItem>>;\nexport type GroupedNavigationItem = { name: string; link: string };\n\n/**\n * Creates a navigation item for a given readme.\n */\nexport function prepareReadmeNavigationItem(name: string, url: string): GroupedNavigationItem {\n  const link = `${ROUTE_READMES}/${encodeURIComponent(url)}`;\n  return { name, link };\n}\n\n/**\n * Creates a navigation item for a given element.\n */\nexport function prepareElementNavigationItem(element: Element): GroupedNavigationItem {\n  const name = element.getNiceName();\n  const link = `${ROUTE_ELEMENTS}/${element.getNiceUrl()}`;\n  return { name, link };\n}\n\n/**\n * Prepares a grouped navigation structure of readmes and elements.\n */\nexport function prepareNavigation(manifest: Manifest, config: Config): GroupedNavigationItems {\n  const items: GroupedNavigationItems = new Map();\n\n  // prepare readme navigation\n  if (config.additionalReadmes?.length) {\n    const readmes = config.additionalReadmes.reduce(\n      (readmes, { name, url }) => readmes.add(prepareReadmeNavigationItem(name, url)),\n      new Set<GroupedNavigationItem>()\n    );\n    items.set(config.labels.additionalReadmeGroupName, readmes);\n  }\n\n  // prepare element navigation\n  const elements = Array.from(manifest.getGroupedElements(config.labels.fallbackGroupName));\n\n  return elements.reduce(\n    (items, [group, elements]) =>\n      items.set(\n        group,\n        elements.reduce(\n          (items, element) => items.add(prepareElementNavigationItem(element)),\n          new Set<GroupedNavigationItem>()\n        )\n      ),\n    items\n  );\n}\n\nexport function matchesSearch(content: string, terms: string[], minSearchLength = 1): boolean {\n  const contents = content.toLowerCase();\n  return terms.every((term) => term.length < minSearchLength || contents.includes(term));\n}\n\nexport function filterItems(\n  items: GroupedNavigationItems,\n  terms: string[],\n  minSearchLength = 1\n): GroupedNavigationItems {\n  // check if we even want to filter\n  if (terms.length < 1) return items;\n\n  // filter the items, skip empty groups\n  return Array.from(items.entries()).reduce((all, [group, items]) => {\n    const filteredItems = [...items].filter(({ name }) => matchesSearch(`${group} ${name}`, terms, minSearchLength));\n    if (filteredItems.length < 1) return all;\n    return all.set(group, new Set(filteredItems));\n  }, new Map() as GroupedNavigationItems);\n}\n", "import type { LitElement } from 'lit';\n\nimport type { Constructor } from '@/utils/mixin.types.js';\nimport { type RegisterRoutes, Router } from '@/utils/router.utils.js';\n\ndeclare class RoutableInterface {\n  router: Router;\n}\n\n// provide a mixin to make a component routable\nexport const Routable =\n  (registerRoutes?: RegisterRoutes) =>\n  <T extends Constructor<LitElement>>(superClass: T) => {\n    class RoutableElement extends superClass {\n      /**\n       * @internal - allows access to routing features\n       */\n      router = new Router(this);\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      constructor(...args: any[]) {\n        super(...args);\n\n        // allow setting routes from decorator\n        if (registerRoutes !== undefined) {\n          const routes = registerRoutes(this.router);\n          this.router.registerRoutes(routes);\n        }\n      }\n\n      override connectedCallback() {\n        super.connectedCallback();\n        this.router.connect();\n      }\n\n      override disconnectedCallback() {\n        super.disconnectedCallback();\n        this.router.disconnect();\n      }\n    }\n    return RoutableElement as Constructor<RoutableInterface> & T;\n  };\n", "import { html } from 'lit';\nimport { unsafeStatic, withStatic } from 'lit/static-html.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { map } from 'lit/directives/map.js';\nimport { until } from 'lit/directives/until.js';\n\nimport { getManifest } from '@/utils/manifest.utils.js';\nimport { prefixRelativeUrls } from '@/utils/markdown.utils.js';\nimport { areParamsEqual, mergeParams, type Route, Router } from '@/utils/router.utils.js';\n\nexport const prepareRoutes = (): Route[] => [\n  {\n    path: '/',\n    enter: () => {\n      // redirect to initial element if defined\n      if (window.wcp.config.initialActiveElement !== undefined) {\n        Router.navigate(`/element/${window.wcp.config.initialActiveElement}`);\n        return false;\n      }\n\n      // redirect to first readme if available\n      const firstReadme = window.wcp.config.additionalReadmes[0]?.url;\n      if (firstReadme !== undefined) {\n        Router.navigate(`/readme/${encodeURIComponent(firstReadme)}`);\n        return false;\n      }\n\n      // redirect to first element\n      const firstElement = getManifest().elements.values().next().value.getNiceUrl();\n      Router.navigate(`/element/${firstElement}`);\n      return false;\n    },\n  },\n  {\n    path: '/readme/:url/:hash?',\n    enter: () => (window.wcp.config.additionalReadmes.length ?? 0) > 0,\n    render: ({ url = '', hash }) => {\n      // the url is encoded to be able to use it as a param\n      const encoded = decodeURIComponent(url);\n      // fetch the readme contents and parse it as markdown\n      const markdown = fetch(encoded)\n        .then((response) => response.text())\n        .then((markdown) => prefixRelativeUrls(markdown, encoded, '/#/readme/'));\n      return html`\n        <wcp-readme-frame>\n          <wcp-readme markdown=\"${until(markdown, '')}\" hash=\"${ifDefined(hash)}\"></wcp-readme>\n        </wcp-readme-frame>\n      `;\n    },\n  },\n  {\n    path: '/element/:tagName/:pluginName?/:pluginData?',\n    // fill in existing params if not provided for next route\n    enter: (params, router, outgoingParams) => {\n      // check if the params can be taken over (current route is the same\n      // path with different params), but exclude pluginData, as they're\n      // specific to the current element and should not be taken over\n      const hasOutgoingParams = outgoingParams !== undefined;\n      const isSamePath = router.currentPath?.startsWith('/element/');\n      const alignedParams = mergeParams(outgoingParams ?? {}, params, ['pluginData']);\n      const haveParamsChanged = !areParamsEqual(params, alignedParams, ['pluginData']);\n\n      // digest these insights; redirect and block current route\n      if (hasOutgoingParams && haveParamsChanged && isSamePath) {\n        const { tagName, pluginName, pluginData } = alignedParams;\n        Router.navigate('/element', tagName, pluginName, pluginData);\n        return false;\n      }\n\n      // everything okay here, just go on\n      return true;\n    },\n    render: ({ tagName = '', pluginName = window.wcp.config.initialPreviewTab, pluginData }) => {\n      return html`\n        <wcp-stage\n          active-plugin=\"${ifDefined(pluginName)}\"\n          @wcp-stage:active-plugin-change=\"${({ detail: pluginName }: CustomEvent<string>) =>\n            Router.navigate('/element', tagName, pluginName)}\"\n        >\n          ${map(\n            window.wcp.config.previewFramePlugins ?? [],\n            (previewFramePlugin) => withStatic(html)`\n            <${unsafeStatic(previewFramePlugin)}\n              preview-tag-name=\"${tagName}\"\n              .data=\"${ifDefined(pluginData)}\"\n              @wcp-stage-plugin:data-change=\"${({ detail: pluginData }: CustomEvent<string>) =>\n                Router.navigate('/element', tagName, pluginName, pluginData)}\"\n            ></${unsafeStatic(previewFramePlugin)}>\n          `\n          )}\n        </wcp-stage>\n      `;\n    },\n  },\n];\n", "export default `\n:host {\n  --wcp-base-size: 10px;\n  --wcp-border-radius: calc(var(--wcp-base-size) * 0.5);\n  --wcp-color-opacity: 1;\n  --wcp-color-grey-100-raw: 0deg 0% 100%;\n  --wcp-color-grey-100: hsl(var(--wcp-color-grey-100-raw)/var(--wcp-color-opacity));\n  --wcp-color-grey-96-raw: 0deg 0% 96%;\n  --wcp-color-grey-96: hsl(var(--wcp-color-grey-96-raw)/var(--wcp-color-opacity));\n  --wcp-color-grey-90-raw: 0deg 0% 90%;\n  --wcp-color-grey-90: hsl(var(--wcp-color-grey-90-raw)/var(--wcp-color-opacity));\n  --wcp-color-grey-80-raw: 0deg 0% 80%;\n  --wcp-color-grey-80: hsl(var(--wcp-color-grey-80-raw)/var(--wcp-color-opacity));\n  --wcp-color-grey-65-raw: 0deg 0% 65%;\n  --wcp-color-grey-65: hsl(var(--wcp-color-grey-65-raw)/var(--wcp-color-opacity));\n  --wcp-color-grey-24-raw: 0deg 0% 24%;\n  --wcp-color-grey-24: hsl(var(--wcp-color-grey-24-raw)/var(--wcp-color-opacity));\n  --wcp-color-grey-17-raw: 0deg 0% 17%;\n  --wcp-color-grey-17: hsl(var(--wcp-color-grey-17-raw)/var(--wcp-color-opacity));\n  --wcp-color-blue-13-raw: 225deg 6% 13%;\n  --wcp-color-blue-13: hsl(var(--wcp-color-blue-13-raw)/var(--wcp-color-opacity));\n  --wcp-color-blue-17-raw: 215deg 28% 17%;\n  --wcp-color-blue-17: hsl(var(--wcp-color-blue-17-raw)/var(--wcp-color-opacity));\n  --wcp-color-blue-20-raw: 217deg 19% 20%;\n  --wcp-color-blue-20: hsl(var(--wcp-color-blue-20-raw)/var(--wcp-color-opacity));\n  --wcp-color-blue-24-raw: 217deg 19% 24%;\n  --wcp-color-blue-24: hsl(var(--wcp-color-blue-24-raw)/var(--wcp-color-opacity));\n  --wcp-color-blue-27-raw: 217deg 19% 27%;\n  --wcp-color-blue-27: hsl(var(--wcp-color-blue-27-raw)/var(--wcp-color-opacity));\n  --wcp-color-blue-34-raw: 215deg 14% 34%;\n  --wcp-color-blue-34: hsl(var(--wcp-color-blue-34-raw)/var(--wcp-color-opacity));\n  --wcp-color-blue-55-raw: 215deg 14% 55%;\n  --wcp-color-blue-55: hsl(var(--wcp-color-blue-55-raw)/var(--wcp-color-opacity));\n  --wcp-color-blue-65-raw: 218deg 11% 65%;\n  --wcp-color-blue-65: hsl(var(--wcp-color-blue-65-raw)/var(--wcp-color-opacity));\n  --wcp-color-blue-80-raw: 220deg 13% 80%;\n  --wcp-color-blue-80: hsl(var(--wcp-color-blue-80-raw)/var(--wcp-color-opacity));\n  --wcp-color-blue-91-raw: 220deg 13% 91%;\n  --wcp-color-blue-91: hsl(var(--wcp-color-blue-91-raw)/var(--wcp-color-opacity));\n  --wcp-color-blue-93-raw: 220deg 13% 93%;\n  --wcp-color-blue-93: hsl(var(--wcp-color-blue-93-raw)/var(--wcp-color-opacity));\n  --wcp-color-blue-96-raw: 220deg 14% 96%;\n  --wcp-color-blue-96: hsl(var(--wcp-color-blue-96-raw)/var(--wcp-color-opacity));\n  --wcp-fx-default-duration: 0.2s;\n  --wcp-fx-layout-duration: 0.4s;\n  --wcp-font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, sans-serif, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\",\n    Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n  --wcp-layout-flowing-width: 800px;\n  --wcp-layout-fixed-width: 1200px;\n}\n\n:host {\n  ---wcp-root-dark-background: var(--wcp-root-dark-background, var(--wcp-color-blue-17));\n  ---wcp-root-dark-color: var(--wcp-root-dark-color, var(--wcp-color-grey-96));\n  ---wcp-root-light-background: var(--wcp-root-light-background, var(--wcp-color-blue-80));\n  ---wcp-root-light-color: var(--wcp-root-light-color, var(--wcp-color-grey-96));\n}\n\n:host {\n  display: block;\n  background-color: var(---wcp-root-background);\n  color: var(---wcp-root-color);\n  font-family: var(--wcp-font-family);\n  font-feature-settings: normal;\n  font-size: 15px;\n  line-height: 1.3;\n}\n@media (prefers-color-scheme: dark) {\n  :host {\n    ---wcp-root-background: var(---wcp-root-dark-background);\n    ---wcp-root-color: var(---wcp-root-dark-color);\n  }\n}\n:host([color-scheme=dark]):host {\n  ---wcp-root-background: var(---wcp-root-dark-background);\n  ---wcp-root-color: var(---wcp-root-dark-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    ---wcp-root-background: var(---wcp-root-light-background);\n    ---wcp-root-color: var(---wcp-root-light-color);\n  }\n}\n:host([color-scheme=light]):host {\n  ---wcp-root-background: var(---wcp-root-light-background);\n  ---wcp-root-color: var(---wcp-root-light-color);\n}\n\n@media (min-width: 768px) {\n  :host {\n    font-size: 13px;\n  }\n}\n@media (min-width: 992px) {\n  :host {\n    font-size: 15px;\n  }\n}\n@media (min-width: 1200px) {\n  :host {\n    font-size: 17px;\n  }\n}\n\n:host(:not([inline])) {\n  width: 100vw;\n}\n@supports not (height: 100dvh) {\n  :host(:not([inline])) {\n    height: 100vh;\n  }\n}\n@supports (height: 100dvh) {\n  :host(:not([inline])) {\n    height: 100dvh;\n  }\n}\n\nwcp-topbar {\n  position: sticky;\n  top: 0;\n  right: 0;\n  bottom: auto;\n  left: 0;\n}\n@media (prefers-color-scheme: dark) {\n  wcp-topbar {\n    background: var(---wcp-root-dark-background);\n  }\n}\n:host([color-scheme=dark]) wcp-topbar {\n  background: var(---wcp-root-dark-background);\n}\n\n@media (prefers-color-scheme: light) {\n  wcp-topbar {\n    background: var(---wcp-root-light-background);\n  }\n}\n:host([color-scheme=light]) wcp-topbar {\n  background: var(---wcp-root-light-background);\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import type { CustomElementDeclaration } from 'custom-elements-manifest/schema.d.js';\n\nimport { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property, query, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { when } from 'lit/directives/when.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\nimport { getConfig, loadConfig } from '@/utils/config.utils.js';\nimport { type GroupedNavigationItems, prepareNavigation } from '@/utils/navigation.utils.js';\nimport { Routable } from '@/mixins/routable.mixin.js';\n\nimport type { RootNavigation } from './root-navigation/root-navigation.component.js';\nimport { prepareRoutes } from './root.routes.js';\n\nimport logo from '@/assets/icons/logo.svg';\nimport styles from './root.component.scss';\nimport { loadManifest } from '../../utils/manifest.utils.js';\n\n/**\n * @slot logo - Allows setting a custom logo to be displayed in the title.\n * @slot preview-controls - Can be used to inject additional preview controls.\n * @slot preview-frame - Used to be override the existing preview pane.\n * @slot preview-details - Can be used to inject additional preview detail panes.\n *\n * @cssprop --wcp-root-dark-background - The background color of the root element in dark mode.\n * @cssprop --wcp-root-dark-color - The text color of the text in the root element in dark mode.\n *\n * @cssprop --wcp-root-light-background - The background color of the root element in light mode.\n * @cssprop --wcp-root-light-color - The text color of the text in the root element in light mode.\n *\n * @emits wcp-root:active-element-changed - Fired when the active element changes. Carries the declaration of the new active element with it.\n */\n@customElement('wcp-root')\nexport class Root extends Routable()(ColorSchemable(LitElement)) {\n  static override readonly styles = unsafeCSS(styles);\n\n  @state()\n  private ready = false;\n\n  @state()\n  navigationItems: GroupedNavigationItems = new Map();\n\n  @query('wcp-root-navigation')\n  readonly navigationRef!: RootNavigation;\n\n  /**\n   * Flags the component to be displayed inline and not standalone. Requires the surrounding\n   * layout to provide the necessary styles like for any other block element.\n   */\n  @property({ type: Boolean, reflect: true })\n  inline = false;\n\n  /**\n   * Allows to set a url to load a config file from.\n   */\n  @property({ type: String, reflect: true, attribute: 'config-url' })\n  configUrl?: string;\n\n  /**\n   * Defines the location of the custom element manifest file.\n   */\n  @property({ type: String, reflect: true, attribute: 'manifest-url' })\n  manifestUrl!: string;\n\n  @eventOptions({ passive: true })\n  handleSearchInput({ detail }: CustomEvent<string>) {\n    this.navigationRef.searchTerms = detail.toLowerCase().split(' ');\n  }\n\n  override async connectedCallback() {\n    // once connected, load the config and the manifest\n    const config = await loadConfig(this.configUrl);\n    const manifest = await loadManifest(this.manifestUrl, config.excludeElements);\n\n    // set the document title and prepare the navigation\n    document.title = config.labels.title;\n    this.navigationItems = prepareNavigation(manifest, config);\n\n    // prepare and set routes\n    const routes = prepareRoutes();\n    this.router.registerRoutes(routes);\n\n    // we're finished loading\n    this.ready = true;\n    super.connectedCallback();\n  }\n\n  protected override render(): TemplateResult {\n    return html`\n      ${when(\n        this.ready,\n        () => html`\n          <wcp-layout>\n            <wcp-title slot=\"header\" title=\"${ifDefined(getConfig().labels.title)}\">\n              <slot name=\"logo\" slot=\"logo\">\n                <img src=\"${logo}\" height=\"20px\" />\n              </slot>\n            </wcp-title>\n\n            <wcp-navigation-search\n              slot=\"header\"\n              @wcp-navigation-search:search=\"${this.handleSearchInput}\"\n            ></wcp-navigation-search>\n\n            <wcp-root-navigation\n              slot=\"aside\"\n              min-search-length=\"2\"\n              current-path=\"${ifDefined(this.router.currentPath)}\"\n              empty-message=\"${ifDefined(getConfig().labels.emptyNavigation)}\"\n              .items=\"${this.navigationItems}\"\n            ></wcp-root-navigation>\n\n            <wcp-topbar>\n              <wcp-toggle-sidebar></wcp-toggle-sidebar>\n              <wcp-toggle-color-scheme></wcp-toggle-color-scheme>\n              <slot name=\"preview-controls\"></slot>\n            </wcp-topbar>\n\n            <slot name=\"preview-frame\">${this.router.outlet()}</slot>\n          </wcp-layout>\n        `\n      )}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    'wcp-root:active-element-changed': CustomEvent<CustomElementDeclaration | undefined>;\n  }\n\n  interface HTMLElementTagNameMap {\n    'wcp-root': Root;\n  }\n}\n", "export default `\n:host {\n  ---wcp-root-navigation-empty-message-spacing: var(--wcp-root-navigation-empty-message-spacing, calc(var(--wcp-base-size, 10px) * 1) calc(var(--wcp-base-size, 10px) * 2));\n  ---wcp-root-navigation-empty-message-font-size: var(--wcp-root-navigation-empty-message-font-size, 0.8em);\n}\n\np {\n  margin: var(---wcp-root-navigation-empty-message-spacing);\n  font-size: var(---wcp-root-navigation-empty-message-font-size);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2NsaWVudC9jbGllbnQvc3JjL2NvbXBvbmVudHMvcm9vdC9yb290LW5hdmlnYXRpb24vcm9vdC1uYXZpZ2F0aW9uLmNvbXBvbmVudC5zY3NzIiwiOmhvc3QlMjAlN0IlMEElMjAlMjAtLS13Y3Atcm9vdC1uYXZpZ2F0aW9uLWVtcHR5LW1lc3NhZ2Utc3BhY2luZzolMjB2YXIoLS13Y3Atcm9vdC1uYXZpZ2F0aW9uLWVtcHR5LW1lc3NhZ2Utc3BhY2luZywlMjBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsJTIwMTBweCklMjAqJTIwMSklMjBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsJTIwMTBweCklMjAqJTIwMikpOyUwQSUyMCUyMC0tLXdjcC1yb290LW5hdmlnYXRpb24tZW1wdHktbWVzc2FnZS1mb250LXNpemU6JTIwdmFyKC0td2NwLXJvb3QtbmF2aWdhdGlvbi1lbXB0eS1tZXNzYWdlLWZvbnQtc2l6ZSwlMjAwLjhlbSk7JTBBJTdEJTBBJTBBcCUyMCU3QiUwQSUyMCUyMG1hcmdpbjolMjB2YXIoLS0td2NwLXJvb3QtbmF2aWdhdGlvbi1lbXB0eS1tZXNzYWdlLXNwYWNpbmcpOyUwQSUyMCUyMGZvbnQtc2l6ZTolMjB2YXIoLS0td2NwLXJvb3QtbmF2aWdhdGlvbi1lbXB0eS1tZXNzYWdlLWZvbnQtc2l6ZSk7JTBBJTdEJTBBLyolMjMlMjBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTl5YjI5MEwzSnZiM1F0Ym1GMmFXZGhkR2x2YmlJc0luTnZkWEpqWlhNaU9sc2ljbTl2ZEMxdVlYWnBaMkYwYVc5dUxtTnZiWEJ2Ym1WdWRDNXpZM056SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVkQk8wVkJRMFU3UlVGRFFUczdPMEZCUjBZN1JVRkRSVHRGUVVOQklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lRSFZ6WlNBblFDOXpkSGxzWlhNdmRYUnBiSE1uSUdGeklIVjBhV3h6TzF4dVhHNHZMeUJ3Y21WMGRHbGxjaTFwWjI1dmNtVmNianBvYjNOMElIdGNiaUFnTFMwdGQyTndMWEp2YjNRdGJtRjJhV2RoZEdsdmJpMWxiWEIwZVMxdFpYTnpZV2RsTFhOd1lXTnBibWM2SUhaaGNpZ3RMWGRqY0MxeWIyOTBMVzVoZG1sbllYUnBiMjR0Wlcxd2RIa3RiV1Z6YzJGblpTMXpjR0ZqYVc1bkxDQWplM1YwYVd4ekxuTnBlbVVvTVNrZ2RYUnBiSE11YzJsNlpTZ3lLWDBwTzF4dUlDQXRMUzEzWTNBdGNtOXZkQzF1WVhacFoyRjBhVzl1TFdWdGNIUjVMVzFsYzNOaFoyVXRabTl1ZEMxemFYcGxPaUIyWVhJb0xTMTNZM0F0Y205dmRDMXVZWFpwWjJGMGFXOXVMV1Z0Y0hSNUxXMWxjM05oWjJVdFptOXVkQzF6YVhwbExDQXdMamhsYlNrN1hHNTlYRzVjYm5BZ2UxeHVJQ0J0WVhKbmFXNDZJSFpoY2lndExTMTNZM0F0Y205dmRDMXVZWFpwWjJGMGFXOXVMV1Z0Y0hSNUxXMWxjM05oWjJVdGMzQmhZMmx1WnlrN1hHNGdJR1p2Ym5RdGMybDZaVG9nZG1GeUtDMHRMWGRqY0MxeWIyOTBMVzVoZG1sbllYUnBiMjR0Wlcxd2RIa3RiV1Z6YzJGblpTMW1iMjUwTFhOcGVtVXBPMXh1ZlZ4dUlsMTklMjAqIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBO0VBQ0UseUtBQUE7RUFDQSx5R0FBQTtBQ0ZGOztBREtBO0VBQ0UseURBQUE7RUFDQSw4REFBQTtBQ0ZGIiwiZmlsZSI6Ijpob3N0IHtcbiAgLS0td2NwLXJvb3QtbmF2aWdhdGlvbi1lbXB0eS1tZXNzYWdlLXNwYWNpbmc6IHZhcigtLXdjcC1yb290LW5hdmlnYXRpb24tZW1wdHktbWVzc2FnZS1zcGFjaW5nLCBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsIDEwcHgpICogMSkgY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCAxMHB4KSAqIDIpKTtcbiAgLS0td2NwLXJvb3QtbmF2aWdhdGlvbi1lbXB0eS1tZXNzYWdlLWZvbnQtc2l6ZTogdmFyKC0td2NwLXJvb3QtbmF2aWdhdGlvbi1lbXB0eS1tZXNzYWdlLWZvbnQtc2l6ZSwgMC44ZW0pO1xufVxuXG5wIHtcbiAgbWFyZ2luOiB2YXIoLS0td2NwLXJvb3QtbmF2aWdhdGlvbi1lbXB0eS1tZXNzYWdlLXNwYWNpbmcpO1xuICBmb250LXNpemU6IHZhcigtLS13Y3Atcm9vdC1uYXZpZ2F0aW9uLWVtcHR5LW1lc3NhZ2UtZm9udC1zaXplKTtcbn1cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTl5YjI5MEwzSnZiM1F0Ym1GMmFXZGhkR2x2YmlJc0luTnZkWEpqWlhNaU9sc2ljbTl2ZEMxdVlYWnBaMkYwYVc5dUxtTnZiWEJ2Ym1WdWRDNXpZM056SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVkQk8wVkJRMFU3UlVGRFFUczdPMEZCUjBZN1JVRkRSVHRGUVVOQklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lRSFZ6WlNBblFDOXpkSGxzWlhNdmRYUnBiSE1uSUdGeklIVjBhV3h6TzF4dVhHNHZMeUJ3Y21WMGRHbGxjaTFwWjI1dmNtVmNianBvYjNOMElIdGNiaUFnTFMwdGQyTndMWEp2YjNRdGJtRjJhV2RoZEdsdmJpMWxiWEIwZVMxdFpYTnpZV2RsTFhOd1lXTnBibWM2SUhaaGNpZ3RMWGRqY0MxeWIyOTBMVzVoZG1sbllYUnBiMjR0Wlcxd2RIa3RiV1Z6YzJGblpTMXpjR0ZqYVc1bkxDQWplM1YwYVd4ekxuTnBlbVVvTVNrZ2RYUnBiSE11YzJsNlpTZ3lLWDBwTzF4dUlDQXRMUzEzWTNBdGNtOXZkQzF1WVhacFoyRjBhVzl1TFdWdGNIUjVMVzFsYzNOaFoyVXRabTl1ZEMxemFYcGxPaUIyWVhJb0xTMTNZM0F0Y205dmRDMXVZWFpwWjJGMGFXOXVMV1Z0Y0hSNUxXMWxjM05oWjJVdFptOXVkQzF6YVhwbExDQXdMamhsYlNrN1hHNTlYRzVjYm5BZ2UxeHVJQ0J0WVhKbmFXNDZJSFpoY2lndExTMTNZM0F0Y205dmRDMXVZWFpwWjJGMGFXOXVMV1Z0Y0hSNUxXMWxjM05oWjJVdGMzQmhZMmx1WnlrN1hHNGdJR1p2Ym5RdGMybDZaVG9nZG1GeUtDMHRMWGRqY0MxeWIyOTBMVzVoZG1sbllYUnBiMjR0Wlcxd2RIa3RiV1Z6YzJGblpTMW1iMjUwTFhOcGVtVXBPMXh1ZlZ4dUlsMTkgKiIsInNvdXJjZXNDb250ZW50IjpbIkB1c2UgJ0Avc3R5bGVzL3V0aWxzJyBhcyB1dGlscztcblxuLy8gcHJldHRpZXItaWdub3JlXG46aG9zdCB7XG4gIC0tLXdjcC1yb290LW5hdmlnYXRpb24tZW1wdHktbWVzc2FnZS1zcGFjaW5nOiB2YXIoLS13Y3Atcm9vdC1uYXZpZ2F0aW9uLWVtcHR5LW1lc3NhZ2Utc3BhY2luZywgI3t1dGlscy5zaXplKDEpIHV0aWxzLnNpemUoMil9KTtcbiAgLS0td2NwLXJvb3QtbmF2aWdhdGlvbi1lbXB0eS1tZXNzYWdlLWZvbnQtc2l6ZTogdmFyKC0td2NwLXJvb3QtbmF2aWdhdGlvbi1lbXB0eS1tZXNzYWdlLWZvbnQtc2l6ZSwgMC44ZW0pO1xufVxuXG5wIHtcbiAgbWFyZ2luOiB2YXIoLS0td2NwLXJvb3QtbmF2aWdhdGlvbi1lbXB0eS1tZXNzYWdlLXNwYWNpbmcpO1xuICBmb250LXNpemU6IHZhcigtLS13Y3Atcm9vdC1uYXZpZ2F0aW9uLWVtcHR5LW1lc3NhZ2UtZm9udC1zaXplKTtcbn1cbiIsIjpob3N0IHtcbiAgLS0td2NwLXJvb3QtbmF2aWdhdGlvbi1lbXB0eS1tZXNzYWdlLXNwYWNpbmc6IHZhcigtLXdjcC1yb290LW5hdmlnYXRpb24tZW1wdHktbWVzc2FnZS1zcGFjaW5nLCBjYWxjKHZhcigtLXdjcC1iYXNlLXNpemUsIDEwcHgpICogMSkgY2FsYyh2YXIoLS13Y3AtYmFzZS1zaXplLCAxMHB4KSAqIDIpKTtcbiAgLS0td2NwLXJvb3QtbmF2aWdhdGlvbi1lbXB0eS1tZXNzYWdlLWZvbnQtc2l6ZTogdmFyKC0td2NwLXJvb3QtbmF2aWdhdGlvbi1lbXB0eS1tZXNzYWdlLWZvbnQtc2l6ZSwgMC44ZW0pO1xufVxuXG5wIHtcbiAgbWFyZ2luOiB2YXIoLS0td2NwLXJvb3QtbmF2aWdhdGlvbi1lbXB0eS1tZXNzYWdlLXNwYWNpbmcpO1xuICBmb250LXNpemU6IHZhcigtLS13Y3Atcm9vdC1uYXZpZ2F0aW9uLWVtcHR5LW1lc3NhZ2UtZm9udC1zaXplKTtcbn1cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZTYjI5MElqb2lMMmh2YldVdmNuVnVibVZ5TDNkdmNtc3ZZMnhwWlc1MEwyTnNhV1Z1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTl5YjI5MEwzSnZiM1F0Ym1GMmFXZGhkR2x2YmlJc0luTnZkWEpqWlhNaU9sc2ljbTl2ZEMxdVlYWnBaMkYwYVc5dUxtTnZiWEJ2Ym1WdWRDNXpZM056SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVkQk8wVkJRMFU3UlVGRFFUczdPMEZCUjBZN1JVRkRSVHRGUVVOQklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lRSFZ6WlNBblFDOXpkSGxzWlhNdmRYUnBiSE1uSUdGeklIVjBhV3h6TzF4dVhHNHZMeUJ3Y21WMGRHbGxjaTFwWjI1dmNtVmNianBvYjNOMElIdGNiaUFnTFMwdGQyTndMWEp2YjNRdGJtRjJhV2RoZEdsdmJpMWxiWEIwZVMxdFpYTnpZV2RsTFhOd1lXTnBibWM2SUhaaGNpZ3RMWGRqY0MxeWIyOTBMVzVoZG1sbllYUnBiMjR0Wlcxd2RIa3RiV1Z6YzJGblpTMXpjR0ZqYVc1bkxDQWplM1YwYVd4ekxuTnBlbVVvTVNrZ2RYUnBiSE11YzJsNlpTZ3lLWDBwTzF4dUlDQXRMUzEzWTNBdGNtOXZkQzF1WVhacFoyRjBhVzl1TFdWdGNIUjVMVzFsYzNOaFoyVXRabTl1ZEMxemFYcGxPaUIyWVhJb0xTMTNZM0F0Y205dmRDMXVZWFpwWjJGMGFXOXVMV1Z0Y0hSNUxXMWxjM05oWjJVdFptOXVkQzF6YVhwbExDQXdMamhsYlNrN1hHNTlYRzVjYm5BZ2UxeHVJQ0J0WVhKbmFXNDZJSFpoY2lndExTMTNZM0F0Y205dmRDMXVZWFpwWjJGMGFXOXVMV1Z0Y0hSNUxXMWxjM05oWjJVdGMzQmhZMmx1WnlrN1hHNGdJR1p2Ym5RdGMybDZaVG9nZG1GeUtDMHRMWGRqY0MxeWIyOTBMVzVoZG1sbllYUnBiMjR0Wlcxd2RIa3RiV1Z6YzJGblpTMW1iMjUwTFhOcGVtVXBPMXh1ZlZ4dUlsMTkgKi8iXX0= */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { map } from 'lit/directives/map.js';\nimport { when } from 'lit/directives/when.js';\n\nimport { filterItems, type GroupedNavigationItems } from '@/utils/navigation.utils.js';\nimport { Router } from '@/utils/router.utils.js';\n\nimport styles from './root-navigation.component.scss';\n\n/**\n * Manages the main root-navigation in the application root.\n *\n * @element wcp-root-navigation\n *\n * @cssprop --wcp-root-navigation-empty-message-spacing - The spacing of the empty message.\n * @cssprop --wcp-root-navigation-empty-message-font-size - The font size of the empty message.\n */\n@customElement('wcp-root-navigation')\nexport class RootNavigation extends LitElement {\n  static override readonly styles = unsafeCSS(styles);\n\n  #items: GroupedNavigationItems = new Map();\n  #searchTerms: string[] = [];\n\n  @state()\n  private filteredItems: GroupedNavigationItems = new Map();\n\n  @property({ type: String, reflect: true, attribute: 'current-path' })\n  currentPath?: string;\n\n  @property({ type: String, reflect: true, attribute: 'empty-message' })\n  emptyMessage = 'No readmes nor elements found.';\n\n  @property({ type: Number, reflect: true, attribute: 'min-search-length' })\n  minSearchLength = 1;\n\n  @property({ attribute: false, noAccessor: true })\n  set searchTerms(terms: string[]) {\n    this.#searchTerms = terms;\n    this.filteredItems = filterItems(this.#items, this.#searchTerms, this.minSearchLength);\n  }\n\n  @property({ attribute: false, noAccessor: true })\n  set items(items: GroupedNavigationItems) {\n    this.#items = items;\n    this.filteredItems = filterItems(this.#items, this.#searchTerms, this.minSearchLength);\n  }\n\n  protected override render(): TemplateResult {\n    return html`\n      ${when(\n        this.filteredItems.size > 0,\n        () => html`\n          ${map(\n            this.filteredItems.entries(),\n            ([group, items]) => html`\n              <wcp-navigation headline=\"${group}\">\n                ${map(\n                  items,\n                  ({ name, link }) => html`\n                    <wcp-navigation-item ?active=\"${Router.isActive(link, this.currentPath)}\" href=\"#${link}\">\n                      ${name}\n                    </wcp-navigation-item>\n                  `\n                )}\n              </wcp-navigation>\n            `\n          )}\n        `,\n        () => html`<p>${this.emptyMessage}</p>`\n      )}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-root-navigation': RootNavigation;\n  }\n}\n", "export default `\n:host {\n  ---wcp-button-dark-passive-background: var(--wcp-button-dark-passive-background, transparent);\n  ---wcp-button-dark-passive-border-color: var(--wcp-button-dark-passive-border-color, var(--wcp-color-blue-96));\n  ---wcp-button-dark-passive-color: var(--wcp-button-dark-passive-color, var(--wcp-color-blue-96));\n  ---wcp-button-dark-hover-background: var(--wcp-button-dark-hover-background, var(--wcp-color-blue-96));\n  ---wcp-button-dark-hover-border-color: var(--wcp-button-dark-hover-border-color, var(--wcp-color-blue-96));\n  ---wcp-button-dark-hover-color: var(--wcp-button-dark-hover-color, var(--wcp-color-blue-17));\n  ---wcp-button-dark-active-background: var(--wcp-button-dark-active-background, var(--wcp-color-blue-96));\n  ---wcp-button-dark-active-border-color: var(--wcp-button-dark-active-border-color, var(--wcp-color-blue-96));\n  ---wcp-button-dark-active-color: var(--wcp-button-dark-active-color, var(--wcp-color-blue-17));\n  ---wcp-button-light-passive-background: var(--wcp-button-light-passive-background, transparent);\n  ---wcp-button-light-passive-border-color: var(--wcp-button-light-passive-border-color, var(--wcp-color-blue-17));\n  ---wcp-button-light-passive-color: var(--wcp-button-light-passive-color, var(--wcp-color-blue-17));\n  ---wcp-button-light-hover-background: var(--wcp-button-light-hover-background, var(--wcp-color-blue-17));\n  ---wcp-button-light-hover-border-color: var(--wcp-button-light-hover-border-color, var(--wcp-color-blue-17));\n  ---wcp-button-light-hover-color: var(--wcp-button-light-hover-color, var(--wcp-color-blue-96));\n  ---wcp-button-light-active-background: var(--wcp-button-light-active-background, var(--wcp-color-blue-17));\n  ---wcp-button-light-active-border-color: var(--wcp-button-light-active-border-color, var(--wcp-color-blue-17));\n  ---wcp-button-light-active-color: var(--wcp-button-light-active-color, var(--wcp-color-blue-96));\n}\n\n@media (prefers-color-scheme: dark) {\n  :host {\n    ---wcp-button-background: var(---wcp-button-dark-passive-background);\n    ---wcp-button-border-color: var(---wcp-button-dark-passive-border-color);\n    ---wcp-button-color: var(---wcp-button-dark-passive-color);\n  }\n}\n:host([color-scheme=dark]):host {\n  ---wcp-button-background: var(---wcp-button-dark-passive-background);\n  ---wcp-button-border-color: var(---wcp-button-dark-passive-border-color);\n  ---wcp-button-color: var(---wcp-button-dark-passive-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    ---wcp-button-background: var(---wcp-button-light-passive-background);\n    ---wcp-button-border-color: var(---wcp-button-light-passive-border-color);\n    ---wcp-button-color: var(---wcp-button-light-passive-color);\n  }\n}\n:host([color-scheme=light]):host {\n  ---wcp-button-background: var(---wcp-button-light-passive-background);\n  ---wcp-button-border-color: var(---wcp-button-light-passive-border-color);\n  ---wcp-button-color: var(---wcp-button-light-passive-color);\n}\n\n@media (prefers-color-scheme: dark) {\n  :host(:enabled:hover) {\n    ---wcp-button-background: var(---wcp-button-dark-hover-background);\n    ---wcp-button-border-color: var(---wcp-button-dark-hover-border-color);\n    ---wcp-button-color: var(---wcp-button-dark-hover-color);\n  }\n}\n:host([color-scheme=dark]):host(:enabled:hover) {\n  ---wcp-button-background: var(---wcp-button-dark-hover-background);\n  ---wcp-button-border-color: var(---wcp-button-dark-hover-border-color);\n  ---wcp-button-color: var(---wcp-button-dark-hover-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host(:enabled:hover) {\n    ---wcp-button-background: var(---wcp-button-light-hover-background);\n    ---wcp-button-border-color: var(---wcp-button-light-hover-border-color);\n    ---wcp-button-color: var(---wcp-button-light-hover-color);\n  }\n}\n:host([color-scheme=light]):host(:enabled:hover) {\n  ---wcp-button-background: var(---wcp-button-light-hover-background);\n  ---wcp-button-border-color: var(---wcp-button-light-hover-border-color);\n  ---wcp-button-color: var(---wcp-button-light-hover-color);\n}\n\n@media (prefers-color-scheme: dark) {\n  :host(:enabled:active) {\n    ---wcp-button-background: var(---wcp-button-dark-active-background);\n    ---wcp-button-border-color: var(---wcp-button-dark-active-border-color);\n    ---wcp-button-color: var(---wcp-button-dark-active-color);\n  }\n}\n:host([color-scheme=dark]):host(:enabled:active) {\n  ---wcp-button-background: var(---wcp-button-dark-active-background);\n  ---wcp-button-border-color: var(---wcp-button-dark-active-border-color);\n  ---wcp-button-color: var(---wcp-button-dark-active-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host(:enabled:active) {\n    ---wcp-button-background: var(---wcp-button-light-active-background);\n    ---wcp-button-border-color: var(---wcp-button-light-active-border-color);\n    ---wcp-button-color: var(---wcp-button-light-active-color);\n  }\n}\n:host([color-scheme=light]):host(:enabled:active) {\n  ---wcp-button-background: var(---wcp-button-light-active-background);\n  ---wcp-button-border-color: var(---wcp-button-light-active-border-color);\n  ---wcp-button-color: var(---wcp-button-light-active-color);\n}\n\n@media (prefers-color-scheme: dark) {\n  :host(:enabled.active) {\n    ---wcp-button-background: var(---wcp-button-dark-active-background);\n    ---wcp-button-border-color: var(---wcp-button-dark-active-border-color);\n    ---wcp-button-color: var(---wcp-button-dark-active-color);\n  }\n}\n:host([color-scheme=dark]):host(:enabled.active) {\n  ---wcp-button-background: var(---wcp-button-dark-active-background);\n  ---wcp-button-border-color: var(---wcp-button-dark-active-border-color);\n  ---wcp-button-color: var(---wcp-button-dark-active-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host(:enabled.active) {\n    ---wcp-button-background: var(---wcp-button-light-active-background);\n    ---wcp-button-border-color: var(---wcp-button-light-active-border-color);\n    ---wcp-button-color: var(---wcp-button-light-active-color);\n  }\n}\n:host([color-scheme=light]):host(:enabled.active) {\n  ---wcp-button-background: var(---wcp-button-light-active-background);\n  ---wcp-button-border-color: var(---wcp-button-light-active-border-color);\n  ---wcp-button-color: var(---wcp-button-light-active-color);\n}\n\n:host {\n  display: inline-block;\n  max-width: 100%;\n  width: -moz-fit-content;\n  width: fit-content;\n}\n\n:host(:not([kind=icon])[stretched]) {\n  width: 100%;\n}\n\n.button {\n  all: unset;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  box-sizing: border-box;\n  display: block;\n  width: 100%;\n  font-weight: 700;\n  line-height: 1.5em;\n  letter-spacing: 0.16em;\n  text-align: center;\n  text-transform: uppercase;\n  word-wrap: break-word;\n  cursor: pointer;\n  transition: ease-in-out var(--wcp-fx-default-duration);\n  transition-property: background-color, color, opacity;\n}\n.button:disabled {\n  cursor: default;\n  opacity: 0.5;\n  pointer-events: none;\n}\n:host(:not([kind=icon])) .button {\n  padding: 0.5em 1em;\n  background-color: var(---wcp-button-background);\n  border: var(---wcp-button-border-color) 1px solid;\n  color: var(---wcp-button-color);\n}\n:host([kind=icon]) .button {\n  aspect-ratio: 1/1;\n  padding: calc(10px * 1);\n  padding: calc(var(--wcp-base-size, 10px) * 1);\n  position: relative;\n  font-size: 0;\n  line-height: 0;\n}\n:host([kind=icon]) .button::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  border-radius: 50%;\n  transition: ease-in-out var(--wcp-fx-default-duration);\n  transition-property: background-color, opacity;\n  background-color: var(---wcp-button-background);\n  opacity: 0.15;\n}\n:host([kind=icon]:enabled:active) .button::before, :host([kind=icon]:enabled.active) .button::before {\n  opacity: 0.3;\n}\n:host([nowrap]) .button {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n  overflow: hidden;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { when } from 'lit/directives/when.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\n\n// Safari still hasn't ElementInternals shipped\nimport 'element-internals-polyfill';\n\nimport styles from './button.component.scss';\n\n/**\n * Shows a button element.\n *\n * @example\n * ## Default button\n *\n * ```html\n * <wcp-button>Click me!</wcp-button>\n * ```\n *\n * @example\n * ## Disabled button\n *\n * ```html\n * <wcp-button disabled>Try to click me!</wcp-button>\n * ```\n *\n * @example\n * ## Button with icon\n *\n * ```html\n * <wcp-button kind=\"icon\">\n *  <wcp-icon name=\"menu\"></wcp-icon>\n * </wcp-button>\n * ```\n *\n * @example\n * ## Force active state\n *\n * ```html\n * <wcp-button class=\"active\">Link</wcp-button>\n * ```\n *\n * @example\n * ## Use as link\n *\n * ```html\n * <wcp-button href=\".\">Link</wcp-button>\n * ```\n * \n * @example\n * ## Displaced to the right\n *\n * ```html\n * <wcp-button style=\"position:relative;left:calc(100% - 40px);transform:translateX(-100%)\">\n *   Try to find me!\n * </wcp-button>\n * ```\n *\n * @example\n * ## Use as native submit button in form\n *\n * ```html\n * <form onsubmit=\"alert('Submit!'); return false\">\n *  <wcp-button type=\"submit\">Submit</wcp-button>\n * </form>\n * ```\n *\n * @example\n * ## Use as native reset button in form\n *\n * ```html\n * <form onreset=\"alert('Reset!'); return false\">\n *   <wcp-button type=\"reset\">Reset</wcp-button>\n * </form>\n * ```\n *\n * @slot {Some <i>Button</i>} - Default slot for the button content\n *\n * @cssprop --wcp-button-dark-passive-background - Background color of the button if non interactive in dark mode\n * @cssprop --wcp-button-dark-passive-border-color - Border color of the button if non interactive in dark mode\n * @cssprop --wcp-button-dark-passive-color - Text color of the button if non interactive in dark mode\n *\n * @cssprop --wcp-button-dark-hover-background - Background color of the button if hovered in dark mode\n * @cssprop --wcp-button-dark-hover-border-color - Border color of the button if hovered in dark mode\n * @cssprop --wcp-button-dark-hover-color - Text color of the button if hovered in dark mode\n *\n * @cssprop --wcp-button-dark-active-background - Background color of the button if active in dark mode\n * @cssprop --wcp-button-dark-active-border-color - Border color of the button if active in dark mode\n * @cssprop --wcp-button-dark-active-color - Text color of the button if active in dark mode\n *\n * @cssprop --wcp-button-light-passive-background - Background color of the button if non interactive in light mode\n * @cssprop --wcp-button-light-passive-border-color - Border color of the button if non interactive in light mode\n * @cssprop --wcp-button-light-passive-color - Text color of the button if non interactive in light mode\n *\n * @cssprop --wcp-button-light-hover-background - Background color of the button if hovered in light mode\n * @cssprop --wcp-button-light-hover-border-color - Border color of the button if hovered in light mode\n * @cssprop --wcp-button-light-hover-color - Text color of the button if hovered in light mode\n *\n * @cssprop --wcp-button-light-active-background - Background color of the button if active in light mode\n * @cssprop --wcp-button-light-active-border-color - Border color of the button if active in light mode\n * @cssprop --wcp-button-light-active-color - Text color of the button if active in light mode\n */\n@customElement('wcp-button')\nexport class Button extends ColorSchemable(LitElement) {\n  static readonly formAssociated = true;\n  static override readonly styles = unsafeCSS(styles);\n\n  readonly #internals = this.attachInternals();\n\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  @property({ type: Boolean, reflect: true })\n  nowrap = false;\n\n  /**\n   * Allows stretching the button across the full width of its container.\n   * This is useful for buttons that are used in a narrow form, or in general\n   * on small viewports, like handheld devices.\n   */\n  @property({ type: Boolean, reflect: true })\n  stretched = false;\n\n  /**\n   * The kind of button to render. Either like a conventional button, or for\n   * icons. Icon buttons are quadratic and will show a radial background on interaction.\n   */\n  @property({ type: String, reflect: true })\n  kind: 'button' | 'icon' = 'button';\n\n  @property({ type: String, reflect: true })\n  type: 'button' | 'reset' | 'submit' = 'button';\n\n  @property({ type: String, reflect: true })\n  href?: string;\n\n  @property({ type: String, reflect: true })\n  target?: '_self' | '_blank' | '_parent' | '_top';\n\n  @eventOptions({ passive: true })\n  handleButtonClick() {\n    // invoke submit on associated form\n    if (this.type === 'submit') {\n      this.#internals.form?.requestSubmit();\n    }\n    // reset the associated form\n    if (this.type === 'reset') {\n      this.#internals.form?.reset();\n    }\n  }\n\n  protected override render(): TemplateResult {\n    return html`\n      ${when(\n        this.href !== undefined && !this.disabled,\n        () => html`\n          <a\n            part=\"button\"\n            class=\"button\"\n            type=\"${this.type}\"\n            href=\"${ifDefined(this.href)}\"\n            target=\"${ifDefined(this.target)}\"\n          >\n            <slot></slot>\n          </a>\n        `,\n        () => html`\n          <button\n            part=\"button\"\n            class=\"button\"\n            ?disabled=\"${this.disabled}\"\n            type=\"${this.type}\"\n            @click=\"${this.handleButtonClick}\"\n          >\n            <slot></slot>\n          </button>\n        `\n      )}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-button': Button;\n  }\n}\n", "export default `\n@charset \"UTF-8\";\n@media (prefers-color-scheme: dark) {\n  wcp-code {\n    /**\n     * prism.js Dark theme for JavaScript, CSS and HTML\n     * Based on the slides of the talk \u201C/Reg(exp){2}lained/\u201D\n     * @author Lea Verou\n     */\n    /* Code blocks */\n    /* Inline code */\n  }\n  wcp-code code[class*=language-],\n  wcp-code pre[class*=language-] {\n    color: white;\n    background: none;\n    text-shadow: 0 -0.1em 0.2em black;\n    font-family: Consolas, Monaco, \"Andale Mono\", \"Ubuntu Mono\", monospace;\n    font-size: 1em;\n    text-align: left;\n    white-space: pre;\n    word-spacing: normal;\n    word-break: normal;\n    word-wrap: normal;\n    line-height: 1.5;\n    -moz-tab-size: 4;\n    -o-tab-size: 4;\n    tab-size: 4;\n    -webkit-hyphens: none;\n    hyphens: none;\n  }\n}\n@media print and (prefers-color-scheme: dark) {\n  wcp-code code[class*=language-],\n  wcp-code pre[class*=language-] {\n    text-shadow: none;\n  }\n}\n@media (prefers-color-scheme: dark) {\n  wcp-code pre[class*=language-],\n  wcp-code :not(pre) > code[class*=language-] {\n    background: hsl(30, 20%, 25%);\n  }\n  wcp-code pre[class*=language-] {\n    padding: 1em;\n    margin: 0.5em 0;\n    overflow: auto;\n    border: 0.3em solid hsl(30, 20%, 40%);\n    border-radius: 0.5em;\n    box-shadow: 1px 1px 0.5em black inset;\n  }\n  wcp-code :not(pre) > code[class*=language-] {\n    padding: 0.15em 0.2em 0.05em;\n    border-radius: 0.3em;\n    border: 0.13em solid hsl(30, 20%, 40%);\n    box-shadow: 1px 1px 0.3em -0.1em black inset;\n    white-space: normal;\n  }\n  wcp-code .token.comment,\n  wcp-code .token.prolog,\n  wcp-code .token.doctype,\n  wcp-code .token.cdata {\n    color: hsl(30, 20%, 50%);\n  }\n  wcp-code .token.punctuation {\n    opacity: 0.7;\n  }\n  wcp-code .token.namespace {\n    opacity: 0.7;\n  }\n  wcp-code .token.property,\n  wcp-code .token.tag,\n  wcp-code .token.boolean,\n  wcp-code .token.number,\n  wcp-code .token.constant,\n  wcp-code .token.symbol {\n    color: hsl(350, 40%, 70%);\n  }\n  wcp-code .token.selector,\n  wcp-code .token.attr-name,\n  wcp-code .token.string,\n  wcp-code .token.char,\n  wcp-code .token.builtin,\n  wcp-code .token.inserted {\n    color: hsl(75, 70%, 60%);\n  }\n  wcp-code .token.operator,\n  wcp-code .token.entity,\n  wcp-code .token.url,\n  wcp-code .language-css .token.string,\n  wcp-code .style .token.string,\n  wcp-code .token.variable {\n    color: hsl(40, 90%, 60%);\n  }\n  wcp-code .token.atrule,\n  wcp-code .token.attr-value,\n  wcp-code .token.keyword {\n    color: hsl(350, 40%, 70%);\n  }\n  wcp-code .token.regex,\n  wcp-code .token.important {\n    color: #e90;\n  }\n  wcp-code .token.important,\n  wcp-code .token.bold {\n    font-weight: bold;\n  }\n  wcp-code .token.italic {\n    font-style: italic;\n  }\n  wcp-code .token.entity {\n    cursor: help;\n  }\n  wcp-code .token.deleted {\n    color: red;\n  }\n}\nwcp-code[color-scheme=dark] {\n  /**\n   * prism.js Dark theme for JavaScript, CSS and HTML\n   * Based on the slides of the talk \u201C/Reg(exp){2}lained/\u201D\n   * @author Lea Verou\n   */\n  /* Code blocks */\n  /* Inline code */\n}\nwcp-code[color-scheme=dark] code[class*=language-],\nwcp-code[color-scheme=dark] pre[class*=language-] {\n  color: white;\n  background: none;\n  text-shadow: 0 -0.1em 0.2em black;\n  font-family: Consolas, Monaco, \"Andale Mono\", \"Ubuntu Mono\", monospace;\n  font-size: 1em;\n  text-align: left;\n  white-space: pre;\n  word-spacing: normal;\n  word-break: normal;\n  word-wrap: normal;\n  line-height: 1.5;\n  -moz-tab-size: 4;\n  -o-tab-size: 4;\n  tab-size: 4;\n  -webkit-hyphens: none;\n  hyphens: none;\n}\n@media print {\n  wcp-code[color-scheme=dark] code[class*=language-],\n  wcp-code[color-scheme=dark] pre[class*=language-] {\n    text-shadow: none;\n  }\n}\nwcp-code[color-scheme=dark] pre[class*=language-],\nwcp-code[color-scheme=dark] :not(pre) > code[class*=language-] {\n  background: hsl(30, 20%, 25%);\n}\nwcp-code[color-scheme=dark] pre[class*=language-] {\n  padding: 1em;\n  margin: 0.5em 0;\n  overflow: auto;\n  border: 0.3em solid hsl(30, 20%, 40%);\n  border-radius: 0.5em;\n  box-shadow: 1px 1px 0.5em black inset;\n}\nwcp-code[color-scheme=dark] :not(pre) > code[class*=language-] {\n  padding: 0.15em 0.2em 0.05em;\n  border-radius: 0.3em;\n  border: 0.13em solid hsl(30, 20%, 40%);\n  box-shadow: 1px 1px 0.3em -0.1em black inset;\n  white-space: normal;\n}\nwcp-code[color-scheme=dark] .token.comment,\nwcp-code[color-scheme=dark] .token.prolog,\nwcp-code[color-scheme=dark] .token.doctype,\nwcp-code[color-scheme=dark] .token.cdata {\n  color: hsl(30, 20%, 50%);\n}\nwcp-code[color-scheme=dark] .token.punctuation {\n  opacity: 0.7;\n}\nwcp-code[color-scheme=dark] .token.namespace {\n  opacity: 0.7;\n}\nwcp-code[color-scheme=dark] .token.property,\nwcp-code[color-scheme=dark] .token.tag,\nwcp-code[color-scheme=dark] .token.boolean,\nwcp-code[color-scheme=dark] .token.number,\nwcp-code[color-scheme=dark] .token.constant,\nwcp-code[color-scheme=dark] .token.symbol {\n  color: hsl(350, 40%, 70%);\n}\nwcp-code[color-scheme=dark] .token.selector,\nwcp-code[color-scheme=dark] .token.attr-name,\nwcp-code[color-scheme=dark] .token.string,\nwcp-code[color-scheme=dark] .token.char,\nwcp-code[color-scheme=dark] .token.builtin,\nwcp-code[color-scheme=dark] .token.inserted {\n  color: hsl(75, 70%, 60%);\n}\nwcp-code[color-scheme=dark] .token.operator,\nwcp-code[color-scheme=dark] .token.entity,\nwcp-code[color-scheme=dark] .token.url,\nwcp-code[color-scheme=dark] .language-css .token.string,\nwcp-code[color-scheme=dark] .style .token.string,\nwcp-code[color-scheme=dark] .token.variable {\n  color: hsl(40, 90%, 60%);\n}\nwcp-code[color-scheme=dark] .token.atrule,\nwcp-code[color-scheme=dark] .token.attr-value,\nwcp-code[color-scheme=dark] .token.keyword {\n  color: hsl(350, 40%, 70%);\n}\nwcp-code[color-scheme=dark] .token.regex,\nwcp-code[color-scheme=dark] .token.important {\n  color: #e90;\n}\nwcp-code[color-scheme=dark] .token.important,\nwcp-code[color-scheme=dark] .token.bold {\n  font-weight: bold;\n}\nwcp-code[color-scheme=dark] .token.italic {\n  font-style: italic;\n}\nwcp-code[color-scheme=dark] .token.entity {\n  cursor: help;\n}\nwcp-code[color-scheme=dark] .token.deleted {\n  color: red;\n}\n\n@media (prefers-color-scheme: light) {\n  wcp-code {\n    /**\n     * prism.js default theme for JavaScript, CSS and HTML\n     * Based on dabblet (http://dabblet.com)\n     * @author Lea Verou\n     */\n    /* Code blocks */\n    /* Inline code */\n  }\n  wcp-code code[class*=language-],\n  wcp-code pre[class*=language-] {\n    color: black;\n    background: none;\n    text-shadow: 0 1px white;\n    font-family: Consolas, Monaco, \"Andale Mono\", \"Ubuntu Mono\", monospace;\n    font-size: 1em;\n    text-align: left;\n    white-space: pre;\n    word-spacing: normal;\n    word-break: normal;\n    word-wrap: normal;\n    line-height: 1.5;\n    -moz-tab-size: 4;\n    -o-tab-size: 4;\n    tab-size: 4;\n    -webkit-hyphens: none;\n    hyphens: none;\n  }\n  wcp-code pre[class*=language-]::-moz-selection, wcp-code pre[class*=language-] ::-moz-selection,\n  wcp-code code[class*=language-]::-moz-selection, wcp-code code[class*=language-] ::-moz-selection {\n    text-shadow: none;\n    background: #b3d4fc;\n  }\n  wcp-code pre[class*=language-]::-moz-selection, wcp-code pre[class*=language-] ::-moz-selection, wcp-code code[class*=language-]::-moz-selection, wcp-code code[class*=language-] ::-moz-selection {\n    text-shadow: none;\n    background: #b3d4fc;\n  }\n  wcp-code pre[class*=language-]::selection, wcp-code pre[class*=language-] ::selection,\n  wcp-code code[class*=language-]::selection, wcp-code code[class*=language-] ::selection {\n    text-shadow: none;\n    background: #b3d4fc;\n  }\n}\n@media print and (prefers-color-scheme: light) {\n  wcp-code code[class*=language-],\n  wcp-code pre[class*=language-] {\n    text-shadow: none;\n  }\n}\n@media (prefers-color-scheme: light) {\n  wcp-code pre[class*=language-] {\n    padding: 1em;\n    margin: 0.5em 0;\n    overflow: auto;\n  }\n  wcp-code :not(pre) > code[class*=language-],\n  wcp-code pre[class*=language-] {\n    background: #f5f2f0;\n  }\n  wcp-code :not(pre) > code[class*=language-] {\n    padding: 0.1em;\n    border-radius: 0.3em;\n    white-space: normal;\n  }\n  wcp-code .token.comment,\n  wcp-code .token.prolog,\n  wcp-code .token.doctype,\n  wcp-code .token.cdata {\n    color: slategray;\n  }\n  wcp-code .token.punctuation {\n    color: #999;\n  }\n  wcp-code .token.namespace {\n    opacity: 0.7;\n  }\n  wcp-code .token.property,\n  wcp-code .token.tag,\n  wcp-code .token.boolean,\n  wcp-code .token.number,\n  wcp-code .token.constant,\n  wcp-code .token.symbol,\n  wcp-code .token.deleted {\n    color: #905;\n  }\n  wcp-code .token.selector,\n  wcp-code .token.attr-name,\n  wcp-code .token.string,\n  wcp-code .token.char,\n  wcp-code .token.builtin,\n  wcp-code .token.inserted {\n    color: #690;\n  }\n  wcp-code .token.operator,\n  wcp-code .token.entity,\n  wcp-code .token.url,\n  wcp-code .language-css .token.string,\n  wcp-code .style .token.string {\n    color: #9a6e3a;\n    /* This background color was intended by the author of this theme. */\n    background: hsla(0, 0%, 100%, 0.5);\n  }\n  wcp-code .token.atrule,\n  wcp-code .token.attr-value,\n  wcp-code .token.keyword {\n    color: #07a;\n  }\n  wcp-code .token.function,\n  wcp-code .token.class-name {\n    color: #DD4A68;\n  }\n  wcp-code .token.regex,\n  wcp-code .token.important,\n  wcp-code .token.variable {\n    color: #e90;\n  }\n  wcp-code .token.important,\n  wcp-code .token.bold {\n    font-weight: bold;\n  }\n  wcp-code .token.italic {\n    font-style: italic;\n  }\n  wcp-code .token.entity {\n    cursor: help;\n  }\n}\nwcp-code[color-scheme=light] {\n  /**\n   * prism.js default theme for JavaScript, CSS and HTML\n   * Based on dabblet (http://dabblet.com)\n   * @author Lea Verou\n   */\n  /* Code blocks */\n  /* Inline code */\n}\nwcp-code[color-scheme=light] code[class*=language-],\nwcp-code[color-scheme=light] pre[class*=language-] {\n  color: black;\n  background: none;\n  text-shadow: 0 1px white;\n  font-family: Consolas, Monaco, \"Andale Mono\", \"Ubuntu Mono\", monospace;\n  font-size: 1em;\n  text-align: left;\n  white-space: pre;\n  word-spacing: normal;\n  word-break: normal;\n  word-wrap: normal;\n  line-height: 1.5;\n  -moz-tab-size: 4;\n  -o-tab-size: 4;\n  tab-size: 4;\n  -webkit-hyphens: none;\n  hyphens: none;\n}\nwcp-code[color-scheme=light] pre[class*=language-]::-moz-selection, wcp-code[color-scheme=light] pre[class*=language-] ::-moz-selection,\nwcp-code[color-scheme=light] code[class*=language-]::-moz-selection, wcp-code[color-scheme=light] code[class*=language-] ::-moz-selection {\n  text-shadow: none;\n  background: #b3d4fc;\n}\nwcp-code[color-scheme=light] pre[class*=language-]::-moz-selection, wcp-code[color-scheme=light] pre[class*=language-] ::-moz-selection, wcp-code[color-scheme=light] code[class*=language-]::-moz-selection, wcp-code[color-scheme=light] code[class*=language-] ::-moz-selection {\n  text-shadow: none;\n  background: #b3d4fc;\n}\nwcp-code[color-scheme=light] pre[class*=language-]::selection, wcp-code[color-scheme=light] pre[class*=language-] ::selection,\nwcp-code[color-scheme=light] code[class*=language-]::selection, wcp-code[color-scheme=light] code[class*=language-] ::selection {\n  text-shadow: none;\n  background: #b3d4fc;\n}\n@media print {\n  wcp-code[color-scheme=light] code[class*=language-],\n  wcp-code[color-scheme=light] pre[class*=language-] {\n    text-shadow: none;\n  }\n}\nwcp-code[color-scheme=light] pre[class*=language-] {\n  padding: 1em;\n  margin: 0.5em 0;\n  overflow: auto;\n}\nwcp-code[color-scheme=light] :not(pre) > code[class*=language-],\nwcp-code[color-scheme=light] pre[class*=language-] {\n  background: #f5f2f0;\n}\nwcp-code[color-scheme=light] :not(pre) > code[class*=language-] {\n  padding: 0.1em;\n  border-radius: 0.3em;\n  white-space: normal;\n}\nwcp-code[color-scheme=light] .token.comment,\nwcp-code[color-scheme=light] .token.prolog,\nwcp-code[color-scheme=light] .token.doctype,\nwcp-code[color-scheme=light] .token.cdata {\n  color: slategray;\n}\nwcp-code[color-scheme=light] .token.punctuation {\n  color: #999;\n}\nwcp-code[color-scheme=light] .token.namespace {\n  opacity: 0.7;\n}\nwcp-code[color-scheme=light] .token.property,\nwcp-code[color-scheme=light] .token.tag,\nwcp-code[color-scheme=light] .token.boolean,\nwcp-code[color-scheme=light] .token.number,\nwcp-code[color-scheme=light] .token.constant,\nwcp-code[color-scheme=light] .token.symbol,\nwcp-code[color-scheme=light] .token.deleted {\n  color: #905;\n}\nwcp-code[color-scheme=light] .token.selector,\nwcp-code[color-scheme=light] .token.attr-name,\nwcp-code[color-scheme=light] .token.string,\nwcp-code[color-scheme=light] .token.char,\nwcp-code[color-scheme=light] .token.builtin,\nwcp-code[color-scheme=light] .token.inserted {\n  color: #690;\n}\nwcp-code[color-scheme=light] .token.operator,\nwcp-code[color-scheme=light] .token.entity,\nwcp-code[color-scheme=light] .token.url,\nwcp-code[color-scheme=light] .language-css .token.string,\nwcp-code[color-scheme=light] .style .token.string {\n  color: #9a6e3a;\n  /* This background color was intended by the author of this theme. */\n  background: hsla(0, 0%, 100%, 0.5);\n}\nwcp-code[color-scheme=light] .token.atrule,\nwcp-code[color-scheme=light] .token.attr-value,\nwcp-code[color-scheme=light] .token.keyword {\n  color: #07a;\n}\nwcp-code[color-scheme=light] .token.function,\nwcp-code[color-scheme=light] .token.class-name {\n  color: #DD4A68;\n}\nwcp-code[color-scheme=light] .token.regex,\nwcp-code[color-scheme=light] .token.important,\nwcp-code[color-scheme=light] .token.variable {\n  color: #e90;\n}\nwcp-code[color-scheme=light] .token.important,\nwcp-code[color-scheme=light] .token.bold {\n  font-weight: bold;\n}\nwcp-code[color-scheme=light] .token.italic {\n  font-style: italic;\n}\nwcp-code[color-scheme=light] .token.entity {\n  cursor: help;\n}\n\nwcp-code pre {\n  margin: 0;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\n\nimport styles from './code.component.scss';\n\n/**\n * Shows a formatted code snippet.\n *\n * @example\n * ```html\n * <wcp-code>\n *   <pre><code>Some code</code></pre>\n * </wcp-code>\n * ```\n */\n@customElement('wcp-code')\nexport class Code extends ColorSchemable(LitElement) {\n  static override readonly styles = unsafeCSS(styles);\n\n  // disable ShadowDOM\n  // https://stackoverflow.com/a/55213037/1146207\n  override createRenderRoot() {\n    return this;\n  }\n\n  // without ShadowDOM, we need to manually inject the styles\n  protected override render(): TemplateResult {\n    return html`\n      <style>\n        ${Code.styles}\n      </style>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-code': Code;\n  }\n}\n", "export default `\n.gg-add {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  width: 22px;\n  height: 22px;\n  border: 2px solid;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  border-radius: 22px;\n}\n.gg-add::after, .gg-add::before {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  width: 10px;\n  height: 2px;\n  background: currentColor;\n  border-radius: 5px;\n  top: 8px;\n  left: 4px;\n}\n.gg-add::after {\n  width: 2px;\n  height: 10px;\n  top: 4px;\n  left: 8px;\n}\n\n.gg-close {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  width: 22px;\n  height: 22px;\n  border: 2px solid transparent;\n  border-radius: 40px;\n}\n.gg-close::after, .gg-close::before {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  width: 16px;\n  height: 2px;\n  background: currentColor;\n  transform: rotate(45deg);\n  border-radius: 5px;\n  top: 8px;\n  left: 1px;\n}\n.gg-close::after {\n  transform: rotate(-45deg);\n}\n\n.gg-external {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  width: 12px;\n  height: 12px;\n  box-shadow: -2px 2px 0 0, -4px -4px 0 -2px, 4px 4px 0 -2px;\n  margin-left: -2px;\n  margin-top: 1px;\n}\n.gg-external::after {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  right: -4px;\n}\n.gg-external::before {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  right: -4px;\n  background: currentColor;\n  transform: rotate(-45deg);\n  width: 12px;\n  height: 2px;\n  top: 1px;\n}\n.gg-external::after {\n  width: 8px;\n  height: 8px;\n  border-right: 2px solid;\n  border-top: 2px solid;\n  top: -4px;\n}\n\n.gg-laptop {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  width: 18px;\n  height: 12px;\n  border: 2px solid;\n  border-radius: 2px;\n}\n.gg-laptop::after {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  width: 22px;\n  height: 2px;\n  background: currentColor;\n  left: -4px;\n  bottom: -5px;\n  border-radius: 100px;\n}\n\n.gg-menu {\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  width: 20px;\n  height: 2px;\n  border-radius: 3px;\n  background: currentColor;\n}\n.gg-menu::after, .gg-menu::before {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  width: 20px;\n  height: 2px;\n  border-radius: 3px;\n  background: currentColor;\n}\n.gg-menu::after, .gg-menu::before {\n  content: \"\";\n  position: absolute;\n  top: -6px;\n}\n.gg-menu::after {\n  top: 6px;\n}\n\n.gg-moon {\n  display: block;\n  box-sizing: border-box;\n  border-radius: 50%;\n  overflow: hidden;\n  position: relative;\n  transform: rotate(-135deg) scale(1);\n  transform: rotate(-135deg) scale(var(--ggs, 1));\n  width: 20px;\n  height: 20px;\n  border: 2px solid;\n  border-bottom-color: transparent;\n}\n.gg-moon::after {\n  display: block;\n  box-sizing: border-box;\n  border-radius: 50%;\n  content: \"\";\n  position: absolute;\n  width: 12px;\n  height: 18px;\n  border: 2px solid transparent;\n  box-shadow: 0 0 0 2px;\n  top: 8px;\n  left: 2px;\n}\n\n.gg-more-alt {\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  width: 4px;\n  height: 4px;\n  background: currentColor;\n  border-radius: 100%;\n}\n.gg-more-alt::after, .gg-more-alt::before {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  width: 4px;\n  height: 4px;\n  background: currentColor;\n  border-radius: 100%;\n}\n.gg-more-alt::after, .gg-more-alt::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n}\n.gg-more-alt::after {\n  left: -6px;\n}\n.gg-more-alt::before {\n  right: -6px;\n}\n\n.gg-push-chevron-down {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  width: 22px;\n  height: 22px;\n  border: 2px solid transparent;\n  border-radius: 100px;\n}\n.gg-push-chevron-down::after {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  border-bottom: 2px solid;\n}\n.gg-push-chevron-down::before {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  border-bottom: 2px solid;\n  bottom: 0;\n  width: 14px;\n  height: 2px;\n  left: 2px;\n}\n.gg-push-chevron-down::after {\n  width: 10px;\n  height: 10px;\n  border-right: 2px solid;\n  transform: rotate(45deg);\n  left: 4px;\n  top: 2px;\n}\n\n.gg-push-chevron-up {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  width: 22px;\n  height: 22px;\n  border: 2px solid transparent;\n  border-radius: 100px;\n}\n.gg-push-chevron-up::after {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  border-top: 2px solid;\n}\n.gg-push-chevron-up::before {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  border-top: 2px solid;\n  top: 0;\n  width: 14px;\n  height: 2px;\n  left: 2px;\n}\n.gg-push-chevron-up::after {\n  width: 10px;\n  height: 10px;\n  border-right: 2px solid;\n  transform: rotate(-45deg);\n  left: 4px;\n  bottom: 2px;\n}\n\n.gg-ratio {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  width: 24px;\n  height: 20px;\n  border: 2px solid;\n  border-radius: 4px;\n}\n.gg-ratio::after {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  width: 6px;\n  height: 6px;\n}\n.gg-ratio::before {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  width: 6px;\n  height: 6px;\n  border-bottom: 2px solid;\n  border-right: 2px solid;\n  top: 8px;\n  left: 12px;\n}\n.gg-ratio::after {\n  border-top: 2px solid;\n  border-left: 2px solid;\n  top: 2px;\n  left: 2px;\n}\n\n.gg-remove {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  width: 22px;\n  height: 22px;\n  border: 2px solid;\n  border-radius: 22px;\n}\n.gg-remove::before {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  width: 10px;\n  height: 2px;\n  background: currentColor;\n  border-radius: 5px;\n  top: 8px;\n  left: 4px;\n}\n\n.gg-screen {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  width: 22px;\n  height: 14px;\n  border: 2px solid;\n  border-radius: 3px;\n  margin-top: -4px;\n}\n.gg-screen::after {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  border-radius: 3px;\n  width: 10px;\n  height: 2px;\n  background: currentColor;\n  top: 14px;\n  left: 4px;\n}\n.gg-screen::before {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  border-radius: 3px;\n  width: 10px;\n  height: 2px;\n  background: currentColor;\n  top: 14px;\n  left: 4px;\n  width: 2px;\n  height: 6px;\n  top: 10px;\n  left: 8px;\n}\n\n.gg-screen-wide {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  width: 24px;\n  height: 11px;\n  border: 2px solid;\n  border-radius: 3px;\n  margin-top: -4px;\n}\n.gg-screen-wide::after {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  border-radius: 3px;\n  width: 8px;\n  height: 2px;\n  background: currentColor;\n  top: 10px;\n  left: 6px;\n}\n.gg-screen-wide::before {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  border-radius: 3px;\n  width: 8px;\n  height: 2px;\n  background: currentColor;\n  top: 10px;\n  left: 6px;\n  width: 2px;\n  height: 4px;\n  top: 8px;\n  left: 9px;\n}\n\n.gg-search {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  width: 16px;\n  height: 16px;\n  border: 2px solid;\n  border-radius: 100%;\n  margin-left: -4px;\n  margin-top: -4px;\n}\n.gg-search::after {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  border-radius: 3px;\n  width: 2px;\n  height: 8px;\n  background: currentColor;\n  transform: rotate(-45deg);\n  top: 10px;\n  left: 12px;\n}\n\n.gg-smartphone {\n  background: linear-gradient(to left, currentColor 5px, transparent 0) no-repeat 4px 12px/2px 2px;\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  width: 14px;\n  height: 20px;\n  border: 2px solid;\n  border-radius: 2px;\n}\n\n.gg-sun {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  width: 24px;\n  height: 24px;\n  background: linear-gradient(to bottom, currentColor 4px, transparent 0) no-repeat 5px -6px/2px 6px, linear-gradient(to bottom, currentColor 4px, transparent 0) no-repeat 5px 14px/2px 6px, linear-gradient(to bottom, currentColor 4px, transparent 0) no-repeat -8px 5px/6px 2px, linear-gradient(to bottom, currentColor 4px, transparent 0) no-repeat 14px 5px/6px 2px;\n  border-radius: 100px;\n  box-shadow: inset 0 0 0 2px;\n  border: 6px solid transparent;\n}\n.gg-sun::after {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  width: 24px;\n  height: 2px;\n  border-right: 4px solid;\n  border-left: 4px solid;\n  left: -6px;\n  top: 5px;\n}\n.gg-sun::before {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  width: 24px;\n  height: 2px;\n  border-right: 4px solid;\n  border-left: 4px solid;\n  left: -6px;\n  top: 5px;\n  transform: rotate(-45deg);\n}\n.gg-sun::after {\n  transform: rotate(45deg);\n}\n\n.gg-sync {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  border-radius: 40px;\n  border: 2px solid;\n  margin: 1px;\n  border-left-color: transparent;\n  border-right-color: transparent;\n  width: 18px;\n  height: 18px;\n}\n.gg-sync::after {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-top: 4px solid transparent;\n  border-bottom: 4px solid transparent;\n  transform: rotate(-45deg);\n}\n.gg-sync::before {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-top: 4px solid transparent;\n  border-bottom: 4px solid transparent;\n  transform: rotate(-45deg);\n  border-left: 6px solid;\n  bottom: -1px;\n  right: -3px;\n}\n.gg-sync::after {\n  border-right: 6px solid;\n  top: -1px;\n  left: -3px;\n}\n\n.gg-terminal {\n  box-sizing: border-box;\n  position: relative;\n  display: block;\n  transform: scale(1);\n  transform: scale(var(--ggs, 1));\n  width: 24px;\n  height: 20px;\n  border: 2px solid;\n  border-radius: 2px;\n}\n.gg-terminal::after {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n}\n.gg-terminal::before {\n  content: \"\";\n  display: block;\n  box-sizing: border-box;\n  position: absolute;\n  border-right: 2px solid;\n  border-bottom: 2px solid;\n  transform: rotate(-45deg);\n  width: 6px;\n  height: 6px;\n  top: 5px;\n  left: 3px;\n}\n.gg-terminal::after {\n  width: 4px;\n  height: 2px;\n  background: currentColor;\n  top: 10px;\n  left: 11px;\n}\n\n:host {\n  ---wcp-icon-size: var(--wcp-icon-size, 22);\n  --ggs: calc(var(---wcp-icon-size) / 22);\n}\n\n:host {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  height: calc(var(---wcp-icon-size) * 1px);\n  width: calc(var(---wcp-icon-size) * 1px);\n}\n\ni {\n  flex: 0 0 auto;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport styles from './icon.component.scss';\n\n/**\n * Shows an icon from the css.gg icon set.\n *\n * @example\n * ## Use icon\n * By setting the name attribute.\n * \n * ```html\n * <wcp-icon name=\"smartphone\"></wcp-icon>\n * ```\n *\n * @example\n * ### Set a custom size\n * \n * ```html\n * <wcp-icon name=\"laptop\" style=\"--wcp-icon-size: 44\"></wcp-icon>\n * ```\n *\n * @cssprop --wcp-icon-size - Sets the size of the icon as unitless number in pixels\n */\n@customElement('wcp-icon')\nexport class Icon extends LitElement {\n  static override readonly styles = unsafeCSS(styles);\n\n  @property({ type: String, reflect: true })\n  name!: string;\n\n  protected override render(): TemplateResult {\n    return html`<i class=\"gg-${this.name}\"></i>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-icon': Icon;\n  }\n}\n", "export default `\n:host {\n  ---wcp-tabs-tablist-gap: var(--wcp-tabs-tablist-gap, calc(var(--wcp-base-size, 10px) * 1));\n  ---wcp-tabs-tablist-spacing: var(--wcp-tabs-tablist-spacing, 0);\n  ---wcp-tabs-tab-spacing: var(--wcp-tabs-tab-spacing, calc(var(--wcp-base-size, 10px) * 1) calc(var(--wcp-base-size, 10px) * 1) calc(var(--wcp-base-size, 10px) * 0.5));\n  ---wcp-tabs-tab-active-border-width: var(--wcp-tabs-active-tab-border-width, 3px);\n  ---wcp-tabs-panel-spacing: var(--wcp-tabs-panel-spacing, calc(var(--wcp-base-size, 10px) * 1));\n  ---wcp-tabs-tablist-dark-border-color: var(--wcp-tabs-tablist-dark-border-color, var(--wcp-color-grey-24));\n  ---wcp-tabs-tab-active-dark-border-color: var(--wcp-tabs-active-tab-border-color, var(--wcp-color-blue-55));\n  ---wcp-tabs-tablist-light-border-color: var(--wcp-tabs-tablist-light-border-color, var(--wcp-color-grey-65));\n  ---wcp-tabs-tab-active-light-border-color: var(--wcp-tabs-active-tab-border-color, var(--wcp-color-blue-65));\n}\n@media (prefers-color-scheme: dark) {\n  :host {\n    ---wcp-tabs-tablist-border-color: var(---wcp-tabs-tablist-dark-border-color);\n    ---wcp-tabs-tab-active-border-color: var(---wcp-tabs-tab-active-dark-border-color);\n  }\n}\n:host([color-scheme=dark]):host {\n  ---wcp-tabs-tablist-border-color: var(---wcp-tabs-tablist-dark-border-color);\n  ---wcp-tabs-tab-active-border-color: var(---wcp-tabs-tab-active-dark-border-color);\n}\n\n@media (prefers-color-scheme: light) {\n  :host {\n    ---wcp-tabs-tablist-border-color: var(---wcp-tabs-tablist-light-border-color);\n    ---wcp-tabs-tab-active-border-color: var(---wcp-tabs-tab-active-light-border-color);\n  }\n}\n:host([color-scheme=light]):host {\n  ---wcp-tabs-tablist-border-color: var(---wcp-tabs-tablist-light-border-color);\n  ---wcp-tabs-tab-active-border-color: var(---wcp-tabs-tab-active-light-border-color);\n}\n\n:host {\n  display: flex;\n  flex-direction: column;\n}\n\nnav {\n  flex: 0 0 auto;\n  display: flex;\n  flex-direction: row;\n  gap: var(---wcp-tabs-tablist-gap);\n  padding: var(---wcp-tabs-tablist-spacing);\n  border-bottom: 1px solid var(---wcp-tabs-tablist-border-color);\n}\n\nbutton {\n  all: unset;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  padding: var(---wcp-tabs-tab-spacing);\n  border-bottom: var(---wcp-tabs-tab-active-border-width) solid transparent;\n  transition: border-bottom-color var(---wcp-fx-default-duration) ease-in-out;\n  will-change: border-bottom-color;\n}\nbutton:enabled {\n  cursor: pointer;\n}\nbutton:enabled[aria-selected=true] {\n  border-bottom-color: var(---wcp-tabs-tab-active-border-color);\n}\nbutton:disabled {\n  opacity: 0.5;\n}\n\n[role=tabpanel] {\n  flex: 1 0 auto;\n  padding: var(---wcp-tabs-panel-spacing);\n  overflow: auto;\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, eventOptions, property, queryAll } from 'lit/decorators.js';\nimport { map } from 'lit/directives/map.js';\n\nimport { ColorSchemable } from '@/mixins/color-schemable.mixin.js';\n\nimport styles from './tabs.component.scss';\n\n/**\n * @example\n * ```html\n * <wcp-tabs tabs='{\"first\": {\"label\": \"First tab\"}, \"second\": {\"label\": \"Second tab\"}}'>\n *  <div slot=\"first\">First tab content</div>\n *  <div slot=\"second\">Second tab content</div>\n * </wcp-tabs>\n * ```\n *\n * @example\n * ### Active tab preselected\n *\n * ```html\n * <wcp-tabs tabs='{\"first\": {\"label\": \"First tab\"}, \"second\": {\"label\": \"Second tab\"}}' active-tab=\"second\">\n *  <div slot=\"first\">First tab content</div>\n *  <div slot=\"second\">Second tab content</div>\n * </wcp-tabs>\n * ```\n *\n * @example\n * ### Disabled tabs\n *\n * ```html\n * <wcp-tabs tabs='{\"first\": {\"label\": \"First tab\"}, \"second\": {\"label\": \"Second tab\", \"disabled\": true}}' active-tab=\"second\">\n *  <div slot=\"first\">First tab content</div>\n *  <div slot=\"second\">Second tab content</div>\n * </wcp-tabs>\n * ```\n *\n * @slot tab name - The content of the named tab.\n * @emits wcp-tabs:active-tab-change - Notifies when the active tab changes\n *\n * @cssprop --wcp-tabs-tablist-gap - The gap between the tablist and the tabpanels\n * @cssprop --wcp-tabs-tablist-spacing - The inner padding of the tablist\n * @cssprop --wcp-tabs-tab-spacing - The inner padding of the tabs\n * @cssprop --wcp-tabs-tab-active-border-width - The border width of the active tab\n * @cssprop --wcp-tabs-panel-spacing - The inner padding of the tabpanels\n *\n * @cssprop --wcp-tabs-tablist-dark-border-color - The border color of the tablist in dark mode\n * @cssprop --wcp-tabs-tab-active-dark-border-color - The border color of the active tab in dark mode\n *\n * @cssprop --wcp-tabs-tablist-light-border-color - The border color of the tablist in light mode\n * @cssprop --wcp-tabs-tab-active-light-border-color - The border color of the active tab in light mode\n */\n@customElement('wcp-tabs')\nexport class Tabs extends ColorSchemable(LitElement) {\n  static override readonly styles = unsafeCSS(styles);\n\n  tabFocus = 0;\n\n  @queryAll('[role=\"tab\"]')\n  private readonly tabRoles!: HTMLElement[];\n\n  @property({ type: Object })\n  tabs: Record<string, { label: string; disabled?: boolean }> = {};\n\n  @property({ type: String, reflect: true, attribute: 'active-tab' })\n  activeTab?: string;\n\n  emitActiveTabChange() {\n    const event = new CustomEvent('wcp-tabs:active-tab-change', {\n      detail: this.activeTab,\n      bubbles: true,\n      cancelable: true,\n      composed: true,\n    });\n    this.dispatchEvent(event);\n  }\n\n  @eventOptions({ passive: true })\n  handleTabClick(event: Event) {\n    const tab = event.target as HTMLButtonElement;\n    const activeTab = tab.dataset.name as typeof this.activeTab;\n    if (this.activeTab !== activeTab) {\n      this.activeTab = activeTab;\n      this.emitActiveTabChange();\n    }\n  }\n\n  @eventOptions({ passive: true })\n  handleKeydown(event: KeyboardEvent) {\n    // Move right\n    if (event.key === 'ArrowRight' || event.key === 'ArrowLeft') {\n      const tabs = this.tabRoles;\n      tabs[this.tabFocus].setAttribute('tabindex', '-1');\n      if (event.key === 'ArrowRight') {\n        this.tabFocus++;\n        // If we're at the end, go to the start\n        if (this.tabFocus >= tabs.length) {\n          this.tabFocus = 0;\n        }\n        // Move left\n      } else if (event.key === 'ArrowLeft') {\n        this.tabFocus--;\n        // If we're at the start, move to the end\n        if (this.tabFocus < 0) {\n          this.tabFocus = tabs.length - 1;\n        }\n      }\n\n      tabs[this.tabFocus].setAttribute('tabindex', '0');\n      tabs[this.tabFocus].focus();\n    }\n  }\n\n  protected override render(): TemplateResult {\n    return html`\n      <nav part=\"tablist\" role=\"tablist\" aria-label=\"Sample Tabs\" @keydown=\"${this.handleKeydown}\">\n        ${map(\n          Object.entries(this.tabs),\n          ([tab, { label, disabled }]) => html`\n            <button\n              role=\"tab\"\n              aria-selected=\"${this.activeTab === tab ? 'true' : 'false'}\"\n              aria-controls=\"${tab}-panel\"\n              data-name=\"${tab}\"\n              id=\"${tab}-tab\"\n              tabindex=\"${this.activeTab === tab ? '0' : '-1'}\"\n              ?disabled=\"${disabled}\"\n              @click=\"${this.handleTabClick}\"\n            >\n              ${label}\n            </button>\n          `\n        )}\n      </nav>\n\n      ${map(\n        Object.keys(this.tabs),\n        (tab) => html`\n          <div\n            id=\"${tab}-panel\"\n            part=\"${tab}-panel\"\n            role=\"tabpanel\"\n            tabindex=\"0\"\n            aria-labelledby=\"${tab}-tab\"\n            ?hidden=\"${this.activeTab !== tab}\"\n          >\n            <slot name=\"${tab}\"></slot>\n          </div>\n        `\n      )}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    'wcp-tabs:active-tab-change': CustomEvent<string>;\n  }\n  interface HTMLElementTagNameMap {\n    'wcp-tabs': Tabs;\n  }\n}\n", "export default `\n:host {\n  ---wcp-title-gap: var(--wcp-title-gap, calc(var(--wcp-base-size, 10px) * 1));\n  ---wcp-title-height: var(--wcp-title-height, calc(var(--wcp-base-size, 10px) * 5));\n  ---wcp-title-spacing: var(--wcp-title-spacing, calc(var(--wcp-base-size, 10px) * 1) calc(var(--wcp-base-size, 10px) * 4) calc(var(--wcp-base-size, 10px) * 1) calc(var(--wcp-base-size, 10px) * 2));\n  ---wcp-title-headline-size: var(--wcp-title-headline-size, 15px);\n  ---wcp-title-headline-weight: var(--wcp-title-headline-weight, 400);\n  ---wcp-title-headline-spacing: var(--wcp-title-headline-spacing, 0.05em);\n  ---wcp-title-headline-line-height: var(--wcp-title-headline-line-height, 1.1);\n  ---wcp-title-headline-transform: var(--wcp-title-headline-transform, uppercase);\n}\n\n:host {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: var(---wcp-title-gap);\n  box-sizing: border-box;\n  padding: var(---wcp-title-spacing);\n  min-height: var(---wcp-title-height);\n}\n\nh1 {\n  height: -moz-fit-content;\n  height: fit-content;\n  margin: -0.175em 0 -0.1em;\n  font-size: var(---wcp-title-headline-size);\n  font-weight: var(---wcp-title-headline-weight);\n  letter-spacing: var(---wcp-title-headline-spacing);\n  line-height: var(---wcp-title-headline-line-height);\n  text-transform: var(---wcp-title-headline-transform);\n}\n/*# sourceMappingURL=data:application/json;base64, */`;\n", "import { LitElement, type TemplateResult, html, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport styles from './title.component.scss';\n\n/**\n * Shows the application title and a logo.\n *\n * @example\n * ```html\n * <wcp-title title=\"Web Components Preview\">\n *   <img slot=\"logo\" src=\"assets/icons/logo.svg\" height=\"30px\" />\n * </wcp-title>\n * ```\n *\n * @slot logo - Receives the logo image to be shown\n * \n * @cssprop --wcp-title-gap - The gap between the logo and the title\n * @cssprop --wcp-title-height - The height of the title. Content may exceed and scales the tile\n * @cssprop --wcp-title-spacing - Inner padding of the title\n * @cssprop --wcp-title-headline-size - The font size of the title\n * @cssprop --wcp-title-headline-weight - The font weight of the title\n * @cssprop --wcp-title-headline-spacing - The letter spacing of the title\n * @cssprop --wcp-title-headline-line-height - The line height of the title\n * @cssprop --wcp-title-headline-transform - The text transform of the title\n */\n@customElement('wcp-title')\nexport class Title extends LitElement {\n  static override readonly styles = unsafeCSS(styles);\n\n  @property({ type: String, reflect: true })\n  override title!: string;\n\n  protected override render(): TemplateResult {\n    return html`\n      <slot name=\"logo\"></slot>\n      <h1>${this.title}</h1>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'wcp-title': Title;\n  }\n}\n"],
  "mappings": "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",
  "names": ["require_prism", "__commonJSMin", "exports", "module", "_self", "Prism", "lang", "uniqueId", "plainTextGrammar", "_", "encode", "tokens", "Token", "o", "obj", "deepClone", "visited", "clone", "id", "key", "v", "i", "element", "m", "language", "err", "src", "scripts", "className", "defaultActivation", "no", "classList", "redef", "inside", "before", "insert", "root", "grammar", "ret", "token", "newToken", "old", "value", "DFS", "callback", "type", "objId", "property", "propertyType", "async", "container", "env", "parent", "code", "insertHighlightedCode", "highlightedCode", "worker", "evt", "text", "rest", "tokenList", "LinkedList", "addAfter", "matchGrammar", "toArray", "name", "hooks", "callbacks", "content", "alias", "matchedStr", "stringify", "s", "e", "aliases", "attributes", "matchPattern", "pattern", "pos", "lookbehind", "match", "lookbehindLength", "startNode", "startPos", "rematch", "patterns", "j", "patternObj", "greedy", "flags", "currentNode", "str", "removeCount", "from", "to", "p", "k", "matchStr", "after", "reach", "removeFrom", "removeRange", "wrapped", "nestedRematch", "head", "tail", "list", "node", "next", "newNode", "count", "array", "message", "immediateClose", "script", "highlightAutomaticallyCallback", "readyState", "tagName", "includedCdataInside", "def", "attrName", "string", "markup", "LOADING_MESSAGE", "FAILURE_MESSAGE", "status", "FAILURE_EMPTY_MESSAGE", "EXTENSIONS", "STATUS_ATTR", "STATUS_LOADING", "STATUS_LOADED", "STATUS_FAILED", "SELECTOR", "loadFile", "success", "error", "xhr", "parseRange", "range", "start", "comma", "end", "pre", "extension", "autoloader", "lines", "elements", "logged", "ke", "e", "t", "v", "r", "n", "o", "c", "l", "s", "i", "Pe", "Se", "a", "D", "x", "f", "p", "u", "d", "T", "O", "xe", "L", "I", "H", "$", "k", "G", "Y", "g", "m", "M", "R", "S", "be", "X", "Z", "F", "y", "J", "Q", "Ee", "W", "N", "ee", "te", "re", "ne", "j", "z", "se", "ie", "ae", "oe", "_", "K", "ce", "A", "le", "he", "fe", "ue", "pe", "de", "ge", "P", "C", "w", "Re", "ye", "b", "B", "q", "U", "V", "E", "me", "init_urlpattern", "__esmMin", "#i", "#n", "#t", "#e", "#s", "#u", "#p", "#d", "#g", "#P", "#l", "#r", "#h", "#f", "#T", "#O", "#S", "#C", "#E", "#x", "#b", "#R", "#A", "#w", "#y", "#o", "#k", "#m", "#a", "h", "urlpattern_polyfill_exports", "__export", "me", "init_urlpattern_polyfill", "__esmMin", "init_urlpattern", "global", "window", "supportsAdoptingStyleSheets", "ShadowRoot", "ShadyCSS", "nativeShadow", "Document", "prototype", "CSSStyleSheet", "constructionToken", "Symbol", "cssTagCache", "WeakMap", "CSSResult", "constructor", "cssText", "strings", "safeToken", "this", "Error", "_strings", "styleSheet", "_styleSheet", "cacheable", "length", "get", "replaceSync", "set", "toString", "unsafeCSS", "value", "String", "css", "values", "reduce", "acc", "v", "idx", "adoptStyles", "renderRoot", "styles", "adoptedStyleSheets", "map", "s", "forEach", "style", "document", "createElement", "nonce", "setAttribute", "textContent", "appendChild", "getCompatibleStyle", "sheet", "rule", "cssRules", "global", "window", "trustedTypes", "emptyStringForBooleanAttribute", "emptyScript", "polyfillSupport", "reactiveElementPolyfillSupport", "defaultConverter", "toAttribute", "value", "type", "Boolean", "Object", "Array", "JSON", "stringify", "fromAttribute", "fromValue", "Number", "parse", "e", "notEqual", "old", "defaultPropertyDeclaration", "attribute", "String", "converter", "reflect", "hasChanged", "finalized", "ReactiveElement", "HTMLElement", "constructor", "super", "this", "__instanceProperties", "Map", "isUpdatePending", "hasUpdated", "__reflectingProperty", "__initialize", "static", "initializer", "finalize", "_a", "_initializers", "push", "observedAttributes", "attributes", "elementProperties", "forEach", "v", "p", "attr", "__attributeNameForProperty", "__attributeToPropertyMap", "set", "name", "options", "state", "noAccessor", "prototype", "hasOwnProperty", "key", "Symbol", "descriptor", "getPropertyDescriptor", "defineProperty", "get", "oldValue", "requestUpdate", "configurable", "enumerable", "superCtor", "getPrototypeOf", "props", "properties", "propKeys", "getOwnPropertyNames", "getOwnPropertySymbols", "createProperty", "elementStyles", "finalizeStyles", "styles", "isArray", "Set", "flat", "Infinity", "reverse", "s", "unshift", "getCompatibleStyle", "toLowerCase", "__updatePromise", "Promise", "res", "enableUpdating", "_$changedProperties", "__saveInstanceProperties", "i", "addController", "controller", "__controllers", "renderRoot", "isConnected", "_b", "hostConnected", "call", "removeController", "splice", "indexOf", "_v", "createRenderRoot", "shadowRoot", "attachShadow", "shadowRootOptions", "adoptStyles", "connectedCallback", "c", "_requestedUpdate", "disconnectedCallback", "hostDisconnected", "attributeChangedCallback", "_old", "_$attributeToProperty", "__propertyToAttribute", "attrValue", "undefined", "removeAttribute", "setAttribute", "ctor", "propName", "getPropertyOptions", "shouldRequestUpdate", "has", "__reflectingProperties", "__enqueueUpdate", "async", "reject", "result", "scheduleUpdate", "performUpdate", "shouldUpdate", "changedProperties", "willUpdate", "hostUpdate", "update", "__markUpdated", "_$didUpdate", "_changedProperties", "hostUpdated", "firstUpdated", "updated", "updateComplete", "getUpdateComplete", "k", "mode", "_d", "reactiveElementVersions", "global", "window", "trustedTypes", "policy", "createPolicy", "createHTML", "s", "boundAttributeSuffix", "marker", "Math", "random", "String", "slice", "markerMatch", "nodeMarker", "d", "document", "createMarker", "createComment", "isPrimitive", "value", "isArray", "Array", "isIterable", "Symbol", "iterator", "SPACE_CHAR", "textEndRegex", "commentEndRegex", "comment2EndRegex", "tagEndRegex", "RegExp", "singleQuoteAttrEndRegex", "doubleQuoteAttrEndRegex", "rawTextElement", "tag", "type", "strings", "values", "_$litType$", "html", "svg", "noChange", "for", "nothing", "templateCache", "WeakMap", "walker", "createTreeWalker", "trustFromTemplateString", "tsa", "stringFromTSA", "hasOwnProperty", "Error", "getTemplateHtml", "l", "length", "attrNames", "rawTextEndRegex", "regex", "i", "attrName", "match", "attrNameEndIndex", "lastIndex", "exec", "test", "end", "startsWith", "push", "undefined", "Template", "constructor", "options", "node", "this", "parts", "nodeIndex", "attrNameIndex", "partCount", "el", "createElement", "currentNode", "content", "svgElement", "firstChild", "remove", "append", "childNodes", "nextNode", "nodeType", "hasAttributes", "attrsToRemove", "name", "getAttributeNames", "endsWith", "realName", "statics", "getAttribute", "toLowerCase", "split", "m", "index", "ctor", "PropertyPart", "BooleanAttributePart", "EventPart", "AttributePart", "removeAttribute", "tagName", "textContent", "emptyScript", "data", "indexOf", "static", "_options", "innerHTML", "resolveDirective", "part", "parent", "attributeIndex", "currentDirective", "_a", "__directives", "__directive", "nextDirectiveConstructor", "_b", "call", "_$initialize", "_c", "_d", "_$resolve", "TemplateInstance", "template", "_$parts", "_$disconnectableChildren", "_$template", "_$parent", "parentNode", "_$isConnected", "_clone", "fragment", "creationScope", "importNode", "partIndex", "templatePart", "ChildPart", "nextSibling", "ElementPart", "_update", "_$setValue", "startNode", "endNode", "_$committedValue", "_$startNode", "_$endNode", "__isConnected", "isConnected", "directiveParent", "_$clear", "_commitText", "_commitTemplateResult", "_commitNode", "_commitIterable", "_insert", "insertBefore", "createTextNode", "result", "_$getTemplate", "h", "instance", "get", "set", "itemParts", "itemPart", "item", "start", "from", "_$notifyConnectionChanged", "n", "setConnected", "element", "fill", "valueIndex", "noCommit", "change", "v", "_commitValue", "setAttribute", "emptyStringForBooleanAttribute", "super", "newListener", "oldListener", "shouldRemoveListener", "capture", "once", "passive", "shouldAddListener", "removeEventListener", "addEventListener", "handleEvent", "event", "host", "_$LH", "_boundAttributeSuffix", "_marker", "_markerMatch", "_HTML_RESULT", "_getTemplateHtml", "_TemplateInstance", "_isIterable", "_resolveDirective", "_ChildPart", "_AttributePart", "_BooleanAttributePart", "_EventPart", "_PropertyPart", "_ElementPart", "polyfillSupport", "litHtmlPolyfillSupport", "litHtmlVersions", "render", "container", "partOwnerNode", "renderBefore", "LitElement", "ReactiveElement", "constructor", "this", "renderOptions", "host", "__childPart", "createRenderRoot", "renderRoot", "super", "_a", "_b", "renderBefore", "firstChild", "update", "changedProperties", "value", "render", "hasUpdated", "isConnected", "connectedCallback", "setConnected", "disconnectedCallback", "noChange", "globalThis", "litElementHydrateSupport", "call", "polyfillSupport", "litElementPolyfillSupport", "_c", "globalThis", "litElementVersions", "push", "customElement", "tagName", "classOrDescriptor", "clazz", "customElements", "define", "descriptor", "kind", "elements", "finisher", "standardProperty", "options", "element", "kind", "descriptor", "finisher", "clazz", "createProperty", "key", "Symbol", "placement", "originalKey", "initializer", "this", "call", "legacyProperty", "proto", "name", "constructor", "property", "protoOrDescriptor", "state", "options", "property", "decorateProperty", "finisher", "descriptor", "protoOrDescriptor", "name", "key", "_a", "originalKey", "info", "undefined", "kind", "placement", "ctor", "constructor", "Object", "defineProperty", "eventOptions", "options", "decorateProperty", "finisher", "ctor", "name", "Object", "assign", "prototype", "query", "selector", "cache", "decorateProperty", "descriptor", "name", "get", "_b", "_a", "this", "renderRoot", "querySelector", "enumerable", "configurable", "key", "Symbol", "o", "t", "queryAll", "selector", "decorateProperty", "descriptor", "_name", "get", "_b", "_a", "this", "renderRoot", "querySelectorAll", "enumerable", "configurable", "slotAssignedElements", "_a", "window", "HTMLSlotElement", "prototype", "assignedElements", "slot", "opts", "assignedNodes", "filter", "node", "nodeType", "Node", "ELEMENT_NODE", "ifDefined", "value", "nothing", "map", "items", "f", "i", "value", "colorSchemables", "colorSchemeState", "getColorSchemeState", "addColorSchemable", "element", "removeColorSchemable", "handleColorSchemeChange", "detail", "colorSchemable", "ColorSchemable", "superClass", "ColorSchemableElement", "getColorSchemeState", "addColorSchemable", "removeColorSchemable", "__decorateClass", "n", "defaultConfig", "mergeConfigWithDefaults", "config", "loadConfig", "url", "response", "getConfig", "markdown_example_component_default", "MARKDOWN_EXAMPLE_TABS", "_config", "MarkdownExample", "ColorSchemable", "s", "__privateAdd", "getConfig", "x", "l", "__privateGet", "o", "tab", "r", "markdown_example_component_default", "__decorateClass", "e", "when", "condition", "trueCase", "falseCase", "navigation_component_default", "Navigation", "ColorSchemable", "s", "x", "n", "r", "navigation_component_default", "__decorateClass", "e", "navigation_item_component_default", "NavigationItem", "ColorSchemable", "s", "x", "n", "l", "r", "navigation_item_component_default", "__decorateClass", "e", "navigation_search_component_default", "_updateSearchTerm", "updateSearchTerm_fn", "NavigationSearch", "ColorSchemable", "s", "__privateAdd", "event", "value", "__privateMethod", "x", "n", "term", "r", "navigation_search_component_default", "__decorateClass", "e", "brand", "Symbol", "for", "unwrapStaticValue", "value", "r", "unsafeStatic", "_$litStatic$", "stringsCache", "Map", "withStatic", "coreTag", "strings", "values", "l", "length", "staticValue", "dynamicValue", "staticStrings", "dynamicValues", "s", "i", "hasStatics", "unwrapStaticValue", "push", "key", "join", "get", "raw", "set", "html", "coreHtml", "svg", "coreSvg", "_ChildPart", "ChildPart", "_$LH", "isPrimitive", "value", "isSingleExpression", "part", "strings", "RESET_VALUE", "setCommittedValue", "part", "value", "_$committedValue", "PartType", "ATTRIBUTE", "CHILD", "PROPERTY", "BOOLEAN_ATTRIBUTE", "EVENT", "ELEMENT", "directive", "c", "values", "_$litDirective$", "Directive", "constructor", "_partInfo", "_$isConnected", "this", "_$parent", "_$initialize", "part", "parent", "attributeIndex", "__part", "__attributeIndex", "_$resolve", "props", "update", "_part", "render", "notifyChildrenConnectedChanged", "parent", "isConnected", "children", "_$disconnectableChildren", "obj", "_b", "_a", "o", "e", "removeDisconnectableFromParent", "_$parent", "delete", "size", "addDisconnectableToParent", "Set", "has", "add", "installDisconnectAPI", "reparentDisconnectables", "newParent", "this", "notifyChildPartConnectedChanged", "isClearingValue", "fromPartIndex", "value", "_$committedValue", "Array", "isArray", "i", "length", "type", "PartType", "CHILD", "_c", "_$notifyConnectionChanged", "_d", "_$reparentDisconnectables", "AsyncDirective", "Directive", "constructor", "_$initialize", "part", "attributeIndex", "super", "_$isConnected", "_$AO", "isClearingDirective", "r", "reconnected", "call", "disconnected", "setValue", "isSingleExpression", "__part", "_$setValue", "newValues", "__attributeIndex", "lastElementForContextAndCallback", "WeakMap", "ref", "directive", "AsyncDirective", "render", "_ref", "nothing", "update", "part", "refChanged", "this", "_updateRefValue", "undefined", "_lastElementForRef", "_element", "_context", "_a", "options", "host", "element", "context", "globalThis", "lastElementForCallback", "get", "set", "call", "value", "t", "_b", "_c", "disconnected", "reconnected", "preview_component_default", "_config", "_handleRouteChange", "Preview", "ColorSchemable", "s", "__privateAdd", "getConfig", "__privateGet", "container", "x", "n", "o", "plugin", "index", "r", "preview_component_default", "__decorateClass", "t", "e", "_getDefaults", "_defaults", "changeDefaults", "newDefaults", "escapeTest", "escapeReplace", "escapeTestNoEncode", "escapeReplaceNoEncode", "escapeReplacements", "getEscapeReplacement", "ch", "escape", "html", "encode", "unescapeTest", "unescape", "_", "n", "caret", "edit", "regex", "opt", "obj", "name", "val", "nonWordAndColonTest", "originIndependentUrl", "cleanUrl", "sanitize", "base", "href", "prot", "resolveUrl", "baseUrls", "justDomain", "protocol", "domain", "rtrim", "relativeBase", "noopTest", "splitCells", "tableRow", "count", "row", "match", "offset", "str", "escaped", "curr", "cells", "i", "c", "invert", "l", "suffLen", "currChar", "findClosingBracket", "b", "level", "checkDeprecations", "callback", "outputLink", "cap", "link", "raw", "lexer", "title", "text", "token", "indentCodeCompensation", "matchIndentToCode", "indentToCode", "node", "matchIndentInNode", "indentInNode", "_Tokenizer", "options", "src", "trimmed", "top", "tokens", "istask", "ischecked", "indent", "blankLine", "endsWithBlankLine", "line", "nextLine", "rawLine", "itemContents", "endEarly", "bull", "isordered", "list", "itemRegex", "t", "nextBulletRegex", "hrRegex", "fencesBeginRegex", "headingBeginRegex", "spacers", "hasMultipleLineBreaks", "paragraph", "tag", "item", "j", "k", "trimmedUrl", "rtrimSlash", "lastParenIndex", "linkLen", "links", "maskedSrc", "prevChar", "lLength", "rDelim", "rLength", "delimTotal", "midDelimTotal", "endReg", "hasNonSpaceChars", "hasSpaceCharsOnBothEnds", "mangle", "prevCapZero", "smartypants", "block", "inline", "out", "_Lexer", "rules", "next", "leading", "tabs", "lastToken", "cutSrc", "lastParagraphClipped", "extTokenizer", "startIndex", "tempSrc", "tempStart", "getStartIndex", "errMsg", "keepPrevChar", "_Renderer", "code", "infostring", "lang", "quote", "slugger", "id", "body", "ordered", "start", "type", "startatt", "task", "checked", "header", "content", "flags", "_TextRenderer", "_Slugger", "value", "originalSlug", "isDryRun", "slug", "occurenceAccumulator", "_Parser", "l2", "l3", "cell", "loose", "itemBody", "checkbox", "ret", "renderer", "_Hooks", "markdown", "_parseMarkdown", "parseMarkdown_fn", "_onError", "onError_fn", "Marked", "args", "__privateAdd", "__privateMethod", "values", "childTokens", "extensions", "pack", "opts", "ext", "prevRenderer", "prop", "tokenizer", "prevTokenizer", "hooks", "prevHook", "arg", "walkTokens", "parser", "optOrCallback", "origOpt", "throwError", "highlight", "e", "done", "err", "pending", "silent", "async", "msg", "markedInstance", "marked", "setOptions", "use", "parseInline", "parser", "_Parser", "lexer", "_Lexer", "markedHighlight", "options", "token", "lang", "getLang", "updateToken", "code", "infoString", "escaped", "classAttr", "escape", "escapeTest", "escapeReplace", "escapeTestNoEncode", "escapeReplaceNoEncode", "escapeReplacements", "getEscapeReplacement", "ch", "html", "encode", "Prism", "getCodeExample", "slot", "acc", "el", "CustomRenderer", "_Renderer", "addCodePreview", "previewTagName", "#rawCodeMap", "raw", "highlighted", "code", "language", "escaped", "resolveRelativePath", "path", "stripLeadingSlash", "str", "url", "prefixRelativeUrls", "markdown", "currentPath", "basePath", "currentDir", "_", "before", "ext", "hash", "after", "isMarkdownLink", "hasPath", "hasHash", "nextPath", "link", "section", "mapLangToGrammar", "lang", "renderMarkdown", "renderer", "marked", "markedHighlight", "PseudoWeakRef", "constructor", "ref", "this", "_ref", "disconnect", "reconnect", "deref", "Pauser", "_promise", "_resolve", "get", "pause", "_a", "Promise", "resolve", "resume", "call", "isPromise", "x", "isPrimitive", "then", "_infinity", "UntilDirective", "AsyncDirective", "constructor", "this", "__lastRenderedIndex", "__values", "__weakThis", "PseudoWeakRef", "__pauser", "Pauser", "render", "args", "i", "find", "_a", "noChange", "update", "_part", "previousValues", "previousLength", "length", "weakThis", "pauser", "isConnected", "disconnected", "value", "Promise", "resolve", "async", "result", "get", "_this", "deref", "index", "indexOf", "setValue", "disconnect", "pause", "reconnected", "reconnect", "resume", "until", "directive", "readme_component_default", "Readme", "ColorSchemable", "s", "section", "element", "el", "n", "m", "renderMarkdown", "r", "readme_component_default", "__decorateClass", "e", "readme_frame_component_default", "ReadmeFrame", "s", "x", "r", "readme_frame_component_default", "__decorateClass", "e", "isPlugin", "element", "findAllPlugins", "slot", "stage_component_default", "Stage", "ColorSchemable", "s", "activePlugin", "event", "slot", "plugins", "findAllPlugins", "tab", "currentTarget", "target", "tabs", "available", "label", "name", "alignedActivePlugin", "x", "n", "l", "o", "r", "stage_component_default", "__decorateClass", "t", "e", "toggle_color_scheme_component_default", "ToggleColorScheme", "ColorSchemable", "s", "detail", "event", "x", "r", "toggle_color_scheme_component_default", "__decorateClass", "e", "toggle_sidebar_component_default", "ToggleSidebar", "s", "x", "r", "toggle_sidebar_component_default", "__decorateClass", "e", "topbar_component_default", "Topbar", "ColorSchemable", "s", "x", "r", "topbar_component_default", "__decorateClass", "e", "editable_mixin_default", "refMap", "validityMap", "hiddenInputMap", "internalsMap", "validationMessageMap", "formsMap", "shadowHostsMap", "formElementsMap", "refValueMap", "upgradeMap", "shadowRootMap", "validationAnchorMap", "documentFragmentMap", "connectedCallbackMap", "validityUpgradeMap", "aom", "initAom", "ref", "internals", "key", "closureValue", "attributeName", "value", "initNode", "node", "form", "initForm", "initLabels", "walkFieldset", "firstRender", "walker", "current", "isCallNecessary", "setDisabled", "disabledOrNameObserverConfig", "disabledOrNameObserver", "mutationObserverExists", "mutationsList", "mutation", "target", "observerCallback", "mutationList", "mutationRecord", "addedNodes", "removedNodes", "added", "removed", "formElements", "removeHiddenInputs", "fragmentObserverCallback", "observer", "upgradeInternals", "deferUpgrade", "fragment", "observerConfig", "disabled", "hiddenInput", "createHiddenInput", "input", "initRef", "labels", "label", "firstLabelId", "setFormValidity", "nativeControlValidity", "element", "polyfilledElements", "polyfilledValidity", "control", "hasInvalid", "formInputCallback", "event", "findParentForm", "formChangeCallback", "wireSubmitLogic", "SUBMIT_BUTTON_SELECTOR", "submitButtonSelector", "elements", "formResetCallback", "initSet", "elem", "parent", "throwIfNotFormAssociated", "message", "ErrorType", "overrideFormMethod", "returnValue", "method", "ValidityState", "setValid", "validityObject", "reconcileValidity", "newState", "isValid", "validityState", "valid", "customStateMap", "addState", "stateName", "CustomStateSet", "state", "result", "entry", "__classPrivateFieldGet", "receiver", "kind", "f", "__classPrivateFieldSet", "_HTMLFormControlsCollection_elements", "HTMLFormControlsCollection", "i", "name", "patchFormPrototype", "checkValidity", "checkValidityOverride", "reportValidity", "reportValidityOverride", "args", "get", "orderedElements", "a", "b", "ElementInternals", "rootNode", "validity", "validityEvent", "id", "hostRoot", "anchor", "formDataKey", "formDataValue", "validityChanges", "validationMessage", "validityChangesObj", "check", "shadowRoot", "isElementInternalsSupported", "ElementInternalsFeatureDetection", "randomName", "featureDetectionElement", "prop", "attachInternals", "define", "constructor", "options", "connectedCallback", "attachShadowObserver", "attachShadow", "Editable", "hasHintSlot", "hasBeforeSlot", "hasAfterSlot", "hasBorder", "superClass", "EditableElement", "ColorSchemable", "r", "editable_mixin_default", "_", "x", "A", "name", "n", "__decorateClass", "input_checkbox_component_default", "InputCheckbox", "Editable", "s", "props", "name", "old", "value", "event", "input", "id", "x", "__superGet", "r", "input_checkbox_component_default", "__decorateClass", "n", "e", "import_prismjs", "i", "r", "l", "e", "x", "s", "t", "o", "n", "c", "input_code_component_default", "_initialValue", "InputCode", "Editable", "s", "__privateAdd", "value", "props", "__privateSet", "__privateGet", "event", "code", "id", "x", "__superGet", "r", "input_code_component_default", "__decorateClass", "i", "n", "e", "input_key_value_component_default", "_value", "_initialName", "_initialValue", "InputKeyValue", "Editable", "s", "__privateAdd", "value", "oldValue", "__privateGet", "__privateSet", "props", "event", "id", "x", "__superGet", "r", "input_key_value_component_default", "__decorateClass", "n", "e", "input_key_value_pairs_component_default", "_rawValue", "_prefixedValue", "_valuePairs", "_initialValue", "_hasEmptyPair", "hasEmptyPair_get", "InputKeyValuePairs", "Editable", "s", "__privateAdd", "value", "oldValue", "__privateGet", "formData", "__privateSet", "key", "rawKey", "preKey", "pairs", "props", "event", "button", "before", "after", "x", "o", "index", "n", "__superGet", "r", "input_key_value_pairs_component_default", "__decorateClass", "i", "e", "input_number_component_default", "_initialValue", "InputNumber", "Editable", "s", "__privateAdd", "props", "__privateSet", "__privateGet", "name", "oldValue", "newValue", "event", "input", "id", "x", "__superGet", "r", "input_number_component_default", "__decorateClass", "i", "n", "e", "input_radio_component_default", "_checked", "_initialChecked", "InputRadio", "Editable", "s", "__privateAdd", "checked", "__privateSet", "__privateGet", "props", "event", "input", "id", "x", "__superGet", "r", "input_radio_component_default", "__decorateClass", "n", "e", "InputSelectOption", "s", "__decorateClass", "n", "e", "input_select_component_default", "_initialValue", "InputSelect", "Editable", "s", "__privateAdd", "props", "__privateSet", "__privateGet", "name", "oldValue", "newValue", "event", "options", "element", "InputSelectOption", "option", "copy", "input", "id", "x", "__superGet", "r", "input_select_component_default", "__decorateClass", "i", "n", "e", "input_text_component_default", "_initialValue", "InputText", "Editable", "s", "__privateAdd", "props", "__privateSet", "__privateGet", "name", "oldValue", "newValue", "event", "input", "id", "x", "__superGet", "r", "input_text_component_default", "__decorateClass", "i", "n", "e", "aside_component_default", "Aside", "ColorSchemable", "s", "detail", "event", "x", "r", "aside_component_default", "__decorateClass", "n", "e", "layout_component_default", "Layout", "s", "x", "r", "layout_component_default", "__decorateClass", "e", "main_component_default", "Main", "s", "x", "r", "main_component_default", "__decorateClass", "n", "e", "classMap", "directive", "Directive", "constructor", "partInfo", "super", "type", "PartType", "ATTRIBUTE", "name", "_a", "strings", "length", "Error", "render", "classInfo", "Object", "keys", "filter", "key", "join", "update", "part", "this", "_previousClasses", "Set", "_staticClasses", "split", "s", "has", "add", "classList", "element", "forEach", "remove", "delete", "value", "_b", "noChange", "compress", "data", "encoding", "stream", "buffer", "binary", "x", "decompress", "m", "isElementWithin", "element", "container", "currentElement", "getRelativeBoundary", "parent", "height", "width", "x", "y", "relX", "relY", "getAncestorPath", "check", "ancestors", "isDescendantOf", "ancestor", "isMatch", "tagName", "isCustomElementDeclarationWithTagName", "declaration", "isCustomElementField", "field", "WRAPPED_STRING_REGEX", "unwrapString", "value", "getEnumValues", "trimmed", "CemField", "_field", "#types", "getEnumValues", "#enumValues", "unwrapString", "t", "p", "WRAPPED_STRING_REGEX", "CemSlot", "_slot", "t", "p", "CemElement", "_element", "#fields", "isCustomElementField", "map", "field", "CemField", "#slots", "slot", "CemSlot", "t", "p", "CemParser", "_data", "exclude", "#elements", "module", "isCustomElementDeclarationWithTagName", "element", "map", "CemElement", "t", "p", "fallbackGroupName", "groups", "all", "group", "CEM_PARSERS", "CemParser", "parseCEM", "data", "exclude", "schemaVersion", "parser", "loadManifest", "manifestUrl", "excludeElements", "manifest", "parseCEM", "getManifest", "areParamsEqual", "a", "b", "exclude", "key", "value", "mergeParams", "oldParams", "newParams", "params", "Router", "_Router", "#host", "#currentPath", "#currentParams", "#currentRoute", "#routes", "path", "currentPath", "exact", "isSamePath", "isNestedPath", "slugs", "routes", "url", "host", "#withBaseUrl", "#createPattern", "#parseUrl", "hash", "#findRouteForUrl", "#findCurrentRoute", "event", "nextPath", "nextUrl", "nextRoute", "outgoingParams", "nextParams", "pastUrl", "pastRoute", "litKey", "field", "readCurrentElementData", "ref", "elementData", "getManifest", "skipAttributes", "fields", "acc", "field", "value", "litKey", "attributes", "attribute", "attr", "slots", "slot", "selector", "content", "node", "preview_editor_link_plugin_default", "_manifest", "_overlay", "_checkAvailability", "checkAvailability_fn", "_attachOverlay", "attachOverlay_fn", "_detachOverlay", "detachOverlay_fn", "_findContainerSlot", "findContainerSlot_fn", "_observeContainerSlot", "observeContainerSlot_fn", "_unobserveContainerSlot", "unobserveContainerSlot_fn", "_observeContainerScroll", "observeContainerScroll_fn", "_unobserveContainerScroll", "unobserveContainerScroll_fn", "_handleContainerScroll", "handleContainerScroll_fn", "_handleContainerSlotChange", "handleContainerSlotChange_fn", "_attachHints", "attachHints_fn", "_attachHint", "attachHint_fn", "_detachHints", "detachHints_fn", "_setupHints", "setupHints_fn", "_teardownHints", "teardownHints_fn", "_openViewer", "openViewer_fn", "PreviewEditorLink", "s", "__privateAdd", "getManifest", "__privateMethod", "x", "o", "isDescendantOf", "event", "__privateGet", "assigned", "element", "hint", "data", "readCurrentElementData", "param", "compress", "link", "Router", "r", "preview_editor_link_plugin_default", "__decorateClass", "n", "e", "preview_editor_link_hint_component_default", "_observer", "_element", "_scrollParent", "_observeElement", "observeElement_fn", "_observeStage", "observeStage_fn", "_unobserveStage", "unobserveStage_fn", "_handleStageChange", "PreviewEditorLinkHint", "ColorSchemable", "s", "__privateAdd", "element", "__privateSet", "__privateMethod", "__privateGet", "height", "width", "x", "y", "getRelativeBoundary", "scrollTop", "scrollLeft", "r", "preview_editor_link_hint_component_default", "__decorateClass", "n", "e", "preview_simulate_viewports_plugin_default", "VIEWPORTS", "ICONS", "STYLE_ID", "DECORATION_CLASS", "PROPORTION_CLASS", "SIZE_CLASS", "SCALE_CLASS", "SCALE_FACTOR", "PreviewSimulateViewports", "ColorSchemable", "s", "style", "w", "h", "preview", "scale", "detail", "event", "dataset", "viewport", "x", "o", "l", "r", "preview_simulate_viewports_plugin_default", "__decorateClass", "n", "e", "keyed", "directive", "Directive", "constructor", "this", "key", "nothing", "render", "k", "v", "update", "part", "setCommittedValue", "debounce", "fn", "wait", "timeoutId", "args", "URI_DATA_PARAM_COMPRESSION", "EMPTY_ELEMENT_DATA", "prepareInitialData", "element", "acc", "field", "value", "litKey", "slot", "parseFieldValue", "alignFormDataWebkit", "formData", "elements", "name", "mapFormData", "data", "key", "group", "compressFormData", "compress", "decompressElementData", "compressed", "raw", "decompress", "stage_editor_plugin_default", "UPDATE_DEBOUNCE", "_manifest", "_updateFormData", "_prepareElementData", "prepareElementData_fn", "StageEditor", "ColorSchemable", "s", "__privateAdd", "getManifest", "debounce", "formData", "element", "data", "compressFormData", "event", "previewTagName", "__privateGet", "__privateMethod", "detail", "x", "i", "l", "compressed", "initialData", "prepareInitialData", "elementData", "decompressElementData", "r", "stage_editor_plugin_default", "__decorateClass", "t", "n", "e", "stage_editor_controls_component_default", "_manifest", "StageEditorControls", "ColorSchemable", "s", "__privateAdd", "getManifest", "previewTagName", "__privateGet", "event", "form", "formData", "alignFormDataWebkit", "content", "n", "a", "x", "m", "renderMarkdown", "field", "A", "key", "litKey", "o", "option", "slot", "r", "stage_editor_controls_component_default", "__decorateClass", "t", "e", "SpreadPropsDirective", "c", "_spreadData", "A", "part", "spreadData", "_a", "data", "prevData", "element", "key", "value", "spreadProps", "e", "SpreadEventsDirective", "eventName", "eventValue", "event", "eventData", "name", "spreadEvents", "SpreadDirective", "spread", "UnsafeHTMLDirective", "Directive", "constructor", "partInfo", "super", "this", "_value", "nothing", "type", "PartType", "CHILD", "Error", "directiveName", "render", "value", "_templateResult", "noChange", "strings", "raw", "_$litType$", "resultType", "values", "unsafeHTML", "directive", "stage_editor_preview_component_default", "_alignAttributes", "alignAttributes_fn", "_prepareProps", "prepareProps_fn", "StageEditorPreview", "s", "__privateAdd", "x", "o", "name", "content", "a", "n", "A", "tag", "i", "spread", "__privateMethod", "attributes", "acc", "key", "value", "r", "stage_editor_preview_component_default", "__decorateClass", "e", "stage_examples_plugin_default", "_manifest", "StageExamples", "ColorSchemable", "s", "__privateAdd", "getManifest", "previewTagName", "__privateGet", "available", "event", "x", "o", "example", "m", "renderMarkdown", "r", "stage_examples_plugin_default", "__decorateClass", "t", "n", "e", "stage_readme_plugin_default", "_manifest", "StageReadme", "ColorSchemable", "s", "__privateAdd", "getManifest", "previewTagName", "__privateGet", "available", "event", "x", "l", "A", "r", "stage_readme_plugin_default", "__decorateClass", "t", "n", "e", "ROUTE_ELEMENTS", "ROUTE_READMES", "prepareReadmeNavigationItem", "name", "url", "link", "prepareElementNavigationItem", "element", "prepareNavigation", "manifest", "config", "items", "readmes", "group", "elements", "matchesSearch", "content", "terms", "minSearchLength", "contents", "term", "filterItems", "all", "filteredItems", "Routable", "registerRoutes", "superClass", "RoutableElement", "args", "Router", "routes", "prepareRoutes", "Router", "firstReadme", "firstElement", "getManifest", "url", "hash", "encoded", "markdown", "response", "prefixRelativeUrls", "x", "m", "l", "params", "router", "outgoingParams", "hasOutgoingParams", "isSamePath", "alignedParams", "mergeParams", "haveParamsChanged", "areParamsEqual", "tagName", "pluginName", "pluginData", "o", "previewFramePlugin", "a", "root_component_default", "Root", "Routable", "ColorSchemable", "s", "detail", "config", "loadConfig", "manifest", "loadManifest", "prepareNavigation", "routes", "prepareRoutes", "x", "n", "l", "getConfig", "logo_default", "r", "root_component_default", "__decorateClass", "t", "i", "e", "root_navigation_component_default", "_items", "_searchTerms", "RootNavigation", "s", "__privateAdd", "terms", "__privateSet", "filterItems", "__privateGet", "items", "x", "n", "o", "group", "name", "link", "Router", "r", "root_navigation_component_default", "__decorateClass", "t", "e", "button_component_default", "_internals", "Button", "ColorSchemable", "s", "__privateAdd", "__privateGet", "x", "n", "l", "r", "button_component_default", "__decorateClass", "e", "code_component_default", "Code", "ColorSchemable", "s", "x", "r", "code_component_default", "__decorateClass", "e", "icon_component_default", "Icon", "s", "x", "r", "icon_component_default", "__decorateClass", "n", "e", "tabs_component_default", "Tabs", "ColorSchemable", "s", "event", "activeTab", "tabs", "x", "o", "tab", "label", "disabled", "r", "tabs_component_default", "__decorateClass", "e", "n", "title_component_default", "Title", "s", "x", "r", "title_component_default", "__decorateClass", "n", "e"]
}
