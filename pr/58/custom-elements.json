{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/components/root/root.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Root",
          "cssProperties": [
            {
              "description": "The background color of the root element in dark mode.",
              "name": "--wcp-root-dark-background"
            },
            {
              "description": "The text color of the text in the root element in dark mode.",
              "name": "--wcp-root-dark-color"
            },
            {
              "description": "The background color of the root element in light mode.",
              "name": "--wcp-root-light-background"
            },
            {
              "description": "The text color of the text in the root element in light mode.",
              "name": "--wcp-root-light-color"
            }
          ],
          "slots": [
            {
              "description": "Allows setting a custom logo to be displayed in the title.",
              "name": "logo"
            },
            {
              "description": "Can be used to inject additional preview controls.",
              "name": "preview-controls"
            },
            {
              "description": "Used to be override the existing preview pane.",
              "name": "preview-frame"
            },
            {
              "description": "Can be used to inject additional preview detail panes.",
              "name": "preview-details"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "ready",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "navigationItems",
              "type": {
                "text": "GroupedNavigationItems"
              },
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "navigationRef",
              "type": {
                "text": "RootNavigation"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flags the component to be displayed inline and not standalone. Requires the surrounding\nlayout to provide the necessary styles like for any other block element.",
              "attribute": "inline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "configUrl",
              "type": {
                "text": "string | undefined"
              },
              "description": "Allows to set a url to load a config file from.",
              "attribute": "config-url",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "manifestUrl",
              "type": {
                "text": "string"
              },
              "description": "Defines the location of the custom element manifest file.",
              "attribute": "manifest-url",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleSearchInput",
              "parameters": [
                {
                  "name": "{ detail }",
                  "type": {
                    "text": "CustomEvent<string>"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flags the component to be displayed inline and not standalone. Requires the surrounding\nlayout to provide the necessary styles like for any other block element.",
              "fieldName": "inline"
            },
            {
              "name": "config-url",
              "type": {
                "text": "string | undefined"
              },
              "description": "Allows to set a url to load a config file from.",
              "fieldName": "configUrl"
            },
            {
              "name": "manifest-url",
              "type": {
                "text": "string"
              },
              "description": "Defines the location of the custom element manifest file.",
              "fieldName": "manifestUrl"
            }
          ],
          "mixins": [
            {
              "name": "Routable()",
              "module": "src/components/root/root.component.ts"
            },
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [],
          "readme": "# wcp-root\n\n**Mixins:** ColorSchemable\n\n## Properties\n\n| Property          | Attribute      | Modifiers | Type                  | Default     | Description                                      |\n|-------------------|----------------|-----------|-----------------------|-------------|--------------------------------------------------|\n| `configUrl`       | `config-url`   |           | `string \\| undefined` |             | Allows to set a url to load a config file from.  |\n| `inline`          | `inline`       |           | `boolean`             | false       | Flags the component to be displayed inline and not standalone. Requires the surrounding<br />layout to provide the necessary styles like for any other block element. |\n| `manifestUrl`     | `manifest-url` |           | `string`              |             | Defines the location of the custom element manifest file. |\n| `navigationItems` |                |           |                       | \"new Map()\" |                                                  |\n| `navigationRef`   |                | readonly  |                       |             |                                                  |\n\n## Methods\n\n| Method              | Type                      |\n|---------------------|---------------------------|\n| `handleSearchInput` | `({ detail }: any): void` |\n\n## Events\n\n| Event                             | Description                                      |\n|-----------------------------------|--------------------------------------------------|\n| `wcp-root:active-element-changed` | Fired when the active element changes. Carries the declaration of the new active element with it. |\n\n## Slots\n\n| Name               | Description                                      |\n|--------------------|--------------------------------------------------|\n| `logo`             | Allows setting a custom logo to be displayed in the title. |\n| `preview-controls` | Can be used to inject additional preview controls. |\n| `preview-details`  | Can be used to inject additional preview detail panes. |\n| `preview-frame`    | Used to be override the existing preview pane.   |\n\n## CSS Custom Properties\n\n| Property                      | Description                                      |\n|-------------------------------|--------------------------------------------------|\n| `--wcp-root-dark-background`  | The background color of the root element in dark mode. |\n| `--wcp-root-dark-color`       | The text color of the text in the root element in dark mode. |\n| `--wcp-root-light-background` | The background color of the root element in light mode. |\n| `--wcp-root-light-color`      | The text color of the text in the root element in light mode. |\n",
          "groups": [
            "root"
          ],
          "tagName": "wcp-root",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Root",
          "declaration": {
            "name": "Root",
            "module": "src/components/root/root.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-root",
          "declaration": {
            "name": "Root",
            "module": "src/components/root/root.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/markdown-example/markdown-example.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows an inline code example and a preview of the element in the readme.\nThis is used in the markdown formatter to render `html` examples.\n\nIn most cases you don't want to use this component directly, but rather use the `wcp-readme` element instead,\nor the enhanced markdown renderer which instruments this element under the hood. It can be used with the\n`renderMarkdown` function provided by the `@/utils/markdown.utils`.",
          "name": "MarkdownExample",
          "cssProperties": [
            {
              "description": "Inner padding of the example",
              "name": "--wcp-markdown-example-spacing"
            },
            {
              "description": "Border radius of the example",
              "name": "--wcp-markdown-example-border-radius"
            },
            {
              "description": "Border width of the example",
              "name": "--wcp-markdown-example-border-width"
            },
            {
              "description": "Border color of the example in dark mode",
              "name": "--wcp-markdown-example-dark-border-color"
            },
            {
              "description": "Border color of the example in light mode",
              "name": "--wcp-markdown-example-light-border-color"
            }
          ],
          "slots": [
            {
              "description": "Code example",
              "name": "code"
            },
            {
              "description": "Rendered example preview",
              "name": "preview"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#config",
              "privacy": "private",
              "readonly": true
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "### Shows arbitrary HTML code example\n\n```html\n<wcp-markdown-example>\n  <pre slot=\"code\">\n&lt;h1&gt;Readme&lt;/h1&gt;\n&lt;p&gt;Some readme content&lt;/p&gt;\n  </pre>\n  <div slot=\"preview\">\n    <h1>Readme</h1>\n    <p>Some readme content</p>\n  </div>\n</wcp-markdown-example>\n```"
          ],
          "readme": "# wcp-markdown-example\n\nShows an inline code example and a preview of the element in the readme.\nThis is used in the markdown formatter to render `html` examples.\n\nIn most cases you don't want to use this component directly, but rather use the `wcp-readme` element instead,\nor the enhanced markdown renderer which instruments this element under the hood. It can be used with the\n`renderMarkdown` function provided by the `@/utils/markdown.utils`.\n\n**Mixins:** ColorSchemable\n\n## Example\n\n### Shows arbitrary HTML code example\n\n```html\n<wcp-markdown-example>\n  <pre slot=\"code\">\n&lt;h1&gt;Readme&lt;/h1&gt;\n&lt;p&gt;Some readme content&lt;/p&gt;\n  </pre>\n  <div slot=\"preview\">\n    <h1>Readme</h1>\n    <p>Some readme content</p>\n  </div>\n</wcp-markdown-example>\n```\n\n## Slots\n\n| Name      | Description              |\n|-----------|--------------------------|\n| `code`    | Code example             |\n| `preview` | Rendered example preview |\n\n## CSS Custom Properties\n\n| Property                                    | Description                               |\n|---------------------------------------------|-------------------------------------------|\n| `--wcp-markdown-example-border-radius`      | Border radius of the example              |\n| `--wcp-markdown-example-border-width`       | Border width of the example               |\n| `--wcp-markdown-example-dark-border-color`  | Border color of the example in dark mode  |\n| `--wcp-markdown-example-light-border-color` | Border color of the example in light mode |\n| `--wcp-markdown-example-spacing`            | Inner padding of the example              |\n",
          "groups": [
            "features"
          ],
          "tagName": "wcp-markdown-example",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MarkdownExample",
          "declaration": {
            "name": "MarkdownExample",
            "module": "src/components/features/markdown-example/markdown-example.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-markdown-example",
          "declaration": {
            "name": "MarkdownExample",
            "module": "src/components/features/markdown-example/markdown-example.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/navigation/navigation.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Navigation",
          "cssProperties": [
            {
              "description": "Spacing between navigation and headline",
              "name": "--wcp-navigation-spacing"
            },
            {
              "description": "Spacing between navigation items",
              "name": "--wcp-navigation-spacing-items"
            },
            {
              "description": "Inner padding of the navigation headline",
              "name": "--wcp-navigation-spacing-headline"
            },
            {
              "description": "Border color of the navigation headline in dark mode",
              "name": "--wcp-navigation-dark-border-color"
            },
            {
              "description": "Border color of the navigation headline in light mode",
              "name": "--wcp-navigation-light-border-color"
            },
            {
              "description": "Font size of the navigation headline",
              "name": "--wcp-navigation-headline-size"
            },
            {
              "description": "Font weight of the navigation headline",
              "name": "--wcp-navigation-headline-weight"
            },
            {
              "description": "Letter spacing of the navigation headline",
              "name": "--wcp-navigation-headline-spacing"
            },
            {
              "description": "Background color of the navigation headline in dark mode",
              "name": "--wcp-navigation-headline-dark-background"
            },
            {
              "description": "Background color of the navigation headline in light mode",
              "name": "--wcp-navigation-headline-light-background"
            }
          ],
          "slots": [
            {
              "description": "Default slot for navigation items",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "headline",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "headline"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-navigation",
          "examples": [
            "### Usage with headline\n\n```html\n<wcp-navigation headline=\"Navigation\">\n  <wcp-navigation-item href=\"/home\">Home</wcp-navigation-item>\n  <wcp-navigation-item href=\"/about\">About</wcp-navigation-item>\n</wcp-navigation>\n```"
          ],
          "readme": "# wcp-navigation\n\n**Mixins:** ColorSchemable\n\n## Example\n\n### Usage with headline\n\n```html\n<wcp-navigation headline=\"Navigation\">\n  <wcp-navigation-item href=\"/home\">Home</wcp-navigation-item>\n  <wcp-navigation-item href=\"/about\">About</wcp-navigation-item>\n</wcp-navigation>\n```\n\n## Properties\n\n| Property   | Attribute  | Type                  |\n|------------|------------|-----------------------|\n| `headline` | `headline` | `string \\| undefined` |\n\n## Slots\n\n| Name | Description                       |\n|------|-----------------------------------|\n|      | Default slot for navigation items |\n\n## CSS Custom Properties\n\n| Property                                     | Description                                      |\n|----------------------------------------------|--------------------------------------------------|\n| `--wcp-navigation-dark-border-color`         | Border color of the navigation headline in dark mode |\n| `--wcp-navigation-headline-dark-background`  | Background color of the navigation headline in dark mode |\n| `--wcp-navigation-headline-light-background` | Background color of the navigation headline in light mode |\n| `--wcp-navigation-headline-size`             | Font size of the navigation headline             |\n| `--wcp-navigation-headline-spacing`          | Letter spacing of the navigation headline        |\n| `--wcp-navigation-headline-weight`           | Font weight of the navigation headline           |\n| `--wcp-navigation-light-border-color`        | Border color of the navigation headline in light mode |\n| `--wcp-navigation-spacing`                   | Spacing between navigation and headline          |\n| `--wcp-navigation-spacing-headline`          | Inner padding of the navigation headline         |\n| `--wcp-navigation-spacing-items`             | Spacing between navigation items                 |\n",
          "groups": [
            "features"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Navigation",
          "declaration": {
            "name": "Navigation",
            "module": "src/components/features/navigation/navigation.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-navigation",
          "declaration": {
            "name": "Navigation",
            "module": "src/components/features/navigation/navigation.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/preview/preview.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Previews given content.",
          "name": "Preview",
          "cssProperties": [
            {
              "description": "Border color of the plugin menu in dark mode.",
              "name": "--wcp-preview-menu-dark-border-color"
            },
            {
              "description": "Border color of the plugin menu in light mode.",
              "name": "--wcp-preview-menu-light-border-color"
            }
          ],
          "slots": [
            {
              "description": "The content to preview.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#config",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "previewTagName",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "preview-tag-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#handleRouteChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleContainerRef",
              "privacy": "private",
              "parameters": [
                {
                  "name": "container",
                  "optional": true,
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "preview-tag-name",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "previewTagName"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-preview",
          "examples": [
            "```html\n<wcp-preview>\n  <wcp-button>Example button</wcp-button>\n</wcp-preview>\n```"
          ],
          "readme": "# wcp-preview\n\nPreviews given content.\n\n**Mixins:** ColorSchemable\n\n## Example\n\n```html\n<wcp-preview>\n  <wcp-button>Example button</wcp-button>\n</wcp-preview>\n```\n\n## Properties\n\n| Property         | Attribute          | Type                  |\n|------------------|--------------------|-----------------------|\n| `previewTagName` | `preview-tag-name` | `string \\| undefined` |\n\n## Slots\n\n| Name | Description             |\n|------|-------------------------|\n|      | The content to preview. |\n\n## CSS Custom Properties\n\n| Property                                | Description                                    |\n|-----------------------------------------|------------------------------------------------|\n| `--wcp-preview-menu-dark-border-color`  | Border color of the plugin menu in dark mode.  |\n| `--wcp-preview-menu-light-border-color` | Border color of the plugin menu in light mode. |\n",
          "groups": [
            "features"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Preview",
          "declaration": {
            "name": "Preview",
            "module": "src/components/features/preview/preview.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-preview",
          "declaration": {
            "name": "Preview",
            "module": "src/components/features/preview/preview.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/readme/readme.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Displays a Readme file by its URL.",
          "name": "Readme",
          "cssProperties": [
            {
              "description": "Text color of the readme in dark mode.",
              "name": "--wcp-readme-dark-color"
            },
            {
              "description": "Accent text color (e.g. links) of the readme in dark mode.",
              "name": "--wcp-readme-dark-color-accent"
            },
            {
              "description": "Muted text color of the readme in dark mode.",
              "name": "--wcp-readme-dark-color-muted"
            },
            {
              "description": "Border color of the readme in dark mode.",
              "name": "--wcp-readme-dark-border-color"
            },
            {
              "description": "Background color of highlighted table rows in dark mode.",
              "name": "--wcp-readme-dark-highlight-background"
            },
            {
              "description": "Text color of the readme in light mode.",
              "name": "--wcp-readme-light-color"
            },
            {
              "description": "Accent text color (e.g. links) of the readme in light mode.",
              "name": "--wcp-readme-light-color-accent"
            },
            {
              "description": "Muted text color of the readme in light mode.",
              "name": "--wcp-readme-light-color-muted"
            },
            {
              "description": "Border color of the readme in light mode.",
              "name": "--wcp-readme-light-border-color"
            },
            {
              "description": "Background color of highlighted table rows in light mode.",
              "name": "--wcp-readme-light-highlight-background"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "showCodePreview",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "default": "false",
              "attribute": "add-code-preview",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "previewTagName",
              "type": {
                "text": "string | undefined"
              },
              "readonly": true,
              "attribute": "preview-tag-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "markdown",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "''",
              "attribute": "markdown"
            },
            {
              "kind": "field",
              "name": "hash",
              "type": {
                "text": "string | undefined"
              },
              "readonly": true,
              "attribute": "hash",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "scrollToId",
              "parameters": [
                {
                  "name": "section",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "add-code-preview",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "default": "false",
              "fieldName": "showCodePreview"
            },
            {
              "name": "preview-tag-name",
              "type": {
                "text": "string | undefined"
              },
              "readonly": true,
              "fieldName": "previewTagName"
            },
            {
              "name": "markdown",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "''",
              "fieldName": "markdown"
            },
            {
              "name": "hash",
              "type": {
                "text": "string | undefined"
              },
              "readonly": true,
              "fieldName": "hash"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-readme",
          "examples": [
            "```html\n<wcp-readme markdown=\"# Hello _World_!\"></wcp-readme>\n```"
          ],
          "readme": "# wcp-readme\n\nDisplays a Readme file by its URL.\n\n**Mixins:** ColorSchemable\n\n## Example\n\n```html\n<wcp-readme markdown=\"# Hello _World_!\"></wcp-readme>\n```\n\n## Properties\n\n| Property          | Attribute          | Modifiers | Type                  | Default |\n|-------------------|--------------------|-----------|-----------------------|---------|\n| `hash`            | `hash`             | readonly  | `string \\| undefined` |         |\n| `markdown`        | `markdown`         | readonly  | `\"\"`                  | \"\"      |\n| `previewTagName`  | `preview-tag-name` | readonly  | `string \\| undefined` |         |\n| `showCodePreview` | `add-code-preview` | readonly  | `false`               | false   |\n\n## Methods\n\n| Method       | Type                      |\n|--------------|---------------------------|\n| `scrollToId` | `(section: string): void` |\n\n## CSS Custom Properties\n\n| Property                                  | Description                                      |\n|-------------------------------------------|--------------------------------------------------|\n| `--wcp-readme-dark-border-color`          | Border color of the readme in dark mode.         |\n| `--wcp-readme-dark-color`                 | Text color of the readme in dark mode.           |\n| `--wcp-readme-dark-color-accent`          | Accent text color (e.g. links) of the readme in dark mode. |\n| `--wcp-readme-dark-color-muted`           | Muted text color of the readme in dark mode.     |\n| `--wcp-readme-dark-highlight-background`  | Background color of highlighted table rows in dark mode. |\n| `--wcp-readme-light-border-color`         | Border color of the readme in light mode.        |\n| `--wcp-readme-light-color`                | Text color of the readme in light mode.          |\n| `--wcp-readme-light-color-accent`         | Accent text color (e.g. links) of the readme in light mode. |\n| `--wcp-readme-light-color-muted`          | Muted text color of the readme in light mode.    |\n| `--wcp-readme-light-highlight-background` | Background color of highlighted table rows in light mode. |\n",
          "groups": [
            "features"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Readme",
          "declaration": {
            "name": "Readme",
            "module": "src/components/features/readme/readme.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-readme",
          "declaration": {
            "name": "Readme",
            "module": "src/components/features/readme/readme.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/readme-frame/readme-frame.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ReadmeFrame",
          "cssProperties": [
            {
              "description": "Inner padding of the preview frame",
              "name": "--wcp-readme-frame-spacing"
            }
          ],
          "slots": [
            {
              "description": "The readme frame is usually filled with a readme element.",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-readme-frame></wcp-readme-frame>\n```"
          ],
          "readme": "# wcp-readme-frame\n\n## Example\n\n```html\n<wcp-readme-frame></wcp-readme-frame>\n```\n\n## Slots\n\n| Name | Description                                      |\n|------|--------------------------------------------------|\n|      | The readme frame is usually filled with a readme element. |\n\n## CSS Custom Properties\n\n| Property                     | Description                        |\n|------------------------------|------------------------------------|\n| `--wcp-readme-frame-spacing` | Inner padding of the preview frame |\n",
          "groups": [
            "features"
          ],
          "tagName": "wcp-readme-frame",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ReadmeFrame",
          "declaration": {
            "name": "ReadmeFrame",
            "module": "src/components/features/readme-frame/readme-frame.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-readme-frame",
          "declaration": {
            "name": "ReadmeFrame",
            "module": "src/components/features/readme-frame/readme-frame.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/stage/stage.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Stage",
          "cssProperties": [
            {
              "description": "Background color of the preview frame in dark mode",
              "name": "--wcp-stage-dark-background"
            },
            {
              "description": "Border color of the example section in dark mode",
              "name": "--wcp-stage-dark-border-color"
            },
            {
              "description": "Text color of the preview frame in dark mode",
              "name": "--wcp-stage-dark-color"
            },
            {
              "description": "Background color of the preview frame in light mode",
              "name": "--wcp-stage-light-background"
            },
            {
              "description": "Border color of the example section in light mode",
              "name": "--wcp-stage-light-border-color"
            },
            {
              "description": "Text color of the preview frame in light mode",
              "name": "--wcp-stage-light-color"
            },
            {
              "description": "Border radius of the preview frame",
              "name": "--wcp-stage-border-radius"
            },
            {
              "description": "Border width of the preview frame",
              "name": "--wcp-stage-border-width"
            },
            {
              "description": "Outer margin of the preview frame",
              "name": "--wcp-stage-distance"
            },
            {
              "description": "Inner padding of the preview frame",
              "name": "--wcp-stage-spacing"
            }
          ],
          "slots": [
            {
              "description": "The preview frame can be filled with any number of plugins. The plugins will be rendered as tabs.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_plugins",
              "type": {
                "text": "StagePlugin[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_tabs",
              "type": {
                "text": "HTMLElementTagNameMap['wcp-tabs']['tabs']"
              },
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "activePlugin",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private",
              "readonly": true,
              "attribute": "active-plugin",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "emitActivePluginChange",
              "parameters": [
                {
                  "name": "activePlugin",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleAvailabilityChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleActiveTabChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<string>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "preparePluginTabs",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "alignActivePlugin",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "active-plugin",
              "type": {
                "text": "string | undefined"
              },
              "readonly": true,
              "fieldName": "activePlugin"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-stage></wcp-stage>\n```"
          ],
          "readme": "# wcp-stage\n\n**Mixins:** ColorSchemable\n\n## Example\n\n```html\n<wcp-stage></wcp-stage>\n```\n\n## Methods\n\n| Method                   | Type                                         |\n|--------------------------|----------------------------------------------|\n| `emitActivePluginChange` | `(activePlugin?: string \\| undefined): void` |\n\n## Events\n\n| Event                            |\n|----------------------------------|\n| `wcp-stage:active-plugin-change` |\n\n## Slots\n\n| Name | Description                                      |\n|------|--------------------------------------------------|\n|      | The preview frame can be filled with any number of plugins. The plugins will be rendered as tabs. |\n\n## CSS Custom Properties\n\n| Property                         | Description                                      |\n|----------------------------------|--------------------------------------------------|\n| `--wcp-stage-border-radius`      | Border radius of the preview frame               |\n| `--wcp-stage-border-width`       | Border width of the preview frame                |\n| `--wcp-stage-dark-background`    | Background color of the preview frame in dark mode |\n| `--wcp-stage-dark-border-color`  | Border color of the example section in dark mode |\n| `--wcp-stage-dark-color`         | Text color of the preview frame in dark mode     |\n| `--wcp-stage-distance`           | Outer margin of the preview frame                |\n| `--wcp-stage-light-background`   | Background color of the preview frame in light mode |\n| `--wcp-stage-light-border-color` | Border color of the example section in light mode |\n| `--wcp-stage-light-color`        | Text color of the preview frame in light mode    |\n| `--wcp-stage-spacing`            | Inner padding of the preview frame               |\n",
          "groups": [
            "features"
          ],
          "tagName": "wcp-stage",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Stage",
          "declaration": {
            "name": "Stage",
            "module": "src/components/features/stage/stage.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-stage",
          "declaration": {
            "name": "Stage",
            "module": "src/components/features/stage/stage.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/toggle-color-scheme/toggle-color-scheme.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a button to toggle the desired color-scheme.",
          "name": "ToggleColorScheme",
          "members": [
            {
              "kind": "method",
              "name": "handleButtonClick"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-toggle-color-scheme></wcp-toggle-color-scheme>\n```"
          ],
          "readme": "# wcp-toggle-color-scheme\n\nShows a button to toggle the desired color-scheme.\n\n**Mixins:** ColorSchemable\n\n## Example\n\n```html\n<wcp-toggle-color-scheme></wcp-toggle-color-scheme>\n```\n\n## Methods\n\n| Method              | Type       |\n|---------------------|------------|\n| `handleButtonClick` | `(): void` |\n\n## Events\n\n| Event                     |\n|---------------------------|\n| `wcp-color-scheme:toggle` |\n",
          "groups": [
            "features"
          ],
          "tagName": "wcp-toggle-color-scheme",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToggleColorScheme",
          "declaration": {
            "name": "ToggleColorScheme",
            "module": "src/components/features/toggle-color-scheme/toggle-color-scheme.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-toggle-color-scheme",
          "declaration": {
            "name": "ToggleColorScheme",
            "module": "src/components/features/toggle-color-scheme/toggle-color-scheme.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/toggle-sidebar/toggle-sidebar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a button to toggle sidebar.",
          "name": "ToggleSidebar",
          "members": [
            {
              "kind": "method",
              "name": "handleButtonClick"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-toggle-sidebar></wcp-toggle-sidebar>\n```"
          ],
          "readme": "# wcp-toggle-sidebar\n\nShows a button to toggle sidebar.\n\n## Example\n\n```html\n<wcp-toggle-sidebar></wcp-toggle-sidebar>\n```\n\n## Methods\n\n| Method              | Type       |\n|---------------------|------------|\n| `handleButtonClick` | `(): void` |\n\n## Events\n\n| Event              |\n|--------------------|\n| `wcp-aside:toggle` |\n",
          "groups": [
            "features"
          ],
          "tagName": "wcp-toggle-sidebar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToggleSidebar",
          "declaration": {
            "name": "ToggleSidebar",
            "module": "src/components/features/toggle-sidebar/toggle-sidebar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-toggle-sidebar",
          "declaration": {
            "name": "ToggleSidebar",
            "module": "src/components/features/toggle-sidebar/toggle-sidebar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/topbar/topbar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A wrapper above the preview frame content to contain various controls.",
          "name": "Topbar",
          "cssProperties": [
            {
              "description": "Text color of the controls in dark mode",
              "name": "--wcp-topbar-dark-color"
            },
            {
              "description": "Text color of the controls in light mode",
              "name": "--wcp-topbar-light-color"
            },
            {
              "description": "Overall height of the preview controls nav bar",
              "name": "--wcp-topbar-height"
            },
            {
              "description": "Inner spacing, used as padding of the controls",
              "name": "--wcp-topbar-spacing"
            }
          ],
          "slots": [
            {
              "description": "Default slot for navigation items",
              "name": ""
            }
          ],
          "members": [],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-topbar",
          "examples": [
            "### Usage with controls\n\n```html\n<wcp-topbar>\n  <wcp-toggle-sidebar></wcp-toggle-sidebar>\n  <wcp-toggle-color-scheme></wcp-toggle-color-scheme>\n</wcp-topbar>\n```"
          ],
          "readme": "# wcp-topbar\n\nA wrapper above the preview frame content to contain various controls.\n\n**Mixins:** ColorSchemable\n\n## Example\n\n### Usage with controls\n\n```html\n<wcp-topbar>\n  <wcp-toggle-sidebar></wcp-toggle-sidebar>\n  <wcp-toggle-color-scheme></wcp-toggle-color-scheme>\n</wcp-topbar>\n```\n\n## Slots\n\n| Name | Description                       |\n|------|-----------------------------------|\n|      | Default slot for navigation items |\n\n## CSS Custom Properties\n\n| Property                   | Description                                    |\n|----------------------------|------------------------------------------------|\n| `--wcp-topbar-dark-color`  | Text color of the controls in dark mode        |\n| `--wcp-topbar-height`      | Overall height of the preview controls nav bar |\n| `--wcp-topbar-light-color` | Text color of the controls in light mode       |\n| `--wcp-topbar-spacing`     | Inner spacing, used as padding of the controls |\n",
          "groups": [
            "features"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Topbar",
          "declaration": {
            "name": "Topbar",
            "module": "src/components/features/topbar/topbar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-topbar",
          "declaration": {
            "name": "Topbar",
            "module": "src/components/features/topbar/topbar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-checkbox/input-checkbox.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A checkbox input element using the wcp style. Fully form aware.",
          "name": "InputCheckbox",
          "cssProperties": [
            {
              "description": "The size of the checkbox input.",
              "name": "--wcp-input-checkbox-size"
            },
            {
              "description": "The font size of the hint.",
              "name": "--wcp-input-checkbox-hint-size"
            },
            {
              "description": "The font size of the label.",
              "name": "--wcp-input-checkbox-label-size"
            },
            {
              "description": "The leading distance of the label to the input.",
              "name": "--wcp-input-checkbox-spacing"
            },
            {
              "description": "The border radius of the checkbox input.",
              "name": "--wcp-input-checkbox-border-radius"
            },
            {
              "description": "The border size of the checkbox input.",
              "name": "--wcp-input-checkbox-border-size"
            },
            {
              "description": "The background color of the checkbox input in dark mode.",
              "name": "--wcp-input-checkbox-dark-background"
            },
            {
              "description": "The border color of the checkbox input in dark mode.",
              "name": "--wcp-input-checkbox-dark-border"
            },
            {
              "description": "The fill color of the checkbox input when checked in dark mode.",
              "name": "--wcp-input-checkbox-dark-color"
            },
            {
              "description": "The background color of the checkbox input in light mode.",
              "name": "--wcp-input-checkbox-light-background"
            },
            {
              "description": "The border color of the checkbox input in light mode.",
              "name": "--wcp-input-checkbox-light-border"
            },
            {
              "description": "The fill color of the checkbox input when checked in light mode.",
              "name": "--wcp-input-checkbox-light-color"
            }
          ],
          "slots": [
            {
              "description": "Receives optional descriptions below the input.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "initialChecked",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'checkbox'",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "autocomplete",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "'on'",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The label of the input element.",
              "name": "label",
              "kind": "field"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'checkbox'",
              "fieldName": "name"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "autocomplete"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "checked"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "'on'",
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "Editable({ hasBeforeSlot: false, hasBorder: false })",
              "module": "src/components/forms/input-checkbox/input-checkbox.component.ts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-checkbox",
          "examples": [
            "## With optional label\n```html\n<wcp-input-checkbox label=\"With optional label\"></wcp-input-checkbox>\n```",
            "## With initial value\n```html\n<wcp-input-checkbox checked label=\"With optional initial value\"></wcp-input-checkbox>\n```",
            "## Used within a form\n```html\n<form>\n  <wcp-input-checkbox label=\"Fully form enabled component\"></wcp-input-checkbox>\n  <button type=\"submit\">Submit</button>\n  <button type=\"reset\">Reset</button>\n</form>\n```"
          ],
          "readme": "# wcp-input-checkbox\n\nA checkbox input element using the wcp style. Fully form aware.\n\n## Examples\n\n## With optional label\n\n```html\n<wcp-input-checkbox label=\"With optional label\"></wcp-input-checkbox>\n```\n\n## With initial value\n\n```html\n<wcp-input-checkbox checked label=\"With optional initial value\"></wcp-input-checkbox>\n```\n\n## Used within a form\n\n```html\n<form>\n  <wcp-input-checkbox label=\"Fully form enabled component\"></wcp-input-checkbox>\n  <button type=\"submit\">Submit</button>\n  <button type=\"reset\">Reset</button>\n</form>\n```\n\n## Properties\n\n| Property       | Attribute      | Type      | Default    | Description                     |\n|----------------|----------------|-----------|------------|---------------------------------|\n| `autocomplete` | `autocomplete` | `boolean` | false      |                                 |\n| `checked`      | `checked`      | `boolean` | false      |                                 |\n| `disabled`     | `disabled`     | `boolean` | false      |                                 |\n| `label`        |                | `string`  |            | The label of the input element. |\n| `name`         | `name`         | `string`  | \"checkbox\" |                                 |\n| `required`     | `required`     | `boolean` | false      |                                 |\n| `value`        | `value`        | `string`  | \"on\"       |                                 |\n\n## Methods\n\n| Method              | Type                 |\n|---------------------|----------------------|\n| `checkValidity`     | `(): boolean`        |\n| `formResetCallback` | `(): void`           |\n| `handleInput`       | `(event: any): void` |\n| `renderInput`       | `(id: string): any`  |\n\n## Slots\n\n| Name   | Description                                     |\n|--------|-------------------------------------------------|\n| `hint` | Receives optional descriptions below the input. |\n\n## CSS Custom Properties\n\n| Property                                | Description                                      |\n|-----------------------------------------|--------------------------------------------------|\n| `--wcp-input-checkbox-border-radius`    | The border radius of the checkbox input.         |\n| `--wcp-input-checkbox-border-size`      | The border size of the checkbox input.           |\n| `--wcp-input-checkbox-dark-background`  | The background color of the checkbox input in dark mode. |\n| `--wcp-input-checkbox-dark-border`      | The border color of the checkbox input in dark mode. |\n| `--wcp-input-checkbox-dark-color`       | The fill color of the checkbox input when checked in dark mode. |\n| `--wcp-input-checkbox-hint-size`        | The font size of the hint.                       |\n| `--wcp-input-checkbox-label-size`       | The font size of the label.                      |\n| `--wcp-input-checkbox-light-background` | The background color of the checkbox input in light mode. |\n| `--wcp-input-checkbox-light-border`     | The border color of the checkbox input in light mode. |\n| `--wcp-input-checkbox-light-color`      | The fill color of the checkbox input when checked in light mode. |\n| `--wcp-input-checkbox-size`             | The size of the checkbox input.                  |\n| `--wcp-input-checkbox-spacing`          | The leading distance of the label to the input.  |\n",
          "groups": [
            "forms"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputCheckbox",
          "declaration": {
            "name": "InputCheckbox",
            "module": "src/components/forms/input-checkbox/input-checkbox.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-input-checkbox",
          "declaration": {
            "name": "InputCheckbox",
            "module": "src/components/forms/input-checkbox/input-checkbox.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-code/input-code.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A text input element using the wcp style. Fully form aware.\nCan display multiline text (textarea) if configured to do so.",
          "name": "InputCode",
          "cssProperties": [
            {
              "description": "The font size of the hint.",
              "name": "--wcp-input-code-hint-size"
            },
            {
              "description": "The font size of the label.",
              "name": "--wcp-input-code-label-size"
            },
            {
              "description": "The inner spacing of the input element.",
              "name": "--wcp-input-code-spacing"
            },
            {
              "description": "The background color of the element in dark mode.",
              "name": "--wcp-input-code-dark-background"
            },
            {
              "description": "The border color of the element in dark mode.",
              "name": "--wcp-input-code-dark-border"
            },
            {
              "description": "The font color of the input element in dark mode.",
              "name": "--wcp-input-code-dark-color"
            },
            {
              "description": "The background color of the element in light mode.",
              "name": "--wcp-input-code-light-background"
            },
            {
              "description": "The border color of the element in light mode.",
              "name": "--wcp-input-code-light-border"
            },
            {
              "description": "The font color of the input element in light mode.",
              "name": "--wcp-input-code-light-color"
            }
          ],
          "slots": [
            {
              "description": "Receives optional descriptions below the input.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "readonly": true,
              "default": "{ ...super.shadowRootOptions, delegatesFocus: true }"
            },
            {
              "kind": "field",
              "name": "#editor",
              "privacy": "private",
              "type": {
                "text": "monaco.editor.IStandaloneCodeEditor | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#editorAutoSizeListener",
              "privacy": "private",
              "type": {
                "text": "monaco.IDisposable | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#editorModelContentChangeListener",
              "privacy": "private",
              "type": {
                "text": "monaco.IDisposable | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#initialValue",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#handleColorSchemeToggle",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "editor",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLTextAreaElement"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "autosize",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "autosize",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'text'",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "language",
              "type": {
                "text": "'json' | 'html' | 'handlebars' | 'razor' | 'css' | 'sass' | 'less' | 'javascript' | 'typescript'"
              },
              "default": "'html'",
              "attribute": "language",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "initializeEditor",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateEditorTheme",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateEditorAutoSize",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateEditorDisabled",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleColorSchemeToggle"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The label of the input element.",
              "name": "label",
              "kind": "field"
            }
          ],
          "attributes": [
            {
              "name": "autosize",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "autosize"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'text'",
              "fieldName": "name"
            },
            {
              "name": "language",
              "type": {
                "text": "'json' | 'html' | 'handlebars' | 'razor' | 'css' | 'sass' | 'less' | 'javascript' | 'typescript'"
              },
              "default": "'html'",
              "fieldName": "language"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "Editable()",
              "module": "src/components/forms/input-code/input-code.component.ts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-code",
          "examples": [
            "## With optional label\n```html\n<wcp-input-code label=\"With optional label\"></wcp-input-code>\n```",
            "## With optional initial value\n```html\n<wcp-input-code\n  label=\"With optional initial value\"\n  value=\"<strong>Test</strong>\"\n  language=\"html\"\n></wcp-input-code>\n```",
            "## With autosize\n```html\n<wcp-input-code\n  autosize\n  label=\"With optional initial value\"\n  value=\"<strong>Test</strong>\"\n  language=\"html\"\n></wcp-input-code>\n```",
            "## Used within a form\n```html\n<form>\n  <wcp-input-code\n    label=\"Fully form enabled component\"\n    value=\"<strong>Test</strong>\"\n    language=\"html\"\n  ></wcp-input-code>\n  <button type=\"submit\">Submit</button>\n  <button type=\"reset\">Reset</button>\n</form>\n```"
          ],
          "readme": "# wcp-input-code\n\nA text input element using the wcp style. Fully form aware.\nCan display multiline text (textarea) if configured to do so.\n\n## Examples\n\n## With optional label\n\n```html\n<wcp-input-code label=\"With optional label\"></wcp-input-code>\n```\n\n## With optional initial value\n\n```html\n<wcp-input-code\n  label=\"With optional initial value\"\n  value=\"<strong>Test</strong>\"\n  language=\"html\"\n></wcp-input-code>\n```\n\n## With autosize\n\n```html\n<wcp-input-code\n  autosize\n  label=\"With optional initial value\"\n  value=\"<strong>Test</strong>\"\n  language=\"html\"\n></wcp-input-code>\n```\n\n## Used within a form\n\n```html\n<form>\n  <wcp-input-code\n    label=\"Fully form enabled component\"\n    value=\"<strong>Test</strong>\"\n    language=\"html\"\n  ></wcp-input-code>\n  <button type=\"submit\">Submit</button>\n  <button type=\"reset\">Reset</button>\n</form>\n```\n\n## Properties\n\n| Property   | Attribute  | Type                                             | Default | Description                     |\n|------------|------------|--------------------------------------------------|---------|---------------------------------|\n| `autosize` | `autosize` | `boolean`                                        | false   |                                 |\n| `disabled` | `disabled` | `boolean`                                        | false   |                                 |\n| `label`    |            | `string`                                         |         | The label of the input element. |\n| `language` | `language` | `\"json\" \\| \"html\" \\| \"handlebars\" \\| \"razor\" \\| \"css\" \\| \"sass\" \\| \"less\" \\| \"javascript\" \\| \"typescript\"` | \"html\"  |                                 |\n| `name`     | `name`     | `string`                                         | \"text\"  |                                 |\n| `readonly` | `readonly` | `boolean`                                        | false   |                                 |\n| `required` | `required` | `boolean`                                        | false   |                                 |\n| `value`    | `value`    | `string \\| undefined`                            |         |                                 |\n\n## Methods\n\n| Method                    | Type                 |\n|---------------------------|----------------------|\n| `checkValidity`           | `(): boolean`        |\n| `formResetCallback`       | `(): void`           |\n| `handleColorSchemeToggle` | `(): void`           |\n| `handleInput`             | `(event: any): void` |\n| `renderInput`             | `(id: string): any`  |\n\n## Events\n\n| Event   |\n|---------|\n| `input` |\n\n## Slots\n\n| Name   | Description                                     |\n|--------|-------------------------------------------------|\n| `hint` | Receives optional descriptions below the input. |\n\n## CSS Custom Properties\n\n| Property                            | Description                                      |\n|-------------------------------------|--------------------------------------------------|\n| `--wcp-input-code-dark-background`  | The background color of the element in dark mode. |\n| `--wcp-input-code-dark-border`      | The border color of the element in dark mode.    |\n| `--wcp-input-code-dark-color`       | The font color of the input element in dark mode. |\n| `--wcp-input-code-hint-size`        | The font size of the hint.                       |\n| `--wcp-input-code-label-size`       | The font size of the label.                      |\n| `--wcp-input-code-light-background` | The background color of the element in light mode. |\n| `--wcp-input-code-light-border`     | The border color of the element in light mode.   |\n| `--wcp-input-code-light-color`      | The font color of the input element in light mode. |\n| `--wcp-input-code-spacing`          | The inner spacing of the input element.          |\n",
          "groups": [
            "forms"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputCode",
          "declaration": {
            "name": "InputCode",
            "module": "src/components/forms/input-code/input-code.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-input-code",
          "declaration": {
            "name": "InputCode",
            "module": "src/components/forms/input-code/input-code.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-number/input-number.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A numeric input element using the wcp style. Fully form aware.",
          "name": "InputNumber",
          "cssProperties": [
            {
              "description": "The font size of the hint.",
              "name": "--wcp-input-number-hint-size"
            },
            {
              "description": "The font size of the label.",
              "name": "--wcp-input-number-label-size"
            },
            {
              "description": "The inner spacing of the input element.",
              "name": "--wcp-input-number-spacing"
            },
            {
              "description": "The background color of the element in dark mode.",
              "name": "--wcp-input-number-dark-background"
            },
            {
              "description": "The border color of the element in dark mode.",
              "name": "--wcp-input-number-dark-border"
            },
            {
              "description": "The font color of the input element in dark mode.",
              "name": "--wcp-input-number-dark-color"
            },
            {
              "description": "The background color of the element in light mode.",
              "name": "--wcp-input-number-light-background"
            },
            {
              "description": "The border color of the element in light mode.",
              "name": "--wcp-input-number-light-border"
            },
            {
              "description": "The font color of the input element in light mode.",
              "name": "--wcp-input-number-light-color"
            }
          ],
          "slots": [
            {
              "description": "Receives optional descriptions below the input.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#initialValue",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "autocomplete",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'text'",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The label of the input element.",
              "name": "label",
              "kind": "field"
            }
          ],
          "attributes": [
            {
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "autocomplete"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'text'",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "Editable()",
              "module": "src/components/forms/input-number/input-number.component.ts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-number",
          "examples": [
            "## With optional label\n```html\n<wcp-input-number label=\"With optional label\"></wcp-input-number>\n```",
            "## With optional initial value\n```html\n<wcp-input-number label=\"With optional initial value\" value=\"23\"></wcp-input-number>\n```",
            "## Used within a form\n```html\n<form>\n  <wcp-input-number label=\"Fully form enabled component\"></wcp-input-number>\n  <button type=\"submit\">Submit</button>\n  <button type=\"reset\">Reset</button>\n</form>\n```"
          ],
          "readme": "# wcp-input-number\n\nA numeric input element using the wcp style. Fully form aware.\n\n## Examples\n\n## With optional label\n\n```html\n<wcp-input-number label=\"With optional label\"></wcp-input-number>\n```\n\n## With optional initial value\n\n```html\n<wcp-input-number label=\"With optional initial value\" value=\"23\"></wcp-input-number>\n```\n\n## Used within a form\n\n```html\n<form>\n  <wcp-input-number label=\"Fully form enabled component\"></wcp-input-number>\n  <button type=\"submit\">Submit</button>\n  <button type=\"reset\">Reset</button>\n</form>\n```\n\n## Properties\n\n| Property       | Attribute      | Type                  | Default | Description                     |\n|----------------|----------------|-----------------------|---------|---------------------------------|\n| `autocomplete` | `autocomplete` | `boolean`             | false   |                                 |\n| `disabled`     | `disabled`     | `boolean`             | false   |                                 |\n| `label`        |                | `string`              |         | The label of the input element. |\n| `name`         | `name`         | `string`              | \"text\"  |                                 |\n| `readonly`     | `readonly`     | `boolean`             | false   |                                 |\n| `required`     | `required`     | `boolean`             | false   |                                 |\n| `value`        | `value`        | `number \\| undefined` |         |                                 |\n\n## Methods\n\n| Method              | Type                 |\n|---------------------|----------------------|\n| `checkValidity`     | `(): boolean`        |\n| `formResetCallback` | `(): void`           |\n| `handleInput`       | `(event: any): void` |\n| `renderInput`       | `(id: string): any`  |\n\n## Slots\n\n| Name   | Description                                     |\n|--------|-------------------------------------------------|\n| `hint` | Receives optional descriptions below the input. |\n\n## CSS Custom Properties\n\n| Property                              | Description                                      |\n|---------------------------------------|--------------------------------------------------|\n| `--wcp-input-number-dark-background`  | The background color of the element in dark mode. |\n| `--wcp-input-number-dark-border`      | The border color of the element in dark mode.    |\n| `--wcp-input-number-dark-color`       | The font color of the input element in dark mode. |\n| `--wcp-input-number-hint-size`        | The font size of the hint.                       |\n| `--wcp-input-number-label-size`       | The font size of the label.                      |\n| `--wcp-input-number-light-background` | The background color of the element in light mode. |\n| `--wcp-input-number-light-border`     | The border color of the element in light mode.   |\n| `--wcp-input-number-light-color`      | The font color of the input element in light mode. |\n| `--wcp-input-number-spacing`          | The inner spacing of the input element.          |\n",
          "groups": [
            "forms"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputNumber",
          "declaration": {
            "name": "InputNumber",
            "module": "src/components/forms/input-number/input-number.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-input-number",
          "declaration": {
            "name": "InputNumber",
            "module": "src/components/forms/input-number/input-number.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-radio/input-radio.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A radio input element using the wcp style. Fully form aware.",
          "name": "InputRadio",
          "cssProperties": [
            {
              "description": "The size of the radio input.",
              "name": "--wcp-input-radio-size"
            },
            {
              "description": "The font size of the label.",
              "name": "--wcp-input-radio-label-size"
            },
            {
              "description": "The font size of the hint.",
              "name": "--wcp-input-radio-hint-size"
            },
            {
              "description": "The leading distance of the label to the input.",
              "name": "--wcp-input-radio-spacing"
            },
            {
              "description": "The border radius of the radio input.",
              "name": "--wcp-input-radio-border-radius"
            },
            {
              "description": "The border size of the radio input.",
              "name": "--wcp-input-radio-border-size"
            },
            {
              "description": "The background color of the radio input in dark mode.",
              "name": "--wcp-input-radio-dark-background"
            },
            {
              "description": "The border color of the radio input in dark mode.",
              "name": "--wcp-input-radio-dark-border"
            },
            {
              "description": "The fill color of the radio input when checked in dark mode.",
              "name": "--wcp-input-radio-dark-color"
            },
            {
              "description": "The background color of the radio input in light mode.",
              "name": "--wcp-input-radio-light-background"
            },
            {
              "description": "The border color of the radio input in light mode.",
              "name": "--wcp-input-radio-light-border"
            },
            {
              "description": "The fill color of the radio input when checked in light mode.",
              "name": "--wcp-input-radio-light-color"
            }
          ],
          "slots": [
            {
              "description": "Receives optional descriptions below the input.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#checked",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#initialChecked",
              "privacy": "private",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'radio'",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "autocomplete",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "'on'",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The label of the input element.",
              "name": "label",
              "kind": "field"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'radio'",
              "fieldName": "name"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "autocomplete"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "fieldName": "checked"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "'on'",
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "Editable({ hasBeforeSlot: false, hasBorder: false })",
              "module": "src/components/forms/input-radio/input-radio.component.ts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-radio",
          "examples": [
            "## With optional label\n```html\n<wcp-input-radio label=\"With optional label\"></wcp-input-radio>\n```",
            "## With initial value\n```html\n<wcp-input-radio checked label=\"With optional initial value\"></wcp-input-radio>\n```",
            "## Used within a form\n```html\n<form>\n  <wcp-input-radio label=\"Fully form enabled component\"></wcp-input-radio>\n  <button type=\"submit\">Submit</button>\n  <button type=\"reset\">Reset</button>\n</form>\n```"
          ],
          "readme": "# wcp-input-radio\n\nA radio input element using the wcp style. Fully form aware.\n\n## Examples\n\n## With optional label\n\n```html\n<wcp-input-radio label=\"With optional label\"></wcp-input-radio>\n```\n\n## With initial value\n\n```html\n<wcp-input-radio checked label=\"With optional initial value\"></wcp-input-radio>\n```\n\n## Used within a form\n\n```html\n<form>\n  <wcp-input-radio label=\"Fully form enabled component\"></wcp-input-radio>\n  <button type=\"submit\">Submit</button>\n  <button type=\"reset\">Reset</button>\n</form>\n```\n\n## Properties\n\n| Property       | Attribute      | Type      | Default | Description                     |\n|----------------|----------------|-----------|---------|---------------------------------|\n| `autocomplete` | `autocomplete` | `boolean` | false   |                                 |\n| `checked`      | `checked`      | `boolean` |         |                                 |\n| `disabled`     | `disabled`     | `boolean` | false   |                                 |\n| `label`        |                | `string`  |         | The label of the input element. |\n| `name`         | `name`         | `string`  | \"radio\" |                                 |\n| `required`     | `required`     | `boolean` | false   |                                 |\n| `value`        | `value`        | `string`  | \"on\"    |                                 |\n\n## Methods\n\n| Method              | Type                 |\n|---------------------|----------------------|\n| `checkValidity`     | `(): boolean`        |\n| `formResetCallback` | `(): void`           |\n| `handleInput`       | `(event: any): void` |\n| `renderInput`       | `(id: string): any`  |\n\n## Slots\n\n| Name   | Description                                     |\n|--------|-------------------------------------------------|\n| `hint` | Receives optional descriptions below the input. |\n\n## CSS Custom Properties\n\n| Property                             | Description                                      |\n|--------------------------------------|--------------------------------------------------|\n| `--wcp-input-radio-border-radius`    | The border radius of the radio input.            |\n| `--wcp-input-radio-border-size`      | The border size of the radio input.              |\n| `--wcp-input-radio-dark-background`  | The background color of the radio input in dark mode. |\n| `--wcp-input-radio-dark-border`      | The border color of the radio input in dark mode. |\n| `--wcp-input-radio-dark-color`       | The fill color of the radio input when checked in dark mode. |\n| `--wcp-input-radio-hint-size`        | The font size of the hint.                       |\n| `--wcp-input-radio-label-size`       | The font size of the label.                      |\n| `--wcp-input-radio-light-background` | The background color of the radio input in light mode. |\n| `--wcp-input-radio-light-border`     | The border color of the radio input in light mode. |\n| `--wcp-input-radio-light-color`      | The fill color of the radio input when checked in light mode. |\n| `--wcp-input-radio-size`             | The size of the radio input.                     |\n| `--wcp-input-radio-spacing`          | The leading distance of the label to the input.  |\n",
          "groups": [
            "forms"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputRadio",
          "declaration": {
            "name": "InputRadio",
            "module": "src/components/forms/input-radio/input-radio.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-input-radio",
          "declaration": {
            "name": "InputRadio",
            "module": "src/components/forms/input-radio/input-radio.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-select/input-select-option.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A helper element to declare options for a `wcp-input-select` element.",
          "name": "InputSelectOption",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Element | ShadowRoot"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "value"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-select-option",
          "examples": [],
          "readme": "# wcp-input-select-option\n\nA helper element to declare options for a `wcp-input-select` element.\n\n## Properties\n\n| Property   | Attribute  | Type                  | Default |\n|------------|------------|-----------------------|---------|\n| `disabled` | `disabled` | `boolean`             | false   |\n| `label`    | `label`    | `string \\| undefined` |         |\n| `value`    | `value`    | `string \\| undefined` |         |\n",
          "groups": [
            "forms"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputSelectOption",
          "declaration": {
            "name": "InputSelectOption",
            "module": "src/components/forms/input-select/input-select-option.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-input-select-option",
          "declaration": {
            "name": "InputSelectOption",
            "module": "src/components/forms/input-select/input-select-option.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-select/input-select.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A numeric input element using the wcp style. Fully form aware.",
          "name": "InputSelect",
          "cssProperties": [
            {
              "description": "The size of the arrow icon.",
              "name": "--wcp-input-select-arrow-size"
            },
            {
              "description": "The font size of the hint.",
              "name": "--wcp-input-select-hint-size"
            },
            {
              "description": "The font size of the label.",
              "name": "--wcp-input-select-label-size"
            },
            {
              "description": "The inner spacing of the input element.",
              "name": "--wcp-input-select-spacing"
            },
            {
              "description": "The background color of the element in dark mode.",
              "name": "--wcp-input-select-dark-background"
            },
            {
              "description": "The border color of the element in dark mode.",
              "name": "--wcp-input-select-dark-border"
            },
            {
              "description": "The font color of the input element in dark mode.",
              "name": "--wcp-input-select-dark-color"
            },
            {
              "description": "The background color of the element in light mode.",
              "name": "--wcp-input-select-light-background"
            },
            {
              "description": "The border color of the element in light mode.",
              "name": "--wcp-input-select-light-border"
            },
            {
              "description": "The font color of the input element in light mode.",
              "name": "--wcp-input-select-light-color"
            }
          ],
          "slots": [
            {
              "type": {
                "text": "<wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>"
              },
              "description": "Projects options into the select elements dropdown menu.",
              "name": ""
            },
            {
              "description": "Receives optional descriptions below the input.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#initialValue",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLSelectElement"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "autocomplete",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'text'",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The label of the input element.",
              "name": "label",
              "kind": "field"
            }
          ],
          "attributes": [
            {
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "autocomplete"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'text'",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "Editable({ hasAfterSlot: false })",
              "module": "src/components/forms/input-select/input-select.component.ts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-select",
          "examples": [
            "## With optional label\n```html\n<wcp-input-select label=\"With optional label\">\n  <wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>\n  <wcp-input-select-option value=\"bar\" label=\"Bar\"></wcp-input-select-option>\n  <wcp-input-select-option value=\"baz\" label=\"Baz\"></wcp-input-select-option>\n</wcp-input-select>\n```",
            "## With disabled options\n```html\n<wcp-input-select label=\"With disabled options\">\n  <wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>\n  <wcp-input-select-option value=\"bar\" label=\"Bar\" disabled></wcp-input-select-option>\n  <wcp-input-select-option value=\"baz\" label=\"Baz\"></wcp-input-select-option>\n</wcp-input-select>\n```",
            "## With optional initial value\n```html\n<wcp-input-select label=\"With optional initial value\" value=\"bar\">\n  <wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>\n  <wcp-input-select-option value=\"bar\" label=\"Bar\"></wcp-input-select-option>\n  <wcp-input-select-option value=\"baz\" label=\"Baz\"></wcp-input-select-option>\n</wcp-input-select>\n```",
            "## Used within a form\n```html\n<form>\n  <wcp-input-select label=\"Fully form enabled component\">\n    <wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>\n    <wcp-input-select-option value=\"bar\" label=\"Bar\"></wcp-input-select-option>\n    <wcp-input-select-option value=\"baz\" label=\"Baz\"></wcp-input-select-option>\n  </wcp-input-select>\n  <button type=\"submit\">Submit</button>\n  <button type=\"reset\">Reset</button>\n</form>\n```"
          ],
          "readme": "# wcp-input-select\n\nA numeric input element using the wcp style. Fully form aware.\n\n## Examples\n\n## With optional label\n\n```html\n<wcp-input-select label=\"With optional label\">\n  <wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>\n  <wcp-input-select-option value=\"bar\" label=\"Bar\"></wcp-input-select-option>\n  <wcp-input-select-option value=\"baz\" label=\"Baz\"></wcp-input-select-option>\n</wcp-input-select>\n```\n\n## With disabled options\n\n```html\n<wcp-input-select label=\"With disabled options\">\n  <wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>\n  <wcp-input-select-option value=\"bar\" label=\"Bar\" disabled></wcp-input-select-option>\n  <wcp-input-select-option value=\"baz\" label=\"Baz\"></wcp-input-select-option>\n</wcp-input-select>\n```\n\n## With optional initial value\n\n```html\n<wcp-input-select label=\"With optional initial value\" value=\"bar\">\n  <wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>\n  <wcp-input-select-option value=\"bar\" label=\"Bar\"></wcp-input-select-option>\n  <wcp-input-select-option value=\"baz\" label=\"Baz\"></wcp-input-select-option>\n</wcp-input-select>\n```\n\n## Used within a form\n\n```html\n<form>\n  <wcp-input-select label=\"Fully form enabled component\">\n    <wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>\n    <wcp-input-select-option value=\"bar\" label=\"Bar\"></wcp-input-select-option>\n    <wcp-input-select-option value=\"baz\" label=\"Baz\"></wcp-input-select-option>\n  </wcp-input-select>\n  <button type=\"submit\">Submit</button>\n  <button type=\"reset\">Reset</button>\n</form>\n```\n\n## Properties\n\n| Property       | Attribute      | Type                  | Default | Description                     |\n|----------------|----------------|-----------------------|---------|---------------------------------|\n| `autocomplete` | `autocomplete` | `boolean`             | false   |                                 |\n| `disabled`     | `disabled`     | `boolean`             | false   |                                 |\n| `label`        |                | `string`              |         | The label of the input element. |\n| `name`         | `name`         | `string`              | \"text\"  |                                 |\n| `readonly`     | `readonly`     | `boolean`             | false   |                                 |\n| `required`     | `required`     | `boolean`             | false   |                                 |\n| `value`        | `value`        | `string \\| undefined` |         |                                 |\n\n## Methods\n\n| Method              | Type                 |\n|---------------------|----------------------|\n| `checkValidity`     | `(): boolean`        |\n| `formResetCallback` | `(): void`           |\n| `handleInput`       | `(event: any): void` |\n| `handleSlotChange`  | `(event: any): void` |\n| `renderInput`       | `(id: string): any`  |\n\n## Slots\n\n| Name   | Description                                      |\n|--------|--------------------------------------------------|\n|        | Projects options into the select elements dropdown menu. |\n| `hint` | Receives optional descriptions below the input.  |\n\n## CSS Custom Properties\n\n| Property                              | Description                                      |\n|---------------------------------------|--------------------------------------------------|\n| `--wcp-input-select-arrow-size`       | The size of the arrow icon.                      |\n| `--wcp-input-select-dark-background`  | The background color of the element in dark mode. |\n| `--wcp-input-select-dark-border`      | The border color of the element in dark mode.    |\n| `--wcp-input-select-dark-color`       | The font color of the input element in dark mode. |\n| `--wcp-input-select-hint-size`        | The font size of the hint.                       |\n| `--wcp-input-select-label-size`       | The font size of the label.                      |\n| `--wcp-input-select-light-background` | The background color of the element in light mode. |\n| `--wcp-input-select-light-border`     | The border color of the element in light mode.   |\n| `--wcp-input-select-light-color`      | The font color of the input element in light mode. |\n| `--wcp-input-select-spacing`          | The inner spacing of the input element.          |\n",
          "groups": [
            "forms"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputSelect",
          "declaration": {
            "name": "InputSelect",
            "module": "src/components/forms/input-select/input-select.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-input-select",
          "declaration": {
            "name": "InputSelect",
            "module": "src/components/forms/input-select/input-select.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-text/input-text.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A text input element using the wcp style. Fully form aware.\nCan display multiline text (textarea) if configured to do so.",
          "name": "InputText",
          "cssProperties": [
            {
              "description": "The font size of the hint.",
              "name": "--wcp-input-text-hint-size"
            },
            {
              "description": "The font size of the label.",
              "name": "--wcp-input-text-label-size"
            },
            {
              "description": "The inner spacing of the input element.",
              "name": "--wcp-input-text-spacing"
            },
            {
              "description": "The background color of the element in dark mode.",
              "name": "--wcp-input-text-dark-background"
            },
            {
              "description": "The border color of the element in dark mode.",
              "name": "--wcp-input-text-dark-border"
            },
            {
              "description": "The font color of the input element in dark mode.",
              "name": "--wcp-input-text-dark-color"
            },
            {
              "description": "The background color of the element in light mode.",
              "name": "--wcp-input-text-light-background"
            },
            {
              "description": "The border color of the element in light mode.",
              "name": "--wcp-input-text-light-border"
            },
            {
              "description": "The font color of the input element in light mode.",
              "name": "--wcp-input-text-light-color"
            }
          ],
          "slots": [
            {
              "description": "Receives optional descriptions below the input.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#initialValue",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | HTMLTextAreaElement | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "multiline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "multiline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "autocomplete",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'text'",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'text' | 'email' | 'password' | 'search' | 'tel' | 'url'"
              },
              "default": "'text'",
              "description": "Can be set to to `text`, `email`, `password`, `search`, `tel`, or `url`. \\\nBeware that this will be ignored if combined with the `multiline` attribute.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The label of the input element.",
              "name": "label",
              "kind": "field"
            }
          ],
          "attributes": [
            {
              "name": "multiline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "multiline"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "autocomplete"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'text'",
              "fieldName": "name"
            },
            {
              "name": "type",
              "type": {
                "text": "'text' | 'email' | 'password' | 'search' | 'tel' | 'url'"
              },
              "default": "'text'",
              "description": "Can be set to to `text`, `email`, `password`, `search`, `tel`, or `url`. \\\nBeware that this will be ignored if combined with the `multiline` attribute.",
              "fieldName": "type"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "value"
            }
          ],
          "mixins": [
            {
              "name": "Editable()",
              "module": "src/components/forms/input-text/input-text.component.ts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-text",
          "examples": [
            "## With optional label\n```html\n<wcp-input-text label=\"With optional label\"></wcp-input-text>\n```",
            "## With optional initial value\n```html\n<wcp-input-text label=\"With optional initial value\" value=\"Foo\"></wcp-input-text>\n```",
            "## Multiline\n```html\n<wcp-input-text multiline label=\"With multiline value\"></wcp-input-text>\n```",
            "## Used within a form\n```html\n<form>\n  <wcp-input-text label=\"Fully form enabled component\"></wcp-input-text>\n  <button type=\"submit\">Submit</button>\n  <button type=\"reset\">Reset</button>\n</form>\n```"
          ],
          "readme": "# wcp-input-text\n\nA text input element using the wcp style. Fully form aware.\nCan display multiline text (textarea) if configured to do so.\n\n## Examples\n\n## With optional label\n\n```html\n<wcp-input-text label=\"With optional label\"></wcp-input-text>\n```\n\n## With optional initial value\n\n```html\n<wcp-input-text label=\"With optional initial value\" value=\"Foo\"></wcp-input-text>\n```\n\n## Multiline\n\n```html\n<wcp-input-text multiline label=\"With multiline value\"></wcp-input-text>\n```\n\n## Used within a form\n\n```html\n<form>\n  <wcp-input-text label=\"Fully form enabled component\"></wcp-input-text>\n  <button type=\"submit\">Submit</button>\n  <button type=\"reset\">Reset</button>\n</form>\n```\n\n## Properties\n\n| Property       | Attribute      | Type                                             | Default | Description                                      |\n|----------------|----------------|--------------------------------------------------|---------|--------------------------------------------------|\n| `autocomplete` | `autocomplete` | `boolean`                                        | false   |                                                  |\n| `disabled`     | `disabled`     | `boolean`                                        | false   |                                                  |\n| `label`        |                | `string`                                         |         | The label of the input element.                  |\n| `multiline`    | `multiline`    | `boolean`                                        | false   |                                                  |\n| `name`         | `name`         | `string`                                         | \"text\"  |                                                  |\n| `readonly`     | `readonly`     | `boolean`                                        | false   |                                                  |\n| `required`     | `required`     | `boolean`                                        | false   |                                                  |\n| `type`         | `type`         | `\"text\" \\| \"email\" \\| \"password\" \\| \"search\" \\| \"tel\" \\| \"url\"` | \"text\"  | Can be set to to `text`, `email`, `password`, `search`, `tel`, or `url`. \\<br />Beware that this will be ignored if combined with the `multiline` attribute. |\n| `value`        | `value`        | `string \\| undefined`                            |         |                                                  |\n\n## Methods\n\n| Method              | Type                 |\n|---------------------|----------------------|\n| `checkValidity`     | `(): boolean`        |\n| `formResetCallback` | `(): void`           |\n| `handleInput`       | `(event: any): void` |\n| `renderInput`       | `(id: string): any`  |\n\n## Slots\n\n| Name   | Description                                     |\n|--------|-------------------------------------------------|\n| `hint` | Receives optional descriptions below the input. |\n\n## CSS Custom Properties\n\n| Property                            | Description                                      |\n|-------------------------------------|--------------------------------------------------|\n| `--wcp-input-text-dark-background`  | The background color of the element in dark mode. |\n| `--wcp-input-text-dark-border`      | The border color of the element in dark mode.    |\n| `--wcp-input-text-dark-color`       | The font color of the input element in dark mode. |\n| `--wcp-input-text-hint-size`        | The font size of the hint.                       |\n| `--wcp-input-text-label-size`       | The font size of the label.                      |\n| `--wcp-input-text-light-background` | The background color of the element in light mode. |\n| `--wcp-input-text-light-border`     | The border color of the element in light mode.   |\n| `--wcp-input-text-light-color`      | The font color of the input element in light mode. |\n| `--wcp-input-text-spacing`          | The inner spacing of the input element.          |\n",
          "groups": [
            "forms"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputText",
          "declaration": {
            "name": "InputText",
            "module": "src/components/forms/input-text/input-text.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-input-text",
          "declaration": {
            "name": "InputText",
            "module": "src/components/forms/input-text/input-text.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/layout/aside/aside.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "To toggle the side bar remotely, you can dispatch a custom event on the global window object:\n```js\nwindow.dispatchEvent(new CustomEvent('wcp-aside:toggle'));\n```\nYou may pass an optional boolean value to the event to toggle the side bar to a specific state:\n```js\nwindow.dispatchEvent(new CustomEvent('wcp-aside:toggle', { detail: true }));\n```",
          "name": "Aside",
          "cssProperties": [
            {
              "description": "The maximum width of the aside bar when visible",
              "name": "--wcp-aside-max-width"
            },
            {
              "description": "Inner padding of the aside bar",
              "name": "--wcp-aside-spacing"
            },
            {
              "description": "The size of the toggle button",
              "name": "--wcp-aside-toggle-size"
            },
            {
              "description": "The background color of the side bar in dark mode",
              "name": "--wcp-aside-dark-background"
            },
            {
              "description": "The color of the side bar in dark mode",
              "name": "--wcp-aside-dark-color"
            },
            {
              "description": "The background color of the side bar in light mode",
              "name": "--wcp-aside-light-background"
            },
            {
              "description": "The color of the side bar in light mode",
              "name": "--wcp-aside-light-color"
            }
          ],
          "slots": [
            {
              "description": "Projects elements aside the main content",
              "name": ""
            },
            {
              "description": "Elements in the fixed header of the side bar",
              "name": "header"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to toggle the width of the aside bar",
              "attribute": "hidden",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'complementary'",
              "description": "Presets the aria role to `complementary` as we do not use te aside element directly",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "emitToggled"
            },
            {
              "kind": "method",
              "name": "handleButtonClick"
            },
            {
              "kind": "field",
              "name": "listenAsideToggle"
            }
          ],
          "attributes": [
            {
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to toggle the width of the aside bar",
              "fieldName": "hidden"
            },
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'complementary'",
              "description": "Presets the aria role to `complementary` as we do not use te aside element directly",
              "fieldName": "role"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [],
          "readme": "# wcp-aside\n\nTo toggle the side bar remotely, you can dispatch a custom event on the global window object:\n```js\nwindow.dispatchEvent(new CustomEvent('wcp-aside:toggle'));\n```\nYou may pass an optional boolean value to the event to toggle the side bar to a specific state:\n```js\nwindow.dispatchEvent(new CustomEvent('wcp-aside:toggle', { detail: true }));\n```\n\n**Mixins:** ColorSchemable\n\n## Properties\n\n| Property            | Attribute | Type      | Default                                          | Description                                      |\n|---------------------|-----------|-----------|--------------------------------------------------|--------------------------------------------------|\n| `hidden`            | `hidden`  | `boolean` | false                                            | Used to toggle the width of the aside bar        |\n| `listenAsideToggle` |           |           | \"(({ detail }: CustomEvent<boolean \\| null>) => {\\n    this.hidden = detail ?? !this.hidden;\\n    this.emitToggled();\\n  }).bind(this)\" |                                                  |\n| `role`              | `role`    | `string`  | \"complementary\"                                  | Presets the aria role to `complementary` as we do not use te aside element directly |\n\n## Methods\n\n| Method              | Type       |\n|---------------------|------------|\n| `emitToggled`       | `(): void` |\n| `handleButtonClick` | `(): void` |\n\n## Events\n\n| Event               | Description                                      |\n|---------------------|--------------------------------------------------|\n| `wcp-aside:toggled` | Dispatches this event when the side bar has been toggled. Do not get confused with the `wcp-aside:toggle` event. |\n\n## Slots\n\n| Name     | Description                                  |\n|----------|----------------------------------------------|\n|          | Projects elements aside the main content     |\n| `header` | Elements in the fixed header of the side bar |\n\n## CSS Custom Properties\n\n| Property                       | Description                                      |\n|--------------------------------|--------------------------------------------------|\n| `--wcp-aside-dark-background`  | The background color of the side bar in dark mode |\n| `--wcp-aside-dark-color`       | The color of the side bar in dark mode           |\n| `--wcp-aside-light-background` | The background color of the side bar in light mode |\n| `--wcp-aside-light-color`      | The color of the side bar in light mode          |\n| `--wcp-aside-max-width`        | The maximum width of the aside bar when visible  |\n| `--wcp-aside-spacing`          | Inner padding of the aside bar                   |\n| `--wcp-aside-toggle-size`      | The size of the toggle button                    |\n",
          "groups": [
            "layout"
          ],
          "tagName": "wcp-aside",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Aside",
          "declaration": {
            "name": "Aside",
            "module": "src/components/layout/aside/aside.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-aside",
          "declaration": {
            "name": "Aside",
            "module": "src/components/layout/aside/aside.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/layout/layout/layout.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Layout",
          "slots": [
            {
              "description": "Shows contents fixed above the aside",
              "name": "header"
            },
            {
              "description": "Projects elements aside the main content",
              "name": "aside"
            },
            {
              "description": "Receives the content of the main section",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-layout>\n  <nav slot=\"aside\">To the left!</nav>\n  <article>Me the important content!</article>\n</wcp-layout>\n```"
          ],
          "readme": "# wcp-layout\n\n## Example\n\n```html\n<wcp-layout>\n  <nav slot=\"aside\">To the left!</nav>\n  <article>Me the important content!</article>\n</wcp-layout>\n```\n\n## Slots\n\n| Name     | Description                              |\n|----------|------------------------------------------|\n|          | Receives the content of the main section |\n| `aside`  | Projects elements aside the main content |\n| `header` | Shows contents fixed above the aside     |\n",
          "groups": [
            "layout"
          ],
          "tagName": "wcp-layout",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Layout",
          "declaration": {
            "name": "Layout",
            "module": "src/components/layout/layout/layout.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-layout",
          "declaration": {
            "name": "Layout",
            "module": "src/components/layout/layout/layout.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/layout/main/main.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Main",
          "slots": [
            {
              "description": "Projects elements to the main content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'main'",
              "description": "Presets the aria role to `main` as we do not use te main element directly",
              "attribute": "role",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'main'",
              "description": "Presets the aria role to `main` as we do not use te main element directly",
              "fieldName": "role"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [],
          "readme": "# wcp-main\n\n## Properties\n\n| Property | Attribute | Type     | Default | Description                                      |\n|----------|-----------|----------|---------|--------------------------------------------------|\n| `role`   | `role`    | `string` | \"main\"  | Presets the aria role to `main` as we do not use te main element directly |\n\n## Slots\n\n| Name | Description                           |\n|------|---------------------------------------|\n|      | Projects elements to the main content |\n",
          "groups": [
            "layout"
          ],
          "tagName": "wcp-main",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Main",
          "declaration": {
            "name": "Main",
            "module": "src/components/layout/main/main.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-main",
          "declaration": {
            "name": "Main",
            "module": "src/components/layout/main/main.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/plugins/preview-editor-link/preview-editor-link.plugin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Links all found custom elements in a preview with their current state to the editor to be further played around with.",
          "name": "PreviewEditorLink",
          "members": [
            {
              "kind": "field",
              "name": "#manifest",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#overlay",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "previewTagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "attribute": "preview-tag-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "available",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'viewer-link'",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Show in viewer'",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "enabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "enabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "#checkAvailability"
            },
            {
              "kind": "method",
              "name": "#attachOverlay"
            },
            {
              "kind": "method",
              "name": "#detachOverlay"
            },
            {
              "kind": "method",
              "name": "#findContainerSlot",
              "return": {
                "type": {
                  "text": "HTMLSlotElement | undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "#observeContainerSlot"
            },
            {
              "kind": "method",
              "name": "#unobserveContainerSlot"
            },
            {
              "kind": "method",
              "name": "#observeContainerScroll"
            },
            {
              "kind": "method",
              "name": "#unobserveContainerScroll"
            },
            {
              "kind": "method",
              "name": "#handleContainerScroll"
            },
            {
              "kind": "method",
              "name": "#handleContainerSlotChange"
            },
            {
              "kind": "method",
              "name": "#attachHints"
            },
            {
              "kind": "method",
              "name": "#attachHint",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#detachHints"
            },
            {
              "kind": "method",
              "name": "#setupHints"
            },
            {
              "kind": "method",
              "name": "#teardownHints"
            },
            {
              "kind": "method",
              "name": "#openViewer",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleToggleClick",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "preview-tag-name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "fieldName": "previewTagName"
            },
            {
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "available"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'viewer-link'",
              "fieldName": "name"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Show in viewer'",
              "fieldName": "label"
            },
            {
              "name": "enabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "enabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-preview-editor-link",
          "examples": [],
          "readme": "# wcp-preview-editor-link\n\nLinks all found custom elements in a preview with their current state to the editor to be further played around with.\n\n## Properties\n\n| Property         | Attribute          | Modifiers | Type               | Default          |\n|------------------|--------------------|-----------|--------------------|------------------|\n| `available`      | `available`        |           | `boolean`          | true             |\n| `container`      |                    | readonly  |                    |                  |\n| `enabled`        | `enabled`          |           | `boolean`          | false            |\n| `label`          | `label`            | readonly  | `\"Show in viewer\"` | \"Show in viewer\" |\n| `name`           | `name`             | readonly  | `\"viewer-link\"`    | \"viewer-link\"    |\n| `previewTagName` | `preview-tag-name` | readonly  | `string`           |                  |\n\n## Methods\n\n| Method                       | Type                   |\n|------------------------------|------------------------|\n| `#attachHint`                | `(element: any): void` |\n| `#attachHints`               | `(): void`             |\n| `#attachOverlay`             | `(): void`             |\n| `#checkAvailability`         | `(): void`             |\n| `#detachHints`               | `(): void`             |\n| `#detachOverlay`             | `(): void`             |\n| `#findContainerSlot`         | `(): any`              |\n| `#handleContainerScroll`     | `(): void`             |\n| `#handleContainerSlotChange` | `(): void`             |\n| `#observeContainerScroll`    | `(): void`             |\n| `#observeContainerSlot`      | `(): void`             |\n| `#openViewer`                | `(element: any): any`  |\n| `#setupHints`                | `(): void`             |\n| `#teardownHints`             | `(): void`             |\n| `#unobserveContainerScroll`  | `(): void`             |\n| `#unobserveContainerSlot`    | `(): void`             |\n| `adoptedCallback`            | `(): void`             |\n\n## Events\n\n| Event                                    |\n|------------------------------------------|\n| `wcp-preview-plugin:availability-change` |\n",
          "groups": [
            "plugins"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PreviewEditorLink",
          "declaration": {
            "name": "PreviewEditorLink",
            "module": "src/components/plugins/preview-editor-link/preview-editor-link.plugin.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-preview-editor-link",
          "declaration": {
            "name": "PreviewEditorLink",
            "module": "src/components/plugins/preview-editor-link/preview-editor-link.plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/plugins/preview-simulate-viewports/preview-simulate-viewports.plugin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Simulates various viewports for a custom element preview.",
          "name": "PreviewSimulateViewports",
          "members": [
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "previewTagName",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "attribute": "preview-tag-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "default": "true",
              "attribute": "available",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'viewport'",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Viewport'",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "simulateViewport",
              "type": {
                "text": "Viewport | undefined"
              },
              "privacy": "private",
              "attribute": "simulate-viewport",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invertSimulatedViewport",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "attribute": "invert-simulated-viewport",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultStyle",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "removeStyle",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "resetStyle",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "prepareStyle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLStyleElement"
                }
              }
            },
            {
              "kind": "method",
              "name": "applyPreviewSize",
              "privacy": "protected",
              "description": "Sets the size of the viewport to simulate its dimensions."
            },
            {
              "kind": "method",
              "name": "applyPreviewScale",
              "privacy": "protected",
              "description": "Scales the sized viewport to fit into the preview container."
            },
            {
              "kind": "method",
              "name": "applyPreviewDimensions",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "emitChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSimulateViewport",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInvertSimulatedViewport"
            }
          ],
          "attributes": [
            {
              "name": "preview-tag-name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "fieldName": "previewTagName"
            },
            {
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "default": "true",
              "fieldName": "available"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'viewport'",
              "fieldName": "name"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Viewport'",
              "fieldName": "label"
            },
            {
              "name": "simulate-viewport",
              "type": {
                "text": "Viewport | undefined"
              },
              "fieldName": "simulateViewport"
            },
            {
              "name": "invert-simulated-viewport",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invertSimulatedViewport"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-preview-simulate-viewports",
          "examples": [],
          "readme": "# wcp-preview-simulate-viewports\n\nSimulates various viewports for a custom element preview.\n\n**Mixins:** ColorSchemable\n\n## Properties\n\n| Property         | Attribute          | Modifiers | Type         | Default    |\n|------------------|--------------------|-----------|--------------|------------|\n| `available`      | `available`        | readonly  | `true`       | true       |\n| `container`      |                    | readonly  |              |            |\n| `label`          | `label`            | readonly  | `\"Viewport\"` | \"Viewport\" |\n| `name`           | `name`             | readonly  | `\"viewport\"` | \"viewport\" |\n| `previewTagName` | `preview-tag-name` | readonly  | `string`     |            |\n\n## Methods\n\n| Method                          | Type       |\n|---------------------------------|------------|\n| `handleInvertSimulatedViewport` | `(): void` |\n\n## Events\n\n| Event                                    |\n|------------------------------------------|\n| `wcp-preview-simulate-viewports:changed` |\n",
          "groups": [
            "plugins"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PreviewSimulateViewports",
          "declaration": {
            "name": "PreviewSimulateViewports",
            "module": "src/components/plugins/preview-simulate-viewports/preview-simulate-viewports.plugin.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-preview-simulate-viewports",
          "declaration": {
            "name": "PreviewSimulateViewports",
            "module": "src/components/plugins/preview-simulate-viewports/preview-simulate-viewports.plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/plugins/stage-editor/stage-editor.plugin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Allows editing a custom element.",
          "name": "StageEditor",
          "members": [
            {
              "kind": "field",
              "name": "#manifest",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_element",
              "type": {
                "text": "Parsed.Element | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_elementData",
              "type": {
                "text": "ElementData | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "previewTagName",
              "attribute": "preview-tag-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "attribute": "data"
            },
            {
              "kind": "field",
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "default": "true",
              "attribute": "available",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'editor'",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Editor'",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "#prepareElementData",
              "parameters": [
                {
                  "name": "compressed",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getElementReference",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Element | undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleControlsInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ detail }",
                  "type": {
                    "text": "CustomEvent<FormData>"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "preview-tag-name",
              "fieldName": "previewTagName"
            },
            {
              "name": "data",
              "fieldName": "data"
            },
            {
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "default": "true",
              "fieldName": "available"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'editor'",
              "fieldName": "name"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Editor'",
              "fieldName": "label"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-stage-editor",
          "examples": [],
          "readme": "# wcp-stage-editor\n\nAllows editing a custom element.\n\n**Mixins:** ColorSchemable\n\n## Properties\n\n| Property         | Attribute          | Modifiers | Type                  | Default  |\n|------------------|--------------------|-----------|-----------------------|----------|\n| `available`      | `available`        | readonly  | `true`                | true     |\n| `data`           | `data`             |           | `string \\| undefined` |          |\n| `label`          | `label`            | readonly  | `\"Editor\"`            | \"Editor\" |\n| `name`           | `name`             | readonly  | `\"editor\"`            | \"editor\" |\n| `previewTagName` | `preview-tag-name` |           | `string`              |          |\n\n## Methods\n\n| Method                | Type                                      |\n|-----------------------|-------------------------------------------|\n| `#prepareElementData` | `(compressed?: string \\| undefined): any` |\n\n## Events\n\n| Event                          |\n|--------------------------------|\n| `wcp-stage-plugin:data-change` |\n",
          "groups": [
            "plugins"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StageEditor",
          "declaration": {
            "name": "StageEditor",
            "module": "src/components/plugins/stage-editor/stage-editor.plugin.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-stage-editor",
          "declaration": {
            "name": "StageEditor",
            "module": "src/components/plugins/stage-editor/stage-editor.plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/plugins/stage-examples/stage-examples.plugin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows the examples of a custom element manifest.",
          "name": "StageExamples",
          "cssProperties": [
            {
              "description": "Spacing between examples.",
              "name": "--wcp-stage-examples-spacing"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#manifest",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_element",
              "type": {
                "text": "Parsed.Element | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "available",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "previewTagName",
              "attribute": "preview-tag-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'examples'",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Examples'",
              "attribute": "label",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "available"
            },
            {
              "name": "preview-tag-name",
              "fieldName": "previewTagName"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'examples'",
              "fieldName": "name"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Examples'",
              "fieldName": "label"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-stage-examples",
          "examples": [],
          "readme": "# wcp-stage-examples\n\nShows the examples of a custom element manifest.\n\n**Mixins:** ColorSchemable\n\n## Properties\n\n| Property         | Attribute          | Modifiers | Type         | Default    |\n|------------------|--------------------|-----------|--------------|------------|\n| `available`      | `available`        |           | `boolean`    | false      |\n| `label`          | `label`            | readonly  | `\"Examples\"` | \"Examples\" |\n| `name`           | `name`             | readonly  | `\"examples\"` | \"examples\" |\n| `previewTagName` | `preview-tag-name` |           | `string`     |            |\n\n## Events\n\n| Event                                  |\n|----------------------------------------|\n| `wcp-stage-plugin:availability-change` |\n\n## CSS Custom Properties\n\n| Property                       | Description               |\n|--------------------------------|---------------------------|\n| `--wcp-stage-examples-spacing` | Spacing between examples. |\n",
          "groups": [
            "plugins"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StageExamples",
          "declaration": {
            "name": "StageExamples",
            "module": "src/components/plugins/stage-examples/stage-examples.plugin.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-stage-examples",
          "declaration": {
            "name": "StageExamples",
            "module": "src/components/plugins/stage-examples/stage-examples.plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/plugins/stage-readme/stage-readme.plugin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows the readme of a custom element.",
          "name": "StageReadme",
          "members": [
            {
              "kind": "field",
              "name": "#manifest",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_element",
              "type": {
                "text": "Parsed.Element | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "available",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "previewTagName",
              "attribute": "preview-tag-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'readme'",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Readme'",
              "attribute": "label",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "available"
            },
            {
              "name": "preview-tag-name",
              "fieldName": "previewTagName"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'readme'",
              "fieldName": "name"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Readme'",
              "fieldName": "label"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-stage-readme",
          "examples": [],
          "readme": "# wcp-stage-readme\n\nShows the readme of a custom element.\n\n**Mixins:** ColorSchemable\n\n## Properties\n\n| Property         | Attribute          | Modifiers | Type       | Default  |\n|------------------|--------------------|-----------|------------|----------|\n| `available`      | `available`        |           | `boolean`  | false    |\n| `label`          | `label`            | readonly  | `\"Readme\"` | \"Readme\" |\n| `name`           | `name`             | readonly  | `\"readme\"` | \"readme\" |\n| `previewTagName` | `preview-tag-name` |           | `string`   |          |\n\n## Events\n\n| Event                                  |\n|----------------------------------------|\n| `wcp-stage-plugin:availability-change` |\n",
          "groups": [
            "plugins"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StageReadme",
          "declaration": {
            "name": "StageReadme",
            "module": "src/components/plugins/stage-readme/stage-readme.plugin.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-stage-readme",
          "declaration": {
            "name": "StageReadme",
            "module": "src/components/plugins/stage-readme/stage-readme.plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/root/root-navigation/root-navigation.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Manages the main root-navigation in the application root.",
          "name": "RootNavigation",
          "cssProperties": [
            {
              "description": "The spacing of the empty message.",
              "name": "--wcp-root-navigation-empty-message-spacing"
            },
            {
              "description": "The font size of the empty message.",
              "name": "--wcp-root-navigation-empty-message-font-size"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#items",
              "privacy": "private",
              "type": {
                "text": "GroupedNavigationItems"
              },
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "#searchTerms",
              "privacy": "private",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "filteredItems",
              "type": {
                "text": "GroupedNavigationItems"
              },
              "privacy": "private",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "currentPath",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "current-path",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "emptyMessage",
              "type": {
                "text": "string"
              },
              "default": "'No readmes nor elements found.'",
              "attribute": "empty-message",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minSearchLength",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "min-search-length",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "searchTerms"
            },
            {
              "kind": "field",
              "name": "items"
            }
          ],
          "attributes": [
            {
              "name": "current-path",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "currentPath"
            },
            {
              "name": "empty-message",
              "type": {
                "text": "string"
              },
              "default": "'No readmes nor elements found.'",
              "fieldName": "emptyMessage"
            },
            {
              "name": "min-search-length",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "minSearchLength"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-root-navigation",
          "examples": [],
          "readme": "# wcp-root-navigation\n\nManages the main root-navigation in the application root.\n\n## Properties\n\n| Property          | Attribute           | Type                  | Default                          |\n|-------------------|---------------------|-----------------------|----------------------------------|\n| `currentPath`     | `current-path`      | `string \\| undefined` |                                  |\n| `emptyMessage`    | `empty-message`     | `string`              | \"No readmes nor elements found.\" |\n| `items`           |                     |                       |                                  |\n| `minSearchLength` | `min-search-length` | `number`              | 1                                |\n| `searchTerms`     |                     | `object`              |                                  |\n\n## CSS Custom Properties\n\n| Property                                        | Description                         |\n|-------------------------------------------------|-------------------------------------|\n| `--wcp-root-navigation-empty-message-font-size` | The font size of the empty message. |\n| `--wcp-root-navigation-empty-message-spacing`   | The spacing of the empty message.   |\n",
          "groups": [
            "root"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RootNavigation",
          "declaration": {
            "name": "RootNavigation",
            "module": "src/components/root/root-navigation/root-navigation.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-root-navigation",
          "declaration": {
            "name": "RootNavigation",
            "module": "src/components/root/root-navigation/root-navigation.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/button/button.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a button element.",
          "name": "Button",
          "cssProperties": [
            {
              "description": "Background color of the button if non interactive in dark mode",
              "name": "--wcp-button-dark-passive-background"
            },
            {
              "description": "Border color of the button if non interactive in dark mode",
              "name": "--wcp-button-dark-passive-border-color"
            },
            {
              "description": "Text color of the button if non interactive in dark mode",
              "name": "--wcp-button-dark-passive-color"
            },
            {
              "description": "Background color of the button if hovered in dark mode",
              "name": "--wcp-button-dark-hover-background"
            },
            {
              "description": "Border color of the button if hovered in dark mode",
              "name": "--wcp-button-dark-hover-border-color"
            },
            {
              "description": "Text color of the button if hovered in dark mode",
              "name": "--wcp-button-dark-hover-color"
            },
            {
              "description": "Background color of the button if active in dark mode",
              "name": "--wcp-button-dark-active-background"
            },
            {
              "description": "Border color of the button if active in dark mode",
              "name": "--wcp-button-dark-active-border-color"
            },
            {
              "description": "Text color of the button if active in dark mode",
              "name": "--wcp-button-dark-active-color"
            },
            {
              "description": "Background color of the button if non interactive in light mode",
              "name": "--wcp-button-light-passive-background"
            },
            {
              "description": "Border color of the button if non interactive in light mode",
              "name": "--wcp-button-light-passive-border-color"
            },
            {
              "description": "Text color of the button if non interactive in light mode",
              "name": "--wcp-button-light-passive-color"
            },
            {
              "description": "Background color of the button if hovered in light mode",
              "name": "--wcp-button-light-hover-background"
            },
            {
              "description": "Border color of the button if hovered in light mode",
              "name": "--wcp-button-light-hover-border-color"
            },
            {
              "description": "Text color of the button if hovered in light mode",
              "name": "--wcp-button-light-hover-color"
            },
            {
              "description": "Background color of the button if active in light mode",
              "name": "--wcp-button-light-active-background"
            },
            {
              "description": "Border color of the button if active in light mode",
              "name": "--wcp-button-light-active-border-color"
            },
            {
              "description": "Text color of the button if active in light mode",
              "name": "--wcp-button-light-active-color"
            }
          ],
          "slots": [
            {
              "type": {
                "text": "Some <i>Button</i>"
              },
              "description": "Default slot for the button content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "readonly": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "nowrap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "nowrap",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stretched",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows stretching the button across the full width of its container.\nThis is useful for buttons that are used in a narrow form, or in general\non small viewports, like handheld devices.",
              "attribute": "stretched",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "kind",
              "type": {
                "text": "'button' | 'icon'"
              },
              "default": "'button'",
              "description": "The kind of button to render. Either like a conventional button, or for\nicons. Icon buttons are quadratic and will show a radial background on interaction.",
              "attribute": "kind",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "default": "'button'",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | undefined"
              },
              "attribute": "target",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleButtonClick"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "nowrap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "nowrap"
            },
            {
              "name": "stretched",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows stretching the button across the full width of its container.\nThis is useful for buttons that are used in a narrow form, or in general\non small viewports, like handheld devices.",
              "fieldName": "stretched"
            },
            {
              "name": "kind",
              "type": {
                "text": "'button' | 'icon'"
              },
              "default": "'button'",
              "description": "The kind of button to render. Either like a conventional button, or for\nicons. Icon buttons are quadratic and will show a radial background on interaction.",
              "fieldName": "kind"
            },
            {
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "default": "'button'",
              "fieldName": "type"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | undefined"
              },
              "fieldName": "target"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "## Default button\n\n```html\n<wcp-button>Click me!</wcp-button>\n```",
            "## Disabled button\n\n```html\n<wcp-button disabled>Try to click me!</wcp-button>\n```",
            "## Button with icon\n\n```html\n<wcp-button kind=\"icon\">\n <wcp-icon name=\"menu\"></wcp-icon>\n</wcp-button>\n```",
            "## Force active state\n\n```html\n<wcp-button class=\"active\">Link</wcp-button>\n```",
            "## Use as link\n\n```html\n<wcp-button href=\".\">Link</wcp-button>\n```",
            "## Displaced to the right\n\n```html\n<wcp-button style=\"position:relative;left:calc(100% - 40px);transform:translateX(-100%)\">\n  Try to find me!\n</wcp-button>\n```",
            "## Use as native submit button in form\n\n```html\n<form onsubmit=\"alert('Submit!'); return false\">\n <wcp-button type=\"submit\">Submit</wcp-button>\n</form>\n```",
            "## Use as native reset button in form\n\n```html\n<form onreset=\"alert('Reset!'); return false\">\n  <wcp-button type=\"reset\">Reset</wcp-button>\n</form>\n```"
          ],
          "readme": "# wcp-button\n\nShows a button element.\n\n**Mixins:** ColorSchemable\n\n## Examples\n\n## Default button\n\n```html\n<wcp-button>Click me!</wcp-button>\n```\n\n## Disabled button\n\n```html\n<wcp-button disabled>Try to click me!</wcp-button>\n```\n\n## Button with icon\n\n```html\n<wcp-button kind=\"icon\">\n <wcp-icon name=\"menu\"></wcp-icon>\n</wcp-button>\n```\n\n## Force active state\n\n```html\n<wcp-button class=\"active\">Link</wcp-button>\n```\n\n## Use as link\n\n```html\n<wcp-button href=\".\">Link</wcp-button>\n```\n\n## Displaced to the right\n\n```html\n<wcp-button style=\"position:relative;left:calc(100% - 40px);transform:translateX(-100%)\">\n  Try to find me!\n</wcp-button>\n```\n\n## Use as native submit button in form\n\n```html\n<form onsubmit=\"alert('Submit!'); return false\">\n <wcp-button type=\"submit\">Submit</wcp-button>\n</form>\n```\n\n## Use as native reset button in form\n\n```html\n<form onreset=\"alert('Reset!'); return false\">\n  <wcp-button type=\"reset\">Reset</wcp-button>\n</form>\n```\n\n## Properties\n\n| Property    | Attribute   | Type                                             | Default  | Description                                      |\n|-------------|-------------|--------------------------------------------------|----------|--------------------------------------------------|\n| `disabled`  | `disabled`  | `boolean`                                        | false    |                                                  |\n| `href`      | `href`      | `string \\| undefined`                            |          |                                                  |\n| `kind`      | `kind`      | `\"button\" \\| \"icon\"`                             | \"button\" | The kind of button to render. Either like a conventional button, or for<br />icons. Icon buttons are quadratic and will show a radial background on interaction. |\n| `nowrap`    | `nowrap`    | `boolean`                                        | false    |                                                  |\n| `stretched` | `stretched` | `boolean`                                        | false    | Allows stretching the button across the full width of its container.<br />This is useful for buttons that are used in a narrow form, or in general<br />on small viewports, like handheld devices. |\n| `target`    | `target`    | `\"_self\" \\| \"_blank\" \\| \"_parent\" \\| \"_top\" \\| undefined` |          |                                                  |\n| `type`      | `type`      | `\"button\" \\| \"reset\" \\| \"submit\"`                | \"button\" |                                                  |\n\n## Methods\n\n| Method              | Type       |\n|---------------------|------------|\n| `handleButtonClick` | `(): void` |\n\n## Slots\n\n| Name | Description                         |\n|------|-------------------------------------|\n|      | Default slot for the button content |\n\n## CSS Custom Properties\n\n| Property                                  | Description                                      |\n|-------------------------------------------|--------------------------------------------------|\n| `--wcp-button-dark-active-background`     | Background color of the button if active in dark mode |\n| `--wcp-button-dark-active-border-color`   | Border color of the button if active in dark mode |\n| `--wcp-button-dark-active-color`          | Text color of the button if active in dark mode  |\n| `--wcp-button-dark-hover-background`      | Background color of the button if hovered in dark mode |\n| `--wcp-button-dark-hover-border-color`    | Border color of the button if hovered in dark mode |\n| `--wcp-button-dark-hover-color`           | Text color of the button if hovered in dark mode |\n| `--wcp-button-dark-passive-background`    | Background color of the button if non interactive in dark mode |\n| `--wcp-button-dark-passive-border-color`  | Border color of the button if non interactive in dark mode |\n| `--wcp-button-dark-passive-color`         | Text color of the button if non interactive in dark mode |\n| `--wcp-button-light-active-background`    | Background color of the button if active in light mode |\n| `--wcp-button-light-active-border-color`  | Border color of the button if active in light mode |\n| `--wcp-button-light-active-color`         | Text color of the button if active in light mode |\n| `--wcp-button-light-hover-background`     | Background color of the button if hovered in light mode |\n| `--wcp-button-light-hover-border-color`   | Border color of the button if hovered in light mode |\n| `--wcp-button-light-hover-color`          | Text color of the button if hovered in light mode |\n| `--wcp-button-light-passive-background`   | Background color of the button if non interactive in light mode |\n| `--wcp-button-light-passive-border-color` | Border color of the button if non interactive in light mode |\n| `--wcp-button-light-passive-color`        | Text color of the button if non interactive in light mode |\n",
          "groups": [
            "ui"
          ],
          "tagName": "wcp-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "src/components/ui/button/button.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-button",
          "declaration": {
            "name": "Button",
            "module": "src/components/ui/button/button.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/code/code.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a formatted code snippet.",
          "name": "Code",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-code>\n  <pre><code>Some code</code></pre>\n</wcp-code>\n```"
          ],
          "readme": "# wcp-code\n\nShows a formatted code snippet.\n\n**Mixins:** ColorSchemable\n\n## Example\n\n```html\n<wcp-code>\n  <pre><code>Some code</code></pre>\n</wcp-code>\n```\n\n## Methods\n\n| Method             | Type       |\n|--------------------|------------|\n| `createRenderRoot` | `(): this` |\n",
          "groups": [
            "ui"
          ],
          "tagName": "wcp-code",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Code",
          "declaration": {
            "name": "Code",
            "module": "src/components/ui/code/code.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-code",
          "declaration": {
            "name": "Code",
            "module": "src/components/ui/code/code.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/icon/icon.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows an icon from the css.gg icon set.",
          "name": "Icon",
          "cssProperties": [
            {
              "description": "Sets the size of the icon as unitless number in pixels",
              "name": "--wcp-icon-size"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "## Use icon\nBy setting the name attribute.\n\n```html\n<wcp-icon name=\"smartphone\"></wcp-icon>\n```",
            "### Set a custom size\n\n```html\n<wcp-icon name=\"laptop\" style=\"--wcp-icon-size: 44\"></wcp-icon>\n```"
          ],
          "readme": "# wcp-icon\n\nShows an icon from the css.gg icon set.\n\n## Examples\n\n## Use icon\nBy setting the name attribute.\n\n```html\n<wcp-icon name=\"smartphone\"></wcp-icon>\n```\n\n### Set a custom size\n\n```html\n<wcp-icon name=\"laptop\" style=\"--wcp-icon-size: 44\"></wcp-icon>\n```\n\n## Properties\n\n| Property | Attribute | Type     |\n|----------|-----------|----------|\n| `name`   | `name`    | `string` |\n\n## CSS Custom Properties\n\n| Property          | Description                                      |\n|-------------------|--------------------------------------------------|\n| `--wcp-icon-size` | Sets the size of the icon as unitless number in pixels |\n",
          "groups": [
            "ui"
          ],
          "tagName": "wcp-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "src/components/ui/icon/icon.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-icon",
          "declaration": {
            "name": "Icon",
            "module": "src/components/ui/icon/icon.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/tabs/tabs.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Tabs",
          "cssProperties": [
            {
              "description": "The gap between the tablist and the tabpanels",
              "name": "--wcp-tabs-tablist-gap"
            },
            {
              "description": "The inner padding of the tablist",
              "name": "--wcp-tabs-tablist-spacing"
            },
            {
              "description": "The inner padding of the tabs",
              "name": "--wcp-tabs-tab-spacing"
            },
            {
              "description": "The border width of the active tab",
              "name": "--wcp-tabs-tab-active-border-width"
            },
            {
              "description": "The inner padding of the tabpanels",
              "name": "--wcp-tabs-panel-spacing"
            },
            {
              "description": "The border color of the tablist in dark mode",
              "name": "--wcp-tabs-tablist-dark-border-color"
            },
            {
              "description": "The border color of the active tab in dark mode",
              "name": "--wcp-tabs-tab-active-dark-border-color"
            },
            {
              "description": "The border color of the tablist in light mode",
              "name": "--wcp-tabs-tablist-light-border-color"
            },
            {
              "description": "The border color of the active tab in light mode",
              "name": "--wcp-tabs-tab-active-light-border-color"
            }
          ],
          "slots": [
            {
              "description": "name - The content of the named tab.",
              "name": "tab"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tabFocus",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "tabRoles",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "Record<string, { label: string; disabled?: boolean }>"
              },
              "default": "{}",
              "attribute": "tabs"
            },
            {
              "kind": "field",
              "name": "activeTab",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "active-tab",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "emitActiveTabChange"
            },
            {
              "kind": "method",
              "name": "handleTabClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "tabs",
              "type": {
                "text": "Record<string, { label: string; disabled?: boolean }>"
              },
              "default": "{}",
              "fieldName": "tabs"
            },
            {
              "name": "active-tab",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "activeTab"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-tabs tabs='{\"first\": \"First tab\", \"second\": \"Second tab\"}'>\n <div slot=\"first\">First tab content</div>\n <div slot=\"second\">Second tab content</div>\n</wcp-tabs>\n```",
            "### Active tab preselected\n\n```html\n<wcp-tabs tabs='{\"first\": \"First tab\", \"second\": \"Second tab\"}' active-tab=\"second\">\n <div slot=\"first\">First tab content</div>\n <div slot=\"second\">Second tab content</div>\n</wcp-tabs>\n```"
          ],
          "readme": "# wcp-tabs\n\n**Mixins:** ColorSchemable\n\n## Examples\n\n```html\n<wcp-tabs tabs='{\"first\": \"First tab\", \"second\": \"Second tab\"}'>\n <div slot=\"first\">First tab content</div>\n <div slot=\"second\">Second tab content</div>\n</wcp-tabs>\n```\n\n### Active tab preselected\n\n```html\n<wcp-tabs tabs='{\"first\": \"First tab\", \"second\": \"Second tab\"}' active-tab=\"second\">\n <div slot=\"first\">First tab content</div>\n <div slot=\"second\">Second tab content</div>\n</wcp-tabs>\n```\n\n## Properties\n\n| Property    | Attribute    | Type                  | Default |\n|-------------|--------------|-----------------------|---------|\n| `activeTab` | `active-tab` | `string \\| undefined` |         |\n| `tabFocus`  |              | `number`              | 0       |\n| `tabs`      | `tabs`       |                       | {}      |\n\n## Methods\n\n| Method                | Type                 |\n|-----------------------|----------------------|\n| `emitActiveTabChange` | `(): void`           |\n| `handleKeydown`       | `(event: any): void` |\n| `handleTabClick`      | `(event: any): void` |\n\n## Events\n\n| Event                        | Description                          |\n|------------------------------|--------------------------------------|\n| `wcp-tabs:active-tab-change` | Notifies when the active tab changes |\n\n## Slots\n\n| Name | Description                              |\n|------|------------------------------------------|\n|      | tab name - The content of the named tab. |\n\n## CSS Custom Properties\n\n| Property                                   | Description                                      |\n|--------------------------------------------|--------------------------------------------------|\n| `--wcp-tabs-panel-spacing`                 | The inner padding of the tabpanels               |\n| `--wcp-tabs-tab-active-border-width`       | The border width of the active tab               |\n| `--wcp-tabs-tab-active-dark-border-color`  | The border color of the active tab in dark mode  |\n| `--wcp-tabs-tab-active-light-border-color` | The border color of the active tab in light mode |\n| `--wcp-tabs-tab-spacing`                   | The inner padding of the tabs                    |\n| `--wcp-tabs-tablist-dark-border-color`     | The border color of the tablist in dark mode     |\n| `--wcp-tabs-tablist-gap`                   | The gap between the tablist and the tabpanels    |\n| `--wcp-tabs-tablist-light-border-color`    | The border color of the tablist in light mode    |\n| `--wcp-tabs-tablist-spacing`               | The inner padding of the tablist                 |\n",
          "groups": [
            "ui"
          ],
          "tagName": "wcp-tabs",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Tabs",
          "declaration": {
            "name": "Tabs",
            "module": "src/components/ui/tabs/tabs.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-tabs",
          "declaration": {
            "name": "Tabs",
            "module": "src/components/ui/tabs/tabs.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/title/title.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows the application title and a logo.",
          "name": "Title",
          "cssProperties": [
            {
              "description": "The gap between the logo and the title",
              "name": "--wcp-title-gap"
            },
            {
              "description": "The height of the title. Content may exceed and scales the tile",
              "name": "--wcp-title-height"
            },
            {
              "description": "Inner padding of the title",
              "name": "--wcp-title-spacing"
            },
            {
              "description": "The font size of the title",
              "name": "--wcp-title-headline-size"
            },
            {
              "description": "The font weight of the title",
              "name": "--wcp-title-headline-weight"
            },
            {
              "description": "The letter spacing of the title",
              "name": "--wcp-title-headline-spacing"
            },
            {
              "description": "The line height of the title",
              "name": "--wcp-title-headline-line-height"
            },
            {
              "description": "The text transform of the title",
              "name": "--wcp-title-headline-transform"
            }
          ],
          "slots": [
            {
              "description": "Receives the logo image to be shown",
              "name": "logo"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "attribute": "title",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "fieldName": "title"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-title title=\"Web Components Preview\">\n  <img slot=\"logo\" src=\"assets/icons/logo.svg\" height=\"30px\" />\n</wcp-title>\n```"
          ],
          "readme": "# wcp-title\n\nShows the application title and a logo.\n\n## Example\n\n```html\n<wcp-title title=\"Web Components Preview\">\n  <img slot=\"logo\" src=\"assets/icons/logo.svg\" height=\"30px\" />\n</wcp-title>\n```\n\n## Properties\n\n| Property | Attribute | Type     |\n|----------|-----------|----------|\n| `title`  | `title`   | `string` |\n\n## Slots\n\n| Name   | Description                         |\n|--------|-------------------------------------|\n| `logo` | Receives the logo image to be shown |\n\n## CSS Custom Properties\n\n| Property                           | Description                                      |\n|------------------------------------|--------------------------------------------------|\n| `--wcp-title-gap`                  | The gap between the logo and the title           |\n| `--wcp-title-headline-line-height` | The line height of the title                     |\n| `--wcp-title-headline-size`        | The font size of the title                       |\n| `--wcp-title-headline-spacing`     | The letter spacing of the title                  |\n| `--wcp-title-headline-transform`   | The text transform of the title                  |\n| `--wcp-title-headline-weight`      | The font weight of the title                     |\n| `--wcp-title-height`               | The height of the title. Content may exceed and scales the tile |\n| `--wcp-title-spacing`              | Inner padding of the title                       |\n",
          "groups": [
            "ui"
          ],
          "tagName": "wcp-title",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Title",
          "declaration": {
            "name": "Title",
            "module": "src/components/ui/title/title.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-title",
          "declaration": {
            "name": "Title",
            "module": "src/components/ui/title/title.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/navigation/navigation-item/navigation-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NavigationItem",
          "cssProperties": [
            {
              "description": "Inner padding of the item",
              "name": "--wcp-navigation-item-spacing"
            },
            {
              "description": "Background color of the item when non interactive in dark mode",
              "name": "--wcp-navigation-item-dark-passive-background"
            },
            {
              "description": "Background color of the item when hovered in dark mode",
              "name": "--wcp-navigation-item-dark-hover-background"
            },
            {
              "description": "Background color of the item when active in dark mode",
              "name": "--wcp-navigation-item-dark-active-background"
            },
            {
              "description": "Text color of the item when non interactive in dark mode",
              "name": "--wcp-navigation-item-dark-passive-color"
            },
            {
              "description": "Text color of the item when hovered in dark mode",
              "name": "--wcp-navigation-item-dark-hover-color"
            },
            {
              "description": "Text color of the item when active in dark mode",
              "name": "--wcp-navigation-item-dark-active-color"
            },
            {
              "description": "Background color of the item when non interactive in light mode",
              "name": "--wcp-navigation-item-light-passive-background"
            },
            {
              "description": "Background color of the item when hovered in light mode",
              "name": "--wcp-navigation-item-light-hover-background"
            },
            {
              "description": "Background color of the item when active in light mode",
              "name": "--wcp-navigation-item-light-active-background"
            },
            {
              "description": "Text color of the item when non interactive in light mode",
              "name": "--wcp-navigation-item-light-passive-color"
            },
            {
              "description": "Text color of the item when hovered in light mode",
              "name": "--wcp-navigation-item-light-hover-color"
            },
            {
              "description": "Text color of the item when active in light mode",
              "name": "--wcp-navigation-item-light-active-color"
            }
          ],
          "slots": [
            {
              "description": "Default slot for contents",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "href",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "href"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-navigation-item",
          "examples": [
            "### Non-interactive\n\nThis will probably only be used for the active item.\n\n```html\n<wcp-navigation-item>\n  Non-interactive\n</wcp-navigation-item>\n```",
            "### With link\n\n```html\n<wcp-navigation-item href=\"/home\">\n  Home\n</wcp-navigation-item>\n```"
          ],
          "readme": "# wcp-navigation-item\n\n**Mixins:** ColorSchemable\n\n## Examples\n\n### Non-interactive\n\nThis will probably only be used for the active item.\n\n```html\n<wcp-navigation-item>\n  Non-interactive\n</wcp-navigation-item>\n```\n\n### With link\n\n```html\n<wcp-navigation-item href=\"/home\">\n  Home\n</wcp-navigation-item>\n```\n\n## Properties\n\n| Property | Attribute | Type                  | Default |\n|----------|-----------|-----------------------|---------|\n| `active` | `active`  | `boolean`             | false   |\n| `href`   | `href`    | `string \\| undefined` |         |\n\n## Slots\n\n| Name | Description               |\n|------|---------------------------|\n|      | Default slot for contents |\n\n## CSS Custom Properties\n\n| Property                                         | Description                                      |\n|--------------------------------------------------|--------------------------------------------------|\n| `--wcp-navigation-item-dark-active-background`   | Background color of the item when active in dark mode |\n| `--wcp-navigation-item-dark-active-color`        | Text color of the item when active in dark mode  |\n| `--wcp-navigation-item-dark-hover-background`    | Background color of the item when hovered in dark mode |\n| `--wcp-navigation-item-dark-hover-color`         | Text color of the item when hovered in dark mode |\n| `--wcp-navigation-item-dark-passive-background`  | Background color of the item when non interactive in dark mode |\n| `--wcp-navigation-item-dark-passive-color`       | Text color of the item when non interactive in dark mode |\n| `--wcp-navigation-item-light-active-background`  | Background color of the item when active in light mode |\n| `--wcp-navigation-item-light-active-color`       | Text color of the item when active in light mode |\n| `--wcp-navigation-item-light-hover-background`   | Background color of the item when hovered in light mode |\n| `--wcp-navigation-item-light-hover-color`        | Text color of the item when hovered in light mode |\n| `--wcp-navigation-item-light-passive-background` | Background color of the item when non interactive in light mode |\n| `--wcp-navigation-item-light-passive-color`      | Text color of the item when non interactive in light mode |\n| `--wcp-navigation-item-spacing`                  | Inner padding of the item                        |\n",
          "groups": [
            "features"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NavigationItem",
          "declaration": {
            "name": "NavigationItem",
            "module": "src/components/features/navigation/navigation-item/navigation-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-navigation-item",
          "declaration": {
            "name": "NavigationItem",
            "module": "src/components/features/navigation/navigation-item/navigation-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/navigation/navigation-search/navigation-search.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NavigationSearch",
          "cssProperties": [
            {
              "description": "The spacing around the search input.",
              "name": "--wcp-navigation-search-spacing"
            },
            {
              "description": "The border color of the search input in dark mode.",
              "name": "--wcp-navigation-search-dark-border-color"
            },
            {
              "description": "The border color of the search input in light mode.",
              "name": "--wcp-navigation-search-light-border-color"
            },
            {
              "description": "The stroke color of the search input in dark mode when not focused.",
              "name": "--wcp-navigation-search-passive-dark-stroke"
            },
            {
              "description": "The stroke color of the search input in light mode when not focused.",
              "name": "--wcp-navigation-search-passive-light-stroke"
            },
            {
              "description": "The stroke color of the search input in dark mode when focused.",
              "name": "--wcp-navigation-search-active-dark-stroke"
            },
            {
              "description": "The stroke color of the search input in light mode when focused.",
              "name": "--wcp-navigation-search-active-light-stroke"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "term",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "term",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleSearchInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleResetClick",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "#updateSearchTerm",
              "parameters": [
                {
                  "name": "term",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "name": "wcp-navigation-search:search",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "term",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "term"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-navigation-search",
          "examples": [],
          "readme": "# wcp-navigation-search\n\n**Mixins:** ColorSchemable\n\n## Properties\n\n| Property | Attribute | Type     | Default |\n|----------|-----------|----------|---------|\n| `term`   | `term`    | `string` | \"\"      |\n\n## Methods\n\n| Method              | Type                   |\n|---------------------|------------------------|\n| `#updateSearchTerm` | `(term: string): void` |\n\n## Events\n\n| Event                          | Description                                      |\n|--------------------------------|--------------------------------------------------|\n| `wcp-navigation-search:search` | Fired when the search term changes. Carries the new search term with it. |\n\n## CSS Custom Properties\n\n| Property                                       | Description                                      |\n|------------------------------------------------|--------------------------------------------------|\n| `--wcp-navigation-search-active-dark-stroke`   | The stroke color of the search input in dark mode when focused. |\n| `--wcp-navigation-search-active-light-stroke`  | The stroke color of the search input in light mode when focused. |\n| `--wcp-navigation-search-dark-border-color`    | The border color of the search input in dark mode. |\n| `--wcp-navigation-search-light-border-color`   | The border color of the search input in light mode. |\n| `--wcp-navigation-search-passive-dark-stroke`  | The stroke color of the search input in dark mode when not focused. |\n| `--wcp-navigation-search-passive-light-stroke` | The stroke color of the search input in light mode when not focused. |\n| `--wcp-navigation-search-spacing`              | The spacing around the search input.             |\n",
          "groups": [
            "features"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NavigationSearch",
          "declaration": {
            "name": "NavigationSearch",
            "module": "src/components/features/navigation/navigation-search/navigation-search.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-navigation-search",
          "declaration": {
            "name": "NavigationSearch",
            "module": "src/components/features/navigation/navigation-search/navigation-search.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/plugins/preview-editor-link/preview-editor-link-hint/preview-editor-link-hint.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a hint to a given preview element.",
          "name": "PreviewEditorLinkHint",
          "cssProperties": [
            {
              "description": "The background color of the hint button in passive state.",
              "name": "--wcp-preview-editor-link-hint-button-passive-background"
            },
            {
              "description": "The background color of the hint button in active state.",
              "name": "--wcp-preview-editor-link-hint-button-active-background"
            },
            {
              "description": "Size of the hint button in passive state.",
              "name": "--wcp-preview-editor-link-hint-button-passive-size"
            },
            {
              "description": "Size of the hint button in active state.",
              "name": "--wcp-preview-editor-link-hint-button-active-size"
            },
            {
              "description": "Border width of the debugging fields.",
              "name": "--wcp-preview-editor-link-hint-debug-border-width"
            },
            {
              "description": "Opacity of the debugging fields background.",
              "name": "--wcp-preview-editor-link-hint-debug-background-opacity"
            },
            {
              "description": "Distance of the stripes of the debugging field background.",
              "name": "--wcp-preview-editor-link-hint-debug-stripe-distance"
            },
            {
              "description": "Tilt of the stripes of the debugging field background in degrees.",
              "name": "--wcp-preview-editor-link-hint-debug-stripe-tilt"
            },
            {
              "description": "Width of the stripes of the debugging field background.",
              "name": "--wcp-preview-editor-link-hint-debug-stripe-width"
            },
            {
              "description": "Length of the dashes of the debugging field background.",
              "name": "--wcp-preview-editor-link-hint-debug-stripe-dash-size"
            },
            {
              "description": "Gap between the dashes of the debugging field background.",
              "name": "--wcp-preview-editor-link-hint-debug-stripe-dash-gap"
            },
            {
              "description": "Debugging field background color in dark mode.",
              "name": "--wcp-preview-editor-link-hint-debug-dark-background"
            },
            {
              "description": "Debugging field dash and border color in dark mode.",
              "name": "--wcp-preview-editor-link-hint-debug-dark-stroke"
            },
            {
              "description": "Debugging field background color in light mode.",
              "name": "--wcp-preview-editor-link-hint-debug-light-background"
            },
            {
              "description": "Debugging field dash and border color in light mode.",
              "name": "--wcp-preview-editor-link-hint-debug-light-stroke"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#observer",
              "privacy": "private",
              "default": "new ResizeObserver(() => this.updatePosition())"
            },
            {
              "kind": "field",
              "name": "#element",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#scrollParent",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "debug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "debug",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "element"
            },
            {
              "kind": "field",
              "name": "scrollParent"
            },
            {
              "kind": "method",
              "name": "updatePosition",
              "description": "Allows to update the position of the hint."
            },
            {
              "kind": "method",
              "name": "#observeElement"
            },
            {
              "kind": "method",
              "name": "#observeStage"
            },
            {
              "kind": "method",
              "name": "#unobserveStage"
            },
            {
              "kind": "field",
              "name": "#handleStageChange",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "debug",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "debug"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-preview-editor-link-hint",
          "examples": [],
          "readme": "# wcp-preview-editor-link-hint\n\nShows a hint to a given preview element.\n\n**Mixins:** ColorSchemable\n\n## Properties\n\n| Property       | Attribute | Type      | Default |\n|----------------|-----------|-----------|---------|\n| `debug`        | `debug`   | `boolean` | false   |\n| `element`      |           |           |         |\n| `scrollParent` |           |           |         |\n\n## Methods\n\n| Method            | Type       | Description                                |\n|-------------------|------------|--------------------------------------------|\n| `#observeElement` | `(): void` |                                            |\n| `#observeStage`   | `(): void` |                                            |\n| `#unobserveStage` | `(): void` |                                            |\n| `updatePosition`  | `(): void` | Allows to update the position of the hint. |\n\n## CSS Custom Properties\n\n| Property                                         | Description                                      |\n|--------------------------------------------------|--------------------------------------------------|\n| `--wcp-preview-editor-link-hint-button-active-background` | The background color of the hint button in active state. |\n| `--wcp-preview-editor-link-hint-button-active-size` | Size of the hint button in active state.         |\n| `--wcp-preview-editor-link-hint-button-passive-background` | The background color of the hint button in passive state. |\n| `--wcp-preview-editor-link-hint-button-passive-size` | Size of the hint button in passive state.        |\n| `--wcp-preview-editor-link-hint-debug-background-opacity` | Opacity of the debugging fields background.      |\n| `--wcp-preview-editor-link-hint-debug-border-width` | Border width of the debugging fields.            |\n| `--wcp-preview-editor-link-hint-debug-dark-background` | Debugging field background color in dark mode.   |\n| `--wcp-preview-editor-link-hint-debug-dark-stroke` | Debugging field dash and border color in dark mode. |\n| `--wcp-preview-editor-link-hint-debug-light-background` | Debugging field background color in light mode.  |\n| `--wcp-preview-editor-link-hint-debug-light-stroke` | Debugging field dash and border color in light mode. |\n| `--wcp-preview-editor-link-hint-debug-stripe-dash-gap` | Gap between the dashes of the debugging field background. |\n| `--wcp-preview-editor-link-hint-debug-stripe-dash-size` | Length of the dashes of the debugging field background. |\n| `--wcp-preview-editor-link-hint-debug-stripe-distance` | Distance of the stripes of the debugging field background. |\n| `--wcp-preview-editor-link-hint-debug-stripe-tilt` | Tilt of the stripes of the debugging field background in degrees. |\n| `--wcp-preview-editor-link-hint-debug-stripe-width` | Width of the stripes of the debugging field background. |\n",
          "groups": [
            "plugins"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PreviewEditorLinkHint",
          "declaration": {
            "name": "PreviewEditorLinkHint",
            "module": "src/components/plugins/preview-editor-link/preview-editor-link-hint/preview-editor-link-hint.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-preview-editor-link-hint",
          "declaration": {
            "name": "PreviewEditorLinkHint",
            "module": "src/components/plugins/preview-editor-link/preview-editor-link-hint/preview-editor-link-hint.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/plugins/stage-editor/stage-editor-controls/stage-editor-controls.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StageEditorControls",
          "cssProperties": [
            {
              "description": "The font size of the headline.",
              "name": "--wcp-stage-editor-controls-headline-size"
            },
            {
              "description": "The font weight of the headline.",
              "name": "--wcp-stage-editor-controls-headline-weight"
            },
            {
              "description": "The inner spacing of the headline.",
              "name": "--wcp-stage-editor-controls-headline-spacing"
            },
            {
              "description": "The border color of the element in dark mode.",
              "name": "--wcp-stage-editor-controls-dark-border-color"
            },
            {
              "description": "The border color of the element in light mode.",
              "name": "--wcp-stage-editor-controls-light-border-color"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#manifest",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_element",
              "type": {
                "text": "Parsed.Element | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "previewTagName",
              "attribute": "preview-tag-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "ElementData | undefined"
              },
              "readonly": true,
              "attribute": "data"
            },
            {
              "kind": "method",
              "name": "handleFormInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderFieldControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "field",
                  "type": {
                    "text": "Parsed.Field"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderSlotControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "Parsed.Slot"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "name": "wcp-stage-editor-controls:input",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "preview-tag-name",
              "fieldName": "previewTagName"
            },
            {
              "name": "data",
              "type": {
                "text": "ElementData | undefined"
              },
              "readonly": true,
              "fieldName": "data"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-stage-editor-controls",
          "examples": [],
          "readme": "# wcp-stage-editor-controls\n\n**Mixins:** ColorSchemable\n\n## Properties\n\n| Property         | Attribute          | Modifiers | Type     |\n|------------------|--------------------|-----------|----------|\n| `data`           | `data`             | readonly  |          |\n| `previewTagName` | `preview-tag-name` |           | `string` |\n\n## Events\n\n| Event                             | Type                    | Description                                  |\n|-----------------------------------|-------------------------|----------------------------------------------|\n| `wcp-stage-editor-controls:input` | `CustomEvent<FormData>` | Fires when the user changes a control value. |\n\n## CSS Custom Properties\n\n| Property                                         | Description                                    |\n|--------------------------------------------------|------------------------------------------------|\n| `--wcp-stage-editor-controls-dark-border-color`  | The border color of the element in dark mode.  |\n| `--wcp-stage-editor-controls-headline-size`      | The font size of the headline.                 |\n| `--wcp-stage-editor-controls-headline-spacing`   | The inner spacing of the headline.             |\n| `--wcp-stage-editor-controls-headline-weight`    | The font weight of the headline.               |\n| `--wcp-stage-editor-controls-light-border-color` | The border color of the element in light mode. |\n",
          "groups": [
            "plugins"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StageEditorControls",
          "declaration": {
            "name": "StageEditorControls",
            "module": "src/components/plugins/stage-editor/stage-editor-controls/stage-editor-controls.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-stage-editor-controls",
          "declaration": {
            "name": "StageEditorControls",
            "module": "src/components/plugins/stage-editor/stage-editor-controls/stage-editor-controls.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/plugins/stage-editor/stage-editor-preview/stage-editor-preview.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StageEditorPreview",
          "members": [
            {
              "kind": "field",
              "name": "previewTagName",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "preview-tag-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "ElementData | undefined"
              },
              "attribute": "data"
            },
            {
              "kind": "method",
              "name": "renderSlots",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "preview-tag-name",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "previewTagName"
            },
            {
              "name": "data",
              "type": {
                "text": "ElementData | undefined"
              },
              "fieldName": "data"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-stage-editor-preview",
          "examples": [
            "```html\n<wcp-stage-editor-preview>\n  <wcp-button>Example button</wcp-button>\n</wcp-stage-editor-preview>\n```"
          ],
          "readme": "# wcp-stage-editor-preview\n\n## Example\n\n```html\n<wcp-stage-editor-preview>\n  <wcp-button>Example button</wcp-button>\n</wcp-stage-editor-preview>\n```\n\n## Properties\n\n| Property         | Attribute          | Type                  |\n|------------------|--------------------|-----------------------|\n| `data`           | `data`             |                       |\n| `previewTagName` | `preview-tag-name` | `string \\| undefined` |\n",
          "groups": [
            "plugins"
          ],
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StageEditorPreview",
          "declaration": {
            "name": "StageEditorPreview",
            "module": "src/components/plugins/stage-editor/stage-editor-preview/stage-editor-preview.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-stage-editor-preview",
          "declaration": {
            "name": "StageEditorPreview",
            "module": "src/components/plugins/stage-editor/stage-editor-preview/stage-editor-preview.component.ts"
          }
        }
      ]
    }
  ]
}
