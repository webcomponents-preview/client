{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/components/root/root.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Root",
          "cssProperties": [
            {
              "description": "The background color of the root element in dark mode",
              "name": "--wcp-root-dark-background"
            },
            {
              "description": "The text color of the text in the root element in dark mode",
              "name": "--wcp-root-dark-color"
            },
            {
              "description": "The background color of the root element in light mode",
              "name": "--wcp-root-light-background"
            },
            {
              "description": "The text color of the text in the root element in light mode",
              "name": "--wcp-root-light-color"
            }
          ],
          "slots": [
            {
              "description": "Allows setting a custom logo to be displayed in the title.",
              "name": "logo"
            },
            {
              "description": "Can be used to inject additional preview controls.",
              "name": "preview-controls"
            },
            {
              "description": "Used to be override the existing preview pane.",
              "name": "preview-frame"
            },
            {
              "description": "Can be used to inject additional preview detail panes.",
              "name": "preview-details"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#activeElement",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#title",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "'WCP'"
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "CustomElementDeclaration[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "activeElementDeclaration",
              "type": {
                "text": "CustomElementDeclaration | undefined"
              }
            },
            {
              "kind": "field",
              "name": "initialPreviewTab",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "navigation",
              "type": {
                "text": "Record<string, CustomElementDeclaration[]> | undefined"
              }
            },
            {
              "kind": "field",
              "name": "activeElement",
              "description": "Sets the currently active element by its tag name. Will be updated at runtime and can\nbe preset with an initial value to define the active element at startup.",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "active-element",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flags the component to be displayed inline and not standalone. Requires the surrounding\nlayout to provide the necessary styles like for any other block element.",
              "attribute": "inline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "configUrl",
              "description": "Allows to set a url to load a config file from.",
              "attribute": "config-url",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "manifestUrl",
              "description": "Defines the location of the custom element manifest file.",
              "attribute": "manifest-url",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "loadConfig",
              "parameters": [
                {
                  "name": "configUrl",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "loadCustomElementsManifest",
              "parameters": [
                {
                  "name": "manifestUrl",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectFallbackElement"
            },
            {
              "kind": "method",
              "name": "retrieveActiveElementDeclaration"
            },
            {
              "kind": "method",
              "name": "emitManifestLoaded"
            },
            {
              "kind": "method",
              "name": "emitActiveElementChanged"
            },
            {
              "kind": "field",
              "name": "handleHashChange"
            }
          ],
          "attributes": [
            {
              "name": "active-element",
              "description": "Sets the currently active element by its tag name. Will be updated at runtime and can\nbe preset with an initial value to define the active element at startup.",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "activeElement"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flags the component to be displayed inline and not standalone. Requires the surrounding\nlayout to provide the necessary styles like for any other block element.",
              "fieldName": "inline"
            },
            {
              "name": "config-url",
              "description": "Allows to set a url to load a config file from.",
              "fieldName": "configUrl"
            },
            {
              "name": "manifest-url",
              "description": "Defines the location of the custom element manifest file.",
              "fieldName": "manifestUrl"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/utils/color-scheme.utils"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [],
          "readme": "# class: `Root`\n\n## Fields\n\n| Name                       | Privacy | Type                                                      | Default | Description                                                                                                                                                          | Inherited From |\n| -------------------------- | ------- | --------------------------------------------------------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- |\n| `elements`                 |         | `CustomElementDeclaration[]`                              | `[]`    |                                                                                                                                                                      |                |\n| `activeElementDeclaration` |         | `CustomElementDeclaration \\| undefined`                   |         |                                                                                                                                                                      |                |\n| `initialPreviewTab`        |         | `string \\| undefined`                                     |         |                                                                                                                                                                      |                |\n| `navigation`               |         | `Record<string, CustomElementDeclaration[]> \\| undefined` |         |                                                                                                                                                                      |                |\n| `activeElement`            |         | `string \\| undefined`                                     |         | Sets the currently active element by its tag name. Will be updated at runtime and can&#xA;be preset with an initial value to define the active element at startup.   |                |\n| `inline`                   |         | `boolean`                                                 | `false` | Flags the component to be displayed inline and not standalone. Requires the surrounding&#xA;layout to provide the necessary styles like for any other block element. |                |\n| `configUrl`                |         |                                                           |         | Allows to set a url to load a config file from.                                                                                                                      |                |\n| `manifestUrl`              |         |                                                           |         | Defines the location of the custom element manifest file.                                                                                                            |                |\n| `handleHashChange`         |         |                                                           |         |                                                                                                                                                                      |                |\n\n## Methods\n\n| Name                               | Privacy   | Description | Parameters            | Return           | Inherited From |\n| ---------------------------------- | --------- | ----------- | --------------------- | ---------------- | -------------- |\n| `loadConfig`                       |           |             | `configUrl: string`   |                  |                |\n| `loadCustomElementsManifest`       |           |             | `manifestUrl: string` |                  |                |\n| `selectFallbackElement`            |           |             |                       |                  |                |\n| `retrieveActiveElementDeclaration` |           |             |                       |                  |                |\n| `emitManifestLoaded`               |           |             |                       |                  |                |\n| `emitActiveElementChanged`         |           |             |                       |                  |                |\n| `connectedCallback`                |           |             |                       |                  |                |\n| `disconnectedCallback`             |           |             |                       |                  |                |\n| `render`                           | protected |             |                       | `TemplateResult` |                |\n\n## Attributes\n\n| Name             | Field         | Inherited From |\n| ---------------- | ------------- | -------------- |\n| `active-element` | activeElement |                |\n| `inline`         | inline        |                |\n| `config-url`     | configUrl     |                |\n| `manifest-url`   | manifestUrl   |                |\n\n## CSS Properties\n\n| Name                          | Default | Description                                                  |\n| ----------------------------- | ------- | ------------------------------------------------------------ |\n| `--wcp-root-dark-background`  |         | The background color of the root element in dark mode        |\n| `--wcp-root-dark-color`       |         | The text color of the text in the root element in dark mode  |\n| `--wcp-root-light-background` |         | The background color of the root element in light mode       |\n| `--wcp-root-light-color`      |         | The text color of the text in the root element in light mode |\n\n## Slots\n\n| Name               | Description                                                |\n| ------------------ | ---------------------------------------------------------- |\n| `logo`             | Allows setting a custom logo to be displayed in the title. |\n| `preview-controls` | Can be used to inject additional preview controls.         |\n| `preview-frame`    | Used to be override the existing preview pane.             |\n| `preview-details`  | Can be used to inject additional preview detail panes.     |\n\n<hr/>\n",
          "groups": [
            "root"
          ],
          "tagName": "wcp-root",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Root",
          "declaration": {
            "name": "Root",
            "module": "src/components/root/root.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-root",
          "declaration": {
            "name": "Root",
            "module": "src/components/root/root.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/feature/markdown-example/markdown-example.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows an inline code example and a preview of the element in the readme.\nThis is used in the markdown formatter to render `html` examples.\n\nIn most cases you don't want to use this component directly, but rather use the `wcp-readme` element instead,\nor the enhanced markdown renderer which instruments this element under the hood. It can be used with the\n`renderMarkdown` function provided by the `@/utils/markdown.utils`.",
          "name": "MarkdownExample",
          "cssProperties": [
            {
              "description": "Inner padding of the example",
              "name": "--wcp-markdown-example-spacing"
            },
            {
              "description": "Border radius of the example",
              "name": "--wcp-markdown-example-border-radius"
            },
            {
              "description": "Border width of the example",
              "name": "--wcp-markdown-example-border-width"
            },
            {
              "description": "Border color of the example in dark mode",
              "name": "--wcp-markdown-example-dark-border-color"
            },
            {
              "description": "Border color of the example in light mode",
              "name": "--wcp-markdown-example-light-border-color"
            }
          ],
          "slots": [
            {
              "description": "Code example",
              "name": "code"
            },
            {
              "description": "Rendered example preview",
              "name": "preview"
            }
          ],
          "members": [],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/utils/color-scheme.utils"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "### Shows arbitrary HTML code example\n\n```html\n<wcp-markdown-example>\n  <pre slot=\"code\">\n&lt;h1&gt;Readme&lt;/h1&gt;\n&lt;p&gt;Some readme content&lt;/p&gt;\n  </pre>\n  <div slot=\"preview\">\n    <h1>Readme</h1>\n    <p>Some readme content</p>\n  </div>\n</wcp-markdown-example>\n```"
          ],
          "readme": "# class: `MarkdownExample`\n\n## Methods\n\n| Name     | Privacy   | Description | Parameters | Return           | Inherited From |\n| -------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `render` | protected |             |            | `TemplateResult` |                |\n\n## CSS Properties\n\n| Name                                        | Default | Description                               |\n| ------------------------------------------- | ------- | ----------------------------------------- |\n| `--wcp-markdown-example-spacing`            |         | Inner padding of the example              |\n| `--wcp-markdown-example-border-radius`      |         | Border radius of the example              |\n| `--wcp-markdown-example-border-width`       |         | Border width of the example               |\n| `--wcp-markdown-example-dark-border-color`  |         | Border color of the example in dark mode  |\n| `--wcp-markdown-example-light-border-color` |         | Border color of the example in light mode |\n\n## Slots\n\n| Name      | Description              |\n| --------- | ------------------------ |\n| `code`    | Code example             |\n| `preview` | Rendered example preview |\n\n<hr/>\n\n# Variables\n\n| Name                    | Description | Type     |\n| ----------------------- | ----------- | -------- |\n| `MARKDOWN_EXAMPLE_TABS` |             | `object` |\n\n<hr/>\n\n# Functions\n\n| Name | Description | Parameters | Return |\n| ---- | ----------- | ---------- | ------ |\n|      |             |            |        |\n\n<hr/>\n",
          "groups": [
            "feature"
          ],
          "tagName": "wcp-markdown-example",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MarkdownExample",
          "declaration": {
            "name": "MarkdownExample",
            "module": "src/components/feature/markdown-example/markdown-example.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-markdown-example",
          "declaration": {
            "name": "MarkdownExample",
            "module": "src/components/feature/markdown-example/markdown-example.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/feature/navigation/navigation.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Navigation",
          "cssProperties": [
            {
              "description": "Spacing between navigation and headline",
              "name": "--wcp-navigation-spacing"
            },
            {
              "description": "Spacing between navigation items",
              "name": "--wcp-navigation-spacing-items"
            },
            {
              "description": "Inner padding of the navigation headline",
              "name": "--wcp-navigation-spacing-headline"
            },
            {
              "description": "Border color of the navigation headline in dark mode",
              "name": "--wcp-navigation-dark-border-color"
            },
            {
              "description": "Border color of the navigation headline in light mode",
              "name": "--wcp-navigation-light-border-color"
            },
            {
              "description": "Font size of the navigation headline",
              "name": "--wcp-navigation-headline-size"
            },
            {
              "description": "Font weight of the navigation headline",
              "name": "--wcp-navigation-headline-weight"
            },
            {
              "description": "Letter spacing of the navigation headline",
              "name": "--wcp-navigation-headline-spacing"
            },
            {
              "description": "Background color of the navigation headline in dark mode",
              "name": "--wcp-navigation-headline-dark-background"
            },
            {
              "description": "Background color of the navigation headline in light mode",
              "name": "--wcp-navigation-headline-light-background"
            }
          ],
          "slots": [
            {
              "description": "Default slot for navigation items",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "headline",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "headline",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "headline"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/utils/color-scheme.utils"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "### Usage with headline\n\n```html\n<wcp-navigation headline=\"Navigation\">\n  <wcp-navigation-item href=\"/home\">Home</wcp-navigation-item>\n  <wcp-navigation-item href=\"/about\">About</wcp-navigation-item>\n</wcp-navigation>\n```"
          ],
          "readme": "# class: `Navigation`\n\n## Fields\n\n| Name       | Privacy | Type                  | Default | Description | Inherited From |\n| ---------- | ------- | --------------------- | ------- | ----------- | -------------- |\n| `headline` |         | `string \\| undefined` |         |             |                |\n\n## Methods\n\n| Name     | Privacy   | Description | Parameters | Return           | Inherited From |\n| -------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `render` | protected |             |            | `TemplateResult` |                |\n\n## Attributes\n\n| Name       | Field    | Inherited From |\n| ---------- | -------- | -------------- |\n| `headline` | headline |                |\n\n## CSS Properties\n\n| Name                                         | Default | Description                                               |\n| -------------------------------------------- | ------- | --------------------------------------------------------- |\n| `--wcp-navigation-spacing`                   |         | Spacing between navigation and headline                   |\n| `--wcp-navigation-spacing-items`             |         | Spacing between navigation items                          |\n| `--wcp-navigation-spacing-headline`          |         | Inner padding of the navigation headline                  |\n| `--wcp-navigation-dark-border-color`         |         | Border color of the navigation headline in dark mode      |\n| `--wcp-navigation-light-border-color`        |         | Border color of the navigation headline in light mode     |\n| `--wcp-navigation-headline-size`             |         | Font size of the navigation headline                      |\n| `--wcp-navigation-headline-weight`           |         | Font weight of the navigation headline                    |\n| `--wcp-navigation-headline-spacing`          |         | Letter spacing of the navigation headline                 |\n| `--wcp-navigation-headline-dark-background`  |         | Background color of the navigation headline in dark mode  |\n| `--wcp-navigation-headline-light-background` |         | Background color of the navigation headline in light mode |\n\n## Slots\n\n| Name | Description                       |\n| ---- | --------------------------------- |\n|      | Default slot for navigation items |\n\n<hr/>\n",
          "groups": [
            "feature"
          ],
          "tagName": "wcp-navigation",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Navigation",
          "declaration": {
            "name": "Navigation",
            "module": "src/components/feature/navigation/navigation.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-navigation",
          "declaration": {
            "name": "Navigation",
            "module": "src/components/feature/navigation/navigation.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/feature/navigation-item/navigation-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NavigationItem",
          "cssProperties": [
            {
              "description": "Inner padding of the item",
              "name": "--wcp-navigation-item-spacing"
            },
            {
              "description": "Background color of the item when non interactive in dark mode",
              "name": "--wcp-navigation-item-dark-passive-background"
            },
            {
              "description": "Background color of the item when hovered in dark mode",
              "name": "--wcp-navigation-item-dark-hover-background"
            },
            {
              "description": "Background color of the item when active in dark mode",
              "name": "--wcp-navigation-item-dark-active-background"
            },
            {
              "description": "Text color of the item when non interactive in dark mode",
              "name": "--wcp-navigation-item-dark-passive-color"
            },
            {
              "description": "Text color of the item when hovered in dark mode",
              "name": "--wcp-navigation-item-dark-hover-color"
            },
            {
              "description": "Text color of the item when active in dark mode",
              "name": "--wcp-navigation-item-dark-active-color"
            },
            {
              "description": "Background color of the item when non interactive in light mode",
              "name": "--wcp-navigation-item-light-passive-background"
            },
            {
              "description": "Background color of the item when hovered in light mode",
              "name": "--wcp-navigation-item-light-hover-background"
            },
            {
              "description": "Background color of the item when active in light mode",
              "name": "--wcp-navigation-item-light-active-background"
            },
            {
              "description": "Text color of the item when non interactive in light mode",
              "name": "--wcp-navigation-item-light-passive-color"
            },
            {
              "description": "Text color of the item when hovered in light mode",
              "name": "--wcp-navigation-item-light-hover-color"
            },
            {
              "description": "Text color of the item when active in light mode",
              "name": "--wcp-navigation-item-light-active-color"
            }
          ],
          "slots": [
            {
              "description": "Default slot for contents",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "href",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "href"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/utils/color-scheme.utils"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "### Non-interactive\n\nThis will probably only be used for the active item.\n\n```html\n<wcp-navigation-item>\n  Non-interactive\n</wcp-navigation-item>\n```",
            "### With link\n\n```html\n<wcp-navigation-item href=\"/home\">\n  Home\n</wcp-navigation-item>\n```"
          ],
          "readme": "# class: `NavigationItem`\n\n## Fields\n\n| Name     | Privacy | Type                  | Default | Description | Inherited From |\n| -------- | ------- | --------------------- | ------- | ----------- | -------------- |\n| `active` |         | `boolean`             | `false` |             |                |\n| `href`   |         | `string \\| undefined` |         |             |                |\n\n## Methods\n\n| Name     | Privacy   | Description | Parameters | Return           | Inherited From |\n| -------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `render` | protected |             |            | `TemplateResult` |                |\n\n## Attributes\n\n| Name     | Field  | Inherited From |\n| -------- | ------ | -------------- |\n| `active` | active |                |\n| `href`   | href   |                |\n\n## CSS Properties\n\n| Name                                             | Default | Description                                                     |\n| ------------------------------------------------ | ------- | --------------------------------------------------------------- |\n| `--wcp-navigation-item-spacing`                  |         | Inner padding of the item                                       |\n| `--wcp-navigation-item-dark-passive-background`  |         | Background color of the item when non interactive in dark mode  |\n| `--wcp-navigation-item-dark-hover-background`    |         | Background color of the item when hovered in dark mode          |\n| `--wcp-navigation-item-dark-active-background`   |         | Background color of the item when active in dark mode           |\n| `--wcp-navigation-item-dark-passive-color`       |         | Text color of the item when non interactive in dark mode        |\n| `--wcp-navigation-item-dark-hover-color`         |         | Text color of the item when hovered in dark mode                |\n| `--wcp-navigation-item-dark-active-color`        |         | Text color of the item when active in dark mode                 |\n| `--wcp-navigation-item-light-passive-background` |         | Background color of the item when non interactive in light mode |\n| `--wcp-navigation-item-light-hover-background`   |         | Background color of the item when hovered in light mode         |\n| `--wcp-navigation-item-light-active-background`  |         | Background color of the item when active in light mode          |\n| `--wcp-navigation-item-light-passive-color`      |         | Text color of the item when non interactive in light mode       |\n| `--wcp-navigation-item-light-hover-color`        |         | Text color of the item when hovered in light mode               |\n| `--wcp-navigation-item-light-active-color`       |         | Text color of the item when active in light mode                |\n\n## Slots\n\n| Name | Description               |\n| ---- | ------------------------- |\n|      | Default slot for contents |\n\n<hr/>\n",
          "groups": [
            "feature"
          ],
          "tagName": "wcp-navigation-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NavigationItem",
          "declaration": {
            "name": "NavigationItem",
            "module": "src/components/feature/navigation-item/navigation-item.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-navigation-item",
          "declaration": {
            "name": "NavigationItem",
            "module": "src/components/feature/navigation-item/navigation-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/feature/preview-controls/preview-controls.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PreviewControls",
          "cssProperties": [
            {
              "description": "Background color of the preview controls in dark mode",
              "name": "--wcp-preview-controls-dark-background"
            },
            {
              "description": "Text color of the preview controls in dark mode",
              "name": "--wcp-preview-controls-dark-color"
            },
            {
              "description": "Background color of the preview controls in light mode",
              "name": "--wcp-preview-controls-light-background"
            },
            {
              "description": "Text color of the preview controls in light mode",
              "name": "--wcp-preview-controls-light-color"
            },
            {
              "description": "Overall height of the preview controls nav bar",
              "name": "--wcp-preview-controls-height"
            },
            {
              "description": "Inner spacing, used as padding of the controls",
              "name": "--wcp-preview-controls-spacing"
            }
          ],
          "slots": [
            {
              "description": "Default slot for navigation items",
              "name": ""
            }
          ],
          "members": [],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/utils/color-scheme.utils"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-preview-controls></wcp-preview-controls>\n```",
            "### Usage with controls\n\n```html\n<wcp-preview-controls>\n  <wcp-preview-controls-viewport></wcp-preview-controls-viewport>\n</wcp-preview-controls>\n```"
          ],
          "readme": "# class: `PreviewControls`\n\n## Methods\n\n| Name     | Privacy   | Description | Parameters | Return           | Inherited From |\n| -------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `render` | protected |             |            | `TemplateResult` |                |\n\n## CSS Properties\n\n| Name                                      | Default | Description                                            |\n| ----------------------------------------- | ------- | ------------------------------------------------------ |\n| `--wcp-preview-controls-dark-background`  |         | Background color of the preview controls in dark mode  |\n| `--wcp-preview-controls-dark-color`       |         | Text color of the preview controls in dark mode        |\n| `--wcp-preview-controls-light-background` |         | Background color of the preview controls in light mode |\n| `--wcp-preview-controls-light-color`      |         | Text color of the preview controls in light mode       |\n| `--wcp-preview-controls-height`           |         | Overall height of the preview controls nav bar         |\n| `--wcp-preview-controls-spacing`          |         | Inner spacing, used as padding of the controls         |\n\n## Slots\n\n| Name | Description                       |\n| ---- | --------------------------------- |\n|      | Default slot for navigation items |\n\n<hr/>\n",
          "groups": [
            "feature"
          ],
          "tagName": "wcp-preview-controls",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PreviewControls",
          "declaration": {
            "name": "PreviewControls",
            "module": "src/components/feature/preview-controls/preview-controls.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-preview-controls",
          "declaration": {
            "name": "PreviewControls",
            "module": "src/components/feature/preview-controls/preview-controls.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/feature/preview-frame/preview-frame.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PreviewFrame",
          "cssProperties": [
            {
              "description": "Background color of the preview frame in dark mode",
              "name": "--wcp-preview-frame-dark-background"
            },
            {
              "description": "Border color of the example section in dark mode",
              "name": "--wcp-preview-frame-dark-border-color"
            },
            {
              "description": "Text color of the preview frame in dark mode",
              "name": "--wcp-preview-frame-dark-color"
            },
            {
              "description": "Background color of the preview frame in light mode",
              "name": "--wcp-preview-frame-light-background"
            },
            {
              "description": "Border color of the example section in light mode",
              "name": "--wcp-preview-frame-light-border-color"
            },
            {
              "description": "Text color of the preview frame in light mode",
              "name": "--wcp-preview-frame-light-color"
            },
            {
              "description": "Outer margin of the preview frame",
              "name": "--wcp-preview-frame-distance"
            },
            {
              "description": "Inner padding of the preview frame",
              "name": "--wcp-preview-frame-spacing"
            },
            {
              "description": "Border width of the example section",
              "name": "--wcp-preview-frame-border-width"
            },
            {
              "description": "Inner padding of the example section",
              "name": "--wcp-preview-frame-spacing"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_tabs",
              "type": {
                "text": "PreviewFramePlugin[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "initialPreviewTab",
              "type": {
                "text": "Config['initialPreviewTab'] | undefined"
              },
              "attribute": "initial-preview-tab",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getAvailableTabs",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLElementTagNameMap['wcp-tabs']['tabs']"
                }
              }
            },
            {
              "kind": "method",
              "name": "getActiveTab",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLElementTagNameMap['wcp-tabs']['activeTab']"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "initial-preview-tab",
              "type": {
                "text": "Config['initialPreviewTab'] | undefined"
              },
              "fieldName": "initialPreviewTab"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/utils/color-scheme.utils"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-preview-frame></wcp-preview-frame>\n```"
          ],
          "readme": "# class: `PreviewFrame`\n\n## Fields\n\n| Name                | Privacy | Type                                       | Default | Description | Inherited From |\n| ------------------- | ------- | ------------------------------------------ | ------- | ----------- | -------------- |\n| `initialPreviewTab` |         | `Config['initialPreviewTab'] \\| undefined` |         |             |                |\n\n## Methods\n\n| Name               | Privacy   | Description | Parameters     | Return                                           | Inherited From |\n| ------------------ | --------- | ----------- | -------------- | ------------------------------------------------ | -------------- |\n| `handleSlotChange` | protected |             | `event: Event` |                                                  |                |\n| `getAvailableTabs` | protected |             |                | `HTMLElementTagNameMap['wcp-tabs']['tabs']`      |                |\n| `getActiveTab`     | protected |             |                | `HTMLElementTagNameMap['wcp-tabs']['activeTab']` |                |\n| `render`           | protected |             |                | `TemplateResult`                                 |                |\n\n## Attributes\n\n| Name                  | Field             | Inherited From |\n| --------------------- | ----------------- | -------------- |\n| `initial-preview-tab` | initialPreviewTab |                |\n\n## CSS Properties\n\n| Name                                     | Default | Description                                         |\n| ---------------------------------------- | ------- | --------------------------------------------------- |\n| `--wcp-preview-frame-dark-background`    |         | Background color of the preview frame in dark mode  |\n| `--wcp-preview-frame-dark-border-color`  |         | Border color of the example section in dark mode    |\n| `--wcp-preview-frame-dark-color`         |         | Text color of the preview frame in dark mode        |\n| `--wcp-preview-frame-light-background`   |         | Background color of the preview frame in light mode |\n| `--wcp-preview-frame-light-border-color` |         | Border color of the example section in light mode   |\n| `--wcp-preview-frame-light-color`        |         | Text color of the preview frame in light mode       |\n| `--wcp-preview-frame-distance`           |         | Outer margin of the preview frame                   |\n| `--wcp-preview-frame-spacing`            |         | Inner padding of the preview frame                  |\n| `--wcp-preview-frame-border-width`       |         | Border width of the example section                 |\n| `--wcp-preview-frame-spacing`            |         | Inner padding of the example section                |\n\n<hr/>\n",
          "groups": [
            "feature"
          ],
          "tagName": "wcp-preview-frame",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PreviewFrame",
          "declaration": {
            "name": "PreviewFrame",
            "module": "src/components/feature/preview-frame/preview-frame.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-preview-frame",
          "declaration": {
            "name": "PreviewFrame",
            "module": "src/components/feature/preview-frame/preview-frame.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/feature/toggle-color-scheme/toggle-color-scheme.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a button to toggle the desired color-scheme.",
          "name": "ToggleColorScheme",
          "members": [
            {
              "kind": "field",
              "name": "colorScheme"
            },
            {
              "kind": "method",
              "name": "handleButtonClick"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/utils/color-scheme.utils"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-toggle-color-scheme></wcp-toggle-color-scheme>\n```"
          ],
          "readme": "# class: `ToggleColorScheme`\n\n## Fields\n\n| Name          | Privacy | Type | Default | Description | Inherited From |\n| ------------- | ------- | ---- | ------- | ----------- | -------------- |\n| `colorScheme` |         |      |         |             |                |\n\n## Methods\n\n| Name                | Privacy   | Description | Parameters | Return           | Inherited From |\n| ------------------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `handleButtonClick` |           |             |            |                  |                |\n| `render`            | protected |             |            | `TemplateResult` |                |\n\n<hr/>\n",
          "groups": [
            "feature"
          ],
          "tagName": "wcp-toggle-color-scheme",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToggleColorScheme",
          "declaration": {
            "name": "ToggleColorScheme",
            "module": "src/components/feature/toggle-color-scheme/toggle-color-scheme.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-toggle-color-scheme",
          "declaration": {
            "name": "ToggleColorScheme",
            "module": "src/components/feature/toggle-color-scheme/toggle-color-scheme.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/feature/toggle-sidebar/toggle-sidebar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a button to toggle sidebar.",
          "name": "ToggleSidebar",
          "members": [
            {
              "kind": "method",
              "name": "handleButtonClick"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-toggle-sidebar></wcp-toggle-sidebar>\n```"
          ],
          "readme": "# class: `ToggleSidebar`\n\n## Methods\n\n| Name                | Privacy   | Description | Parameters | Return           | Inherited From |\n| ------------------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `handleButtonClick` |           |             |            |                  |                |\n| `render`            | protected |             |            | `TemplateResult` |                |\n\n<hr/>\n",
          "groups": [
            "feature"
          ],
          "tagName": "wcp-toggle-sidebar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToggleSidebar",
          "declaration": {
            "name": "ToggleSidebar",
            "module": "src/components/feature/toggle-sidebar/toggle-sidebar.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-toggle-sidebar",
          "declaration": {
            "name": "ToggleSidebar",
            "module": "src/components/feature/toggle-sidebar/toggle-sidebar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/layout/aside/aside.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "To toggle the side bar remotely, you can dispatch a custom event on the global window object:\n```js\nwindow.dispatchEvent(new CustomEvent('wcp-aside:toggle'));\n```\nYou may pass an optional boolean value to the event to toggle the side bar to a specific state:\n```js\nwindow.dispatchEvent(new CustomEvent('wcp-aside:toggle', { detail: true }));\n```",
          "name": "Aside",
          "cssProperties": [
            {
              "description": "The maximum width of the aside bar when visible",
              "name": "--wcp-aside-max-width"
            },
            {
              "description": "Inner padding of the aside bar",
              "name": "--wcp-aside-spacing"
            },
            {
              "description": "The size of the toggle button",
              "name": "--wcp-aside-toggle-size"
            },
            {
              "description": "The background color of the side bar in dark mode",
              "name": "--wcp-aside-dark-background"
            },
            {
              "description": "The color of the side bar in dark mode",
              "name": "--wcp-aside-dark-color"
            },
            {
              "description": "The background color of the side bar in light mode",
              "name": "--wcp-aside-light-background"
            },
            {
              "description": "The color of the side bar in light mode",
              "name": "--wcp-aside-light-color"
            }
          ],
          "slots": [
            {
              "description": "Projects elements aside the main content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to toggle the width of the aside bar",
              "attribute": "hidden",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'complementary'",
              "description": "Presets the aria role to `complementary` as we do not use te aside element directly",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "emitToggled"
            },
            {
              "kind": "method",
              "name": "handleButtonClick"
            },
            {
              "kind": "field",
              "name": "listenAsideToggle"
            }
          ],
          "events": [
            {
              "description": "Dispatches this event when the side bar has been toggled. Do not get confused with the `wcp-aside:toggle` event.",
              "name": "wcp-aside-toggled"
            }
          ],
          "attributes": [
            {
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to toggle the width of the aside bar",
              "fieldName": "hidden"
            },
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'complementary'",
              "description": "Presets the aria role to `complementary` as we do not use te aside element directly",
              "fieldName": "role"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/utils/color-scheme.utils"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [],
          "readme": "# class: `Aside`\n\n## Fields\n\n| Name                | Privacy | Type      | Default           | Description                                                                           | Inherited From |\n| ------------------- | ------- | --------- | ----------------- | ------------------------------------------------------------------------------------- | -------------- |\n| `hidden`            |         | `boolean` | `false`           | Used to toggle the width of the aside bar                                             |                |\n| `role`              |         | `string`  | `'complementary'` | Presets the aria role to \\`complementary\\` as we do not use te aside element directly |                |\n| `listenAsideToggle` |         |           |                   |                                                                                       |                |\n\n## Methods\n\n| Name                   | Privacy   | Description | Parameters | Return           | Inherited From |\n| ---------------------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `emitToggled`          |           |             |            |                  |                |\n| `handleButtonClick`    |           |             |            |                  |                |\n| `connectedCallback`    |           |             |            |                  |                |\n| `disconnectedCallback` |           |             |            |                  |                |\n| `render`               | protected |             |            | `TemplateResult` |                |\n\n## Events\n\n| Name                | Type | Description                                                                                                        | Inherited From |\n| ------------------- | ---- | ------------------------------------------------------------------------------------------------------------------ | -------------- |\n| `wcp-aside-toggled` |      | Dispatches this event when the side bar has been toggled. Do not get confused with the \\`wcp-aside:toggle\\` event. |                |\n\n## Attributes\n\n| Name     | Field  | Inherited From |\n| -------- | ------ | -------------- |\n| `hidden` | hidden |                |\n| `role`   | role   |                |\n\n## CSS Properties\n\n| Name                           | Default | Description                                        |\n| ------------------------------ | ------- | -------------------------------------------------- |\n| `--wcp-aside-max-width`        |         | The maximum width of the aside bar when visible    |\n| `--wcp-aside-spacing`          |         | Inner padding of the aside bar                     |\n| `--wcp-aside-toggle-size`      |         | The size of the toggle button                      |\n| `--wcp-aside-dark-background`  |         | The background color of the side bar in dark mode  |\n| `--wcp-aside-dark-color`       |         | The color of the side bar in dark mode             |\n| `--wcp-aside-light-background` |         | The background color of the side bar in light mode |\n| `--wcp-aside-light-color`      |         | The color of the side bar in light mode            |\n\n## Slots\n\n| Name | Description                              |\n| ---- | ---------------------------------------- |\n|      | Projects elements aside the main content |\n\n<hr/>\n",
          "groups": [
            "layout"
          ],
          "tagName": "wcp-aside",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Aside",
          "declaration": {
            "name": "Aside",
            "module": "src/components/layout/aside/aside.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-aside",
          "declaration": {
            "name": "Aside",
            "module": "src/components/layout/aside/aside.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/layout/layout/layout.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Layout",
          "slots": [
            {
              "description": "Projects elements aside the main content",
              "name": "aside"
            },
            {
              "description": "Receives the content of the main section",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-layout>\n  <nav slot=\"aside\">To the left!</nav>\n  <article>Me the important content!</article>\n</wcp-layout>\n```"
          ],
          "readme": "# class: `Layout`\n\n## Methods\n\n| Name     | Privacy   | Description | Parameters | Return           | Inherited From |\n| -------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `render` | protected |             |            | `TemplateResult` |                |\n\n## Slots\n\n| Name    | Description                              |\n| ------- | ---------------------------------------- |\n| `aside` | Projects elements aside the main content |\n|         | Receives the content of the main section |\n\n<hr/>\n",
          "groups": [
            "layout"
          ],
          "tagName": "wcp-layout",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Layout",
          "declaration": {
            "name": "Layout",
            "module": "src/components/layout/layout/layout.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-layout",
          "declaration": {
            "name": "Layout",
            "module": "src/components/layout/layout/layout.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/layout/main/main.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Main",
          "slots": [
            {
              "description": "Projects elements to the main content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'main'",
              "description": "Presets the aria role to `main` as we do not use te main element directly",
              "attribute": "role",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'main'",
              "description": "Presets the aria role to `main` as we do not use te main element directly",
              "fieldName": "role"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [],
          "readme": "# class: `Main`\n\n## Fields\n\n| Name   | Privacy | Type     | Default  | Description                                                                 | Inherited From |\n| ------ | ------- | -------- | -------- | --------------------------------------------------------------------------- | -------------- |\n| `role` |         | `string` | `'main'` | Presets the aria role to \\`main\\` as we do not use te main element directly |                |\n\n## Methods\n\n| Name     | Privacy   | Description | Parameters | Return           | Inherited From |\n| -------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `render` | protected |             |            | `TemplateResult` |                |\n\n## Attributes\n\n| Name   | Field | Inherited From |\n| ------ | ----- | -------------- |\n| `role` | role  |                |\n\n## Slots\n\n| Name | Description                           |\n| ---- | ------------------------------------- |\n|      | Projects elements to the main content |\n\n<hr/>\n",
          "groups": [
            "layout"
          ],
          "tagName": "wcp-main",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Main",
          "declaration": {
            "name": "Main",
            "module": "src/components/layout/main/main.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-main",
          "declaration": {
            "name": "Main",
            "module": "src/components/layout/main/main.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/plugins/preview-frame-examples/preview-frame-examples.plugin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows the examples of a custom element manifest.",
          "name": "PreviewFrameExamples",
          "cssProperties": [
            {
              "description": "Spacing between examples.",
              "name": "--wcp-preview-frame-examples-spacing"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "CustomElementDeclarationWithExamples | undefined"
              },
              "attribute": "element"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'examples'",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Examples'",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "attribute": "available",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "element",
              "type": {
                "text": "CustomElementDeclarationWithExamples | undefined"
              },
              "fieldName": "element"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'examples'",
              "fieldName": "name"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Examples'",
              "fieldName": "label"
            },
            {
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "fieldName": "available"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/utils/color-scheme.utils"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [],
          "readme": "# class: `PreviewFrameExamples`\n\n## Fields\n\n| Name        | Privacy | Type                                                | Default      | Description | Inherited From |\n| ----------- | ------- | --------------------------------------------------- | ------------ | ----------- | -------------- |\n| `element`   |         | `CustomElementDeclarationWithExamples \\| undefined` |              |             |                |\n| `name`      |         | `string`                                            | `'examples'` |             |                |\n| `label`     |         | `string`                                            | `'Examples'` |             |                |\n| `available` |         | `boolean`                                           |              |             |                |\n\n## Methods\n\n| Name     | Privacy   | Description | Parameters | Return           | Inherited From |\n| -------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `render` | protected |             |            | `TemplateResult` |                |\n\n## Attributes\n\n| Name        | Field     | Inherited From |\n| ----------- | --------- | -------------- |\n| `element`   | element   |                |\n| `name`      | name      |                |\n| `label`     | label     |                |\n| `available` | available |                |\n\n## CSS Properties\n\n| Name                                   | Default | Description               |\n| -------------------------------------- | ------- | ------------------------- |\n| `--wcp-preview-frame-examples-spacing` |         | Spacing between examples. |\n\n<hr/>\n",
          "groups": [
            "plugins"
          ],
          "tagName": "wcp-preview-frame-examples",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PreviewFrameExamples",
          "declaration": {
            "name": "PreviewFrameExamples",
            "module": "src/components/plugins/preview-frame-examples/preview-frame-examples.plugin.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-preview-frame-examples",
          "declaration": {
            "name": "PreviewFrameExamples",
            "module": "src/components/plugins/preview-frame-examples/preview-frame-examples.plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/plugins/preview-frame-readme/preview-frame-readme.plugin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PreviewFrameReadme",
          "members": [
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "CustomElementDeclarationWithReadme | undefined"
              },
              "attribute": "element"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'readme'",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Readme'",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "attribute": "available",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "createRenderRoot"
            }
          ],
          "attributes": [
            {
              "name": "element",
              "type": {
                "text": "CustomElementDeclarationWithReadme | undefined"
              },
              "fieldName": "element"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'readme'",
              "fieldName": "name"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Readme'",
              "fieldName": "label"
            },
            {
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "fieldName": "available"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/utils/color-scheme.utils"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "readme": "# class: `PreviewFrameReadme`\n\n## Fields\n\n| Name        | Privacy | Type                                              | Default    | Description | Inherited From |\n| ----------- | ------- | ------------------------------------------------- | ---------- | ----------- | -------------- |\n| `element`   |         | `CustomElementDeclarationWithReadme \\| undefined` |            |             |                |\n| `name`      |         | `string`                                          | `'readme'` |             |                |\n| `label`     |         | `string`                                          | `'Readme'` |             |                |\n| `available` |         | `boolean`                                         |            |             |                |\n\n## Methods\n\n| Name                | Privacy   | Description | Parameters | Return           | Inherited From |\n| ------------------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `createRenderRoot`  |           |             |            |                  |                |\n| `connectedCallback` |           |             |            |                  |                |\n| `render`            | protected |             |            | `TemplateResult` |                |\n\n## Attributes\n\n| Name        | Field     | Inherited From |\n| ----------- | --------- | -------------- |\n| `element`   | element   |                |\n| `name`      | name      |                |\n| `label`     | label     |                |\n| `available` | available |                |\n\n<hr/>\n",
          "groups": [
            "plugins"
          ],
          "tagName": "wcp-preview-frame-readme",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PreviewFrameReadme",
          "declaration": {
            "name": "PreviewFrameReadme",
            "module": "src/components/plugins/preview-frame-readme/preview-frame-readme.plugin.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-preview-frame-readme",
          "declaration": {
            "name": "PreviewFrameReadme",
            "module": "src/components/plugins/preview-frame-readme/preview-frame-readme.plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/plugins/preview-frame-viewer/preview-frame-viewer.plugin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PreviewFrameViewer",
          "members": [
            {
              "kind": "field",
              "name": "#element",
              "privacy": "private",
              "type": {
                "text": "CustomElementDeclaration | undefined"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "attribute": "element"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'viewer'",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Viewer'",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "available",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "elementData",
              "type": {
                "text": "CustomElementData | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getElementReference",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Element | undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "getFields",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "CustomElementField[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "getSlots",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Slot[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "getSlotsWithData",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "{ slot: Slot; data: string }[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleControlsInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderSlots",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderFieldControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "member",
                  "type": {
                    "text": "CustomElementField"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderSlotControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "Slot"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderElement",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "element",
              "fieldName": "element"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'viewer'",
              "fieldName": "name"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Viewer'",
              "fieldName": "label"
            },
            {
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "available"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/utils/color-scheme.utils"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "readme": "# class: `PreviewFrameViewer`\n\n## Fields\n\n| Name        | Privacy | Type      | Default    | Description | Inherited From |\n| ----------- | ------- | --------- | ---------- | ----------- | -------------- |\n| `element`   |         |           |            |             |                |\n| `name`      |         | `string`  | `'viewer'` |             |                |\n| `label`     |         | `string`  | `'Viewer'` |             |                |\n| `available` |         | `boolean` | `true`     |             |                |\n\n## Methods\n\n| Name                  | Privacy   | Description | Parameters                   | Return                           | Inherited From |\n| --------------------- | --------- | ----------- | ---------------------------- | -------------------------------- | -------------- |\n| `getElementReference` | protected |             |                              | `Element \\| undefined`           |                |\n| `getFields`           | protected |             |                              | `CustomElementField[]`           |                |\n| `getSlots`            | protected |             |                              | `Slot[]`                         |                |\n| `getSlotsWithData`    | protected |             |                              | `{ slot: Slot; data: string }[]` |                |\n| `handleControlsInput` | protected |             | `event: InputEvent`          |                                  |                |\n| `renderSlots`         | protected |             |                              | `TemplateResult`                 |                |\n| `renderFieldControl`  | protected |             | `member: CustomElementField` | `TemplateResult`                 |                |\n| `renderSlotControl`   | protected |             | `slot: Slot`                 | `TemplateResult`                 |                |\n| `renderElement`       | protected |             |                              | `TemplateResult`                 |                |\n| `render`              | protected |             |                              | `TemplateResult`                 |                |\n\n## Attributes\n\n| Name        | Field     | Inherited From |\n| ----------- | --------- | -------------- |\n| `element`   | element   |                |\n| `name`      | name      |                |\n| `label`     | label     |                |\n| `available` | available |                |\n\n<hr/>\n",
          "groups": [
            "plugins"
          ],
          "tagName": "wcp-preview-frame-viewer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PreviewFrameViewer",
          "declaration": {
            "name": "PreviewFrameViewer",
            "module": "src/components/plugins/preview-frame-viewer/preview-frame-viewer.plugin.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-preview-frame-viewer",
          "declaration": {
            "name": "PreviewFrameViewer",
            "module": "src/components/plugins/preview-frame-viewer/preview-frame-viewer.plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/button/button.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a button element.",
          "name": "Button",
          "cssProperties": [
            {
              "description": "Background color of the button if non interactive in dark mode",
              "name": "--wcp-button-dark-passive-background"
            },
            {
              "description": "Border color of the button if non interactive in dark mode",
              "name": "--wcp-button-dark-passive-border-color"
            },
            {
              "description": "Text color of the button if non interactive in dark mode",
              "name": "--wcp-button-dark-passive-color"
            },
            {
              "description": "Background color of the button if hovered in dark mode",
              "name": "--wcp-button-dark-hover-background"
            },
            {
              "description": "Border color of the button if hovered in dark mode",
              "name": "--wcp-button-dark-hover-border-color"
            },
            {
              "description": "Text color of the button if hovered in dark mode",
              "name": "--wcp-button-dark-hover-color"
            },
            {
              "description": "Background color of the button if active in dark mode",
              "name": "--wcp-button-dark-active-background"
            },
            {
              "description": "Border color of the button if active in dark mode",
              "name": "--wcp-button-dark-active-border-color"
            },
            {
              "description": "Text color of the button if active in dark mode",
              "name": "--wcp-button-dark-active-color"
            },
            {
              "description": "Background color of the button if non interactive in light mode",
              "name": "--wcp-button-light-passive-background"
            },
            {
              "description": "Border color of the button if non interactive in light mode",
              "name": "--wcp-button-light-passive-border-color"
            },
            {
              "description": "Text color of the button if non interactive in light mode",
              "name": "--wcp-button-light-passive-color"
            },
            {
              "description": "Background color of the button if hovered in light mode",
              "name": "--wcp-button-light-hover-background"
            },
            {
              "description": "Border color of the button if hovered in light mode",
              "name": "--wcp-button-light-hover-border-color"
            },
            {
              "description": "Text color of the button if hovered in light mode",
              "name": "--wcp-button-light-hover-color"
            },
            {
              "description": "Background color of the button if active in light mode",
              "name": "--wcp-button-light-active-background"
            },
            {
              "description": "Border color of the button if active in light mode",
              "name": "--wcp-button-light-active-border-color"
            },
            {
              "description": "Text color of the button if active in light mode",
              "name": "--wcp-button-light-active-color"
            }
          ],
          "slots": [
            {
              "description": "Default slot for the button content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "nowrap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "nowrap",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stretched",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows stretching the button across the full width of its container.\nThis is useful for buttons that are used in a narrow form, or in general\non small viewports, like handheld devices.",
              "attribute": "stretched",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "kind",
              "type": {
                "text": "'button' | 'icon'"
              },
              "default": "'button'",
              "description": "The kind of button to render. Either like a conventional button, or for\nicons. Icon buttons are quadrtic and will show a radial background on interaction.",
              "attribute": "kind",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "default": "'button'",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | undefined"
              },
              "attribute": "target",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleButtonClick"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "nowrap",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "nowrap"
            },
            {
              "name": "stretched",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows stretching the button across the full width of its container.\nThis is useful for buttons that are used in a narrow form, or in general\non small viewports, like handheld devices.",
              "fieldName": "stretched"
            },
            {
              "name": "kind",
              "type": {
                "text": "'button' | 'icon'"
              },
              "default": "'button'",
              "description": "The kind of button to render. Either like a conventional button, or for\nicons. Icon buttons are quadrtic and will show a radial background on interaction.",
              "fieldName": "kind"
            },
            {
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "default": "'button'",
              "fieldName": "type"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | undefined"
              },
              "fieldName": "target"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/utils/color-scheme.utils"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "## Default button\n\n```html\n<wcp-button>Click me!</wcp-button>\n```",
            "## Disabled button\n\n```html\n<wcp-button disabled>Try to click me!</wcp-button>\n```",
            "## Button with icon\n\n```html\n<wcp-button kind=\"icon\">\n <wcp-icon name=\"menu\"></wcp-icon>\n</wcp-button>\n```",
            "## Force active state\n\n```html\n<wcp-button class=\"active\">Link</wcp-button>\n```",
            "## Use as link\n\n```html\n<wcp-button href=\".\">Link</wcp-button>\n```",
            "## Use as native submit button in form\n\n```html\n<form onsubmit=\"alert('Submit!'); return false\">\n <wcp-button type=\"submit\">Submit</wcp-button>\n</form>\n```",
            "## Use as native reset button in form\n\n```html\n<form onreset=\"alert('Reset!'); return false\">\n  <wcp-button type=\"reset\">Reset</wcp-button>\n</form>\n```"
          ],
          "readme": "# class: `Button`\n\n## Fields\n\n| Name        | Privacy | Type                                                      | Default    | Description                                                                                                                                                                                      | Inherited From |\n| ----------- | ------- | --------------------------------------------------------- | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------- |\n| `disabled`  |         | `boolean`                                                 | `false`    |                                                                                                                                                                                                  |                |\n| `nowrap`    |         | `boolean`                                                 | `false`    |                                                                                                                                                                                                  |                |\n| `stretched` |         | `boolean`                                                 | `false`    | Allows stretching the button across the full width of its container.&#xA;This is useful for buttons that are used in a narrow form, or in general&#xA;on small viewports, like handheld devices. |                |\n| `kind`      |         | `'button' \\| 'icon'`                                      | `'button'` | The kind of button to render. Either like a conventional button, or for&#xA;icons. Icon buttons are quadrtic and will show a radial background on interaction.                                   |                |\n| `type`      |         | `'button' \\| 'reset' \\| 'submit'`                         | `'button'` |                                                                                                                                                                                                  |                |\n| `href`      |         | `string \\| undefined`                                     |            |                                                                                                                                                                                                  |                |\n| `target`    |         | `'_self' \\| '_blank' \\| '_parent' \\| '_top' \\| undefined` |            |                                                                                                                                                                                                  |                |\n\n## Methods\n\n| Name                | Privacy   | Description | Parameters | Return           | Inherited From |\n| ------------------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `handleButtonClick` |           |             |            |                  |                |\n| `render`            | protected |             |            | `TemplateResult` |                |\n\n## Attributes\n\n| Name        | Field     | Inherited From |\n| ----------- | --------- | -------------- |\n| `disabled`  | disabled  |                |\n| `nowrap`    | nowrap    |                |\n| `stretched` | stretched |                |\n| `kind`      | kind      |                |\n| `type`      | type      |                |\n| `href`      | href      |                |\n| `target`    | target    |                |\n\n## CSS Properties\n\n| Name                                      | Default | Description                                                     |\n| ----------------------------------------- | ------- | --------------------------------------------------------------- |\n| `--wcp-button-dark-passive-background`    |         | Background color of the button if non interactive in dark mode  |\n| `--wcp-button-dark-passive-border-color`  |         | Border color of the button if non interactive in dark mode      |\n| `--wcp-button-dark-passive-color`         |         | Text color of the button if non interactive in dark mode        |\n| `--wcp-button-dark-hover-background`      |         | Background color of the button if hovered in dark mode          |\n| `--wcp-button-dark-hover-border-color`    |         | Border color of the button if hovered in dark mode              |\n| `--wcp-button-dark-hover-color`           |         | Text color of the button if hovered in dark mode                |\n| `--wcp-button-dark-active-background`     |         | Background color of the button if active in dark mode           |\n| `--wcp-button-dark-active-border-color`   |         | Border color of the button if active in dark mode               |\n| `--wcp-button-dark-active-color`          |         | Text color of the button if active in dark mode                 |\n| `--wcp-button-light-passive-background`   |         | Background color of the button if non interactive in light mode |\n| `--wcp-button-light-passive-border-color` |         | Border color of the button if non interactive in light mode     |\n| `--wcp-button-light-passive-color`        |         | Text color of the button if non interactive in light mode       |\n| `--wcp-button-light-hover-background`     |         | Background color of the button if hovered in light mode         |\n| `--wcp-button-light-hover-border-color`   |         | Border color of the button if hovered in light mode             |\n| `--wcp-button-light-hover-color`          |         | Text color of the button if hovered in light mode               |\n| `--wcp-button-light-active-background`    |         | Background color of the button if active in light mode          |\n| `--wcp-button-light-active-border-color`  |         | Border color of the button if active in light mode              |\n| `--wcp-button-light-active-color`         |         | Text color of the button if active in light mode                |\n\n## Slots\n\n| Name | Description                         |\n| ---- | ----------------------------------- |\n|      | Default slot for the button content |\n\n<hr/>\n",
          "groups": [
            "ui"
          ],
          "tagName": "wcp-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "src/components/ui/button/button.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-button",
          "declaration": {
            "name": "Button",
            "module": "src/components/ui/button/button.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/code/code.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a formatted code snippet.",
          "name": "Code",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/utils/color-scheme.utils"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-code>\n  <pre><code>Some code</code></pre>\n</wcp-code>\n```"
          ],
          "readme": "# class: `Code`\n\n## Methods\n\n| Name               | Privacy   | Description | Parameters | Return           | Inherited From |\n| ------------------ | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `createRenderRoot` |           |             |            |                  |                |\n| `render`           | protected |             |            | `TemplateResult` |                |\n\n<hr/>\n",
          "groups": [
            "ui"
          ],
          "tagName": "wcp-code",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Code",
          "declaration": {
            "name": "Code",
            "module": "src/components/ui/code/code.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-code",
          "declaration": {
            "name": "Code",
            "module": "src/components/ui/code/code.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/icon/icon.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows an icon from the css.gg icon set.",
          "name": "Icon",
          "cssProperties": [
            {
              "description": "Sets the size of the icon as unitless number in pixels",
              "name": "--wcp-icon-size"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "attribute": "name",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "fieldName": "name"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "## Use icon\nBy setting the name attribute.\n\n```html\n<wcp-icon name=\"smartphone\"></wcp-icon>\n```",
            "### Set a custom size\n\n```html\n<wcp-icon name=\"laptop\" style=\"--wcp-icon-size: 44\"></wcp-icon>\n```"
          ],
          "readme": "# class: `Icon`\n\n## Fields\n\n| Name   | Privacy | Type     | Default | Description | Inherited From |\n| ------ | ------- | -------- | ------- | ----------- | -------------- |\n| `name` |         | `string` |         |             |                |\n\n## Methods\n\n| Name     | Privacy   | Description | Parameters | Return           | Inherited From |\n| -------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `render` | protected |             |            | `TemplateResult` |                |\n\n## Attributes\n\n| Name   | Field | Inherited From |\n| ------ | ----- | -------------- |\n| `name` | name  |                |\n\n## CSS Properties\n\n| Name              | Default | Description                                            |\n| ----------------- | ------- | ------------------------------------------------------ |\n| `--wcp-icon-size` |         | Sets the size of the icon as unitless number in pixels |\n\n<hr/>\n",
          "groups": [
            "ui"
          ],
          "tagName": "wcp-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "src/components/ui/icon/icon.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-icon",
          "declaration": {
            "name": "Icon",
            "module": "src/components/ui/icon/icon.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/tabs/tabs.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Tabs",
          "cssProperties": [
            {
              "description": "The gap between the tablist and the tabpanels",
              "name": "--wcp-tabs-tablist-gap"
            },
            {
              "description": "The inner padding of the tablist",
              "name": "--wcp-tabs-tablist-spacing"
            },
            {
              "description": "The inner padding of the tabs",
              "name": "--wcp-tabs-tab-spacing"
            },
            {
              "description": "The border width of the active tab",
              "name": "--wcp-tabs-tab-active-border-width"
            },
            {
              "description": "The inner padding of the tabpanels",
              "name": "--wcp-tabs-panel-spacing"
            },
            {
              "description": "The border color of the tablist in dark mode",
              "name": "--wcp-tabs-tablist-dark-border-color"
            },
            {
              "description": "The border color of the active tab in dark mode",
              "name": "--wcp-tabs-tab-active-dark-border-color"
            },
            {
              "description": "The border color of the tablist in light mode",
              "name": "--wcp-tabs-tablist-light-border-color"
            },
            {
              "description": "The border color of the active tab in light mode",
              "name": "--wcp-tabs-tab-active-light-border-color"
            }
          ],
          "slots": [
            {
              "description": "name - The content of the named tab.",
              "name": "tab"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tabFocus",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "tabRoles",
              "type": {
                "text": "HTMLElement[]"
              }
            },
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "Record<string, string>"
              },
              "default": "{}",
              "attribute": "tabs"
            },
            {
              "kind": "field",
              "name": "activeTab",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "active-tab",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "emitActiveTabChange"
            },
            {
              "kind": "method",
              "name": "handleTabClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "tabs",
              "type": {
                "text": "Record<string, string>"
              },
              "default": "{}",
              "fieldName": "tabs"
            },
            {
              "name": "active-tab",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "activeTab"
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/utils/color-scheme.utils"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-tabs tabs='{\"first\": \"First tab\", \"second\": \"Second tab\"}'>\n <div slot=\"first\">First tab content</div>\n <div slot=\"second\">Second tab content</div>\n</wcp-tabs>\n```",
            "### Active tab preselected\n\n```html\n<wcp-tabs tabs='{\"first\": \"First tab\", \"second\": \"Second tab\"}' active-tab=\"second\">\n <div slot=\"first\">First tab content</div>\n <div slot=\"second\">Second tab content</div>\n</wcp-tabs>\n```"
          ],
          "readme": "# class: `Tabs`\n\n## Fields\n\n| Name        | Privacy | Type                     | Default | Description | Inherited From |\n| ----------- | ------- | ------------------------ | ------- | ----------- | -------------- |\n| `tabFocus`  |         | `number`                 | `0`     |             |                |\n| `tabRoles`  |         | `HTMLElement[]`          |         |             |                |\n| `tabs`      |         | `Record<string, string>` | `{}`    |             |                |\n| `activeTab` |         | `string \\| undefined`    |         |             |                |\n\n## Methods\n\n| Name                  | Privacy   | Description | Parameters             | Return           | Inherited From |\n| --------------------- | --------- | ----------- | ---------------------- | ---------------- | -------------- |\n| `emitActiveTabChange` |           |             |                        |                  |                |\n| `handleTabClick`      |           |             | `event: Event`         |                  |                |\n| `handleKeydown`       |           |             | `event: KeyboardEvent` |                  |                |\n| `render`              | protected |             |                        | `TemplateResult` |                |\n\n## Attributes\n\n| Name         | Field     | Inherited From |\n| ------------ | --------- | -------------- |\n| `tabs`       | tabs      |                |\n| `active-tab` | activeTab |                |\n\n## CSS Properties\n\n| Name                                       | Default | Description                                      |\n| ------------------------------------------ | ------- | ------------------------------------------------ |\n| `--wcp-tabs-tablist-gap`                   |         | The gap between the tablist and the tabpanels    |\n| `--wcp-tabs-tablist-spacing`               |         | The inner padding of the tablist                 |\n| `--wcp-tabs-tab-spacing`                   |         | The inner padding of the tabs                    |\n| `--wcp-tabs-tab-active-border-width`       |         | The border width of the active tab               |\n| `--wcp-tabs-panel-spacing`                 |         | The inner padding of the tabpanels               |\n| `--wcp-tabs-tablist-dark-border-color`     |         | The border color of the tablist in dark mode     |\n| `--wcp-tabs-tab-active-dark-border-color`  |         | The border color of the active tab in dark mode  |\n| `--wcp-tabs-tablist-light-border-color`    |         | The border color of the tablist in light mode    |\n| `--wcp-tabs-tab-active-light-border-color` |         | The border color of the active tab in light mode |\n\n## Slots\n\n| Name  | Description                          |\n| ----- | ------------------------------------ |\n| `tab` | name - The content of the named tab. |\n\n<hr/>\n",
          "groups": [
            "ui"
          ],
          "tagName": "wcp-tabs",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Tabs",
          "declaration": {
            "name": "Tabs",
            "module": "src/components/ui/tabs/tabs.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-tabs",
          "declaration": {
            "name": "Tabs",
            "module": "src/components/ui/tabs/tabs.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/title/title.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows the application title and a logo.",
          "name": "Title",
          "cssProperties": [
            {
              "description": "The gap between the logo and the title",
              "name": "--wcp-title-gap"
            },
            {
              "description": "The height of the title. Content may exceed and scales the tile",
              "name": "--wcp-title-height"
            },
            {
              "description": "Inner padding of the title",
              "name": "--wcp-title-spacing"
            },
            {
              "description": "The font size of the title",
              "name": "--wcp-title-headline-size"
            },
            {
              "description": "The font weight of the title",
              "name": "--wcp-title-headline-weight"
            },
            {
              "description": "The letter spacing of the title",
              "name": "--wcp-title-headline-spacing"
            },
            {
              "description": "The line height of the title",
              "name": "--wcp-title-headline-line-height"
            },
            {
              "description": "The text transform of the title",
              "name": "--wcp-title-headline-transform"
            }
          ],
          "slots": [
            {
              "description": "Receives the logo image to be shown",
              "name": "logo"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "attribute": "title",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "fieldName": "title"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-title title=\"Web Components Preview\">\n  <img slot=\"logo\" src=\"assets/icons/logo.svg\" height=\"30px\" />\n</wcp-title>\n```"
          ],
          "readme": "# class: `Title`\n\n## Fields\n\n| Name    | Privacy | Type     | Default | Description | Inherited From |\n| ------- | ------- | -------- | ------- | ----------- | -------------- |\n| `title` |         | `string` |         |             |                |\n\n## Methods\n\n| Name     | Privacy   | Description | Parameters | Return           | Inherited From |\n| -------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `render` | protected |             |            | `TemplateResult` |                |\n\n## Attributes\n\n| Name    | Field | Inherited From |\n| ------- | ----- | -------------- |\n| `title` | title |                |\n\n## CSS Properties\n\n| Name                               | Default | Description                                                     |\n| ---------------------------------- | ------- | --------------------------------------------------------------- |\n| `--wcp-title-gap`                  |         | The gap between the logo and the title                          |\n| `--wcp-title-height`               |         | The height of the title. Content may exceed and scales the tile |\n| `--wcp-title-spacing`              |         | Inner padding of the title                                      |\n| `--wcp-title-headline-size`        |         | The font size of the title                                      |\n| `--wcp-title-headline-weight`      |         | The font weight of the title                                    |\n| `--wcp-title-headline-spacing`     |         | The letter spacing of the title                                 |\n| `--wcp-title-headline-line-height` |         | The line height of the title                                    |\n| `--wcp-title-headline-transform`   |         | The text transform of the title                                 |\n\n## Slots\n\n| Name   | Description                         |\n| ------ | ----------------------------------- |\n| `logo` | Receives the logo image to be shown |\n\n<hr/>\n",
          "groups": [
            "ui"
          ],
          "tagName": "wcp-title",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Title",
          "declaration": {
            "name": "Title",
            "module": "src/components/ui/title/title.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-title",
          "declaration": {
            "name": "Title",
            "module": "src/components/ui/title/title.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/plugins/preview-frame-viewer/preview-frame-viewer-stage/preview-frame-viewer-stage.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PreviewFrameViewerStage",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "examples": [
            "```html\n<wcp-preview-frame-viewer-stage>\n  <wcp-button>Example button</wcp-button>\n</wcp-preview-frame-viewer-stage>\n```"
          ],
          "readme": "# class: `PreviewFrameViewerStage`\n\n## Methods\n\n| Name     | Privacy   | Description | Parameters | Return           | Inherited From |\n| -------- | --------- | ----------- | ---------- | ---------------- | -------------- |\n| `render` | protected |             |            | `TemplateResult` |                |\n\n<hr/>\n",
          "groups": [
            "plugins"
          ],
          "tagName": "wcp-preview-frame-viewer-stage",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PreviewFrameViewerStage",
          "declaration": {
            "name": "PreviewFrameViewerStage",
            "module": "src/components/plugins/preview-frame-viewer/preview-frame-viewer-stage/preview-frame-viewer-stage.component.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wcp-preview-frame-viewer-stage",
          "declaration": {
            "name": "PreviewFrameViewerStage",
            "module": "src/components/plugins/preview-frame-viewer/preview-frame-viewer-stage/preview-frame-viewer-stage.component.ts"
          }
        }
      ]
    }
  ]
}
