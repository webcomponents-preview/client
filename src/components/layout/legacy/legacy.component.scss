@use 'sass:map' as map;

// load markdown theme
@use 'github-markdown-css/github-markdown-dark.css';

// load icon styles
@use 'css.gg/icons/scss/close';
@use 'css.gg/icons/scss/external';
@use 'css.gg/icons/scss/laptop';
@use 'css.gg/icons/scss/menu';
@use 'css.gg/icons/scss/menu-right';
@use 'css.gg/icons/scss/push-chevron-down';
@use 'css.gg/icons/scss/push-chevron-up';
@use 'css.gg/icons/scss/ratio';
@use 'css.gg/icons/scss/screen';
@use 'css.gg/icons/scss/screen-wide';
@use 'css.gg/icons/scss/smartphone';
@use 'css.gg/icons/scss/sync';

// use scss variables for media queries
$breakpoints: (
  xs: 480px,
  // unsued yet
  sm: 768px,
);

@mixin breakpoint($name) {
  @media (min-width: map.get($breakpoints, $name)) {
    @content;
  }
}

// prettier-ignore
:host {
  ---wcp-color-grey-100:  hsl(0, 0%, 100%);
  ---wcp-color-grey-96:  hsl(0, 0%, 96%);
  ---wcp-color-grey-90:  hsl(0, 0%, 90%);

  ---wcp-color-blue-13: hsl(225, 6%, 13%);
  ---wcp-color-blue-17: hsl(215, 28%, 17%);
  ---wcp-color-blue-27: hsl(217, 19%, 27%);
  ---wcp-color-blue-34: hsl(215, 14%, 34%);
  ---wcp-color-blue-65: hsl(218, 11%, 65%);
  ---wcp-color-blue-91: hsl(220, 13%, 91%);
  ---wcp-color-blue-96: hsl(220, 14%, 96%);

  ---wcp-fx-default-duration: 0.2s;
  ---wcp-fx-layout-duration: 0.5s;

  ---wcp-nav-collapsed-width: 60px;
  ---wcp-nav-expanded-width: 260px;
  ---wcp-controls-height: 70px;

  // calculated in component
  ---wcp-viewport-height: calc(var(--wcp-viewport-height) * 1px);
  ---wcp-viewport-width: calc(var(--wcp-viewport-width) * 1px);
  ---wcp-viewport-scale: clamp(0.25, var(--wcp-viewport-scale, 1), 1);
}

:host {
  display: flex;
  flex: 1 0 auto;
  flex-direction: row;

  height: 100vh;
  width: 100vw;

  line-height: 1.5;
  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,
    'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  font-feature-settings: normal;

  font-size: 20px;

  @include breakpoint(sm) {
    font-size: 15px;
  }
}

// disable click delay
// https://stackoverflow.com/a/20046504
a,
input,
button {
  touch-action: manipulation;
}

aside {
  box-sizing: border-box;
  padding: 0 20px;
  max-height: 100%;
  max-width: 100%;
  min-width: 100%;

  overflow: auto;
  overflow-x: hidden;

  background-color: var(---wcp-color-blue-17);
  color: var(---wcp-color-blue-96);

  transition: ease-in-out var(---wcp-fx-layout-duration);
  transition-property: max-width, min-width;

  position: fixed;
  inset: 0;
  z-index: 3;

  @include breakpoint(sm) {
    max-width: var(---wcp-nav-expanded-width);
    min-width: var(---wcp-nav-expanded-width);

    position: static;
    inset: auto;
  }

  :host([hide-aside]) & {
    max-width: var(---wcp-nav-collapsed-width);
    min-width: var(---wcp-nav-collapsed-width);
    overflow: hidden;
  }

  header {
    position: sticky;
    top: 17px;
    right: 30px;
    z-index: 2;
  }

  nav {
    display: inline;
    position: static;

    overflow: hidden;

    > * {
      transition: calc(var(---wcp-fx-layout-duration) - var(---wcp-fx-default-duration)) opacity
        var(---wcp-fx-default-duration) ease-in-out;

      :host([hide-aside]) & {
        pointer-events: none;
        transition-delay: 0s;
        opacity: 0;
      }
    }
  }

  h3 {
    position: sticky;
    top: 0;
    z-index: 1;
    margin: 45px 0 0;
    padding: 15px 0 10px 10px;
    background-color: var(---wcp-color-blue-17);
  }

  ul {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 5px;

    margin: 0;
    padding: 0 0 10px;
    list-style: none;

    &:has(+ h3) {
      padding-bottom: 20px;
      margin-bottom: 10px;

      &::after {
        content: '';
        display: block;
        position: absolute;
        inset: auto 0 0;
        border-top: 1px solid currentColor;
      }
    }

    ~ h3 {
      margin-top: 0;
    }
  }

  a {
    display: flex;
    padding: 5px 10px;

    color: inherit;
    text-decoration: none;
    white-space: nowrap;

    &.active,
    &:hover {
      background-color: var(---wcp-color-blue-34);
      border-radius: var(---wcp-border-radius);
    }
  }

  .toggle-aside {
    appearance: none;
    all: unset;

    display: block;
    height: 22px;
    width: 22px;
    cursor: pointer;

    position: absolute;
    inset: 0 0 auto auto;
  }
}

main {
  display: flex;
  flex-direction: column;
  flex: 1 1 auto;
  max-width: 100vw;

  :host([hide-aside]) & {
    max-width: calc(100vw - var(---wcp-nav-collapsed-width));
    margin-left: var(---wcp-nav-collapsed-width);

    @include breakpoint(sm) {
      max-width: 100vw;
      margin-left: 0;
    }
  }

  .controls {
    display: flex;
    flex-direction: row;
    flex: 0 0 auto;

    box-sizing: border-box;
    height: var(---wcp-controls-height);
    padding: 20px;

    background-color: var(---wcp-color-blue-34);
  }

  .content-controls,
  .viewport-controls {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 10px;

    button {
      appearance: none;
      box-sizing: border-box;
      display: flex;
      padding: 5px 10px;
      height: 30px;
      width: 45px;

      align-items: center;
      justify-content: center;

      color: var(---wcp-color-blue-17);
      text-align: center;

      background: var(---wcp-color-blue-91);
      border: 0;
      border-radius: var(---wcp-border-radius);

      &:not(:disabled) {
        cursor: pointer;

        &.active {
          background-color: var(---wcp-color-blue-27);
          color: var(---wcp-color-blue-65);
        }

        &:not(.active):hover {
          background-color: var(---wcp-color-blue-65);
        }
      }

      &:disabled {
        cursor: default;
        opacity: 0.5;
      }
    }
  }

  .viewport-controls {
    // the viewport can't be tested on small devices anyway
    display: none;

    @include breakpoint(sm) {
      display: flex;
    }

    .toggle-ratio {
      margin-left: 10px;
    }

    :host([simulate-viewport]) &::after {
      // prettier-ignore
      counter-reset:
        height var(--wcp-viewport-height)
        width var(--wcp-viewport-width)
        scale calc(var(---viewport-scale) * 100);
      content: counter(height) 'px \00D7\00a0'counter(height) 'px \A'counter(scale) '%';
      color: var(---wcp-color-blue-91);
      font-size: 0.85em;
      line-height: 1.2;
      white-space: pre;
    }
  }

  .content-controls {
    margin-left: auto;
  }

  .preview {
    position: relative;
    overflow: hidden;
    background-color: var(---wcp-color-blue-13);

    :host(:not([has-component-details])) &,
    :host(:not([has-fragment-details])) & {
      flex: 1 0 auto;
    }

    :host([has-component-details]) & {
      flex: 1 1 auto;
    }

    :host([has-fragment-details]) & {
      flex: 0 1 0;
      height: 0;
    }
  }

  iframe {
    background-color: var(---wcp-color-grey-100);
    border: none;

    :host(:not([has-fragment-details])) & {
      position: absolute;
      inset: 50% auto auto 50%;
      height: var(---wcp-viewport-height, 100%);
      width: var(---wcp-viewport-width, 100%);
      transform-origin: center center;
      transform: translate(-50%, -50%) scale(var(---wcp-viewport-scale));
    }

    :host([has-fragment-details]) & {
      display: none;
    }
  }

  .component-details {
    position: relative;
    flex: 1 1 auto;
    max-height: calc(100vh - var(---wcp-controls-height));

    padding: 20px;
    overflow: scroll;

    background-color: var(---wcp-color-blue-34);
    color: var(---wcp-color-blue-96);

    transition: max-height ease-in-out var(---wcp-fx-layout-duration);

    @include breakpoint(sm) {
      :host(:not([expand-component-details])) & {
        max-height: calc(50vh - var(---wcp-controls-height));
      }
    }

    :host([hide-component-details]) & {
      overflow: hidden;
      max-height: 20px;
    }

    header {
      position: sticky;
      inset: 0 0 auto auto;
      z-index: 2;

      nav {
        position: absolute;
        inset: 0 0 auto auto;

        display: flex;
        flex-direction: row-reverse;
        align-items: flex-end;
        gap: 10px;
      }
    }

    .markdown-body {
      background: none;
      transition: calc(var(---wcp-fx-layout-duration) - var(---wcp-fx-default-duration)) opacity ease-in-out
        var(---wcp-fx-default-duration);

      :host([hide-component-details]) & {
        pointer-events: none;
        transition-delay: 0s;
        opacity: 0;
      }

      hr {
        height: 1px;
      }
    }

    .expand-details,
    .toggle-details {
      all: unset;
      appearance: none;

      display: block;
      height: 22px;
      width: 22px;
      cursor: pointer;
    }

    .expand-details {
      display: none;

      @include breakpoint(sm) {
        :host(:not([hide-component-details])) & {
          display: block;
        }
      }

      .gg-push-chevron {
        &-down {
          transform: translateY(-2.5px);
        }

        &-up {
          transform: translateY(2.5px);
        }
      }
    }
  }

  .fragment-details {
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;

    padding: 20px;
    overflow: hidden;

    h3 {
      flex: 0 1 auto;
      margin: 0 0 10px;
    }

    div {
      flex: 1 1 auto;
      overflow: hidden;

      display: grid;
      gap: 10px;
      grid-auto-columns: minmax(0, 1fr);
      grid-auto-flow: column;
      grid-auto-rows: 1fr;
      grid-template-areas:
        'config html'
        'js css';

      pre,
      span {
        position: relative;

        background-color: var(---wcp-color-grey-90);
        border-radius: var(---wcp-border-radius);

        $areas: config, html, js, css;
        @each $area in $areas {
          &[aria-label='#{$area}'] {
            grid-area: #{$area};
          }
        }

        &::before {
          content: attr(aria-label);
          display: block;

          position: absolute;
          inset: 5px auto auto 5px;
          padding: 2px 10px;
          width: fit-content;

          color: var(---wcp-color-grey-96);
          background-color: var(---wcp-color-blue-34);
          border-radius: var(---wcp-border-radius);
        }
      }

      pre {
        margin: 0;
        padding: 10px;
        overflow: auto;

        cursor: pointer;

        &::before {
          position: sticky;
          transition: calc(var(---wcp-fx-layout-duration) - var(---wcp-fx-default-duration)) ease opacity;
        }

        &:not(.copied):hover::before {
          content: 'copy "' attr(aria-label) '"';
          opacity: 0.5;
        }

        &.copied::before {
          content: 'copied "' attr(aria-label) '" ✓';
        }
      }

      span {
        display: flex;
        align-items: center;
        justify-content: center;
      }
    }
  }
}
