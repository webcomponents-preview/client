{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "esbuild.server.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createServer",
          "return": {
            "type": {
              "text": "DevServer"
            }
          },
          "parameters": [
            {
              "name": "port",
              "type": {
                "text": "number"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createServer",
          "declaration": {
            "name": "createServer",
            "module": "esbuild.server.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "web-test-runner.setup.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/features/markdown-example/markdown-example.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/features/navigation/navigation.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/features/navigation/navigation-item/navigation-item.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/features/navigation/navigation-search/navigation-search.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/features/preview/preview.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/features/readme/readme.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/features/readme-frame/readme-frame.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/features/stage/stage.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/features/toggle-color-scheme/toggle-color-scheme.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/features/toggle-sidebar/toggle-sidebar.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/features/topbar/topbar.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/forms/input-checkbox/input-checkbox.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/forms/input-code/input-code.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/forms/input-key-value/input-key-value.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/forms/input-key-value-pairs/input-key-value-pairs.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/forms/input-number/input-number.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/forms/input-radio/input-radio.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/forms/input-select/input-select-option.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/forms/input-select/input-select.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/forms/input-text/input-text.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/layout/aside/aside.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/layout/layout/layout.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/layout/main/main.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/root/root.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/root/root.routes.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/root/root-navigation/root-navigation.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/root/root-splash/root-splash.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/ui/button/button.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/ui/code/code.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/ui/icon/icon.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/ui/tabs/tabs.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/ui/title/title.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./mixins/color-schemable.mixin.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./mixins/editable.mixin.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./parsers/cem/parse.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./parsers/cem/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./parsers/cem/1.0.0/cem-element.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./parsers/cem/1.0.0/cem-field.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./parsers/cem/1.0.0/cem-parser.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./parsers/cem/1.0.0/cem-slot.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./plugins/preview/preview-editor-link/preview-editor-link.plugin.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./plugins/preview/preview-editor-link/preview-editor-link.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./plugins/preview/preview-editor-link/preview-editor-link-hint/preview-editor-link-hint.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./plugins/preview/preview-simulate-viewports/preview-simulate-viewports.plugin.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./plugins/stage/stage-editor/stage-editor.plugin.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./plugins/stage/stage-editor/stage-editor.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./plugins/stage/stage-editor/stage-editor-controls/stage-editor-controls.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./plugins/stage/stage-editor/stage-editor-preview/stage-editor-preview.component.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./plugins/stage/stage-examples/stage-examples.plugin.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./plugins/stage/stage-readme/stage-readme.plugin.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./plugins/topbar/topbar-preview-editor-link-toggle/topbar-preview-editor-link-toggle.plugin.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/color-scheme.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/compression.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/config.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/debounce.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/decorator.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/dom.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/form.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/log.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/manifest.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/markdown.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/mixin.types.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/navigation.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/parser.types.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/parser.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/plugin.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/router.utils.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./utils/state.utils.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/color-schemable.mixin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ColorSchemableInterface",
          "members": [
            {
              "kind": "field",
              "name": "colorScheme",
              "type": {
                "text": "ColorScheme | undefined"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "ColorSchemable",
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ColorSchemableInterface",
          "declaration": {
            "name": "ColorSchemableInterface",
            "module": "src/mixins/color-schemable.mixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "ColorSchemable",
          "declaration": {
            "name": "ColorSchemable",
            "module": "src/mixins/color-schemable.mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/editable.mixin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EditableInterface",
          "members": [
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "method",
              "name": "renderInput",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderSlot",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "Editable",
          "parameters": [
            {
              "name": "{\n    hasHintSlot = true,\n    hasBeforeSlot = true,\n    hasAfterSlot = true,\n    hasBorder = true,\n  }",
              "default": "{}",
              "type": {
                "text": "Partial<EditableOptions>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EditableInterface",
          "declaration": {
            "name": "EditableInterface",
            "module": "src/mixins/editable.mixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "Editable",
          "declaration": {
            "name": "Editable",
            "module": "src/mixins/editable.mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/color-scheme.utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getColorSchemeState"
        },
        {
          "kind": "function",
          "name": "addColorSchemable",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "ColorSchemableInterface"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "removeColorSchemable",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "ColorSchemableInterface"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getColorSchemeState",
          "declaration": {
            "name": "getColorSchemeState",
            "module": "src/utils/color-scheme.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "addColorSchemable",
          "declaration": {
            "name": "addColorSchemable",
            "module": "src/utils/color-scheme.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeColorSchemable",
          "declaration": {
            "name": "removeColorSchemable",
            "module": "src/utils/color-scheme.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/compression.utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "compress",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "string"
              },
              "description": "Input string that should be compressed"
            },
            {
              "name": "encoding",
              "type": {
                "text": "CompressionFormat"
              },
              "description": "Compression algorithm to use"
            }
          ],
          "description": "Compress a string with browser native APIs into a string representation"
        },
        {
          "kind": "function",
          "name": "decompress",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "string"
              },
              "description": "String that should be decompressed"
            },
            {
              "name": "encoding",
              "type": {
                "text": "CompressionFormat"
              },
              "description": "Decompression algorithm to use"
            }
          ],
          "description": "Decompress a string representation with browser native APIs in to a normal js string"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "compress",
          "declaration": {
            "name": "compress",
            "module": "src/utils/compression.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "decompress",
          "declaration": {
            "name": "decompress",
            "module": "src/utils/compression.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/config.utils.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultConfig",
          "type": {
            "text": "object"
          },
          "default": "{\n  excludeElements: [],\n  initialActiveElement: undefined,\n  initialCodePreviewTab: 'preview',\n  initialStageTab: 'editor',\n  previewPlugins: ['wcp-preview-simulate-viewports', 'wcp-preview-editor-link'],\n  stagePlugins: ['wcp-stage-examples', 'wcp-stage-readme', 'wcp-stage-editor'],\n  topbarPlugins: ['wcp-toggle-sidebar', 'wcp-toggle-color-scheme', 'wcp-topbar-preview-editor-link-toggle'],\n  additionalReadmes: [],\n  statePersistence: 'session',\n  labels: {\n    title: 'Web Component Preview',\n    additionalReadmeGroupName: 'Readmes',\n    fallbackGroupName: 'Components',\n    emptyNavigation: 'No readmes nor elements found.',\n  },\n  logging: {\n    severity: 'info',\n  },\n}"
        },
        {
          "kind": "variable",
          "name": "satisfies"
        },
        {
          "kind": "variable",
          "name": "Config"
        },
        {
          "kind": "function",
          "name": "mergeConfigWithDefaults",
          "return": {
            "type": {
              "text": "Config"
            }
          },
          "parameters": [
            {
              "name": "config",
              "type": {
                "text": "Partial<Config>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "loadConfig",
          "return": {
            "type": {
              "text": "Promise<Config>"
            }
          },
          "parameters": [
            {
              "name": "url",
              "default": "'config.json'"
            }
          ]
        },
        {
          "kind": "function",
          "name": "getConfig",
          "return": {
            "type": {
              "text": "Config | undefined"
            }
          },
          "description": "Convenience function to retrieve the config"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultConfig",
          "declaration": {
            "name": "defaultConfig",
            "module": "src/utils/config.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "satisfies",
          "declaration": {
            "name": "satisfies",
            "module": "src/utils/config.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "Config",
          "declaration": {
            "name": "Config",
            "module": "src/utils/config.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "mergeConfigWithDefaults",
          "declaration": {
            "name": "mergeConfigWithDefaults",
            "module": "src/utils/config.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "loadConfig",
          "declaration": {
            "name": "loadConfig",
            "module": "src/utils/config.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getConfig",
          "declaration": {
            "name": "getConfig",
            "module": "src/utils/config.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/debounce.utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "debounce",
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "ThisParameterType<T>"
              }
            },
            {
              "name": "fn",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "wait",
              "default": "300"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "debounce",
          "declaration": {
            "name": "debounce",
            "module": "src/utils/debounce.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/decorator.utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "listen",
          "parameters": [
            {
              "name": "type",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "bindTo",
              "optional": true,
              "type": {
                "text": "B"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "listen",
          "declaration": {
            "name": "listen",
            "module": "src/utils/decorator.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/dom.utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isElementWithin",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "name": "container",
              "default": "document.documentElement",
              "type": {
                "text": "Element"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getRelativeBoundary",
          "return": {
            "type": {
              "text": "Pick<DOMRect, 'x' | 'y' | 'height' | 'width'>"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "parent",
              "default": "element.offsetParent",
              "type": {
                "text": "Element | null"
              }
            }
          ],
          "description": "Delivers the relative boundary of an element to an optional parent.\nIf the parent element is omitted, the offset parent of the element is used."
        },
        {
          "kind": "function",
          "name": "getAncestorPath",
          "return": {
            "type": {
              "text": "(Element | Document)[]"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "name": "check",
              "default": "() => true",
              "type": {
                "text": "(element: Element) => boolean"
              }
            }
          ],
          "description": "Returns the list of ancestor elements by reference to a given element."
        },
        {
          "kind": "function",
          "name": "isDescendantOf",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "name": "ancestor",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Determine if an element is a descendant of another element by tag name."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isElementWithin",
          "declaration": {
            "name": "isElementWithin",
            "module": "src/utils/dom.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getRelativeBoundary",
          "declaration": {
            "name": "getRelativeBoundary",
            "module": "src/utils/dom.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getAncestorPath",
          "declaration": {
            "name": "getAncestorPath",
            "module": "src/utils/dom.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDescendantOf",
          "declaration": {
            "name": "isDescendantOf",
            "module": "src/utils/dom.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/form.utils.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/log.utils.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "log",
          "type": {
            "text": "object"
          },
          "default": "{\n  info(...args: unknown[]) {\n    if (['error', 'warn', 'info'].includes(getConfig()?.logging?.severity ?? 'info')) {\n      console.log(LOG_PREFIX, ...args);\n    }\n  },\n  warn(...args: unknown[]) {\n    if (['error', 'warn'].includes(getConfig()?.logging?.severity ?? 'info')) {\n      console.warn(LOG_PREFIX, ...args);\n    }\n  },\n  error(...args: unknown[]) {\n    if (['error'].includes(getConfig()?.logging?.severity ?? 'info')) {\n      console.error(LOG_PREFIX, ...args);\n    }\n  },\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "log",
          "declaration": {
            "name": "log",
            "module": "src/utils/log.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/manifest.utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "loadManifest",
          "return": {
            "type": {
              "text": "Promise<Manifest>"
            }
          },
          "parameters": [
            {
              "name": "manifestUrl",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "excludeElements",
              "type": {
                "text": "string[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getManifest",
          "return": {
            "type": {
              "text": "Manifest"
            }
          },
          "description": "Convenience function to retrieve the config"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "loadManifest",
          "declaration": {
            "name": "loadManifest",
            "module": "src/utils/manifest.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getManifest",
          "declaration": {
            "name": "getManifest",
            "module": "src/utils/manifest.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/markdown.utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getCodeExample",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "slot",
              "type": {
                "text": "HTMLSlotElement"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "Custom marked renderer to wrap code in a custom element.",
          "name": "CustomRenderer",
          "members": [
            {
              "kind": "field",
              "name": "#rawCodeMap",
              "privacy": "private",
              "default": "new Map<string, string>()"
            },
            {
              "kind": "method",
              "name": "storeRawCode",
              "parameters": [
                {
                  "name": "raw",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "highlighted",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "code",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "language",
                  "default": "'plaintext'"
                },
                {
                  "name": "escaped",
                  "default": "false"
                }
              ]
            }
          ],
          "superclass": {
            "name": "Renderer",
            "package": "marked"
          }
        },
        {
          "kind": "function",
          "name": "resolveRelativePath",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "path",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "prefixRelativeUrls",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "markdown",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "currentPath",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "basePath",
              "default": "''"
            }
          ],
          "description": "Only relative links will be handled. If a markdown file (*.md, *.mdx) is linked, it will be prefixed with the route additionally."
        },
        {
          "kind": "function",
          "name": "mapLangToGrammar",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "lang",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Maps a given markdown code block language to a prism grammar."
        },
        {
          "kind": "function",
          "name": "renderMarkdown",
          "return": {
            "type": {
              "text": "Promise<string>"
            }
          },
          "parameters": [
            {
              "name": "markdown",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "addCodePreview",
              "default": "true"
            },
            {
              "name": "previewTagName",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Convenience function to render a given markdown string to html."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getCodeExample",
          "declaration": {
            "name": "getCodeExample",
            "module": "src/utils/markdown.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomRenderer",
          "declaration": {
            "name": "CustomRenderer",
            "module": "src/utils/markdown.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "resolveRelativePath",
          "declaration": {
            "name": "resolveRelativePath",
            "module": "src/utils/markdown.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "prefixRelativeUrls",
          "declaration": {
            "name": "prefixRelativeUrls",
            "module": "src/utils/markdown.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "mapLangToGrammar",
          "declaration": {
            "name": "mapLangToGrammar",
            "module": "src/utils/markdown.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "renderMarkdown",
          "declaration": {
            "name": "renderMarkdown",
            "module": "src/utils/markdown.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/mixin.types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/navigation.utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "prepareReadmeNavigationItem",
          "return": {
            "type": {
              "text": "GroupedNavigationItem"
            }
          },
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "url",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Creates a navigation item for a given readme."
        },
        {
          "kind": "function",
          "name": "prepareElementNavigationItem",
          "return": {
            "type": {
              "text": "GroupedNavigationItem"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "Element"
              }
            }
          ],
          "description": "Creates a navigation item for a given element."
        },
        {
          "kind": "function",
          "name": "prepareNavigation",
          "return": {
            "type": {
              "text": "GroupedNavigationItems"
            }
          },
          "parameters": [
            {
              "name": "manifest",
              "type": {
                "text": "Manifest"
              }
            },
            {
              "name": "config",
              "type": {
                "text": "Config"
              }
            }
          ],
          "description": "Prepares a grouped navigation structure of readmes and elements."
        },
        {
          "kind": "function",
          "name": "matchesSearch",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "content",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "terms",
              "type": {
                "text": "string[]"
              }
            },
            {
              "name": "minSearchLength",
              "default": "1"
            }
          ]
        },
        {
          "kind": "function",
          "name": "filterItems",
          "return": {
            "type": {
              "text": "GroupedNavigationItems"
            }
          },
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "GroupedNavigationItems"
              }
            },
            {
              "name": "terms",
              "type": {
                "text": "string[]"
              }
            },
            {
              "name": "minSearchLength",
              "default": "1"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "prepareReadmeNavigationItem",
          "declaration": {
            "name": "prepareReadmeNavigationItem",
            "module": "src/utils/navigation.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "prepareElementNavigationItem",
          "declaration": {
            "name": "prepareElementNavigationItem",
            "module": "src/utils/navigation.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "prepareNavigation",
          "declaration": {
            "name": "prepareNavigation",
            "module": "src/utils/navigation.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "matchesSearch",
          "declaration": {
            "name": "matchesSearch",
            "module": "src/utils/navigation.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "filterItems",
          "declaration": {
            "name": "filterItems",
            "module": "src/utils/navigation.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/parser.types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/parser.utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "litKey",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "field",
              "type": {
                "text": "Parsed.Field"
              }
            }
          ],
          "description": "Prepares a lit compatible template key for a given field"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "litKey",
          "declaration": {
            "name": "litKey",
            "module": "src/utils/parser.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/plugin.utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isPlugin",
          "return": {
            "type": {
              "text": "element is Plugin"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "description": "Type guard for generic plugins."
        },
        {
          "kind": "function",
          "name": "isStagePlugin",
          "return": {
            "type": {
              "text": "element is StagePlugin"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "description": "Type guard for stage plugins."
        },
        {
          "kind": "function",
          "name": "isPreviewPlugin",
          "return": {
            "type": {
              "text": "element is PreviewPlugin"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "description": "Type guard for preview plugins.\nTODO: add container type guard"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isPlugin",
          "declaration": {
            "name": "isPlugin",
            "module": "src/utils/plugin.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "isStagePlugin",
          "declaration": {
            "name": "isStagePlugin",
            "module": "src/utils/plugin.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "isPreviewPlugin",
          "declaration": {
            "name": "isPreviewPlugin",
            "module": "src/utils/plugin.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/router.utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "areParamsEqual",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "a",
              "type": {
                "text": "Params"
              }
            },
            {
              "name": "b",
              "type": {
                "text": "Params"
              }
            },
            {
              "name": "exclude",
              "default": "[]",
              "type": {
                "text": "string[]"
              }
            }
          ],
          "description": "Helps comparing param objects for equality"
        },
        {
          "kind": "function",
          "name": "mergeParams",
          "return": {
            "type": {
              "text": "Params"
            }
          },
          "parameters": [
            {
              "name": "oldParams",
              "type": {
                "text": "Params"
              }
            },
            {
              "name": "newParams",
              "type": {
                "text": "Params"
              }
            },
            {
              "name": "exclude",
              "default": "[]",
              "type": {
                "text": "string[]"
              }
            }
          ],
          "description": "Merges two given sets of params."
        },
        {
          "kind": "class",
          "description": "",
          "name": "Router",
          "members": [
            {
              "kind": "field",
              "name": "#host",
              "privacy": "private",
              "type": {
                "text": "LitElement"
              },
              "readonly": true,
              "default": "host"
            },
            {
              "kind": "field",
              "name": "#currentPath",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#currentParams",
              "privacy": "private",
              "type": {
                "text": "Params"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "#currentRoute",
              "privacy": "private",
              "type": {
                "text": "Route | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#routes",
              "privacy": "private",
              "type": {
                "text": "Route[]"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "isActive",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "currentPath",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "exact",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigate",
              "static": true,
              "parameters": [
                {
                  "name": "slugs",
                  "type": {
                    "text": "(string | undefined)[]"
                  }
                }
              ],
              "description": "Redirect to a given path. This will trigger a hash change event."
            },
            {
              "kind": "field",
              "name": "currentPath",
              "type": {
                "text": "string | undefined"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "registerRoutes",
              "parameters": [
                {
                  "name": "routes",
                  "type": {
                    "text": "Route[]"
                  }
                }
              ],
              "description": "Defines the routes for this router."
            },
            {
              "kind": "method",
              "name": "isActive",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "exact",
                  "default": "false"
                }
              ],
              "description": "Checks if the given path is the currently active."
            },
            {
              "kind": "method",
              "name": "redirect",
              "parameters": [
                {
                  "name": "slugs",
                  "type": {
                    "text": "(string | undefined)[]"
                  }
                }
              ],
              "description": "Redirect to a given path. This will trigger a hash change event."
            },
            {
              "kind": "method",
              "name": "updateCurrent",
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Update the current path without triggering a redirect."
            },
            {
              "kind": "method",
              "name": "#withBaseUrl",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "default": "location.pathname"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#createPattern",
              "return": {
                "type": {
                  "text": "URLPattern"
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#parseUrl",
              "return": {
                "type": {
                  "text": "ParsedUrl"
                }
              },
              "parameters": [
                {
                  "name": "url",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#findRouteForUrl",
              "return": {
                "type": {
                  "text": "Route | undefined"
                }
              },
              "parameters": [
                {
                  "name": "url",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#findCurrentRoute",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "connect"
            },
            {
              "kind": "method",
              "name": "disconnect"
            },
            {
              "kind": "method",
              "name": "outlet",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "areParamsEqual",
          "declaration": {
            "name": "areParamsEqual",
            "module": "src/utils/router.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "mergeParams",
          "declaration": {
            "name": "mergeParams",
            "module": "src/utils/router.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "Router",
          "declaration": {
            "name": "Router",
            "module": "src/utils/router.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/state.utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "persist",
          "parameters": [
            {
              "name": "key",
              "type": {
                "text": "K"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "State[K]"
              }
            }
          ],
          "description": "Helper function to persist a given key with the given stateful value."
        },
        {
          "kind": "function",
          "name": "read",
          "return": {
            "type": {
              "text": "State[K] | undefined"
            }
          },
          "parameters": [
            {
              "name": "key",
              "type": {
                "text": "K"
              }
            }
          ],
          "description": "Read stateful values from the persistence layer."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "persist",
          "declaration": {
            "name": "persist",
            "module": "src/utils/state.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "read",
          "declaration": {
            "name": "read",
            "module": "src/utils/state.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/root/root.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Root",
          "cssProperties": [
            {
              "description": "The background color of the root element in dark mode.",
              "name": "--wcp-root-dark-background"
            },
            {
              "description": "The text color of the text in the root element in dark mode.",
              "name": "--wcp-root-dark-color"
            },
            {
              "description": "The background color of the root element in light mode.",
              "name": "--wcp-root-light-background"
            },
            {
              "description": "The text color of the text in the root element in light mode.",
              "name": "--wcp-root-light-color"
            }
          ],
          "slots": [
            {
              "description": "Allows setting a custom logo to be displayed in the title.",
              "name": "logo"
            },
            {
              "description": "Can be used to inject additional preview controls.",
              "name": "preview-controls"
            },
            {
              "description": "Used to be override the existing preview pane.",
              "name": "preview-frame"
            },
            {
              "description": "Can be used to inject additional preview detail panes.",
              "name": "preview-details"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#router",
              "privacy": "private",
              "readonly": true,
              "default": "new Router(this)"
            },
            {
              "kind": "field",
              "name": "ready",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "topbarPlugins",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "navigationItems",
              "type": {
                "text": "GroupedNavigationItems"
              },
              "privacy": "private",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "navigationRef",
              "type": {
                "text": "RootNavigation"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flags the component to be displayed inline and not standalone. Requires the surrounding\nlayout to provide the necessary styles like for any other block element."
            },
            {
              "kind": "field",
              "name": "configUrl",
              "type": {
                "text": "string | undefined"
              },
              "description": "Allows to set a url to load a config file from."
            },
            {
              "kind": "field",
              "name": "manifestUrl",
              "type": {
                "text": "string"
              },
              "description": "Defines the location of the custom element manifest file."
            },
            {
              "kind": "method",
              "name": "handleSearchInput",
              "parameters": [
                {
                  "name": "{ detail }",
                  "type": {
                    "text": "CustomEvent<string>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSplashTransitionEnd",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Root",
          "declaration": {
            "name": "Root",
            "module": "src/components/root/root.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/root/root.routes.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "prepareRoutes",
          "return": {
            "type": {
              "text": "Route[]"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "prepareRoutes",
          "declaration": {
            "name": "prepareRoutes",
            "module": "src/components/root/root.routes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/parsers/cem/parse.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "parseCEM",
          "return": {
            "type": {
              "text": "Manifest"
            }
          },
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "object"
              }
            },
            {
              "name": "exclude",
              "optional": true,
              "type": {
                "text": "string[]"
              }
            }
          ],
          "description": "Parses given manifest data with the appropriate CEM parser.\nWill throw an error if no parser for the given schema version is found, or if the given data is invalid."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parseCEM",
          "declaration": {
            "name": "parseCEM",
            "module": "src/parsers/cem/parse.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/parsers/cem/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isCustomElementDeclarationWithTagName",
          "return": {
            "type": {
              "text": "declaration is CustomElementDeclarationWithTagName"
            }
          },
          "parameters": [
            {
              "name": "declaration",
              "optional": true,
              "type": {
                "text": "CEM.Declaration"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isCustomElementField",
          "return": {
            "type": {
              "text": "field is CEM.CustomElementField"
            }
          },
          "parameters": [
            {
              "name": "field",
              "optional": true,
              "type": {
                "text": "CEM.ClassMember"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "WRAPPED_STRING_REGEX",
          "default": "/^['\"`](.*)['\"`]$/"
        },
        {
          "kind": "function",
          "name": "unwrapString",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getEnumValues",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "field",
              "type": {
                "text": "CEM.CustomElementField"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isCustomElementDeclarationWithTagName",
          "declaration": {
            "name": "isCustomElementDeclarationWithTagName",
            "module": "src/parsers/cem/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "isCustomElementField",
          "declaration": {
            "name": "isCustomElementField",
            "module": "src/parsers/cem/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "WRAPPED_STRING_REGEX",
          "declaration": {
            "name": "WRAPPED_STRING_REGEX",
            "module": "src/parsers/cem/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "unwrapString",
          "declaration": {
            "name": "unwrapString",
            "module": "src/parsers/cem/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "getEnumValues",
          "declaration": {
            "name": "getEnumValues",
            "module": "src/parsers/cem/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/markdown-example/markdown-example.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows an inline code example and a preview of the element in the readme.\nThis is used in the markdown formatter to render `html` examples.\n\nIn most cases you don't want to use this component directly, but rather use the `wcp-readme` element instead,\nor the enhanced markdown renderer which instruments this element under the hood. It can be used with the\n`renderMarkdown` function provided by the `@/utils/markdown.utils`.",
          "name": "MarkdownExample",
          "cssProperties": [
            {
              "description": "Inner padding of the example",
              "name": "--wcp-markdown-example-spacing"
            },
            {
              "description": "Border radius of the example",
              "name": "--wcp-markdown-example-border-radius"
            },
            {
              "description": "Border width of the example",
              "name": "--wcp-markdown-example-border-width"
            },
            {
              "description": "Border color of the example in dark mode",
              "name": "--wcp-markdown-example-dark-border-color"
            },
            {
              "description": "Border color of the example in light mode",
              "name": "--wcp-markdown-example-light-border-color"
            }
          ],
          "slots": [
            {
              "description": "Code example",
              "name": "code"
            },
            {
              "description": "Rendered example preview",
              "name": "preview"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#config",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MarkdownExample",
          "declaration": {
            "name": "MarkdownExample",
            "module": "src/components/features/markdown-example/markdown-example.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/preview/preview.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Previews given content.",
          "name": "Preview",
          "cssProperties": [
            {
              "description": "Border color of the plugin menu in dark mode.",
              "name": "--wcp-preview-menu-dark-border-color"
            },
            {
              "description": "Border color of the plugin menu in light mode.",
              "name": "--wcp-preview-menu-light-border-color"
            }
          ],
          "slots": [
            {
              "description": "The content to preview.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#config",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "previewTagName",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "method",
              "name": "handleRouteChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleContainerRef",
              "privacy": "private",
              "parameters": [
                {
                  "name": "container",
                  "optional": true,
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-preview",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Preview",
          "declaration": {
            "name": "Preview",
            "module": "src/components/features/preview/preview.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/readme/readme.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Displays a Readme file by its URL.",
          "name": "Readme",
          "cssProperties": [
            {
              "description": "Text color of the readme in dark mode.",
              "name": "--wcp-readme-dark-color"
            },
            {
              "description": "Accent text color (e.g. links) of the readme in dark mode.",
              "name": "--wcp-readme-dark-color-accent"
            },
            {
              "description": "Muted text color of the readme in dark mode.",
              "name": "--wcp-readme-dark-color-muted"
            },
            {
              "description": "Border color of the readme in dark mode.",
              "name": "--wcp-readme-dark-border-color"
            },
            {
              "description": "Background color of highlighted table rows in dark mode.",
              "name": "--wcp-readme-dark-highlight-background"
            },
            {
              "description": "Text color of the readme in light mode.",
              "name": "--wcp-readme-light-color"
            },
            {
              "description": "Accent text color (e.g. links) of the readme in light mode.",
              "name": "--wcp-readme-light-color-accent"
            },
            {
              "description": "Muted text color of the readme in light mode.",
              "name": "--wcp-readme-light-color-muted"
            },
            {
              "description": "Border color of the readme in light mode.",
              "name": "--wcp-readme-light-border-color"
            },
            {
              "description": "Background color of highlighted table rows in light mode.",
              "name": "--wcp-readme-light-highlight-background"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "showCodePreview",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "default": "false"
            },
            {
              "kind": "field",
              "name": "previewTagName",
              "type": {
                "text": "string | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "markdown",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "''"
            },
            {
              "kind": "field",
              "name": "hash",
              "type": {
                "text": "string | undefined"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updated",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "scrollToId",
              "parameters": [
                {
                  "name": "section",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-readme",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Readme",
          "declaration": {
            "name": "Readme",
            "module": "src/components/features/readme/readme.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/readme-frame/readme-frame.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ReadmeFrame",
          "cssProperties": [
            {
              "description": "Inner padding of the preview frame",
              "name": "--wcp-readme-frame-spacing"
            }
          ],
          "slots": [
            {
              "description": "The readme frame is usually filled with a readme element.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ReadmeFrame",
          "declaration": {
            "name": "ReadmeFrame",
            "module": "src/components/features/readme-frame/readme-frame.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/navigation/navigation.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Navigation",
          "cssProperties": [
            {
              "description": "Spacing between navigation and headline",
              "name": "--wcp-navigation-spacing"
            },
            {
              "description": "Spacing between navigation items",
              "name": "--wcp-navigation-spacing-items"
            },
            {
              "description": "Inner padding of the navigation headline",
              "name": "--wcp-navigation-spacing-headline"
            },
            {
              "description": "Border color of the navigation headline in dark mode",
              "name": "--wcp-navigation-dark-border-color"
            },
            {
              "description": "Border color of the navigation headline in light mode",
              "name": "--wcp-navigation-light-border-color"
            },
            {
              "description": "Font size of the navigation headline",
              "name": "--wcp-navigation-headline-size"
            },
            {
              "description": "Font weight of the navigation headline",
              "name": "--wcp-navigation-headline-weight"
            },
            {
              "description": "Letter spacing of the navigation headline",
              "name": "--wcp-navigation-headline-spacing"
            },
            {
              "description": "Background color of the navigation headline in dark mode",
              "name": "--wcp-navigation-headline-dark-background"
            },
            {
              "description": "Background color of the navigation headline in light mode",
              "name": "--wcp-navigation-headline-light-background"
            }
          ],
          "slots": [
            {
              "description": "Default slot for navigation items",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "headline",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-navigation",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Navigation",
          "declaration": {
            "name": "Navigation",
            "module": "src/components/features/navigation/navigation.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/toggle-color-scheme/toggle-color-scheme.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a button to toggle the desired color-scheme.",
          "name": "ToggleColorScheme",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleButtonClick"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToggleColorScheme",
          "declaration": {
            "name": "ToggleColorScheme",
            "module": "src/components/features/toggle-color-scheme/toggle-color-scheme.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/toggle-sidebar/toggle-sidebar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a button to toggle sidebar.",
          "name": "ToggleSidebar",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleButtonClick"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ToggleSidebar",
          "declaration": {
            "name": "ToggleSidebar",
            "module": "src/components/features/toggle-sidebar/toggle-sidebar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/topbar/topbar.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A wrapper above the preview frame content to contain various controls.",
          "name": "Topbar",
          "cssProperties": [
            {
              "description": "Background color of the controls in dark mode",
              "name": "--wcp-topbar-dark-background"
            },
            {
              "description": "Text color of the controls in dark mode",
              "name": "--wcp-topbar-dark-color"
            },
            {
              "description": "Background color of the controls in light mode",
              "name": "--wcp-topbar-light-background"
            },
            {
              "description": "Text color of the controls in light mode",
              "name": "--wcp-topbar-light-color"
            },
            {
              "description": "Overall height of the preview controls nav bar",
              "name": "--wcp-topbar-height"
            },
            {
              "description": "Inner spacing, used as padding of the controls",
              "name": "--wcp-topbar-spacing"
            }
          ],
          "slots": [
            {
              "description": "Default slot for navigation items",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-topbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Topbar",
          "declaration": {
            "name": "Topbar",
            "module": "src/components/features/topbar/topbar.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-code/input-code.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A text input element using the wcp style. Fully form aware.\nCan display multiline text (textarea) if configured to do so.",
          "name": "InputCode",
          "cssProperties": [
            {
              "description": "The font size of the hint.",
              "name": "--wcp-input-code-hint-size"
            },
            {
              "description": "The font size of the label.",
              "name": "--wcp-input-code-label-size"
            },
            {
              "description": "The inner spacing of the input element.",
              "name": "--wcp-input-code-spacing"
            },
            {
              "description": "The border radius of the input element.",
              "name": "--wcp-input-code-border-radius"
            },
            {
              "description": "The border size of the input element.",
              "name": "--wcp-input-code-border-size"
            },
            {
              "description": "The background color of the element in dark mode.",
              "name": "--wcp-input-code-dark-background"
            },
            {
              "description": "The border color of the element in dark mode.",
              "name": "--wcp-input-code-dark-border"
            },
            {
              "description": "The font color of the input element in dark mode.",
              "name": "--wcp-input-code-dark-color"
            },
            {
              "description": "The background color of the line numbers in dark mode.",
              "name": "--wcp-input-code-dark-background-lines"
            },
            {
              "description": "The background color of the element in light mode.",
              "name": "--wcp-input-code-light-background"
            },
            {
              "description": "The border color of the element in light mode.",
              "name": "--wcp-input-code-light-border"
            },
            {
              "description": "The font color of the input element in light mode.",
              "name": "--wcp-input-code-light-color"
            },
            {
              "description": "The background color of the line numbers in light mode.",
              "name": "--wcp-input-code-light-background-lines"
            }
          ],
          "slots": [
            {
              "description": "Receives optional descriptions below the input.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "readonly": true,
              "default": "{ ...super.shadowRootOptions, delegatesFocus: true }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "readonly": true,
              "default": "[super.formStyles, unsafeCSS(styles)]"
            },
            {
              "kind": "field",
              "name": "#initialValue",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "editor",
              "type": {
                "text": "LitCode | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "autosize",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'text'"
            },
            {
              "kind": "field",
              "name": "language",
              "default": "'html'",
              "type": {
                "text": "'html'"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "props",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The label of the input element.",
              "name": "label",
              "kind": "field"
            }
          ],
          "events": [
            {
              "type": {
                "text": "InputEvent"
              }
            }
          ],
          "mixins": [
            {
              "name": "Editable()",
              "module": "src/components/forms/input-code/input-code.component.ts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-code",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputCode",
          "declaration": {
            "name": "InputCode",
            "module": "src/components/forms/input-code/input-code.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/stage/stage.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Stage",
          "cssProperties": [
            {
              "description": "Background color of the preview frame in dark mode",
              "name": "--wcp-stage-dark-background"
            },
            {
              "description": "Border color of the example section in dark mode",
              "name": "--wcp-stage-dark-border-color"
            },
            {
              "description": "Text color of the preview frame in dark mode",
              "name": "--wcp-stage-dark-color"
            },
            {
              "description": "Background color of the preview frame in light mode",
              "name": "--wcp-stage-light-background"
            },
            {
              "description": "Border color of the example section in light mode",
              "name": "--wcp-stage-light-border-color"
            },
            {
              "description": "Text color of the preview frame in light mode",
              "name": "--wcp-stage-light-color"
            },
            {
              "description": "Border radius of the preview frame",
              "name": "--wcp-stage-border-radius"
            },
            {
              "description": "Border width of the preview frame",
              "name": "--wcp-stage-border-width"
            },
            {
              "description": "Outer margin of the preview frame",
              "name": "--wcp-stage-distance"
            },
            {
              "description": "Inner padding of the preview frame",
              "name": "--wcp-stage-spacing"
            }
          ],
          "slots": [
            {
              "description": "The preview frame can be filled with any number of plugins. The plugins will be rendered as tabs.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "assignedPlugins",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_plugins",
              "type": {
                "text": "StagePlugin[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_tabs",
              "type": {
                "text": "HTMLElementTagNameMap['wcp-tabs']['tabs']"
              },
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "activePlugin",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "emitActivePluginChange",
              "parameters": [
                {
                  "name": "activePlugin",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleAvailabilityChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleActiveTabChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<string>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "preparePluginTabs",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "alignActivePlugin",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Stage",
          "declaration": {
            "name": "Stage",
            "module": "src/components/features/stage/stage.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-checkbox/input-checkbox.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A checkbox input element using the wcp style. Fully form aware.",
          "name": "InputCheckbox",
          "cssProperties": [
            {
              "description": "The size of the checkbox input.",
              "name": "--wcp-input-checkbox-size"
            },
            {
              "description": "The font size of the hint.",
              "name": "--wcp-input-checkbox-hint-size"
            },
            {
              "description": "The font size of the label.",
              "name": "--wcp-input-checkbox-label-size"
            },
            {
              "description": "The leading distance of the label to the input.",
              "name": "--wcp-input-checkbox-spacing"
            },
            {
              "description": "The border radius of the checkbox input.",
              "name": "--wcp-input-checkbox-border-radius"
            },
            {
              "description": "The border size of the checkbox input.",
              "name": "--wcp-input-checkbox-border-size"
            },
            {
              "description": "The background color of the checkbox input in dark mode.",
              "name": "--wcp-input-checkbox-dark-background"
            },
            {
              "description": "The border color of the checkbox input in dark mode.",
              "name": "--wcp-input-checkbox-dark-border"
            },
            {
              "description": "The fill color of the checkbox input when checked in dark mode.",
              "name": "--wcp-input-checkbox-dark-color"
            },
            {
              "description": "The background color of the checkbox input in light mode.",
              "name": "--wcp-input-checkbox-light-background"
            },
            {
              "description": "The border color of the checkbox input in light mode.",
              "name": "--wcp-input-checkbox-light-border"
            },
            {
              "description": "The fill color of the checkbox input when checked in light mode.",
              "name": "--wcp-input-checkbox-light-color"
            }
          ],
          "slots": [
            {
              "description": "Receives optional descriptions below the input.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "readonly": true,
              "default": "[super.formStyles, unsafeCSS(styles)]"
            },
            {
              "kind": "field",
              "name": "initialChecked",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'checkbox'"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "'on'"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "props",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The label of the input element.",
              "name": "label",
              "kind": "field"
            }
          ],
          "mixins": [
            {
              "name": "Editable({ hasBeforeSlot: false, hasBorder: false })",
              "module": "src/components/forms/input-checkbox/input-checkbox.component.ts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputCheckbox",
          "declaration": {
            "name": "InputCheckbox",
            "module": "src/components/forms/input-checkbox/input-checkbox.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-key-value/input-key-value.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A key-value input element using the wcp style. Fully form aware.",
          "name": "InputKeyValue",
          "cssProperties": [
            {
              "description": "The gutter between the key-value pair inputs.",
              "name": "--wcp-input-key-value-gutter"
            }
          ],
          "slots": [
            {
              "description": "Receives optional descriptions below the input.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "readonly": true,
              "default": "[super.formStyles, unsafeCSS(styles)]"
            },
            {
              "kind": "field",
              "name": "#value",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#initialName",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#initialValue",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "props",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleKeyInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleValueInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The label of the input element.",
              "name": "label",
              "kind": "field"
            }
          ],
          "mixins": [
            {
              "name": "Editable({ hasBeforeSlot: false, hasBorder: false })",
              "module": "src/components/forms/input-key-value/input-key-value.component.ts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-key-value",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputKeyValue",
          "declaration": {
            "name": "InputKeyValue",
            "module": "src/components/forms/input-key-value/input-key-value.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-key-value-pairs/input-key-value-pairs.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A key-value pairs editor. Integrates into forms and allows editing string based form data.",
          "name": "InputKeyValuePairs",
          "cssProperties": [
            {
              "description": "The gutter between the key-value pair inputs.",
              "name": "--wcp-input-key-value-pairs-gutter"
            }
          ],
          "slots": [
            {
              "description": "Receives optional descriptions below the input.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "readonly": true,
              "default": "[super.formStyles, unsafeCSS(styles)]"
            },
            {
              "kind": "field",
              "name": "#rawValue",
              "privacy": "private",
              "default": "new FormData()"
            },
            {
              "kind": "field",
              "name": "#prefixedValue",
              "privacy": "private",
              "default": "new FormData()"
            },
            {
              "kind": "field",
              "name": "#valuePairs",
              "privacy": "private",
              "type": {
                "text": "[string, string | undefined][]"
              },
              "default": "[['', '']]"
            },
            {
              "kind": "field",
              "name": "#initialValue",
              "privacy": "private",
              "default": "new FormData()"
            },
            {
              "kind": "field",
              "name": "#hasEmptyPair",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'key-value.'",
              "description": "The name acts as a prefix to the form data keys."
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "FormData | undefined"
              }
            },
            {
              "kind": "field",
              "name": "pairs",
              "type": {
                "text": "[string, string | undefined][]"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "props",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleInput"
            },
            {
              "kind": "method",
              "name": "handleRemoveClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The label of the input element.",
              "name": "label",
              "kind": "field"
            }
          ],
          "events": [
            {
              "name": "input",
              "type": {
                "text": "InputEvent"
              }
            }
          ],
          "mixins": [
            {
              "name": "Editable({ hasBeforeSlot: false, hasAfterSlot: false, hasBorder: false })",
              "module": "src/components/forms/input-key-value-pairs/input-key-value-pairs.component.ts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-key-value-pairs",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputKeyValuePairs",
          "declaration": {
            "name": "InputKeyValuePairs",
            "module": "src/components/forms/input-key-value-pairs/input-key-value-pairs.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-number/input-number.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A numeric input element using the wcp style. Fully form aware.",
          "name": "InputNumber",
          "cssProperties": [
            {
              "description": "The font size of the hint.",
              "name": "--wcp-input-number-hint-size"
            },
            {
              "description": "The font size of the label.",
              "name": "--wcp-input-number-label-size"
            },
            {
              "description": "The inner spacing of the input element.",
              "name": "--wcp-input-number-spacing"
            },
            {
              "description": "The background color of the element in dark mode.",
              "name": "--wcp-input-number-dark-background"
            },
            {
              "description": "The border color of the element in dark mode.",
              "name": "--wcp-input-number-dark-border"
            },
            {
              "description": "The font color of the input element in dark mode.",
              "name": "--wcp-input-number-dark-color"
            },
            {
              "description": "The background color of the element in light mode.",
              "name": "--wcp-input-number-light-background"
            },
            {
              "description": "The border color of the element in light mode.",
              "name": "--wcp-input-number-light-border"
            },
            {
              "description": "The font color of the input element in light mode.",
              "name": "--wcp-input-number-light-color"
            }
          ],
          "slots": [
            {
              "description": "Receives optional descriptions below the input.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "readonly": true,
              "default": "[super.formStyles, unsafeCSS(styles)]"
            },
            {
              "kind": "field",
              "name": "#initialValue",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'text'"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "props",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The label of the input element.",
              "name": "label",
              "kind": "field"
            }
          ],
          "mixins": [
            {
              "name": "Editable()",
              "module": "src/components/forms/input-number/input-number.component.ts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-number",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputNumber",
          "declaration": {
            "name": "InputNumber",
            "module": "src/components/forms/input-number/input-number.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-text/input-text.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A text input element using the wcp style. Fully form aware.\nCan display multiline text (textarea) if configured to do so.",
          "name": "InputText",
          "cssProperties": [
            {
              "description": "The font size of the hint.",
              "name": "--wcp-input-text-hint-size"
            },
            {
              "description": "The font size of the label.",
              "name": "--wcp-input-text-label-size"
            },
            {
              "description": "The inner spacing of the input element.",
              "name": "--wcp-input-text-spacing"
            },
            {
              "description": "The background color of the element in dark mode.",
              "name": "--wcp-input-text-dark-background"
            },
            {
              "description": "The border color of the element in dark mode.",
              "name": "--wcp-input-text-dark-border"
            },
            {
              "description": "The font color of the input element in dark mode.",
              "name": "--wcp-input-text-dark-color"
            },
            {
              "description": "The background color of the element in light mode.",
              "name": "--wcp-input-text-light-background"
            },
            {
              "description": "The border color of the element in light mode.",
              "name": "--wcp-input-text-light-border"
            },
            {
              "description": "The font color of the input element in light mode.",
              "name": "--wcp-input-text-light-color"
            }
          ],
          "slots": [
            {
              "description": "Receives optional descriptions below the input.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "readonly": true,
              "default": "[super.formStyles, unsafeCSS(styles)]"
            },
            {
              "kind": "field",
              "name": "#initialValue",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | HTMLTextAreaElement | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "multiline",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'text'"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'text' | 'email' | 'password' | 'search' | 'tel' | 'url'"
              },
              "default": "'text'",
              "description": "Can be set to to `text`, `email`, `password`, `search`, `tel`, or `url`. \\\nBeware that this will be ignored if combined with the `multiline` attribute."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "props",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The label of the input element.",
              "name": "label",
              "kind": "field"
            }
          ],
          "mixins": [
            {
              "name": "Editable()",
              "module": "src/components/forms/input-text/input-text.component.ts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-text",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputText",
          "declaration": {
            "name": "InputText",
            "module": "src/components/forms/input-text/input-text.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-select/input-select-option.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A helper element to declare options for a `wcp-input-select` element.",
          "name": "InputSelectOption",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLElement | DocumentFragment"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-select-option",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputSelectOption",
          "declaration": {
            "name": "InputSelectOption",
            "module": "src/components/forms/input-select/input-select-option.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-select/input-select.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A numeric input element using the wcp style. Fully form aware.",
          "name": "InputSelect",
          "cssProperties": [
            {
              "description": "The size of the arrow icon.",
              "name": "--wcp-input-select-arrow-size"
            },
            {
              "description": "The font size of the hint.",
              "name": "--wcp-input-select-hint-size"
            },
            {
              "description": "The font size of the label.",
              "name": "--wcp-input-select-label-size"
            },
            {
              "description": "The inner spacing of the input element.",
              "name": "--wcp-input-select-spacing"
            },
            {
              "description": "The background color of the element in dark mode.",
              "name": "--wcp-input-select-dark-background"
            },
            {
              "description": "The border color of the element in dark mode.",
              "name": "--wcp-input-select-dark-border"
            },
            {
              "description": "The font color of the input element in dark mode.",
              "name": "--wcp-input-select-dark-color"
            },
            {
              "description": "The background color of the element in light mode.",
              "name": "--wcp-input-select-light-background"
            },
            {
              "description": "The border color of the element in light mode.",
              "name": "--wcp-input-select-light-border"
            },
            {
              "description": "The font color of the input element in light mode.",
              "name": "--wcp-input-select-light-color"
            }
          ],
          "slots": [
            {
              "type": {
                "text": "<wcp-input-select-option value=\"foo\" label=\"Foo\"></wcp-input-select-option>"
              },
              "description": "Projects options into the select elements dropdown menu.",
              "name": ""
            },
            {
              "description": "Receives optional descriptions below the input.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "readonly": true,
              "default": "[super.formStyles, unsafeCSS(styles)]"
            },
            {
              "kind": "field",
              "name": "#initialValue",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLSelectElement | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'text'"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "props",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The label of the input element.",
              "name": "label",
              "kind": "field"
            }
          ],
          "mixins": [
            {
              "name": "Editable({ hasAfterSlot: false })",
              "module": "src/components/forms/input-select/input-select.component.ts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputSelect",
          "declaration": {
            "name": "InputSelect",
            "module": "src/components/forms/input-select/input-select.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/root/root-splash/root-splash.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a splash screen whilst initializing the application.",
          "name": "RootSplash",
          "cssProperties": [
            {
              "description": "The background color of the splash screen in dark mode.",
              "name": "--wcp-root-splash-dark-background-color"
            },
            {
              "description": "The text color of the splash screen in dark mode.",
              "name": "--wcp-root-splash-dark-color"
            },
            {
              "description": "The background color of the splash screen in light mode.",
              "name": "--wcp-root-splash-light-background-color"
            },
            {
              "description": "The text color of the splash screen in light mode.",
              "name": "--wcp-root-splash-light-color"
            }
          ],
          "slots": [
            {
              "type": {
                "text": "Loading..."
              },
              "description": "The text content to be displayed in the splash screen.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Use the global hidden attribute to fade out the splash screen.",
              "name": "hidden",
              "kind": "field"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RootSplash",
          "declaration": {
            "name": "RootSplash",
            "module": "src/components/root/root-splash/root-splash.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/button/button.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a button element.",
          "name": "Button",
          "cssProperties": [
            {
              "description": "Background color of the button if non interactive in dark mode",
              "name": "--wcp-button-dark-passive-background"
            },
            {
              "description": "Border color of the button if non interactive in dark mode",
              "name": "--wcp-button-dark-passive-border-color"
            },
            {
              "description": "Text color of the button if non interactive in dark mode",
              "name": "--wcp-button-dark-passive-color"
            },
            {
              "description": "Background color of the button if hovered in dark mode",
              "name": "--wcp-button-dark-hover-background"
            },
            {
              "description": "Border color of the button if hovered in dark mode",
              "name": "--wcp-button-dark-hover-border-color"
            },
            {
              "description": "Text color of the button if hovered in dark mode",
              "name": "--wcp-button-dark-hover-color"
            },
            {
              "description": "Background color of the button if active in dark mode",
              "name": "--wcp-button-dark-active-background"
            },
            {
              "description": "Border color of the button if active in dark mode",
              "name": "--wcp-button-dark-active-border-color"
            },
            {
              "description": "Text color of the button if active in dark mode",
              "name": "--wcp-button-dark-active-color"
            },
            {
              "description": "Background color of the button if non interactive in light mode",
              "name": "--wcp-button-light-passive-background"
            },
            {
              "description": "Border color of the button if non interactive in light mode",
              "name": "--wcp-button-light-passive-border-color"
            },
            {
              "description": "Text color of the button if non interactive in light mode",
              "name": "--wcp-button-light-passive-color"
            },
            {
              "description": "Background color of the button if hovered in light mode",
              "name": "--wcp-button-light-hover-background"
            },
            {
              "description": "Border color of the button if hovered in light mode",
              "name": "--wcp-button-light-hover-border-color"
            },
            {
              "description": "Text color of the button if hovered in light mode",
              "name": "--wcp-button-light-hover-color"
            },
            {
              "description": "Background color of the button if active in light mode",
              "name": "--wcp-button-light-active-background"
            },
            {
              "description": "Border color of the button if active in light mode",
              "name": "--wcp-button-light-active-border-color"
            },
            {
              "description": "Text color of the button if active in light mode",
              "name": "--wcp-button-light-active-color"
            }
          ],
          "slots": [
            {
              "type": {
                "text": "Some <i>Button</i>"
              },
              "description": "Default slot for the button content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "readonly": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "nowrap",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "stretched",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows stretching the button across the full width of its container.\nThis is useful for buttons that are used in a narrow form, or in general\non small viewports, like handheld devices."
            },
            {
              "kind": "field",
              "name": "kind",
              "type": {
                "text": "'button' | 'icon'"
              },
              "default": "'button'",
              "description": "The kind of button to render. Either like a conventional button, or for\nicons. Icon buttons are quadratic and will show a radial background on interaction."
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "default": "'button'"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | undefined"
              }
            },
            {
              "kind": "method",
              "name": "handleButtonClick"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "src/components/ui/button/button.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/root/root-navigation/root-navigation.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Manages the main root-navigation in the application root.",
          "name": "RootNavigation",
          "cssProperties": [
            {
              "description": "The spacing of the empty message.",
              "name": "--wcp-root-navigation-empty-message-spacing"
            },
            {
              "description": "The font size of the empty message.",
              "name": "--wcp-root-navigation-empty-message-font-size"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#items",
              "privacy": "private",
              "type": {
                "text": "GroupedNavigationItems"
              },
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "#searchTerms",
              "privacy": "private",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "filteredItems",
              "type": {
                "text": "GroupedNavigationItems"
              },
              "privacy": "private",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "currentPath",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "emptyMessage",
              "type": {
                "text": "string"
              },
              "default": "'No readmes nor elements found.'"
            },
            {
              "kind": "field",
              "name": "minSearchLength",
              "type": {
                "text": "number"
              },
              "default": "1"
            },
            {
              "kind": "field",
              "name": "searchTerms"
            },
            {
              "kind": "field",
              "name": "items"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-root-navigation",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RootNavigation",
          "declaration": {
            "name": "RootNavigation",
            "module": "src/components/root/root-navigation/root-navigation.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/forms/input-radio/input-radio.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A radio input element using the wcp style. Fully form aware.",
          "name": "InputRadio",
          "cssProperties": [
            {
              "description": "The size of the radio input.",
              "name": "--wcp-input-radio-size"
            },
            {
              "description": "The font size of the label.",
              "name": "--wcp-input-radio-label-size"
            },
            {
              "description": "The font size of the hint.",
              "name": "--wcp-input-radio-hint-size"
            },
            {
              "description": "The leading distance of the label to the input.",
              "name": "--wcp-input-radio-spacing"
            },
            {
              "description": "The border radius of the radio input.",
              "name": "--wcp-input-radio-border-radius"
            },
            {
              "description": "The border size of the radio input.",
              "name": "--wcp-input-radio-border-size"
            },
            {
              "description": "The background color of the radio input in dark mode.",
              "name": "--wcp-input-radio-dark-background"
            },
            {
              "description": "The border color of the radio input in dark mode.",
              "name": "--wcp-input-radio-dark-border"
            },
            {
              "description": "The fill color of the radio input when checked in dark mode.",
              "name": "--wcp-input-radio-dark-color"
            },
            {
              "description": "The background color of the radio input in light mode.",
              "name": "--wcp-input-radio-light-background"
            },
            {
              "description": "The border color of the radio input in light mode.",
              "name": "--wcp-input-radio-light-border"
            },
            {
              "description": "The fill color of the radio input when checked in light mode.",
              "name": "--wcp-input-radio-light-color"
            }
          ],
          "slots": [
            {
              "description": "Receives optional descriptions below the input.",
              "name": "hint"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "readonly": true,
              "default": "[super.formStyles, unsafeCSS(styles)]"
            },
            {
              "kind": "field",
              "name": "#checked",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#initialChecked",
              "privacy": "private",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'radio'"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "'on'"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "props",
                  "type": {
                    "text": "PropertyValues<this>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The label of the input element.",
              "name": "label",
              "kind": "field"
            }
          ],
          "mixins": [
            {
              "name": "Editable({ hasBeforeSlot: false, hasBorder: false })",
              "module": "src/components/forms/input-radio/input-radio.component.ts"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-input-radio",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputRadio",
          "declaration": {
            "name": "InputRadio",
            "module": "src/components/forms/input-radio/input-radio.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/code/code.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a formatted code snippet.",
          "name": "Code",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "createRenderRoot"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Code",
          "declaration": {
            "name": "Code",
            "module": "src/components/ui/code/code.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/icon/icon.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows an icon from the css.gg icon set.",
          "name": "Icon",
          "cssProperties": [
            {
              "description": "Sets the size of the icon as unitless number in pixels",
              "name": "--wcp-icon-size"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "src/components/ui/icon/icon.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/tabs/tabs.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Tabs",
          "cssProperties": [
            {
              "description": "The gap between the tablist and the tabpanels",
              "name": "--wcp-tabs-tablist-gap"
            },
            {
              "description": "The inner padding of the tablist",
              "name": "--wcp-tabs-tablist-spacing"
            },
            {
              "description": "The inner padding of the tabs",
              "name": "--wcp-tabs-tab-spacing"
            },
            {
              "description": "The border width of the active tab",
              "name": "--wcp-tabs-tab-active-border-width"
            },
            {
              "description": "The inner padding of the tabpanels",
              "name": "--wcp-tabs-panel-spacing"
            },
            {
              "description": "The border color of the tablist in dark mode",
              "name": "--wcp-tabs-tablist-dark-border-color"
            },
            {
              "description": "The border color of the active tab in dark mode",
              "name": "--wcp-tabs-tab-active-dark-border-color"
            },
            {
              "description": "The border color of the tablist in light mode",
              "name": "--wcp-tabs-tablist-light-border-color"
            },
            {
              "description": "The border color of the active tab in light mode",
              "name": "--wcp-tabs-tab-active-light-border-color"
            }
          ],
          "slots": [
            {
              "description": "name - The content of the named tab.",
              "name": "tab"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "tabFocus",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "tabRoles",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "Record<string, { label: string; disabled?: boolean }>"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "activeTab",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "method",
              "name": "emitActiveTabChange"
            },
            {
              "kind": "method",
              "name": "handleTabClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Tabs",
          "declaration": {
            "name": "Tabs",
            "module": "src/components/ui/tabs/tabs.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/parsers/cem/1.0.0/cem-element.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CemElement",
          "default": "class {\n  #fields: Map<string, Field>;\n  #slots: Map<string, Slot>;\n\n  get fields() {\n    return this.#fields;\n  }\n  get hasFields(): boolean {\n    return this.#fields.size > 0;\n  }\n\n  get slots() {\n    return this.#slots;\n  }\n  get hasSlots(): boolean {\n    return this.#slots.size > 0;\n  }\n\n  get hasGroups(): boolean {\n    return 'groups' in this._element;\n  }\n  get groups(): string[] {\n    return (this._element as CustomElementDeclarationWithGroups).groups ?? [];\n  }\n\n  get hasReadme(): boolean {\n    return 'readme' in this._element;\n  }\n  get readme(): string | undefined {\n    return (this._element as CustomElementDeclarationWithReadme).readme;\n  }\n\n  get hasExamples(): boolean {\n    return 'examples' in this._element && (this._element as CustomElementDeclarationWithExamples).examples.length > 0;\n  }\n  get examples(): string[] {\n    return (this._element as CustomElementDeclarationWithExamples).examples ?? [];\n  }\n\n  getNiceName(): string {\n    return this._element.name.replace(/([a-z])([A-Z])/g, '$1 $2');\n  }\n\n  getNiceUrl(): string {\n    return this._element.tagName ?? this._element.name.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n  }\n\n  constructor(private _element: CEM.CustomElementDeclaration) {\n    this.#fields =\n      this._element.members\n        ?.filter(isCustomElementField)\n        .reduce((map, field) => map.set(field.name, new CemField(field)), new Map()) ?? new Map();\n    this.#slots =\n      this._element.slots?.reduce((map, slot) => map.set(slot.name, new CemSlot(slot)), new Map()) ?? new Map();\n\n    // allow access to the original data by proxying\n    return new Proxy(this, {\n      get: (t: this, p: keyof Element) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return p in t ? (t as any)[p] : (this._element as any)[p];\n      },\n    });\n  }\n} as unknown"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CemElement",
          "declaration": {
            "name": "CemElement",
            "module": "src/parsers/cem/1.0.0/cem-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/parsers/cem/1.0.0/cem-field.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CemField",
          "default": "class {\n  #types: string[];\n  #enumValues: string[];\n\n  get isBoolean(): boolean {\n    return this.#types[0] === 'boolean';\n  }\n  get isNumber(): boolean {\n    return this.#types[0] === 'number';\n  }\n  get isString(): boolean {\n    return this.#types[0] === 'string' || WRAPPED_STRING_REGEX.test(this.#types[0] ?? '');\n  }\n  get isEnum(): boolean {\n    return this.#types.length > 1 && this.#types[1] !== 'undefined';\n  }\n  get isArray(): boolean {\n    return this.#types[0]?.endsWith('[]');\n  }\n  get isObject(): boolean {\n    return !!this._field.type && !this.isBoolean && !this.isNumber && !this.isString && !this.isArray;\n  }\n\n  get isControllable(): boolean {\n    return this.isPublic && !this.isStatic;\n  }\n\n  get isOptional(): boolean {\n    return !!this._field.type?.text.endsWith(' | undefined');\n  }\n\n  get hasAttribute(): boolean {\n    return 'attribute' in this._field && !!this._field.reflects;\n  }\n\n  get hasDefault(): boolean {\n    return this._field.default !== undefined;\n  }\n\n  get hasDescription(): boolean {\n    return this._field.default !== undefined;\n  }\n\n  get isStatic(): boolean {\n    return !!this._field.static;\n  }\n  get isPublic(): boolean {\n    return !this._field.privacy || this._field.privacy === 'public';\n  }\n  get isPrivate(): boolean {\n    return this._field.privacy === 'private';\n  }\n  get isProtected(): boolean {\n    return this._field.privacy === 'protected';\n  }\n\n  get enumValues(): string[] {\n    return this.#enumValues;\n  }\n\n  get default(): string | number | boolean | undefined {\n    if (this.isBoolean) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return this.hasDefault && this._field.default!.startsWith('true');\n    }\n    if (this.isNumber) {\n      return this.hasDefault && Number(this._field.default);\n    }\n    if (this.isString) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return this.hasDefault ? unwrapString(this._field.default!) : '';\n    }\n\n    return this._field.default;\n  }\n\n  constructor(private _field: CEM.CustomElementField) {\n    this.#types = getEnumValues(this._field);\n    this.#enumValues = this.#types.map(unwrapString);\n\n    // allow access to the original data by proxying\n    return new Proxy(this, {\n      get: (t: this, p: keyof Element) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return p in t ? (t as any)[p] : (this._field as any)[p];\n      },\n    });\n  }\n} as unknown"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CemField",
          "declaration": {
            "name": "CemField",
            "module": "src/parsers/cem/1.0.0/cem-field.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/parsers/cem/1.0.0/cem-parser.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CemParser",
          "default": "class {\n  #elements: Map<string, Element>;\n\n  get elements() {\n    return this.#elements;\n  }\n\n  getGroupedElements(fallbackGroupName: string): Map<string, Element[]> {\n    return Array.from(this.elements.values()).reduce((map, element) => {\n      const { groups } = element.hasGroups ? element : { groups: [fallbackGroupName] };\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return groups!.reduce((all, group) => all.set(group, (all.get(group) ?? []).concat(element)), map);\n    }, new Map<string, Element[]>());\n  }\n\n  constructor(private _data: CEM.Package, exclude: string[] = []) {\n    // parse the elements\n    this.#elements = this._data.modules\n      .flatMap((module) => module.declarations)\n      .filter(isCustomElementDeclarationWithTagName)\n      .filter((element) => !exclude.includes(element.tagName))\n      .reduce((map, element) => map.set(element.tagName, new CemElement(element)), new Map());\n\n    // allow access to the original data by proxying\n    return new Proxy(this, {\n      get(t, p: keyof Parser) {\n        return p in t ? t[p] : _data[p];\n      },\n    });\n  }\n} as unknown"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CemParser",
          "declaration": {
            "name": "CemParser",
            "module": "src/parsers/cem/1.0.0/cem-parser.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/parsers/cem/1.0.0/cem-slot.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CemSlot",
          "default": "class {\n  get default(): string {\n    // we use a bug in the analyzer for the time being to provide default contents\n    // for slots by their inofficial (and maybe unintentionally shipped) type data\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (this._slot as any).type?.text ?? '';\n  }\n\n  get hasDescription(): boolean {\n    return this._slot.description !== undefined;\n  }\n\n  constructor(private _slot: CEM.Slot) {\n    // allow access to the original data by proxying\n    return new Proxy(this, {\n      get: (t: this, p: keyof Element) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return p in t ? (t as any)[p] : (this._slot as any)[p];\n      },\n    });\n  }\n} as unknown"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CemSlot",
          "declaration": {
            "name": "CemSlot",
            "module": "src/parsers/cem/1.0.0/cem-slot.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui/title/title.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows the application title and a logo.",
          "name": "Title",
          "cssProperties": [
            {
              "description": "The gap between the logo and the title",
              "name": "--wcp-title-gap"
            },
            {
              "description": "The height of the title. Content may exceed and scales the tile",
              "name": "--wcp-title-height"
            },
            {
              "description": "Inner padding of the title",
              "name": "--wcp-title-spacing"
            },
            {
              "description": "The font size of the title",
              "name": "--wcp-title-headline-size"
            },
            {
              "description": "The font weight of the title",
              "name": "--wcp-title-headline-weight"
            },
            {
              "description": "The letter spacing of the title",
              "name": "--wcp-title-headline-spacing"
            },
            {
              "description": "The line height of the title",
              "name": "--wcp-title-headline-line-height"
            },
            {
              "description": "The text transform of the title",
              "name": "--wcp-title-headline-transform"
            }
          ],
          "slots": [
            {
              "description": "Receives the logo image to be shown",
              "name": "logo"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Title",
          "declaration": {
            "name": "Title",
            "module": "src/components/ui/title/title.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/plugins/preview/preview-editor-link/preview-editor-link.plugin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Links all found custom elements in a preview with their current state to the editor to be further played around with.",
          "name": "PreviewEditorLink",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#manifest",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#overlay",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'editor-link'"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Show in editor'"
            },
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "previewTagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "enabled"
            },
            {
              "kind": "method",
              "name": "#checkAvailability"
            },
            {
              "kind": "method",
              "name": "#attachOverlay"
            },
            {
              "kind": "method",
              "name": "#detachOverlay"
            },
            {
              "kind": "method",
              "name": "#findContainerSlot",
              "return": {
                "type": {
                  "text": "HTMLSlotElement | undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "#observeContainerSlot"
            },
            {
              "kind": "method",
              "name": "#unobserveContainerSlot"
            },
            {
              "kind": "method",
              "name": "#observeContainerScroll"
            },
            {
              "kind": "method",
              "name": "#unobserveContainerScroll"
            },
            {
              "kind": "field",
              "name": "#handleContainerScroll",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#handleContainerSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachHints"
            },
            {
              "kind": "method",
              "name": "#attachHint",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#detachHints"
            },
            {
              "kind": "method",
              "name": "#setupHints"
            },
            {
              "kind": "method",
              "name": "#teardownHints"
            },
            {
              "kind": "method",
              "name": "#openViewer",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleGlobalToggle",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ detail: enabled }",
                  "type": {
                    "text": "CustomEvent<boolean>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleToggleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-preview-editor-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PreviewEditorLink",
          "declaration": {
            "name": "PreviewEditorLink",
            "module": "src/plugins/preview/preview-editor-link/preview-editor-link.plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/plugins/preview/preview-editor-link/preview-editor-link.utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "readCurrentElementData",
          "return": {
            "type": {
              "text": "ElementData"
            }
          },
          "parameters": [
            {
              "name": "ref",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "description": "Prepares an initial state object for the given element definition by:\n1. Read all controllable fields from the element definition (from properties)\n2. Read all (remaining) attributes from the element reference (not reflected from already collected properties)\n3. Read all slots from the element definition with their stringified contents"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "readCurrentElementData",
          "declaration": {
            "name": "readCurrentElementData",
            "module": "src/plugins/preview/preview-editor-link/preview-editor-link.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/plugins/preview/preview-simulate-viewports/preview-simulate-viewports.plugin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Simulates various viewports for a custom element preview.",
          "name": "PreviewSimulateViewports",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'viewport'"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Viewport'"
            },
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "previewTagName",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "simulateViewport",
              "type": {
                "text": "Viewport | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "invertSimulatedViewport",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "defaultStyle",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "removeStyle",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "resetStyle",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "prepareStyle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLStyleElement"
                }
              }
            },
            {
              "kind": "method",
              "name": "applyPreviewSize",
              "privacy": "protected",
              "description": "Sets the size of the viewport to simulate its dimensions."
            },
            {
              "kind": "method",
              "name": "applyPreviewScale",
              "privacy": "protected",
              "description": "Scales the sized viewport to fit into the preview container."
            },
            {
              "kind": "method",
              "name": "applyPreviewDimensions",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "emitChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSimulateViewport",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInvertSimulatedViewport"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-preview-simulate-viewports",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PreviewSimulateViewports",
          "declaration": {
            "name": "PreviewSimulateViewports",
            "module": "src/plugins/preview/preview-simulate-viewports/preview-simulate-viewports.plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/plugins/stage/stage-readme/stage-readme.plugin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows the readme of a custom element.",
          "name": "StageReadme",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#manifest",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'readme'"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Readme'"
            },
            {
              "kind": "field",
              "name": "_element",
              "type": {
                "text": "Parsed.Element | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "previewTagName"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-stage-readme",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StageReadme",
          "declaration": {
            "name": "StageReadme",
            "module": "src/plugins/stage/stage-readme/stage-readme.plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/plugins/stage/stage-examples/stage-examples.plugin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows the examples of a custom element manifest.",
          "name": "StageExamples",
          "cssProperties": [
            {
              "description": "Spacing between examples.",
              "name": "--wcp-stage-examples-spacing"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#manifest",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'examples'"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Examples'"
            },
            {
              "kind": "field",
              "name": "_element",
              "type": {
                "text": "Parsed.Element | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "previewTagName"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-stage-examples",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StageExamples",
          "declaration": {
            "name": "StageExamples",
            "module": "src/plugins/stage/stage-examples/stage-examples.plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/layout/aside/aside.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "To toggle the side bar remotely, you can dispatch a custom event on the global window object:\n```js\nwindow.dispatchEvent(new CustomEvent('wcp-aside:toggle'));\n```\nYou may pass an optional boolean value to the event to toggle the side bar to a specific state:\n```js\nwindow.dispatchEvent(new CustomEvent('wcp-aside:toggle', { detail: true }));\n```",
          "name": "Aside",
          "cssProperties": [
            {
              "description": "The maximum width of the aside bar when visible",
              "name": "--wcp-aside-max-width"
            },
            {
              "description": "Inner padding of the aside bar",
              "name": "--wcp-aside-spacing"
            },
            {
              "description": "The size of the toggle button",
              "name": "--wcp-aside-toggle-size"
            },
            {
              "description": "The background color of the side bar in dark mode",
              "name": "--wcp-aside-dark-background"
            },
            {
              "description": "The color of the side bar in dark mode",
              "name": "--wcp-aside-dark-color"
            },
            {
              "description": "The background color of the side bar in light mode",
              "name": "--wcp-aside-light-background"
            },
            {
              "description": "The color of the side bar in light mode",
              "name": "--wcp-aside-light-color"
            }
          ],
          "slots": [
            {
              "description": "Projects elements aside the main content",
              "name": ""
            },
            {
              "description": "Elements in the fixed header of the side bar",
              "name": "header"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Used to toggle the width of the aside bar"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'complementary'",
              "description": "Presets the aria role to `complementary` as we do not use te aside element directly"
            },
            {
              "kind": "method",
              "name": "handleButtonClick"
            },
            {
              "kind": "method",
              "name": "listenAsideToggle",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ detail }",
                  "type": {
                    "text": "CustomEvent<boolean>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleRouteChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Aside",
          "declaration": {
            "name": "Aside",
            "module": "src/components/layout/aside/aside.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/layout/main/main.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Main",
          "slots": [
            {
              "description": "Projects elements to the main content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'main'",
              "description": "Presets the aria role to `main` as we do not use te main element directly"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Main",
          "declaration": {
            "name": "Main",
            "module": "src/components/layout/main/main.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/layout/layout/layout.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Layout",
          "cssProperties": [
            {
              "description": "The background color of the whole layout",
              "name": "--wcp-layout-dark-background"
            },
            {
              "description": "The text color of the whole layout",
              "name": "--wcp-layout-dark-color"
            },
            {
              "description": "The background color of the whole layout",
              "name": "--wcp-layout-light-background"
            },
            {
              "description": "The text color of the whole layout",
              "name": "--wcp-layout-light-color"
            }
          ],
          "slots": [
            {
              "description": "Shows contents fixed above the aside",
              "name": "header"
            },
            {
              "description": "Projects elements aside the main content",
              "name": "aside"
            },
            {
              "description": "Receives the content of the main section",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Layout",
          "declaration": {
            "name": "Layout",
            "module": "src/components/layout/layout/layout.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/plugins/topbar/topbar-preview-editor-link-toggle/topbar-preview-editor-link-toggle.plugin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Toggles all preview editor link plugins to show or hide the debug hints.",
          "name": "TopbarPreviewEditorLinkToggle",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'editor-link-toggle'"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Toggle all editor link hints globally'"
            },
            {
              "kind": "field",
              "name": "enabled",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "method",
              "name": "handleToggleClick",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-topbar-preview-editor-link-toggle",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TopbarPreviewEditorLinkToggle",
          "declaration": {
            "name": "TopbarPreviewEditorLinkToggle",
            "module": "src/plugins/topbar/topbar-preview-editor-link-toggle/topbar-preview-editor-link-toggle.plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/plugins/stage/stage-editor/stage-editor.plugin.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Allows editing a custom element.",
          "name": "StageEditor",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#manifest",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#updateFormData",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'editor'"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "default": "'Editor'"
            },
            {
              "kind": "field",
              "name": "_element",
              "type": {
                "text": "Parsed.Element | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_elementData",
              "type": {
                "text": "ElementData | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "previewTagName"
            },
            {
              "kind": "field",
              "name": "data"
            },
            {
              "kind": "field",
              "name": "available",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "default": "true"
            },
            {
              "kind": "method",
              "name": "#prepareElementData",
              "parameters": [
                {
                  "name": "compressed",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getElementReference",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Element | undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleControlsInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ detail }",
                  "type": {
                    "text": "CustomEvent<FormData>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-stage-editor",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StageEditor",
          "declaration": {
            "name": "StageEditor",
            "module": "src/plugins/stage/stage-editor/stage-editor.plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/plugins/stage/stage-editor/stage-editor.utils.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "EMPTY_ELEMENT_DATA",
          "type": {
            "text": "ElementData"
          },
          "default": "{\n  attributes: {},\n  fields: {},\n  slots: {},\n}",
          "description": "Empty state object of the element data."
        },
        {
          "kind": "function",
          "name": "prepareInitialData",
          "return": {
            "type": {
              "text": "ElementData"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "Parsed.Element"
              }
            }
          ],
          "description": "Prepares an initial state object for the given element definition."
        },
        {
          "kind": "function",
          "name": "parseFieldValue",
          "return": {
            "type": {
              "text": "ElementData['fields'][keyof ElementData['fields']]"
            }
          },
          "parameters": [
            {
              "name": "field",
              "type": {
                "text": "Parsed.Field"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "unknown"
              }
            }
          ],
          "description": "Retrieve the current value of a given field parsed to the correct type"
        },
        {
          "kind": "function",
          "name": "alignFormDataWebkit",
          "return": {
            "type": {
              "text": "FormData"
            }
          },
          "parameters": [
            {
              "name": "formData",
              "type": {
                "text": "FormData"
              }
            },
            {
              "name": "elements",
              "type": {
                "text": "HTMLFormControlsCollection"
              }
            },
            {
              "name": "element",
              "type": {
                "text": "Parsed.Element"
              }
            }
          ],
          "description": "There seems to be a bug in Safari with the native FormAssociated implementation regarding\ncheckboxes: https://bugs.webkit.org/show_bug.cgi?id=259781"
        },
        {
          "kind": "function",
          "name": "mapFormData",
          "return": {
            "type": {
              "text": "ElementData"
            }
          },
          "parameters": [
            {
              "name": "data",
              "type": {
                "text": "FormData"
              }
            },
            {
              "name": "element",
              "type": {
                "text": "Parsed.Element"
              }
            }
          ],
          "description": "Maps the given form data by the given element definition to a stateful data object"
        },
        {
          "kind": "function",
          "name": "compressFormData",
          "return": {
            "type": {
              "text": "Promise<string>"
            }
          },
          "parameters": [
            {
              "name": "formData",
              "type": {
                "text": "FormData"
              }
            },
            {
              "name": "element",
              "type": {
                "text": "Parsed.Element"
              }
            }
          ],
          "description": "Prepares the data to be set as compressed url param"
        },
        {
          "kind": "function",
          "name": "decompressElementData",
          "return": {
            "type": {
              "text": "Promise<ElementData>"
            }
          },
          "parameters": [
            {
              "name": "compressed",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Decompresses and parses the given element data"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EMPTY_ELEMENT_DATA",
          "declaration": {
            "name": "EMPTY_ELEMENT_DATA",
            "module": "src/plugins/stage/stage-editor/stage-editor.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "prepareInitialData",
          "declaration": {
            "name": "prepareInitialData",
            "module": "src/plugins/stage/stage-editor/stage-editor.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "parseFieldValue",
          "declaration": {
            "name": "parseFieldValue",
            "module": "src/plugins/stage/stage-editor/stage-editor.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "alignFormDataWebkit",
          "declaration": {
            "name": "alignFormDataWebkit",
            "module": "src/plugins/stage/stage-editor/stage-editor.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "mapFormData",
          "declaration": {
            "name": "mapFormData",
            "module": "src/plugins/stage/stage-editor/stage-editor.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "compressFormData",
          "declaration": {
            "name": "compressFormData",
            "module": "src/plugins/stage/stage-editor/stage-editor.utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "decompressElementData",
          "declaration": {
            "name": "decompressElementData",
            "module": "src/plugins/stage/stage-editor/stage-editor.utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/navigation/navigation-item/navigation-item.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NavigationItem",
          "cssProperties": [
            {
              "description": "Inner padding of the item",
              "name": "--wcp-navigation-item-spacing"
            },
            {
              "description": "Background color of the item when non interactive in dark mode",
              "name": "--wcp-navigation-item-dark-passive-background"
            },
            {
              "description": "Background color of the item when hovered in dark mode",
              "name": "--wcp-navigation-item-dark-hover-background"
            },
            {
              "description": "Background color of the item when active in dark mode",
              "name": "--wcp-navigation-item-dark-active-background"
            },
            {
              "description": "Text color of the item when non interactive in dark mode",
              "name": "--wcp-navigation-item-dark-passive-color"
            },
            {
              "description": "Text color of the item when hovered in dark mode",
              "name": "--wcp-navigation-item-dark-hover-color"
            },
            {
              "description": "Text color of the item when active in dark mode",
              "name": "--wcp-navigation-item-dark-active-color"
            },
            {
              "description": "Background color of the item when non interactive in light mode",
              "name": "--wcp-navigation-item-light-passive-background"
            },
            {
              "description": "Background color of the item when hovered in light mode",
              "name": "--wcp-navigation-item-light-hover-background"
            },
            {
              "description": "Background color of the item when active in light mode",
              "name": "--wcp-navigation-item-light-active-background"
            },
            {
              "description": "Text color of the item when non interactive in light mode",
              "name": "--wcp-navigation-item-light-passive-color"
            },
            {
              "description": "Text color of the item when hovered in light mode",
              "name": "--wcp-navigation-item-light-hover-color"
            },
            {
              "description": "Text color of the item when active in light mode",
              "name": "--wcp-navigation-item-light-active-color"
            }
          ],
          "slots": [
            {
              "description": "Default slot for contents",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-navigation-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NavigationItem",
          "declaration": {
            "name": "NavigationItem",
            "module": "src/components/features/navigation/navigation-item/navigation-item.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/features/navigation/navigation-search/navigation-search.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NavigationSearch",
          "cssProperties": [
            {
              "description": "The spacing around the search input.",
              "name": "--wcp-navigation-search-spacing"
            },
            {
              "description": "The border color of the search input in dark mode.",
              "name": "--wcp-navigation-search-dark-border-color"
            },
            {
              "description": "The border color of the search input in light mode.",
              "name": "--wcp-navigation-search-light-border-color"
            },
            {
              "description": "The stroke color of the search input in dark mode when not focused.",
              "name": "--wcp-navigation-search-passive-dark-stroke"
            },
            {
              "description": "The stroke color of the search input in light mode when not focused.",
              "name": "--wcp-navigation-search-passive-light-stroke"
            },
            {
              "description": "The stroke color of the search input in dark mode when focused.",
              "name": "--wcp-navigation-search-active-dark-stroke"
            },
            {
              "description": "The stroke color of the search input in light mode when focused.",
              "name": "--wcp-navigation-search-active-light-stroke"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "term",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "method",
              "name": "handleSearchInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleResetClick",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "#updateSearchTerm",
              "parameters": [
                {
                  "name": "term",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "events": [
            {
              "name": "wcp-navigation-search:search",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-navigation-search",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NavigationSearch",
          "declaration": {
            "name": "NavigationSearch",
            "module": "src/components/features/navigation/navigation-search/navigation-search.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/plugins/preview/preview-editor-link/preview-editor-link-hint/preview-editor-link-hint.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Shows a hint to a given preview element.",
          "name": "PreviewEditorLinkHint",
          "cssProperties": [
            {
              "description": "The background color of the hint button in passive state.",
              "name": "--wcp-preview-editor-link-hint-button-passive-background"
            },
            {
              "description": "The background color of the hint button in active state.",
              "name": "--wcp-preview-editor-link-hint-button-active-background"
            },
            {
              "description": "Size of the hint button in passive state.",
              "name": "--wcp-preview-editor-link-hint-button-passive-size"
            },
            {
              "description": "Size of the hint button in active state.",
              "name": "--wcp-preview-editor-link-hint-button-active-size"
            },
            {
              "description": "Border width of the debugging fields.",
              "name": "--wcp-preview-editor-link-hint-debug-border-width"
            },
            {
              "description": "Opacity of the debugging fields background.",
              "name": "--wcp-preview-editor-link-hint-debug-background-opacity"
            },
            {
              "description": "Distance of the stripes of the debugging field background.",
              "name": "--wcp-preview-editor-link-hint-debug-stripe-distance"
            },
            {
              "description": "Tilt of the stripes of the debugging field background in degrees.",
              "name": "--wcp-preview-editor-link-hint-debug-stripe-tilt"
            },
            {
              "description": "Width of the stripes of the debugging field background.",
              "name": "--wcp-preview-editor-link-hint-debug-stripe-width"
            },
            {
              "description": "Length of the dashes of the debugging field background.",
              "name": "--wcp-preview-editor-link-hint-debug-stripe-dash-size"
            },
            {
              "description": "Gap between the dashes of the debugging field background.",
              "name": "--wcp-preview-editor-link-hint-debug-stripe-dash-gap"
            },
            {
              "description": "Debugging field background color in dark mode.",
              "name": "--wcp-preview-editor-link-hint-debug-dark-background"
            },
            {
              "description": "Debugging field dash and border color in dark mode.",
              "name": "--wcp-preview-editor-link-hint-debug-dark-stroke"
            },
            {
              "description": "Debugging field background color in light mode.",
              "name": "--wcp-preview-editor-link-hint-debug-light-background"
            },
            {
              "description": "Debugging field dash and border color in light mode.",
              "name": "--wcp-preview-editor-link-hint-debug-light-stroke"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#observer",
              "privacy": "private",
              "default": "new ResizeObserver(() => this.updatePosition())"
            },
            {
              "kind": "field",
              "name": "#element",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#scrollParent",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "debug",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "element"
            },
            {
              "kind": "field",
              "name": "scrollParent"
            },
            {
              "kind": "method",
              "name": "updatePosition",
              "description": "Allows to update the position of the hint."
            },
            {
              "kind": "method",
              "name": "#observeElement"
            },
            {
              "kind": "method",
              "name": "handleStageChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-preview-editor-link-hint",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PreviewEditorLinkHint",
          "declaration": {
            "name": "PreviewEditorLinkHint",
            "module": "src/plugins/preview/preview-editor-link/preview-editor-link-hint/preview-editor-link-hint.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/plugins/stage/stage-editor/stage-editor-controls/stage-editor-controls.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StageEditorControls",
          "cssProperties": [
            {
              "description": "The font size of the headline.",
              "name": "--wcp-stage-editor-controls-headline-size"
            },
            {
              "description": "The font weight of the headline.",
              "name": "--wcp-stage-editor-controls-headline-weight"
            },
            {
              "description": "The inner spacing of the headline.",
              "name": "--wcp-stage-editor-controls-headline-spacing"
            },
            {
              "description": "The border color of the element in dark mode.",
              "name": "--wcp-stage-editor-controls-dark-border-color"
            },
            {
              "description": "The border color of the element in light mode.",
              "name": "--wcp-stage-editor-controls-light-border-color"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#manifest",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_element",
              "type": {
                "text": "Parsed.Element | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "previewTagName"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "ElementData | undefined"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleFormInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderHint",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderFieldControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "field",
                  "type": {
                    "text": "Parsed.Field"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderSlotControl",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "slot",
                  "type": {
                    "text": "Parsed.Slot"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderAttributeControls",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "events": [
            {
              "name": "wcp-stage-editor-controls:input",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "mixins": [
            {
              "name": "ColorSchemable",
              "package": "@/mixins/color-schemable.mixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-stage-editor-controls",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StageEditorControls",
          "declaration": {
            "name": "StageEditorControls",
            "module": "src/plugins/stage/stage-editor/stage-editor-controls/stage-editor-controls.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/plugins/stage/stage-editor/stage-editor-preview/stage-editor-preview.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StageEditorPreview",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "previewTagName",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "ElementData | undefined"
              }
            },
            {
              "kind": "method",
              "name": "#alignAttributes",
              "return": {
                "type": {
                  "text": "ElementData['attributes']"
                }
              },
              "parameters": [
                {
                  "name": "attributes",
                  "type": {
                    "text": "ElementData['attributes']"
                  }
                }
              ],
              "description": "Takes the given attributes record, eliminates the empty keys and aligns boolean attributes.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#prepareProps",
              "return": {
                "type": {
                  "text": "Record<string, unknown>"
                }
              },
              "description": "Prepares a record of lit aware attributes and properties.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderSlots",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "render",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wcp-stage-editor-preview",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StageEditorPreview",
          "declaration": {
            "name": "StageEditorPreview",
            "module": "src/plugins/stage/stage-editor/stage-editor-preview/stage-editor-preview.component.ts"
          }
        }
      ]
    }
  ]
}
